<?xml version="1.0" encoding="utf-8"?>
<nugget name="BOR_PROXYING">
 <CLAS CLSNAME="ZCL_BOR_PROXY" VERSION="1" LANGU="E" DESCRIPT="BOR Proxy" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSABSTRCT="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " ZSAPLINK_PLUGIN_MAJOR_VERSION="0 " ZSAPLINK_PLUGIN_MINOR_VERSION="1 " ZSAPLINK_PLUGIN_BUILD_VERSION="0 " ZSAPLINK_PLUGIN_INFO1="ZSAPLINK_CLASS is part of the main ZSAPLINK project --&gt; This plugin found there instead of ZSAPLINK_PLUGINS projects" ZSAPLINK_PLUGIN_INFO2="SAPLINK homepage: https://www.assembla.com/spaces/saplink/wiki" ZSAPLINK_PLUGIN_INFO3="Download from https://www.assembla.com/code/saplink/subversion/nodes" ZSAPLINK_PLUGIN_INFO4="and navigate to:  trunk -&gt; core -&gt; ZSAPLINK -&gt; CLAS -&gt; ZSAPLINK_CLASS.slnk">
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations
INCLUDE &lt;cntn03&gt;.
*--------------------------------------------------------------------*
* Class LCL_API
* OVERVIEW: Objects of this class mediates API calls. It aims to
* isolate this development from external dependencies, as
* might be desirable in tests.
* The instances of this object is provided by the private
* method GET_API of the main class
* (ZCL_CRM_BOR_PROXY). By redefining the
* method GET_API one can provide appropriated stubs, which
* must redefine the desired methods of LCL_API, instead of
* accessing the real APIs.
*--------------------------------------------------------------------*
CLASS lcl_api DEFINITION.
  PUBLIC SECTION.
    METHODS:
      get_bor_instance IMPORTING i_type          TYPE swo_objtyp
                                 i_key           TYPE swo_typeid
                       RETURNING VALUE(r_object) TYPE swo_objhnd
                       RAISING   cx_bapi_error,
*--------------------------------------------------------------------*
* Method GET_BOR_INSTANCE
*--------------------------------------------------------------------*
* REQUIRES: The BOR type and key must be provided.
* EFFECTS.: If the API SWO_CREATE returns an error, this method
* returns exception type CX_BAPI_ERROR, otherwise returns
* the Number of runtime object.
*--------------------------------------------------------------------*
* -&gt; i_TYPE Object Type.
* -&gt; i_KEY Object key.
* &lt;- R_OBJECT Number of runtime object.
*--------------------------------------------------------------------*
      get_plain_attribute IMPORTING i_object       TYPE swo_objhnd
                                    i_name         TYPE swo_verb
                          RETURNING VALUE(r_value) TYPE swc_value
                          RAISING   cx_bapi_error,
*--------------------------------------------------------------------*
* Method GET_PLAIN_ATTRIBUTE
*--------------------------------------------------------------------*
* REQUIRES: The Number of runtime object and the attribute name must
* be provided.
* EFFECTS.: If the API SWO_INVOKE returns an error, this method
* returns exception type CX_BAPI_ERROR, otherwise returns
* the value of the attribute.
*--------------------------------------------------------------------*
* -&gt; i_OBJECT Number of runtime object.
* -&gt; i_NAME Object type component (attribute name).
* &lt;- R_VALUE Component value.
*---------------------------------------------------------------- ----*
      call_method_plain_result IMPORTING i_object       TYPE swo_objhnd
                                         i_name         TYPE swo_verb
                               RETURNING VALUE(r_value) TYPE swc_value
                               RAISING   cx_bapi_error,
*--------------------------------------------------------------------*
* Method CALL_METHOD_PLAIN_RESULT
*--------------------------------------------------------------------*
* REQUIRES: The Number of runtime object and the method name must
* be provided.
* EFFECTS.: If the API SWO_INVOKE returns an error, this method
* returns exception type CX_BAPI_ERROR, otherwise returns
* the value returned by the method.
*--------------------------------------------------------------------*
* -&gt; I_OBJECT Number of runtime object.
* -&gt; I_NAME Object type component (method name).
* &lt;- R_VALUE Component value.
*--------------------------------------------------------------------*
      get_multiline_attribute IMPORTING i_object         TYPE swo_objhnd
                                        i_name           TYPE swo_verb
                              RETURNING VALUE(rt_values) TYPE swftvalue
                              RAISING   cx_bapi_error,
*--------------------------------------------------------------------*
* Method GET_MULTILINE_ATTRIBUTE
*--------------------------------------------------------------------*
* REQUIRES: The Number of runtime object and the attribute name must
* be provided.
* EFFECTS.: If the API SWO_INVOKE returns an error, this method
* returns exception type CX_BAPI_ERROR, otherwise returns
* a table holding the values of the multiline attribute.
*--------------------------------------------------------------------*
* -&gt; I_OBJECT Number of runtime object.
* -&gt; I_NAME Object type component (method name).
* &lt;- R_VALUE Component value.
*--------------------------------------------------------------------*
      cmtd_parm_noresult IMPORTING i_object TYPE swo_objhnd
                                   i_name   TYPE swo_verb
                                   it_args  TYPE swconttab
                         RAISING   cx_bapi_error,
*--------------------------------------------------------------------*
* Method CMTD_PARM_NORESULT
*--------------------------------------------------------------------*
* REQUIRES: The Number of runtime object, the attribute name and the
* arguments list must be provided.
* EFFECTS.: If the API SWO_INVOKE returns an error, this method
* returns exception type CX_BAPI_ERROR.
*--------------------------------------------------------------------*
* -&gt; I_OBJECT Number of runtime object.
* -&gt; I_NAME Object type component (method name).
* -&gt; IT_ARGS Container Table.
*--------------------------------------------------------------------*
      call_static_method IMPORTING i_type            TYPE swo_objtyp
                                   i_name            TYPE swo_verb
                                   it_args           TYPE swconttab
                         RETURNING VALUE(rt_results) TYPE swconttab
                         RAISING   cx_bapi_error,
*--------------------------------------------------------------------*
* Method CALL_STATIC_METHOD
*--------------------------------------------------------------------*
* EFFECTS.: If the API SWO_INVOKE_PERSISTENT returns an error this
* method returns exception type CX_BAPI_ERROR, otherwise it
* returns the results of the processing.
*--------------------------------------------------------------------*
* -&gt; I_TYPE     Object Type.
* -&gt; I_NAME     Object type component (method name).
* -&gt; IT_ARGS    Container table holding the arguments.
* &lt;- RT_RESULTS Container table holding the results.
*--------------------------------------------------------------------*
      call_method_with_container IMPORTING i_object          TYPE swo_objhnd
                                           i_type            TYPE swo_objtyp
                                           i_name            TYPE swo_verb
                                           it_args           TYPE swconttab
                                 RETURNING VALUE(rt_results) TYPE swconttab
                                 RAISING   cx_bapi_error,
*--------------------------------------------------------------------*
* Method CALL_METHOD_WITH_CONTAINER
*--------------------------------------------------------------------*
* EFFECTS.: If the API SWO_INVOKE returns an error, this method
* returns exception type CX_BAPI_ERROR, otherwise it
* returns the results of the processing.
*--------------------------------------------------------------------*
* -&gt; I_OBJECT Number of runtime object.
* -&gt; I_TYPE Object Type.
* -&gt; I_NAME Object type component (method name).
* -&gt; PT_PARMS Container table holding the arguments.
* &lt;- RT_RESULTS Container table holding the results.
*--------------------------------------------------------------------*
      swc_element_set IMPORTING i_element    TYPE swc_elem
                                i_field      TYPE string
                      CHANGING  ct_container TYPE swconttab
                      RAISING   cx_bapi_error,
*--------------------------------------------------------------------*
* Method SWC_ELEMENT_SET
*--------------------------------------------------------------------*
* REQUIRES: The element name and the name of the field to be filled
* must be provided.
* MODIFIES: If the API SWO_INVOKE_PERSISTENT returns an error this
* method returns exception type CX_BAPI_ERROR, otherwise it
* adds up an new line to the container table related to the
* field provided.
*--------------------------------------------------------------------*
* -&gt;  I_ELEMENT      Element.
* -&gt;  I_FIELD       Field name.
* &lt;-&gt; CT_CONTAINER Container table.
*--------------------------------------------------------------------*
      free IMPORTING i_object TYPE swo_objhnd
           RAISING   cx_bapi_error,
*--------------------------------------------------------------------*
* Method FREE
*--------------------------------------------------------------------*
* REQUIRES: The object handler must be provided.
* MODIFIES: If the API SWO_FREE returns an error this method returns
* exception type CX_BAPI_ERROR, otherwise it frees the
* related BOR.
*--------------------------------------------------------------------*
* -&gt; I_ELEMENT Element.
* -&gt; I_FIELD Field name.
* &lt;-&gt; CT_CONTAINER Container table.
*--------------------------------------------------------------------*
      commit,
*--------------------------------------------------------------------*
* Method COMMIT
*--------------------------------------------------------------------*
* MODIFIES: Commits database changes by calling API
* BAPI_TRANSACTION_COMMIT.
*--------------------------------------------------------------------*
      get_object_plain_attribute IMPORTING i_handle       TYPE swo_objhnd
                                           i_object       TYPE swo_verb
                                           i_attrib       TYPE swo_verb
                                 RETURNING VALUE(r_value) TYPE swc_value.
*--------------------------------------------------------------------*
* Method GET_OBJECT_PLAIN_ATTRIBUTE
*--------------------------------------------------------------------*
* REQUIRES: Current object handle, object attribute name and the
* name of the attribute must be provided.
* EFFECTS.: Returns the result provided by API SWO_INVOKE.
*--------------------------------------------------------------------*
* -&gt; I_HANDLE Number of runtime object.
* -&gt; I_OBJECT Object name.
* -&gt; I_ATTRIB Attribute name.
* &lt;- R_VALUE Attribute value.
*--------------------------------------------------------------------*
ENDCLASS. &quot;LCL_api DEFINITION




CLASS lcl_api IMPLEMENTATION.
  METHOD get_bor_instance.
    DATA:
      ls_swo_return TYPE swotreturn,
      ls_return     TYPE bapiret2,
      lt_return     TYPE bapiret2_t,
      l_message     TYPE string.

    CLEAR r_object.

    CALL FUNCTION &apos;SWO_CREATE&apos;
      EXPORTING
        objtype           = i_type
        objkey            = i_key
      IMPORTING
        object            = r_object
        return            = ls_swo_return
      EXCEPTIONS
        no_remote_objects = 1
        OTHERS            = 2.
    IF ls_swo_return IS NOT INITIAL.
      m_raise_exception.
    ENDIF.
  ENDMETHOD.
  METHOD get_plain_attribute.
    DATA:
      lt_container  TYPE swconttab,
      ls_swo_return TYPE swotreturn,
      lt_return     TYPE bapiret2_t,
      l_message     TYPE string.
    FIELD-SYMBOLS &lt;ls_container&gt; TYPE swcont.

    CLEAR r_value.
    CALL FUNCTION &apos;SWO_INVOKE&apos;
      EXPORTING
        access    = &apos;G&apos;
        object    = i_object
        verb      = i_name
      IMPORTING
        return    = ls_swo_return
      TABLES
        container = lt_container.
    IF ls_swo_return IS NOT INITIAL.
      m_raise_exception.
    ELSE.
      LOOP AT lt_container ASSIGNING &lt;ls_container&gt;.
        r_value = &lt;ls_container&gt;-value.
      ENDLOOP.
    ENDIF.
  ENDMETHOD.
  METHOD call_method_plain_result.
    DATA:
      lt_container  TYPE swconttab,
      ls_swo_return TYPE swotreturn,
      lt_return     TYPE bapiret2_t,
      l_message     TYPE string.
    FIELD-SYMBOLS &lt;ls_container&gt; TYPE swcont.

    CLEAR r_value.
    CALL FUNCTION &apos;SWO_INVOKE&apos;
      EXPORTING
        access    = &apos;C&apos;
        object    = i_object
        verb      = i_name
      IMPORTING
        return    = ls_swo_return
      TABLES
        container = lt_container.
    IF ls_swo_return IS NOT INITIAL.
      m_raise_exception.
    ELSE.
      LOOP AT lt_container ASSIGNING &lt;ls_container&gt;.
        r_value = &lt;ls_container&gt;-value.
      ENDLOOP.
    ENDIF.
  ENDMETHOD.
  METHOD get_multiline_attribute.
    DATA:
      lt_container  TYPE swconttab,
      ls_swo_return TYPE swotreturn,
      ls_return     TYPE bapiret2,
      lt_return     TYPE bapiret2_t,
      l_message     TYPE string.
    FIELD-SYMBOLS &lt;ls_container&gt; TYPE swcont.

    CLEAR rt_values.
    CALL FUNCTION &apos;SWO_INVOKE&apos;
      EXPORTING
        access    = &apos;G&apos;
        object    = i_object
        verb      = i_name
      IMPORTING
        return    = ls_swo_return
      TABLES
        container = lt_container.
    IF ls_swo_return IS NOT INITIAL.
      m_raise_exception.
    ELSE.
      LOOP AT lt_container ASSIGNING &lt;ls_container&gt;.
        APPEND &lt;ls_container&gt;-value TO rt_values.
      ENDLOOP.
    ENDIF.
  ENDMETHOD.
  METHOD cmtd_parm_noresult.
    DATA:
      ls_swo_return TYPE swotreturn,
      lt_return     TYPE bapiret2_t,
      l_message     TYPE string.

    CALL FUNCTION &apos;SWO_INVOKE&apos;
      EXPORTING
        access    = &apos;C&apos;
        object    = i_object
        verb      = i_name
      IMPORTING
        return    = ls_swo_return
      TABLES
        container = it_args.
    IF ls_swo_return IS NOT INITIAL.
      m_raise_exception.
    ENDIF.
  ENDMETHOD.
  METHOD call_static_method.
    DATA:
      ls_oref_static TYPE swotobjid,
      ls_swo_return  TYPE swotreturn,
      lt_return      TYPE bapiret2_t,
      l_message      TYPE string,
      lt_container   TYPE swconttab.

    CLEAR rt_results.
    ls_oref_static-objtype = i_type.
    lt_container = it_args.
    CALL FUNCTION &apos;SWO_INVOKE_PERSISTENT&apos;
      EXPORTING
        object    = ls_oref_static
        verb      = i_name
      IMPORTING
        return    = ls_swo_return
      TABLES
        container = lt_container.
    IF ls_swo_return IS NOT INITIAL.
      m_raise_exception.
    ENDIF.
    rt_results = lt_container.
  ENDMETHOD.
  METHOD call_method_with_container.
    DATA:
      ls_swo_return TYPE swotreturn,
      lt_return     TYPE bapiret2_t,
      l_message     TYPE string,
      lt_container  TYPE swconttab.

    CLEAR rt_results.
    lt_container = it_args.
    CALL FUNCTION &apos;SWO_INVOKE&apos;
      EXPORTING
        access    = &apos;C&apos;
        object    = i_object
        verb      = i_name
      IMPORTING
        return    = ls_swo_return
      TABLES
        container = lt_container.
    IF ls_swo_return IS NOT INITIAL.
      m_raise_exception.
    ENDIF.
    rt_results = lt_container.
  ENDMETHOD.
  METHOD swc_element_set.
    DATA  lt_return TYPE bapiret2_t.


    CALL FUNCTION &apos;SWC_ELEMENT_SET&apos;
      EXPORTING
        element       = i_element
        field         = i_field
      TABLES
        container     = ct_container
      EXCEPTIONS
        type_conflict = 1
        OTHERS        = 2.
    IF sy-subrc &lt;&gt; 0.
      m_regular_raise_exception.
    ENDIF.
  ENDMETHOD.
  METHOD free.
    TYPES:
      BEGIN OF ly_object,
        handle TYPE swo_objhnd,
      END OF ly_object.
    DATA:
      ls_object TYPE ly_object,
      ls_return TYPE bapiret2,
      lt_return TYPE bapiret2_t.

    ls_object-handle = i_object.
    swc_free_object ls_object.
    IF sy-subrc &lt;&gt; 0.
      m_regular_raise_exception.
    ENDIF.
  ENDMETHOD.
  METHOD commit.

    CALL FUNCTION &apos;BAPI_TRANSACTION_COMMIT&apos;
      EXPORTING
        wait = &apos;X&apos;.
  ENDMETHOD.
  METHOD get_object_plain_attribute.
    DATA:
      ls_mobject TYPE swc_object,
      ls_aobject TYPE swc_object.

    ls_mobject-handle = i_handle.
    swc_get_property: ls_mobject i_object ls_aobject,
                      ls_aobject i_attrib r_value.
  ENDMETHOD.
ENDCLASS.</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class
INCLUDE &lt;cntn02&gt;.
DEFINE m_raise_exception.
  message id ls_swo_return-workarea
     type &apos;E&apos;
   number ls_swo_return-message
    with ls_swo_return-variable1 ls_swo_return-variable2
         ls_swo_return-variable3 ls_swo_return-variable4
    into l_message.
  append INITIAL LINE TO lt_return ASSIGNING FIELD-SYMBOL(&lt;ls_return&gt;).
  &lt;ls_return&gt;-type = sy-msgty.
  &lt;ls_return&gt;-id = sy-msgid.
  &lt;ls_return&gt;-number = sy-msgno.
  &lt;ls_return&gt;-message_v1 = sy-msgv1.
  &lt;ls_return&gt;-message_v2 = sy-msgv2.
  &lt;ls_return&gt;-message_v3 = sy-msgv3.
  &lt;ls_return&gt;-message_v4 = sy-msgv4.
  &lt;ls_return&gt;-message = ls_swo_return-text.
  raise exception type cx_bapi_error
    exporting
      status = lt_return.
END-OF-DEFINITION.
DEFINE m_regular_raise_exception.
  APPEND INITIAL LINE TO lt_return ASSIGNING FIELD-SYMBOL(&lt;ls_return&gt;).
  &lt;ls_return&gt;-type = sy-msgty.
  &lt;ls_return&gt;-id = sy-msgid.
  &lt;ls_return&gt;-number = sy-msgno.
  &lt;ls_return&gt;-message_v1 = sy-msgv1.
  &lt;ls_return&gt;-message_v2 = sy-msgv2.
  &lt;ls_return&gt;-message_v3 = sy-msgv3.
  &lt;ls_return&gt;-message_v4 = sy-msgv4.
  RAISE EXCEPTION TYPE cx_bapi_error
    EXPORTING
      status = lt_return.
END-OF-DEFINITION.</localMacros>
  <attribute CLSNAME="ZCL_BOR_PROXY" CMPNAME="OBJECT" VERSION="1" LANGU="E" DESCRIPT="Number of runtime object" EXPOSURE="1" STATE="1" EDITORDER="1 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="SWO_OBJHND" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_BOR_PROXY" CMPNAME="OBJID" VERSION="1" LANGU="E" DESCRIPT="Object key" EXPOSURE="2" STATE="1" EDITORDER="2 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="SWO_TYPEID" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_BOR_PROXY" CMPNAME="TYPE" VERSION="1" LANGU="E" DESCRIPT="Object Type" EXPOSURE="2" STATE="1" EDITORDER="1 " ATTDECLTYP="0" ATTRDONLY="X" ATTEXPVIRT="0" TYPTYPE="1" TYPE="SWO_OBJTYP" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <method CLSNAME="ZCL_BOR_PROXY" CMPNAME="ADD_ENTRY_TO_CONTAINER_TABLE" VERSION="1" LANGU="E" DESCRIPT="Adds an entry to a container table." EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_BOR_PROXY" CMPNAME="ADD_ENTRY_TO_CONTAINER_TABLE" SCONAME="I_ELEMENT" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ANY"/>
   <parameter CLSNAME="ZCL_BOR_PROXY" CMPNAME="ADD_ENTRY_TO_CONTAINER_TABLE" SCONAME="I_FIELD" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ANY"/>
   <parameter CLSNAME="ZCL_BOR_PROXY" CMPNAME="ADD_ENTRY_TO_CONTAINER_TABLE" SCONAME="CT_CONTAINER" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="SWCONTTAB"/>
   <exception CLSNAME="ZCL_BOR_PROXY" CMPNAME="ADD_ENTRY_TO_CONTAINER_TABLE" SCONAME="CX_BAPI_ERROR" VERSION="1" LANGU="E" DESCRIPT='BAPI Error Exception: Migrated Error Messages Type &quot;E&quot;' MTDTYPE="0" EDITORDER="1 "/>
   <source>METHOD add_entry_to_container_table.
    DATA:
      lt_return    TYPE bapiret2_t,
      lt_container TYPE swconttab.

    swc_set_element ct_container i_element i_field.
    IF sy-subrc &lt;&gt; 0.
      APPEND INITIAL LINE TO lt_return ASSIGNING FIELD-SYMBOL(&lt;ls_return&gt;).
      &lt;ls_return&gt;-type = sy-msgty.
      &lt;ls_return&gt;-id = sy-msgid.
      &lt;ls_return&gt;-number = sy-msgno.
      &lt;ls_return&gt;-message_v1 = sy-msgv1.
      &lt;ls_return&gt;-message_v2 = sy-msgv2.
      &lt;ls_return&gt;-message_v3 = sy-msgv3.
      &lt;ls_return&gt;-message_v4 = sy-msgv4.
      RAISE EXCEPTION TYPE cx_bapi_error
        EXPORTING
          status = lt_return.
    ENDIF.
  ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_BOR_PROXY" CMPNAME="CALL_METHOD_PLAIN_RESULT" VERSION="1" LANGU="E" DESCRIPT="Returns the result of a method that returns a plain value." EXPOSURE="2" STATE="1" EDITORDER="5 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_BOR_PROXY" CMPNAME="CALL_METHOD_PLAIN_RESULT" SCONAME="I_NAME" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SWO_VERB"/>
   <parameter CLSNAME="ZCL_BOR_PROXY" CMPNAME="CALL_METHOD_PLAIN_RESULT" SCONAME="R_VALUE" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="SWC_VALUE"/>
   <exception CLSNAME="ZCL_BOR_PROXY" CMPNAME="CALL_METHOD_PLAIN_RESULT" SCONAME="CX_BAPI_ERROR" VERSION="1" LANGU="E" MTDTYPE="0" EDITORDER="1 "/>
   <source>METHOD call_method_plain_result.
    DATA:
      lr_api   TYPE REF TO lcl_api,
      lx_error TYPE REF TO cx_bapi_error.

    IF me-&gt;object IS INITIAL AND me-&gt;objid IS NOT INITIAL.
      TRY .
          me-&gt;set_attributes( ).
        CATCH cx_bapi_error INTO lx_error.
          RAISE EXCEPTION lx_error.
      ENDTRY.
    ENDIF.
    lr_api ?= me-&gt;get_api( ).
    TRY .
        r_value = lr_api-&gt;call_method_plain_result( EXPORTING i_object = me-&gt;object
                                                              i_name   = i_name     ).
      CATCH cx_bapi_error INTO lx_error.
        FREE lr_api.
        RAISE EXCEPTION lx_error.
    ENDTRY.
    FREE lr_api.
  ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_BOR_PROXY" CMPNAME="CALL_METHOD_WITH_CONTAINER" VERSION="1" LANGU="E" DESCRIPT="Calls an instance method using container." EXPOSURE="2" STATE="1" EDITORDER="12 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_BOR_PROXY" CMPNAME="CALL_METHOD_WITH_CONTAINER" SCONAME="I_NAME" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SWO_VERB"/>
   <parameter CLSNAME="ZCL_BOR_PROXY" CMPNAME="CALL_METHOD_WITH_CONTAINER" SCONAME="IT_ARGUMENTS" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SWCONTTAB"/>
   <parameter CLSNAME="ZCL_BOR_PROXY" CMPNAME="CALL_METHOD_WITH_CONTAINER" SCONAME="RT_RESULTS" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="SWCONTTAB"/>
   <exception CLSNAME="ZCL_BOR_PROXY" CMPNAME="CALL_METHOD_WITH_CONTAINER" SCONAME="CX_BAPI_ERROR" VERSION="1" LANGU="E" MTDTYPE="0" EDITORDER="1 "/>
   <source>METHOD call_method_with_container.
    DATA:
      lr_api   TYPE REF TO lcl_api,
      lx_error TYPE REF TO cx_bapi_error.

    IF me-&gt;object IS INITIAL AND me-&gt;objid IS NOT INITIAL.
      TRY .
          me-&gt;set_attributes( ).
        CATCH cx_bapi_error INTO lx_error.
          RAISE EXCEPTION lx_error.
      ENDTRY.
    ENDIF.

    lr_api ?= me-&gt;get_api( ).
    TRY .
        rt_results = lr_api-&gt;call_method_with_container( EXPORTING i_object = me-&gt;object
                                                                   i_type   = me-&gt;type
                                                                   i_name   = i_name
                                                                   it_args = it_arguments ).
      CATCH cx_bapi_error INTO lx_error.
        FREE lr_api.
        RAISE EXCEPTION lx_error.
    ENDTRY.
    FREE lr_api.
  ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_BOR_PROXY" CMPNAME="CALL_STATIC_METHOD" VERSION="1" LANGU="E" DESCRIPT="Calls a static method and returns a container table." EXPOSURE="2" STATE="1" EDITORDER="8 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_BOR_PROXY" CMPNAME="CALL_STATIC_METHOD" SCONAME="I_NAME" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SWO_VERB"/>
   <parameter CLSNAME="ZCL_BOR_PROXY" CMPNAME="CALL_STATIC_METHOD" SCONAME="IT_ARGS" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SWCONTTAB"/>
   <parameter CLSNAME="ZCL_BOR_PROXY" CMPNAME="CALL_STATIC_METHOD" SCONAME="RT_RESULTS" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="SWCONTTAB"/>
   <exception CLSNAME="ZCL_BOR_PROXY" CMPNAME="CALL_STATIC_METHOD" SCONAME="CX_BAPI_ERROR" VERSION="1" LANGU="E" MTDTYPE="0" EDITORDER="1 "/>
   <source>METHOD call_static_method.
    DATA:
      lr_api   TYPE REF TO lcl_api,
      lx_error TYPE REF TO cx_bapi_error.

    IF me-&gt;object IS INITIAL AND me-&gt;objid IS NOT INITIAL.
      TRY .
          me-&gt;set_attributes( ).
        CATCH cx_bapi_error INTO lx_error.
          RAISE EXCEPTION lx_error.
      ENDTRY.
    ENDIF.
    lr_api ?= me-&gt;get_api( ).
    TRY .
        rt_results = lr_api-&gt;call_static_method( EXPORTING i_type   = me-&gt;type
                                                           i_name   = i_name
                                                           it_args  = it_args ).
      CATCH cx_bapi_error INTO lx_error.
        FREE lr_api.
        RAISE EXCEPTION lx_error.
    ENDTRY.
    FREE lr_api.
  ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_BOR_PROXY" CMPNAME="CMTD_PARM_NORESULT" VERSION="1" LANGU="E" DESCRIPT="Calls a method that requires parameters and returns nothing." EXPOSURE="2" STATE="1" EDITORDER="7 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_BOR_PROXY" CMPNAME="CMTD_PARM_NORESULT" SCONAME="I_NAME" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SWO_VERB"/>
   <parameter CLSNAME="ZCL_BOR_PROXY" CMPNAME="CMTD_PARM_NORESULT" SCONAME="IT_ARGS" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SWCONTTAB"/>
   <exception CLSNAME="ZCL_BOR_PROXY" CMPNAME="CMTD_PARM_NORESULT" SCONAME="CX_BAPI_ERROR" VERSION="1" LANGU="E" MTDTYPE="0" EDITORDER="1 "/>
   <source>METHOD cmtd_parm_noresult.
    DATA:
      lr_api   TYPE REF TO lcl_api,
      lx_error TYPE REF TO cx_bapi_error.

    IF me-&gt;object IS INITIAL AND me-&gt;objid IS NOT INITIAL.
      TRY .
          me-&gt;set_attributes( ).
        CATCH cx_bapi_error INTO lx_error.
          RAISE EXCEPTION lx_error.
      ENDTRY.
    ENDIF.
    lr_api ?= me-&gt;get_api( ).
    TRY .
        lr_api-&gt;cmtd_parm_noresult( EXPORTING i_object = me-&gt;object
                                              i_name   = i_name
                                              it_args = it_args ).
      CATCH cx_bapi_error INTO lx_error.
        FREE lr_api.
        RAISE EXCEPTION lx_error.
    ENDTRY.
    FREE lr_api.
  ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_BOR_PROXY" CMPNAME="COMMIT" VERSION="1" LANGU="E" DESCRIPT="Performs a commit." EXPOSURE="2" STATE="1" EDITORDER="10 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD commit.
    DATA lr_api TYPE REF TO lcl_api.

    lr_api ?= me-&gt;get_api( ).
    lr_api-&gt;commit( ).
    FREE lr_api.
  ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_BOR_PROXY" CMPNAME="CONSTRUCTOR" VERSION="1" LANGU="E" DESCRIPT="Constructor" EXPOSURE="2" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="2" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_BOR_PROXY" CMPNAME="CONSTRUCTOR" SCONAME="I_KEY" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="2" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SWO_TYPEID" PAROPTIONL="X"/>
   <source>METHOD constructor.

    IF i_key IS SUPPLIED.
      me-&gt;objid = i_key.
    ENDIF.
  ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_BOR_PROXY" CMPNAME="FREE" VERSION="1" LANGU="E" DESCRIPT="Frees this object." EXPOSURE="2" STATE="1" EDITORDER="9 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <exception CLSNAME="ZCL_BOR_PROXY" CMPNAME="FREE" SCONAME="CX_BAPI_ERROR" VERSION="1" LANGU="E" MTDTYPE="0" EDITORDER="1 "/>
   <source>METHOD free.
    DATA:
      lr_api   TYPE REF TO lcl_api,
      lx_error TYPE REF TO cx_bapi_error.

    IF me-&gt;object IS INITIAL.
      RETURN.
    ENDIF.
    IF me-&gt;object IS INITIAL AND me-&gt;objid IS NOT INITIAL.
      TRY .
          me-&gt;set_attributes( ).
        CATCH cx_bapi_error INTO lx_error.
          RAISE EXCEPTION lx_error.
      ENDTRY.
    ENDIF.
    lr_api ?= me-&gt;get_api( ).
    TRY .
        lr_api-&gt;free( me-&gt;object ).
      CATCH cx_bapi_error INTO lx_error.
        FREE lr_api.
        RAISE EXCEPTION lx_error.
    ENDTRY.
    FREE lr_api.
  ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_BOR_PROXY" CMPNAME="GET_API" VERSION="1" LANGU="E" DESCRIPT="Returns a API calls mediator." EXPOSURE="0" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_BOR_PROXY" CMPNAME="GET_API" SCONAME="RO_API" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="OBJECT"/>
   <source>METHOD get_api.

    ro_api = NEW lcl_api( ).
  ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_BOR_PROXY" CMPNAME="GET_MULTILINE_ATTRIBUTE" VERSION="1" LANGU="E" DESCRIPT="Returns the value of a table attribute." EXPOSURE="2" STATE="1" EDITORDER="6 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_BOR_PROXY" CMPNAME="GET_MULTILINE_ATTRIBUTE" SCONAME="I_NAME" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SWO_VERB"/>
   <parameter CLSNAME="ZCL_BOR_PROXY" CMPNAME="GET_MULTILINE_ATTRIBUTE" SCONAME="RT_VALUES" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="SWFTVALUE"/>
   <exception CLSNAME="ZCL_BOR_PROXY" CMPNAME="GET_MULTILINE_ATTRIBUTE" SCONAME="CX_BAPI_ERROR" VERSION="1" LANGU="E" MTDTYPE="0" EDITORDER="1 "/>
   <source>METHOD get_multiline_attribute.
    DATA:
      lr_api   TYPE REF TO lcl_api,
      lx_error TYPE REF TO cx_bapi_error.

    IF me-&gt;object IS INITIAL AND me-&gt;objid IS NOT INITIAL.
      TRY .
          me-&gt;set_attributes( ).
        CATCH cx_bapi_error INTO lx_error.
          RAISE EXCEPTION lx_error.
      ENDTRY.
    ENDIF.
    lr_api ?= me-&gt;get_api( ).
    TRY .
        rt_values = lr_api-&gt;get_multiline_attribute( EXPORTING i_object = me-&gt;object
                                                               i_name   = i_name ).
      CATCH cx_bapi_error INTO lx_error.
        FREE lr_api.
        RAISE EXCEPTION lx_error.
    ENDTRY.
    FREE lr_api.
  ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_BOR_PROXY" CMPNAME="GET_OBJECT_PLAIN_ATTRIBUTE" VERSION="1" LANGU="E" DESCRIPT="the value of a plain attribute of an obj. attribute." EXPOSURE="2" STATE="1" EDITORDER="11 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_BOR_PROXY" CMPNAME="GET_OBJECT_PLAIN_ATTRIBUTE" SCONAME="I_OBJECT" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SWO_VERB"/>
   <parameter CLSNAME="ZCL_BOR_PROXY" CMPNAME="GET_OBJECT_PLAIN_ATTRIBUTE" SCONAME="I_ATTRIB" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SWO_VERB"/>
   <parameter CLSNAME="ZCL_BOR_PROXY" CMPNAME="GET_OBJECT_PLAIN_ATTRIBUTE" SCONAME="R_VALUE" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="SWC_VALUE"/>
   <exception CLSNAME="ZCL_BOR_PROXY" CMPNAME="GET_OBJECT_PLAIN_ATTRIBUTE" SCONAME="CX_BAPI_ERROR" VERSION="1" LANGU="E" MTDTYPE="0" EDITORDER="1 "/>
   <source>METHOD get_object_plain_attribute.
    DATA  lr_api TYPE REF TO lcl_api.

    IF me-&gt;object IS INITIAL.
      TRY .
          me-&gt;set_attributes( ).
        CATCH cx_bapi_error INTO DATA(lx_error).
          RAISE EXCEPTION lx_error.
      ENDTRY.
    ENDIF.
    lr_api ?= get_api( ).
    r_value = lr_api-&gt;get_object_plain_attribute( EXPORTING i_handle = me-&gt;object
                                                  i_object = i_object
                                                  i_attrib = i_attrib              ).
  ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_BOR_PROXY" CMPNAME="GET_PLAIN_ATTRIBUTE" VERSION="1" LANGU="E" DESCRIPT="Returns the value of a plain attribute." EXPOSURE="2" STATE="1" EDITORDER="4 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_BOR_PROXY" CMPNAME="GET_PLAIN_ATTRIBUTE" SCONAME="I_NAME" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SWO_VERB"/>
   <parameter CLSNAME="ZCL_BOR_PROXY" CMPNAME="GET_PLAIN_ATTRIBUTE" SCONAME="R_VALUE" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="SWC_VALUE"/>
   <exception CLSNAME="ZCL_BOR_PROXY" CMPNAME="GET_PLAIN_ATTRIBUTE" SCONAME="CX_BAPI_ERROR" VERSION="1" LANGU="E" MTDTYPE="0" EDITORDER="1 "/>
   <source>METHOD get_plain_attribute.
    DATA:
      lr_api   TYPE REF TO lcl_api,
      lx_error TYPE REF TO cx_bapi_error.

    IF me-&gt;object IS INITIAL AND me-&gt;objid IS NOT INITIAL.
      TRY .
          me-&gt;set_attributes( ).
        CATCH cx_bapi_error INTO lx_error.
          RAISE EXCEPTION lx_error.
      ENDTRY.
    ENDIF.

    lr_api ?= me-&gt;get_api( ).
    TRY .
        r_value = lr_api-&gt;get_plain_attribute( EXPORTING i_object = me-&gt;object
                                                                i_name = i_name ).
      CATCH cx_bapi_error INTO lx_error.
        FREE lr_api.
        RAISE EXCEPTION lx_error.
    ENDTRY.
    FREE lr_api.
  ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_BOR_PROXY" CMPNAME="SET_ATTRIBUTES" VERSION="1" LANGU="E" DESCRIPT="Sets control attributes of objects og this class." EXPOSURE="2" STATE="1" EDITORDER="3 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <exception CLSNAME="ZCL_BOR_PROXY" CMPNAME="SET_ATTRIBUTES" SCONAME="CX_BAPI_ERROR" VERSION="1" LANGU="E" MTDTYPE="0" EDITORDER="1 "/>
   <source>METHOD set_attributes.
    DATA  lr_api   TYPE REF TO lcl_api.

    lr_api ?= me-&gt;get_api( ).
    TRY .
        object = lr_api-&gt;get_bor_instance( EXPORTING i_type = me-&gt;type
                                                     i_key = objid     ).
      CATCH cx_bapi_error INTO DATA(lx_error).
        RAISE EXCEPTION lx_error.
    ENDTRY.
    FREE lr_api.
  ENDMETHOD.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZCL_BUS2032" VERSION="1" LANGU="E" DESCRIPT="Sales Order BO" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " ZSAPLINK_PLUGIN_MAJOR_VERSION="0 " ZSAPLINK_PLUGIN_MINOR_VERSION="1 " ZSAPLINK_PLUGIN_BUILD_VERSION="0 " ZSAPLINK_PLUGIN_INFO1="ZSAPLINK_CLASS is part of the main ZSAPLINK project --&gt; This plugin found there instead of ZSAPLINK_PLUGINS projects" ZSAPLINK_PLUGIN_INFO2="SAPLINK homepage: https://www.assembla.com/spaces/saplink/wiki" ZSAPLINK_PLUGIN_INFO3="Download from https://www.assembla.com/code/saplink/subversion/nodes" ZSAPLINK_PLUGIN_INFO4="and navigate to:  trunk -&gt; core -&gt; ZSAPLINK -&gt; CLAS -&gt; ZSAPLINK_CLASS.slnk" REFCLSNAME="ZCL_BOR_PROXY">
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <attribute CLSNAME="ZCL_BUS2032" CMPNAME="C_TYPE" VERSION="1" LANGU="E" DESCRIPT="Object Type" EXPOSURE="2" STATE="1" EDITORDER="1 " ATTDECLTYP="2" ATTVALUE="&apos;BUS2032&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="SWO_OBJTYP" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <inheritance CLSNAME="ZCL_BUS2032" REFCLSNAME="ZCL_BOR_PROXY" VERSION="1" STATE="1"/>
  <method CLSNAME="ZCL_BUS2032" CMPNAME="CONSTRUCTOR" VERSION="1" LANGU="E" DESCRIPT="CONSTRUCTOR" EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="2" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_BUS2032" CMPNAME="CONSTRUCTOR" SCONAME="I_KEY" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="2" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SWO_TYPEID" PAROPTIONL="X"/>
   <source>METHOD constructor.
    super-&gt;constructor(
        i_key = i_key
    ).
    me-&gt;type = c_type.
  ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_BUS2032" CMPNAME="DISPLAY" VERSION="1" LANGU="E" DESCRIPT="Displays this order." EXPOSURE="2" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD display.

    TRY .
        me-&gt;call_method_plain_result( i_name = &apos;Display&apos; ).
*      CATCH cx_bapi_error.    &quot;
      CATCH cx_bapi_error ##NO_HANDLER.
    ENDTRY.
  ENDMETHOD.</source>
  </method>
 </CLAS>
</nugget>
