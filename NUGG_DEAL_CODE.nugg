<?xml version="1.0" encoding="utf-8"?>
<nugget name="DEAL_CODE">
 <CLAS CLSNAME="ZCL_NAOC_DEAL_QTY_CONSUMPTION" VERSION="1" LANGU="E" DESCRIPT="Quota Consumption" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" MSG_ID="ZNAOC" DURATION_TYPE="0 " RISK_LEVEL="0 ">
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <attribute CLSNAME="ZCL_NAOC_DEAL_QTY_CONSUMPTION" CMPNAME="POSNR" VERSION="1" LANGU="E" DESCRIPT="Item number of the SD document" EXPOSURE="2" STATE="1" EDITORDER="2 " ATTDECLTYP="0" ATTRDONLY="X" ATTEXPVIRT="0" TYPTYPE="1" TYPE="POSNR" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_NAOC_DEAL_QTY_CONSUMPTION" CMPNAME="REF_DATE" VERSION="1" LANGU="E" DESCRIPT="Reference date" EXPOSURE="2" STATE="1" EDITORDER="3 " ATTDECLTYP="0" ATTRDONLY="X" ATTEXPVIRT="0" TYPTYPE="1" TYPE="DATS" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_NAOC_DEAL_QTY_CONSUMPTION" CMPNAME="T_MANAGERS" VERSION="1" LANGU="E" DESCRIPT="Table of Deal quantity managers" EXPOSURE="0" STATE="1" EDITORDER="1 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="ZTT_NAOC_DEAL_QTY_MANAGER" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_NAOC_DEAL_QTY_CONSUMPTION" CMPNAME="VBELN" VERSION="1" LANGU="E" DESCRIPT="Sales and Distribution Document Number" EXPOSURE="2" STATE="1" EDITORDER="1 " ATTDECLTYP="0" ATTRDONLY="X" ATTEXPVIRT="0" TYPTYPE="1" TYPE="VBELN" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <method CLSNAME="ZCL_NAOC_DEAL_QTY_CONSUMPTION" CMPNAME="CONSTRUCTOR" VERSION="1" LANGU="E" DESCRIPT="CONSTRUCTOR" EXPOSURE="2" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="2" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_NAOC_DEAL_QTY_CONSUMPTION" CMPNAME="CONSTRUCTOR" SCONAME="I_VBELN" VERSION="1" LANGU="E" DESCRIPT="Sales and Distribution Document Number" CMPTYPE="1" MTDTYPE="2" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="VBELN"/>
   <parameter CLSNAME="ZCL_NAOC_DEAL_QTY_CONSUMPTION" CMPNAME="CONSTRUCTOR" SCONAME="I_POSNR" VERSION="1" LANGU="E" DESCRIPT="Item number of the SD document" CMPTYPE="1" MTDTYPE="2" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="POSNR"/>
   <parameter CLSNAME="ZCL_NAOC_DEAL_QTY_CONSUMPTION" CMPNAME="CONSTRUCTOR" SCONAME="I_DATE" VERSION="1" LANGU="E" DESCRIPT="Reference date" CMPTYPE="1" MTDTYPE="2" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="DATS"/>
   <source>METHOD CONSTRUCTOR.
    me-&gt;vbeln    = i_vbeln.
    me-&gt;posnr    = i_posnr.
    me-&gt;ref_date = i_date.
  ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_NAOC_DEAL_QTY_CONSUMPTION" CMPNAME="REMOVES_ANY_BUT" VERSION="1" LANGU="E" DESCRIPT="Removes all consumtions except the one belonging to a deal c" EXPOSURE="2" STATE="1" EDITORDER="3 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_NAOC_DEAL_QTY_CONSUMPTION" CMPNAME="REMOVES_ANY_BUT" SCONAME="I_EXCEPTION_DC" VERSION="1" LANGU="E" DESCRIPT="Deal code - JBOSS" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZGLOC_DEAL_CODE"/>
   <exception CLSNAME="ZCL_NAOC_DEAL_QTY_CONSUMPTION" CMPNAME="REMOVES_ANY_BUT" SCONAME="CX_BAPI_ERROR" VERSION="1" LANGU="E" DESCRIPT='BAPI Error Exception: Migrated Error Messages Type &quot;E&quot;' MTDTYPE="0" EDITORDER="1 "/>
   <source>METHOD removes_any_but.

    TRY .
        IF me-&gt;t_managers IS INITIAL.
          me-&gt;set_atributes( ).
        ENDIF.
        LOOP AT me-&gt;t_managers ASSIGNING FIELD-SYMBOL(&lt;lo_manager&gt;).
          IF &lt;lo_manager&gt;-&gt;zzdeal_code = i_exception_dc.
            CONTINUE.
          ENDIF.
          &lt;lo_manager&gt;-&gt;remove_consumption( EXPORTING i_vbeln = me-&gt;vbeln
                                                      i_posnr = me-&gt;posnr ).
        ENDLOOP.
      CATCH cx_bapi_error INTO DATA(lx_error).
        RAISE EXCEPTION lx_error.
    ENDTRY.
  ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_NAOC_DEAL_QTY_CONSUMPTION" CMPNAME="REMOVES_ME" VERSION="1" LANGU="E" DESCRIPT="Removes the related consumption." EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <exception CLSNAME="ZCL_NAOC_DEAL_QTY_CONSUMPTION" CMPNAME="REMOVES_ME" SCONAME="CX_BAPI_ERROR" VERSION="1" LANGU="E" DESCRIPT='BAPI Error Exception: Migrated Error Messages Type &quot;E&quot;' MTDTYPE="0" EDITORDER="1 "/>
   <source>METHOD removes_me.

    TRY .
        IF me-&gt;t_managers IS INITIAL.
          me-&gt;set_atributes( ).
        ENDIF.
        LOOP AT me-&gt;t_managers ASSIGNING FIELD-SYMBOL(&lt;lo_manager&gt;).
          &lt;lo_manager&gt;-&gt;remove_consumption( EXPORTING i_vbeln = me-&gt;vbeln
                                                      i_posnr = me-&gt;posnr ).
        ENDLOOP.
      CATCH cx_bapi_error INTO DATA(lx_error).
        RAISE EXCEPTION lx_error.
    ENDTRY.
  ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_NAOC_DEAL_QTY_CONSUMPTION" CMPNAME="SET_ATRIBUTES" VERSION="1" LANGU="E" DESCRIPT="Sets the respective quota Manager." EXPOSURE="0" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <exception CLSNAME="ZCL_NAOC_DEAL_QTY_CONSUMPTION" CMPNAME="SET_ATRIBUTES" SCONAME="CX_BAPI_ERROR" VERSION="1" LANGU="E" MTDTYPE="0" EDITORDER="1 "/>
   <source>METHOD set_atributes.
    DATA: lo_query       TYPE REF TO cl_os_query,
          lo_consumption TYPE REF TO zcl_naoct_qtd_ctrld,
          ls_value       TYPE string,
          ls_message     TYPE string,
          lt_return      TYPE bapiret2_t.
    FIELD-SYMBOLS  &lt;lw_return&gt; TYPE bapiret2.

    TRY .
        DATA(lo_query_mng) = cl_os_system=&gt;get_query_manager( ).
        lo_query ?= lo_query_mng-&gt;create_query( ).
        ls_value = me-&gt;vbeln.
        DATA(lo_expr1) = lo_query-&gt;if_os_query_expr_factory~create_operator_expr(
                    i_attr1                     = &apos;VBELN&apos;
                    i_operator                  = &apos;=&apos;
                    i_val                       = ls_value
                ).
        ls_value = me-&gt;posnr.
        DATA(lo_expr2) = lo_query-&gt;if_os_query_expr_factory~create_operator_expr(
                    i_attr1                     = &apos;POSNR&apos;
                    i_operator                  = &apos;=&apos;
                    i_val                       = ls_value
                ).
        DATA(lo_expr) = lo_query-&gt;if_os_query_expr_factory~create_and_expr(
                    i_expr1 = lo_expr1
                    i_expr2 = lo_expr2
                ).

        lo_query-&gt;if_os_query~set_filter_expr( i_filter_expr = lo_expr  ).

        DATA(lt_consumptions) = zca_naoct_qtd_ctrld=&gt;agent-&gt;if_os_ca_persistency~get_persistent_by_query(
                                                                                    i_query                = lo_query
                                                                                ).
        LOOP AT lt_consumptions ASSIGNING FIELD-SYMBOL(&lt;lo_record&gt;).
          lo_consumption ?= &lt;lo_record&gt;.
          TRY .
              DATA(lo_manager) = NEW zcl_naoc_deal_qty_manager(
                  i_spart       = lo_consumption-&gt;get_spart( )
                  i_kunnr       = lo_consumption-&gt;get_kunnr( )
                  i_zzdeal_code = lo_consumption-&gt;get_zzdeal_code( )
                  i_date        = me-&gt;ref_date
              ).
              APPEND lo_manager TO me-&gt;t_managers.
            CATCH cx_os_object_not_found. &quot; Must not occur
              MESSAGE e011 WITH me-&gt;vbeln me-&gt;posnr INTO ls_message.
              APPEND INITIAL LINE TO lt_return ASSIGNING &lt;lw_return&gt;.
              &lt;lw_return&gt;-id         = sy-msgid.
              &lt;lw_return&gt;-type       = sy-msgty.
              &lt;lw_return&gt;-number     = sy-msgno.
              &lt;lw_return&gt;-message    = ls_message.
              &lt;lw_return&gt;-message_v1 = sy-msgv1.
              &lt;lw_return&gt;-message_v2 = sy-msgv2.
              &lt;lw_return&gt;-message_v3 = sy-msgv3.
              &lt;lw_return&gt;-message_v4 = sy-msgv4.
              RAISE EXCEPTION TYPE cx_bapi_error
                EXPORTING
                  status = lt_return.
          ENDTRY.

        ENDLOOP.
      CATCH cx_os_query_expr_fact_error
            cx_os_class_not_found
            cx_os_query_error
            cx_os_object_not_found.
        MESSAGE e011 WITH me-&gt;vbeln me-&gt;posnr INTO ls_message.
        APPEND INITIAL LINE TO lt_return ASSIGNING &lt;lw_return&gt;.
        &lt;lw_return&gt;-id         = sy-msgid.
        &lt;lw_return&gt;-type       = sy-msgty.
        &lt;lw_return&gt;-number     = sy-msgno.
        &lt;lw_return&gt;-message    = ls_message.
        &lt;lw_return&gt;-message_v1 = sy-msgv1.
        &lt;lw_return&gt;-message_v2 = sy-msgv2.
        &lt;lw_return&gt;-message_v3 = sy-msgv3.
        &lt;lw_return&gt;-message_v4 = sy-msgv4.
        RAISE EXCEPTION TYPE cx_bapi_error
          EXPORTING
            status = lt_return.
    ENDTRY.
  ENDMETHOD.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZCL_NAOC_DEAL_QTY_MANAGER" VERSION="1" LANGU="E" DESCRIPT="Deal quantity manager" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" RSTAT="K" CLSBCCAT="00" MSG_ID="ZNAOC" DURATION_TYPE="0 " RISK_LEVEL="0 ">
  <friends CLSNAME="ZCL_NAOC_DEAL_QTY_MANAGER" REFCLSNAME="ZCL_NAOC_DEAL_QTY_CONSUMPTION" FRIENDTYPE="0" VERSION="1" STATE="1"/>
  <events CLSNAME="ZCL_NAOC_DEAL_QTY_MANAGER" CMPNAME="QUOTA_EXCEEDED" VERSION="1" LANGU="E" DESCRIPT="Quota has been exceeded" EXPOSURE="2" STATE="1" EDITORDER="1 " EVTDECLTYP="0" BCEVTCAT="00">
   <parameter CLSNAME="ZCL_NAOC_DEAL_QTY_MANAGER" CMPNAME="QUOTA_EXCEEDED" SCONAME="VBELN" VERSION="1" LANGU="E" DESCRIPT="Sales and Distribution Document Number" CMPTYPE="2" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="0" TYPTYPE="1" TYPE="VBELN"/>
   <parameter CLSNAME="ZCL_NAOC_DEAL_QTY_MANAGER" CMPNAME="QUOTA_EXCEEDED" SCONAME="POSNR" VERSION="1" LANGU="E" DESCRIPT="Item number of the SD document" CMPTYPE="2" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="0" TYPTYPE="1" TYPE="POSNR"/>
   <parameter CLSNAME="ZCL_NAOC_DEAL_QTY_MANAGER" CMPNAME="QUOTA_EXCEEDED" SCONAME="VRKME" VERSION="1" LANGU="E" DESCRIPT="Sales unit" CMPTYPE="2" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="0" TYPTYPE="1" TYPE="VRKME"/>
   <parameter CLSNAME="ZCL_NAOC_DEAL_QTY_MANAGER" CMPNAME="QUOTA_EXCEEDED" SCONAME="MENGE" VERSION="1" LANGU="E" DESCRIPT="Quantity" CMPTYPE="2" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="0" TYPTYPE="1" TYPE="MENGE_D"/>
  </events>
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations
CLASS lcl_api DEFINITION.
  PUBLIC SECTION.
    TYPES: yr_spart       TYPE RANGE OF spart,
           yr_kunnr       TYPE RANGE OF kunnr,
           yr_zzdeal_code TYPE RANGE OF zgloc_deal_code,
           yr_enddt       TYPE RANGE OF znaoce_deal_end.
    METHODS: lock_deal_qty IMPORTING i_spart       TYPE spart
                                     i_kunnr       TYPE kunnr
                                     i_zzdeal_code TYPE zgloc_deal_code
                                     i_enddt       TYPE znaoce_deal_end
                           RAISING   cx_bapi_error,
      release_deal_qty     IMPORTING i_spart       TYPE spart
                                     i_kunnr       TYPE kunnr
                                     i_zzdeal_code TYPE zgloc_deal_code
                                     i_enddt       TYPE znaoce_deal_end,
      convert_unit         IMPORTING i_from         TYPE meins
                                     i_to           TYPE meins
                                     i_quant        TYPE menge_d
                           RETURNING VALUE(r_quant) TYPE menge_d
                           RAISING   cx_bapi_error,
      bapi_commit          RAISING cx_bapi_error,
      set_sellist            IMPORTING ir_spart          TYPE yr_spart
                                       ir_kunnr          TYPE yr_kunnr
                                       ir_zzdeal_code    TYPE yr_zzdeal_code
                                       ir_enddt          TYPE yr_enddt
                             RETURNING VALUE(rt_sellist) TYPE scprvimsellist,
      deal_qty_display       IMPORTING it_sellist TYPE scprvimsellist.
ENDCLASS.


CLASS lcl_db DEFINITION.
  PUBLIC SECTION.
    METHODS: check_vbup IMPORTING i_vbeln TYPE vbeln
                                  i_posnr TYPE posnr
                        RAISING   cx_sy_sql_error.
ENDCLASS.


CLASS lcl_api IMPLEMENTATION.
  METHOD lock_deal_qty.
    DATA: ls_message TYPE string,
          lt_return  TYPE bapiret2_t.

    CALL FUNCTION &apos;ENQUEUE_EZNAOCL_QTD_CTRL&apos;
      EXPORTING
*       MODE_ZNAOCT_QTD_CTRLH       = &apos;X&apos;
*       MODE_ZNAOCT_QTD_CTRLD       = &apos;E&apos;
*       MANDT          = SY-MANDT
        spart          = i_spart
        kunnr          = i_kunnr
        zzdeal_code    = i_zzdeal_code
        enddt          = i_enddt
*       VBELN          =
*       POSNR          =
*       X_SPART        = &apos; &apos;
*       X_KUNNR        = &apos; &apos;
*       X_ZZDEAL_CODE  = &apos; &apos;
*       X_ENDDT        = &apos; &apos;
*       X_VBELN        = &apos; &apos;
*       X_POSNR        = &apos; &apos;
*       _SCOPE         = &apos;2&apos;
*       _WAIT          = &apos; &apos;
*       _COLLECT       = &apos; &apos;
      EXCEPTIONS
        foreign_lock   = 1
        system_failure = 2
        OTHERS         = 3.
    IF sy-subrc &lt;&gt; 0.
      MESSAGE
           ID sy-msgid
         TYPE sy-msgty
       NUMBER sy-msgno
         WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4
         INTO ls_message.
      APPEND INITIAL LINE TO lt_return ASSIGNING FIELD-SYMBOL(&lt;lw_return&gt;).
      &lt;lw_return&gt;-id         = sy-msgid.
      &lt;lw_return&gt;-type       = sy-msgty.
      &lt;lw_return&gt;-number     = sy-msgno.
      &lt;lw_return&gt;-message    = ls_message.
      &lt;lw_return&gt;-message_v1 = sy-msgv1.
      &lt;lw_return&gt;-message_v2 = sy-msgv2.
      &lt;lw_return&gt;-message_v3 = sy-msgv3.
      &lt;lw_return&gt;-message_v4 = sy-msgv4.
    ENDIF.

  ENDMETHOD.


  METHOD release_deal_qty.
    DATA: ls_message TYPE string,
          lt_return  TYPE bapiret2_t.

    CALL FUNCTION &apos;DEQUEUE_EZNAOCL_QTD_CTRL&apos;
      EXPORTING
*       MODE_ZNAOCT_QTD_CTRLH       = &apos;X&apos;
*       MODE_ZNAOCT_QTD_CTRLD       = &apos;E&apos;
*       MANDT       = SY-MANDT
        spart       = i_spart
        kunnr       = i_kunnr
        zzdeal_code = i_zzdeal_code
        enddt       = i_enddt
*       VBELN       =
*       POSNR       =
*       X_SPART     = &apos; &apos;
*       X_KUNNR     = &apos; &apos;
*       X_ZZDEAL_CODE               = &apos; &apos;
*       X_ENDDT     = &apos; &apos;
*       X_VBELN     = &apos; &apos;
*       X_POSNR     = &apos; &apos;
*       _SCOPE      = &apos;3&apos;
*       _SYNCHRON   = &apos; &apos;
*       _COLLECT    = &apos; &apos;
      .
  ENDMETHOD.


  METHOD convert_unit.
    DATA: ls_message TYPE string,
          lt_return  TYPE bapiret2_t.

    CALL FUNCTION &apos;UNIT_CONVERSION_SIMPLE&apos;
      EXPORTING
        input                = i_quant
*       NO_TYPE_CHECK        = &apos;X&apos;
*       ROUND_SIGN           = &apos; &apos;
        unit_in              = i_from
        unit_out             = i_to
      IMPORTING
*       ADD_CONST            =
*       DECIMALS             =
*       DENOMINATOR          =
*       NUMERATOR            =
        output               = r_quant
      EXCEPTIONS
        conversion_not_found = 1
        division_by_zero     = 2
        input_invalid        = 3
        output_invalid       = 4
        overflow             = 5
        type_invalid         = 6
        units_missing        = 7
        unit_in_not_found    = 8
        unit_out_not_found   = 9
        OTHERS               = 10.
    IF sy-subrc &lt;&gt; 0.
      MESSAGE
           ID sy-msgid
         TYPE sy-msgty
       NUMBER sy-msgno
         WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4
         INTO ls_message.
      APPEND INITIAL LINE TO lt_return ASSIGNING FIELD-SYMBOL(&lt;lw_return&gt;).
      &lt;lw_return&gt;-id         = sy-msgid.
      &lt;lw_return&gt;-type       = sy-msgty.
      &lt;lw_return&gt;-number     = sy-msgno.
      &lt;lw_return&gt;-message    = ls_message.
      &lt;lw_return&gt;-message_v1 = sy-msgv1.
      &lt;lw_return&gt;-message_v2 = sy-msgv2.
      &lt;lw_return&gt;-message_v3 = sy-msgv3.
      &lt;lw_return&gt;-message_v4 = sy-msgv4.
      RAISE EXCEPTION TYPE cx_bapi_error
        EXPORTING
          status = lt_return.
    ENDIF.
  ENDMETHOD.



  METHOD bapi_commit.
    DATA: ls_message TYPE string,
          lt_return  TYPE bapiret2_t,
          lw_return  TYPE bapiret2.

    CALL FUNCTION &apos;BAPI_TRANSACTION_COMMIT&apos;
      EXPORTING
        wait   = abap_true
      IMPORTING
        return = lw_return.
    IF lw_return IS NOT INITIAL.
      APPEND lw_return TO lt_return.
      RAISE EXCEPTION TYPE cx_bapi_error
        EXPORTING
          status = lt_return.
    ENDIF.
  ENDMETHOD.



  METHOD set_sellist.
    DATA  lt_sellist_partial TYPE scprvimsellist.
    DEFINE lm_add_range_entry.
      IF &amp;2 is NOT INITIAL.
        CALL FUNCTION &apos;VIEW_RANGETAB_TO_SELLIST&apos;
          EXPORTING
            fieldname = &amp;1
          TABLES
            sellist   = lt_sellist_partial
            rangetab  = &amp;2.
        APPEND LINES OF lt_sellist_partial to rt_sellist.
        CLEAR lt_sellist_partial.
      ENDIF.
    END-OF-DEFINITION.

    DATA(lr_spart)       = ir_spart.
    DATA(lr_kunnr)       = ir_kunnr.
    DATA(lr_zzdeal_code) = ir_zzdeal_code.
    DATA(lr_enddt)       = ir_enddt.
    lm_add_range_entry: &apos;SPART&apos;       lr_spart,
                        &apos;KUNNR&apos;       lr_kunnr,
                        &apos;ZZDEAL_CODE&apos; lr_zzdeal_code,
                        &apos;ENDDT&apos;       lr_enddt.
  ENDMETHOD.

  METHOD deal_qty_display.

    CALL FUNCTION &apos;ZNAOC_DEAL_QTY_DISPLAY&apos;
      EXPORTING
        it_sellist = it_sellist.

  ENDMETHOD.
ENDCLASS.


CLASS lcl_db IMPLEMENTATION.
  METHOD check_vbup.

    SELECT COUNT(*)
      FROM vbup
      INTO @DATA(lv_counter)
     WHERE vbeln = @i_vbeln
       AND posnr = @i_posnr.
    IF lv_counter = 0.
      RAISE EXCEPTION TYPE cx_sy_sql_error.
    ENDIF.
  ENDMETHOD.
ENDCLASS.</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <textPool>
   <language SPRAS="E">
    <textElement ID="I" KEY="M01" ENTRY="You are exceeding your quota by @Q @U. The order will be blocked. Do you want to proceed?" LENGTH="132 "/>
   </language>
   <language SPRAS="P">
    <textElement ID="I" KEY="M01" ENTRY="Você está excedendo a sua cota em @Q @U. A ordem será bloqueada. Você quer processeguir?" LENGTH="132 "/>
   </language>
   <language SPRAS="S">
    <textElement ID="I" KEY="M01" ENTRY="Está excediendo su cuota en @Q @U. El pedido será bloqueado. Quieres proceder?" LENGTH="132 "/>
   </language>
  </textPool>
  <typeUsage CLSNAME="ZCL_NAOC_DEAL_QTY_MANAGER" TYPEGROUP="ABAP" VERSION="1" TPUTYPE="0" IMPLICIT="X"/>
  <forwardDeclaration>ABAP</forwardDeclaration>
  <attribute CLSNAME="ZCL_NAOC_DEAL_QTY_MANAGER" CMPNAME="BEGDT" VERSION="1" LANGU="E" DESCRIPT="Effective date" EXPOSURE="2" STATE="1" EDITORDER="5 " ATTDECLTYP="0" ATTRDONLY="X" ATTEXPVIRT="0" TYPTYPE="1" TYPE="ZNAOCE_DEAL_BEGIN" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_NAOC_DEAL_QTY_MANAGER" CMPNAME="ENDDT" VERSION="1" LANGU="E" DESCRIPT="Expiration date" EXPOSURE="2" STATE="1" EDITORDER="4 " ATTDECLTYP="0" ATTRDONLY="X" ATTEXPVIRT="0" TYPTYPE="1" TYPE="ZNAOCE_DEAL_END" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_NAOC_DEAL_QTY_MANAGER" CMPNAME="KUNNR" VERSION="1" LANGU="E" DESCRIPT="Customer Number" EXPOSURE="2" STATE="1" EDITORDER="2 " ATTDECLTYP="0" ATTRDONLY="X" ATTEXPVIRT="0" TYPTYPE="1" TYPE="KUNNR" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_NAOC_DEAL_QTY_MANAGER" CMPNAME="QTD_ALLOWED" VERSION="1" LANGU="E" DESCRIPT="Allowed quantity" EXPOSURE="2" STATE="1" EDITORDER="7 " ATTDECLTYP="0" ATTRDONLY="X" ATTEXPVIRT="0" TYPTYPE="1" TYPE="ZNAOCE_DEAL_ALLOWED_QTY" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_NAOC_DEAL_QTY_MANAGER" CMPNAME="REF_DATE" VERSION="1" LANGU="E" DESCRIPT="Reference date" EXPOSURE="2" STATE="1" EDITORDER="8 " ATTDECLTYP="0" ATTRDONLY="X" ATTEXPVIRT="0" TYPTYPE="1" TYPE="DATS" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_NAOC_DEAL_QTY_MANAGER" CMPNAME="SPART" VERSION="1" LANGU="E" DESCRIPT="Division" EXPOSURE="2" STATE="1" EDITORDER="1 " ATTDECLTYP="0" ATTRDONLY="X" ATTEXPVIRT="0" TYPTYPE="1" TYPE="SPART" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_NAOC_DEAL_QTY_MANAGER" CMPNAME="UOM" VERSION="1" LANGU="E" DESCRIPT="Condition unit" EXPOSURE="2" STATE="1" EDITORDER="6 " ATTDECLTYP="0" ATTRDONLY="X" ATTEXPVIRT="0" TYPTYPE="1" TYPE="KMEIN" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_NAOC_DEAL_QTY_MANAGER" CMPNAME="ZZDEAL_CODE" VERSION="1" LANGU="E" DESCRIPT="Deal code - JBOSS" EXPOSURE="2" STATE="1" EDITORDER="3 " ATTDECLTYP="0" ATTRDONLY="X" ATTEXPVIRT="0" TYPTYPE="1" TYPE="ZGLOC_DEAL_CODE" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <method CLSNAME="ZCL_NAOC_DEAL_QTY_MANAGER" CMPNAME="CHECKS_CONSOLIDATED_QUANTITY" VERSION="1" LANGU="E" DESCRIPT="Checks whether the consolidated quantity is available" EXPOSURE="2" STATE="1" EDITORDER="12 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_NAOC_DEAL_QTY_MANAGER" CMPNAME="CHECKS_CONSOLIDATED_QUANTITY" SCONAME="I_VBELN" VERSION="1" LANGU="E" DESCRIPT="Sales and Distribution Document Number" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="VBELN"/>
   <parameter CLSNAME="ZCL_NAOC_DEAL_QTY_MANAGER" CMPNAME="CHECKS_CONSOLIDATED_QUANTITY" SCONAME="I_VRKME" VERSION="1" LANGU="E" DESCRIPT="Sales unit" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="VRKME"/>
   <parameter CLSNAME="ZCL_NAOC_DEAL_QTY_MANAGER" CMPNAME="CHECKS_CONSOLIDATED_QUANTITY" SCONAME="I_MENGE" VERSION="1" LANGU="E" DESCRIPT="Quantity" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="MENGE_D"/>
   <exception CLSNAME="ZCL_NAOC_DEAL_QTY_MANAGER" CMPNAME="CHECKS_CONSOLIDATED_QUANTITY" SCONAME="CX_BAPI_ERROR" VERSION="1" LANGU="E" DESCRIPT='BAPI Error Exception: Migrated Error Messages Type &quot;E&quot;' MTDTYPE="0" EDITORDER="1 "/>
   <exception CLSNAME="ZCL_NAOC_DEAL_QTY_MANAGER" CMPNAME="CHECKS_CONSOLIDATED_QUANTITY" SCONAME="ZCX_NAOC_LIMIT_REACHED" VERSION="1" LANGU="E" DESCRIPT="Quota exceeded" MTDTYPE="0" EDITORDER="2 "/>
   <exception CLSNAME="ZCL_NAOC_DEAL_QTY_MANAGER" CMPNAME="CHECKS_CONSOLIDATED_QUANTITY" SCONAME="ZCX_NAOC_NO_DEAL_QTY_DEFINED" VERSION="1" LANGU="E" DESCRIPT="No quota defined" MTDTYPE="0" EDITORDER="3 "/>
   <source>METHOD checks_consolidated_quantity.
    DATA: lv_required    TYPE menge_d,
          lvc_excess(30) TYPE c,
          ls_message     TYPE string,
          lt_return      TYPE bapiret2_t,
          lo_api         TYPE REF TO lcl_api,
          lx_error       TYPE REF TO cx_bapi_error.
    FIELD-SYMBOLS  &lt;lw_return&gt; TYPE bapiret2.

    IF me-&gt;qtd_allowed IS INITIAL.
      TRY .
          me-&gt;set_attributes( ).
        CATCH zcx_naoc_no_deal_qty_defined INTO DATA(lx_no_deal_qty).
          RAISE EXCEPTION lx_no_deal_qty.
        CATCH zcx_naoc_query_error.
          MESSAGE e007 INTO ls_message.
          APPEND INITIAL LINE TO lt_return ASSIGNING &lt;lw_return&gt;.
          &lt;lw_return&gt;-id         = sy-msgid.
          &lt;lw_return&gt;-type       = sy-msgty.
          &lt;lw_return&gt;-number     = sy-msgno.
          &lt;lw_return&gt;-message    = ls_message.
          &lt;lw_return&gt;-message_v1 = sy-msgv1.
          &lt;lw_return&gt;-message_v2 = sy-msgv2.
          &lt;lw_return&gt;-message_v3 = sy-msgv3.
          &lt;lw_return&gt;-message_v4 = sy-msgv4.
          RAISE EXCEPTION TYPE cx_bapi_error
            EXPORTING
              status = lt_return.
      ENDTRY.
    ENDIF.

    lo_api ?= me-&gt;get_api( ).

    TRY .
        lo_api-&gt;lock_deal_qty(
          EXPORTING
            i_spart       = me-&gt;spart
            i_kunnr       = me-&gt;kunnr
            i_zzdeal_code = me-&gt;zzdeal_code
            i_enddt       = me-&gt;enddt
        ).

        DATA(lv_consumed) = me-&gt;get_consolidated_booked_qty( i_vbeln = i_vbeln ).
        lv_required = me-&gt;convert_2_my_uom(
                  i_vrkme = i_vrkme
                  i_menge = i_menge
              ).

        DATA(lv_balance) = me-&gt;qtd_allowed - lv_consumed.
        IF lv_balance &lt; 0.
          lv_balance = 0.
        ENDIF.

        IF lv_required &gt;  lv_balance.
          DATA  lv_excess TYPE menge_d.
          lv_excess = lv_required - lv_balance.
*          WRITE lv_excess TO lvc_excess UNIT me-&gt;uom.
          DATA: lv_qty  TYPE symsgv,
                lv_from TYPE symsgv,
                lv_to   TYPE symsgv..
          WRITE: me-&gt;qtd_allowed TO lv_qty UNIT me-&gt;uom,
                 me-&gt;begdt TO lv_from,
                 me-&gt;enddt TO lv_to..
          SHIFT: lv_qty  LEFT DELETING LEADING space,
                 lv_from LEFT DELETING LEADING space,
                 lv_to   LEFT DELETING LEADING space.
          CONCATENATE lv_qty me-&gt;uom INTO lv_qty SEPARATED BY space.
          MESSAGE w008 WITH me-&gt;zzdeal_code lv_from lv_to lv_qty INTO ls_message.
          APPEND INITIAL LINE TO lt_return ASSIGNING &lt;lw_return&gt;.
          &lt;lw_return&gt;-id         = sy-msgid.
          &lt;lw_return&gt;-type       = sy-msgty.
          &lt;lw_return&gt;-number     = sy-msgno.
          &lt;lw_return&gt;-message    = ls_message.
          &lt;lw_return&gt;-message_v1 = sy-msgv1.
          &lt;lw_return&gt;-message_v2 = sy-msgv2.
          &lt;lw_return&gt;-message_v3 = sy-msgv3.
          &lt;lw_return&gt;-message_v4 = sy-msgv4.
          RAISE EXCEPTION TYPE zcx_naoc_limit_reached
            EXPORTING
              t_return = lt_return
              menge    = lv_excess
              uom      = me-&gt;uom.
        ENDIF.
      CATCH cx_bapi_error INTO lx_error.
        lo_api-&gt;release_deal_qty(
          EXPORTING
            i_spart       = me-&gt;spart
            i_kunnr       = me-&gt;kunnr
            i_zzdeal_code = me-&gt;zzdeal_code
            i_enddt       = me-&gt;enddt
        ).
        FREE lo_api.
        RAISE EXCEPTION lx_error.
    ENDTRY.

    lo_api-&gt;release_deal_qty(
      EXPORTING
        i_spart       = me-&gt;spart
        i_kunnr       = me-&gt;kunnr
        i_zzdeal_code = me-&gt;zzdeal_code
        i_enddt       = me-&gt;enddt
    ).
    FREE lo_api.
  ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_NAOC_DEAL_QTY_MANAGER" CMPNAME="CHECKS_DEAL_QUANTITY" VERSION="1" LANGU="E" DESCRIPT="Checks whether there is any quantity available" EXPOSURE="2" STATE="1" EDITORDER="6 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_NAOC_DEAL_QTY_MANAGER" CMPNAME="CHECKS_DEAL_QUANTITY" SCONAME="I_VBELN" VERSION="1" LANGU="E" DESCRIPT="Sales and Distribution Document Number" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="VBELN"/>
   <parameter CLSNAME="ZCL_NAOC_DEAL_QTY_MANAGER" CMPNAME="CHECKS_DEAL_QUANTITY" SCONAME="I_POSNR" VERSION="1" LANGU="E" DESCRIPT="Item number of the SD document" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="POSNR"/>
   <parameter CLSNAME="ZCL_NAOC_DEAL_QTY_MANAGER" CMPNAME="CHECKS_DEAL_QUANTITY" SCONAME="I_VRKME" VERSION="1" LANGU="E" DESCRIPT="Sales unit" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="VRKME"/>
   <parameter CLSNAME="ZCL_NAOC_DEAL_QTY_MANAGER" CMPNAME="CHECKS_DEAL_QUANTITY" SCONAME="I_MENGE" VERSION="1" LANGU="E" DESCRIPT="Quantity" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="MENGE_D"/>
   <exception CLSNAME="ZCL_NAOC_DEAL_QTY_MANAGER" CMPNAME="CHECKS_DEAL_QUANTITY" SCONAME="CX_BAPI_ERROR" VERSION="1" LANGU="E" DESCRIPT='BAPI Error Exception: Migrated Error Messages Type &quot;E&quot;' MTDTYPE="0" EDITORDER="1 "/>
   <exception CLSNAME="ZCL_NAOC_DEAL_QTY_MANAGER" CMPNAME="CHECKS_DEAL_QUANTITY" SCONAME="ZCX_NAOC_LIMIT_REACHED" VERSION="1" LANGU="E" DESCRIPT="Quota exceeded" MTDTYPE="0" EDITORDER="2 "/>
   <exception CLSNAME="ZCL_NAOC_DEAL_QTY_MANAGER" CMPNAME="CHECKS_DEAL_QUANTITY" SCONAME="ZCX_NAOC_NO_DEAL_QTY_DEFINED" VERSION="1" LANGU="E" DESCRIPT="No quota defined" MTDTYPE="0" EDITORDER="3 "/>
   <source>METHOD checks_deal_quantity.
    DATA: lv_required    TYPE menge_d,
          lvc_excess(30) TYPE c,
          ls_message     TYPE string,
          lt_return      TYPE bapiret2_t,
          lo_api         TYPE REF TO lcl_api,
          lx_error       TYPE REF TO cx_bapi_error.
    FIELD-SYMBOLS  &lt;lw_return&gt; TYPE bapiret2.

    IF me-&gt;qtd_allowed IS INITIAL.
      TRY .
          me-&gt;set_attributes( ).
        CATCH zcx_naoc_no_deal_qty_defined INTO DATA(lx_no_deal_qty).
          RAISE EXCEPTION lx_no_deal_qty.
        CATCH zcx_naoc_query_error.
          MESSAGE e007 INTO ls_message.
          APPEND INITIAL LINE TO lt_return ASSIGNING &lt;lw_return&gt;.
          &lt;lw_return&gt;-id         = sy-msgid.
          &lt;lw_return&gt;-type       = sy-msgty.
          &lt;lw_return&gt;-number     = sy-msgno.
          &lt;lw_return&gt;-message    = ls_message.
          &lt;lw_return&gt;-message_v1 = sy-msgv1.
          &lt;lw_return&gt;-message_v2 = sy-msgv2.
          &lt;lw_return&gt;-message_v3 = sy-msgv3.
          &lt;lw_return&gt;-message_v4 = sy-msgv4.
          RAISE EXCEPTION TYPE cx_bapi_error
            EXPORTING
              status = lt_return.
      ENDTRY.
    ENDIF.

    lo_api ?= me-&gt;get_api( ).

    TRY .
        lo_api-&gt;lock_deal_qty(
          EXPORTING
            i_spart       = me-&gt;spart
            i_kunnr       = me-&gt;kunnr
            i_zzdeal_code = me-&gt;zzdeal_code
            i_enddt       = me-&gt;enddt
        ).

        DATA(lv_consumed) = me-&gt;get_booked_qty( i_vbeln = i_vbeln
                                                i_posnr = i_posnr ).
        lv_required = me-&gt;convert_2_my_uom(
                  i_vrkme = i_vrkme
                  i_menge = i_menge
              ).

        DATA(lv_balance) = me-&gt;qtd_allowed - lv_consumed.
        IF lv_balance &lt; 0.
          lv_balance = 0.
        ENDIF.

        IF lv_required &gt;  lv_balance.
          DATA  lv_excess TYPE menge_d.
          lv_excess = lv_required - lv_balance.
*          WRITE lv_excess TO lvc_excess UNIT me-&gt;uom.
          DATA: lv_qty  TYPE symsgv,
                lv_from TYPE symsgv,
                lv_to   TYPE symsgv..
          WRITE: me-&gt;qtd_allowed TO lv_qty UNIT me-&gt;uom,
                 me-&gt;begdt TO lv_from,
                 me-&gt;enddt TO lv_to.
          SHIFT: lv_qty  LEFT DELETING LEADING space,
                 lv_from LEFT DELETING LEADING space,
                 lv_to   LEFT DELETING LEADING space.
          CONCATENATE lv_qty me-&gt;uom INTO lv_qty SEPARATED BY space.
          MESSAGE w008 WITH me-&gt;zzdeal_code lv_from lv_to lv_qty INTO ls_message.
          APPEND INITIAL LINE TO lt_return ASSIGNING &lt;lw_return&gt;.
          &lt;lw_return&gt;-id         = sy-msgid.
          &lt;lw_return&gt;-type       = sy-msgty.
          &lt;lw_return&gt;-number     = sy-msgno.
          &lt;lw_return&gt;-message    = ls_message.
          &lt;lw_return&gt;-message_v1 = sy-msgv1.
          &lt;lw_return&gt;-message_v2 = sy-msgv2.
          &lt;lw_return&gt;-message_v3 = sy-msgv3.
          &lt;lw_return&gt;-message_v4 = sy-msgv4.
          RAISE EXCEPTION TYPE zcx_naoc_limit_reached
            EXPORTING
              t_return = lt_return
              menge    = lv_excess
              uom      = me-&gt;uom.
        ENDIF.
      CATCH cx_bapi_error INTO lx_error.
        lo_api-&gt;release_deal_qty(
          EXPORTING
            i_spart       = me-&gt;spart
            i_kunnr       = me-&gt;kunnr
            i_zzdeal_code = me-&gt;zzdeal_code
            i_enddt       = me-&gt;enddt
        ).
        FREE lo_api.
        RAISE EXCEPTION lx_error.
    ENDTRY.

    lo_api-&gt;release_deal_qty(
      EXPORTING
        i_spart       = me-&gt;spart
        i_kunnr       = me-&gt;kunnr
        i_zzdeal_code = me-&gt;zzdeal_code
        i_enddt       = me-&gt;enddt
    ).
    FREE lo_api.
  ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_NAOC_DEAL_QTY_MANAGER" CMPNAME="CHECKS_DEAL_VALIDITY" VERSION="1" LANGU="E" DESCRIPT="Checks whether the deal code is valid" EXPOSURE="2" STATE="1" EDITORDER="14 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_NAOC_DEAL_QTY_MANAGER" CMPNAME="CHECKS_DEAL_VALIDITY" SCONAME="E_ENDDT" VERSION="1" LANGU="E" DESCRIPT="Expiration date" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="ZNAOCE_DEAL_END"/>
   <parameter CLSNAME="ZCL_NAOC_DEAL_QTY_MANAGER" CMPNAME="CHECKS_DEAL_VALIDITY" SCONAME="E_BEGDT" VERSION="1" LANGU="E" DESCRIPT="Effective date" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="ZNAOCE_DEAL_BEGIN"/>
   <parameter CLSNAME="ZCL_NAOC_DEAL_QTY_MANAGER" CMPNAME="CHECKS_DEAL_VALIDITY" SCONAME="E_UOM" VERSION="1" LANGU="E" DESCRIPT="Condition unit" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="KMEIN"/>
   <parameter CLSNAME="ZCL_NAOC_DEAL_QTY_MANAGER" CMPNAME="CHECKS_DEAL_VALIDITY" SCONAME="E_MENGE" VERSION="1" LANGU="E" DESCRIPT="Allowed quantity" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="ZNAOCE_DEAL_ALLOWED_QTY"/>
   <exception CLSNAME="ZCL_NAOC_DEAL_QTY_MANAGER" CMPNAME="CHECKS_DEAL_VALIDITY" SCONAME="ZCX_NAOC_DEAL_TO_BE_VALID_IN" VERSION="1" LANGU="E" DESCRIPT="Deal quantity to be valid in the future" MTDTYPE="0" EDITORDER="1 "/>
   <exception CLSNAME="ZCL_NAOC_DEAL_QTY_MANAGER" CMPNAME="CHECKS_DEAL_VALIDITY" SCONAME="ZCX_NAOC_DEAL_QTY_EXPIRED" VERSION="1" LANGU="E" DESCRIPT="Deal code quantity expired" MTDTYPE="0" EDITORDER="2 "/>
   <exception CLSNAME="ZCL_NAOC_DEAL_QTY_MANAGER" CMPNAME="CHECKS_DEAL_VALIDITY" SCONAME="ZCX_NAOC_NO_DEAL_QTY_DEFINED" VERSION="1" LANGU="E" DESCRIPT="No deal quantity defined" MTDTYPE="0" EDITORDER="3 "/>
   <exception CLSNAME="ZCL_NAOC_DEAL_QTY_MANAGER" CMPNAME="CHECKS_DEAL_VALIDITY" SCONAME="CX_BAPI_ERROR" VERSION="1" LANGU="E" DESCRIPT='BAPI Error Exception: Migrated Error Messages Type &quot;E&quot;' MTDTYPE="0" EDITORDER="4 "/>
   <source>METHOD checks_deal_validity.
    DATA: lv_idate(10) TYPE c,
          lv_fdate(10) TYPE c,
          ls_message   TYPE string,
          lt_return    TYPE bapiret2_t.
    FIELD-SYMBOLS  &lt;lw_return&gt; TYPE bapiret2.

    CLEAR: e_enddt, e_begdt.

    IF me-&gt;enddt IS INITIAL.
      TRY .
          me-&gt;set_attributes( ).
        CATCH zcx_naoc_no_deal_qty_defined.
          TRY .
              DATA(lo_deal) = me-&gt;find_first_to_be_valid( ).
              ls_message = lo_deal-&gt;get_qtd_allowed( ) &amp;&amp; &apos;(&apos; &amp;&amp; lo_deal-&gt;get_uom( ) &amp;&amp; &apos;)&apos;.
              WRITE: lo_deal-&gt;get_begdt( ) TO lv_idate,
                     lo_deal-&gt;get_enddt( ) TO lv_fdate.
              MESSAGE e012 WITH me-&gt;zzdeal_code lv_idate lv_fdate ls_message INTO ls_message.
              APPEND INITIAL LINE TO lt_return ASSIGNING &lt;lw_return&gt;.
              &lt;lw_return&gt;-id         = sy-msgid.
              &lt;lw_return&gt;-type       = sy-msgty.
              &lt;lw_return&gt;-number     = sy-msgno.
              &lt;lw_return&gt;-message    = ls_message.
              &lt;lw_return&gt;-message_v1 = sy-msgv1.
              &lt;lw_return&gt;-message_v2 = sy-msgv2.
              &lt;lw_return&gt;-message_v3 = sy-msgv3.
              &lt;lw_return&gt;-message_v4 = sy-msgv4.
              RAISE EXCEPTION TYPE zcx_naoc_deal_to_be_valid_in
                EXPORTING
*                 textid =
*                 previous       =
*                 class_name     =
*                 instance       =
*                 collection     =
*                 log_no =
*                 log_msg_no     =
*                 force_dataflow =
*                 parameters     =
                  status = lt_return.
            CATCH cx_os_object_not_found.
              TRY .
                  lo_deal = me-&gt;find_last( ).
                  WRITE lo_deal-&gt;get_enddt( ) TO lv_fdate.
                  MESSAGE e013 WITH me-&gt;zzdeal_code lv_fdate INTO ls_message.
                  APPEND INITIAL LINE TO lt_return ASSIGNING &lt;lw_return&gt;.
                  &lt;lw_return&gt;-id         = sy-msgid.
                  &lt;lw_return&gt;-type       = sy-msgty.
                  &lt;lw_return&gt;-number     = sy-msgno.
                  &lt;lw_return&gt;-message    = ls_message.
                  &lt;lw_return&gt;-message_v1 = sy-msgv1.
                  &lt;lw_return&gt;-message_v2 = sy-msgv2.
                  &lt;lw_return&gt;-message_v3 = sy-msgv3.
                  &lt;lw_return&gt;-message_v4 = sy-msgv4.
                  RAISE EXCEPTION TYPE zcx_naoc_deal_qty_expired
                    EXPORTING
                      status = lt_return.
                CATCH cx_os_object_not_found.
                  RAISE EXCEPTION TYPE zcx_naoc_no_deal_qty_defined.
                CATCH zcx_naoc_query_error.
                  MESSAGE e007 INTO ls_message.
                  APPEND INITIAL LINE TO lt_return ASSIGNING &lt;lw_return&gt;.
                  &lt;lw_return&gt;-id         = sy-msgid.
                  &lt;lw_return&gt;-type       = sy-msgty.
                  &lt;lw_return&gt;-number     = sy-msgno.
                  &lt;lw_return&gt;-message    = ls_message.
                  &lt;lw_return&gt;-message_v1 = sy-msgv1.
                  &lt;lw_return&gt;-message_v2 = sy-msgv2.
                  &lt;lw_return&gt;-message_v3 = sy-msgv3.
                  &lt;lw_return&gt;-message_v4 = sy-msgv4.
                  RAISE EXCEPTION TYPE cx_bapi_error
                    EXPORTING
                      status = lt_return.
              ENDTRY.
            CATCH zcx_naoc_query_error.
              MESSAGE e007 INTO ls_message.
              APPEND INITIAL LINE TO lt_return ASSIGNING &lt;lw_return&gt;.
              &lt;lw_return&gt;-id         = sy-msgid.
              &lt;lw_return&gt;-type       = sy-msgty.
              &lt;lw_return&gt;-number     = sy-msgno.
              &lt;lw_return&gt;-message    = ls_message.
              &lt;lw_return&gt;-message_v1 = sy-msgv1.
              &lt;lw_return&gt;-message_v2 = sy-msgv2.
              &lt;lw_return&gt;-message_v3 = sy-msgv3.
              &lt;lw_return&gt;-message_v4 = sy-msgv4.
              RAISE EXCEPTION TYPE cx_bapi_error
                EXPORTING
                  status = lt_return.
          ENDTRY.
        CATCH zcx_naoc_query_error.
          MESSAGE e007 INTO ls_message.
          APPEND INITIAL LINE TO lt_return ASSIGNING &lt;lw_return&gt;.
          &lt;lw_return&gt;-id         = sy-msgid.
          &lt;lw_return&gt;-type       = sy-msgty.
          &lt;lw_return&gt;-number     = sy-msgno.
          &lt;lw_return&gt;-message    = ls_message.
          &lt;lw_return&gt;-message_v1 = sy-msgv1.
          &lt;lw_return&gt;-message_v2 = sy-msgv2.
          &lt;lw_return&gt;-message_v3 = sy-msgv3.
          &lt;lw_return&gt;-message_v4 = sy-msgv4.
          RAISE EXCEPTION TYPE cx_bapi_error
            EXPORTING
              status = lt_return.
      ENDTRY.
    ENDIF.

    e_enddt = me-&gt;enddt.
    e_begdt = me-&gt;begdt.
    e_uom   = me-&gt;uom.
    e_menge = me-&gt;qtd_allowed.
  ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_NAOC_DEAL_QTY_MANAGER" CMPNAME="CONSTRUCTOR" VERSION="1" LANGU="E" DESCRIPT="CONSTRUCTOR" EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="2" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_NAOC_DEAL_QTY_MANAGER" CMPNAME="CONSTRUCTOR" SCONAME="I_SPART" VERSION="1" LANGU="E" DESCRIPT="Division" CMPTYPE="1" MTDTYPE="2" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SPART"/>
   <parameter CLSNAME="ZCL_NAOC_DEAL_QTY_MANAGER" CMPNAME="CONSTRUCTOR" SCONAME="I_KUNNR" VERSION="1" LANGU="E" DESCRIPT="Customer Number" CMPTYPE="1" MTDTYPE="2" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="KUNNR"/>
   <parameter CLSNAME="ZCL_NAOC_DEAL_QTY_MANAGER" CMPNAME="CONSTRUCTOR" SCONAME="I_ZZDEAL_CODE" VERSION="1" LANGU="E" DESCRIPT="Deal code - JBOSS" CMPTYPE="1" MTDTYPE="2" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZGLOC_DEAL_CODE"/>
   <parameter CLSNAME="ZCL_NAOC_DEAL_QTY_MANAGER" CMPNAME="CONSTRUCTOR" SCONAME="I_DATE" VERSION="1" LANGU="E" DESCRIPT="Field of type DATS" CMPTYPE="1" MTDTYPE="2" EDITORDER="4 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="DATS"/>
   <source>METHOD constructor.
    me-&gt;spart = i_spart.
    me-&gt;kunnr = i_kunnr.
    me-&gt;zzdeal_code = i_zzdeal_code.
    me-&gt;ref_date = i_date.
  ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_NAOC_DEAL_QTY_MANAGER" CMPNAME="CONSUMES_DEAL_QUANTITY" VERSION="1" LANGU="E" DESCRIPT="Consumes deal quantity" EXPOSURE="2" STATE="1" EDITORDER="3 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_NAOC_DEAL_QTY_MANAGER" CMPNAME="CONSUMES_DEAL_QUANTITY" SCONAME="I_VBELN" VERSION="1" LANGU="E" DESCRIPT="Sales and Distribution Document Number" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="VBELN"/>
   <parameter CLSNAME="ZCL_NAOC_DEAL_QTY_MANAGER" CMPNAME="CONSUMES_DEAL_QUANTITY" SCONAME="I_POSNR" VERSION="1" LANGU="E" DESCRIPT="Item number of the SD document" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="POSNR"/>
   <parameter CLSNAME="ZCL_NAOC_DEAL_QTY_MANAGER" CMPNAME="CONSUMES_DEAL_QUANTITY" SCONAME="I_VRKME" VERSION="1" LANGU="E" DESCRIPT="Sales unit" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="VRKME"/>
   <parameter CLSNAME="ZCL_NAOC_DEAL_QTY_MANAGER" CMPNAME="CONSUMES_DEAL_QUANTITY" SCONAME="I_MENGE" VERSION="1" LANGU="E" DESCRIPT="Quantity" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="MENGE_D"/>
   <exception CLSNAME="ZCL_NAOC_DEAL_QTY_MANAGER" CMPNAME="CONSUMES_DEAL_QUANTITY" SCONAME="CX_BAPI_ERROR" VERSION="1" LANGU="E" DESCRIPT='BAPI Error Exception: Migrated Error Messages Type &quot;E&quot;' MTDTYPE="0" EDITORDER="1 "/>
   <exception CLSNAME="ZCL_NAOC_DEAL_QTY_MANAGER" CMPNAME="CONSUMES_DEAL_QUANTITY" SCONAME="ZCX_NAOC_LIMIT_REACHED" VERSION="1" LANGU="E" DESCRIPT="Quota exceeded" MTDTYPE="0" EDITORDER="2 "/>
   <source>METHOD consumes_deal_quantity.
    DATA: ls_message     TYPE string,
          lt_return      TYPE bapiret2_t,
          lo_consumption TYPE REF TO zcl_naoct_qtd_ctrld,
          lo_api         TYPE REF TO lcl_api,
          lx_error       TYPE REF TO cx_bapi_error.
    FIELD-SYMBOLS  &lt;lw_return&gt; TYPE bapiret2.

    IF me-&gt;qtd_allowed IS INITIAL.
      TRY .
          me-&gt;set_attributes( ).
        CATCH zcx_naoc_no_deal_qty_defined
              zcx_naoc_query_error.
          RETURN.
      ENDTRY.
    ENDIF.

    lo_api ?= me-&gt;get_api( ).

    TRY .
        me-&gt;checks_deal_quantity(
          EXPORTING
            i_vbeln                      =  i_vbeln   &quot; Sales and Distribution Document Number
            i_posnr                      =  i_posnr   &quot; Item number of the SD document
            i_vrkme                      =  i_vrkme   &quot; Sales unit
            i_menge                      =  i_menge   &quot; Quantity
        ).
        lo_api-&gt;lock_deal_qty(
          EXPORTING
            i_spart       = me-&gt;spart
            i_kunnr       = me-&gt;kunnr
            i_zzdeal_code = me-&gt;zzdeal_code
            i_enddt       = me-&gt;enddt
        ).
        TRY .
            DATA(lo_deal_qty) = zca_naoct_qtd_ctrlh=&gt;agent-&gt;get_persistent(
                        i_spart                = me-&gt;spart
                        i_kunnr                = me-&gt;kunnr
                        i_zzdeal_code          = me-&gt;zzdeal_code
                        i_enddt                = me-&gt;enddt
                    ).
          CATCH cx_os_object_not_found.
            MESSAGE e009 WITH me-&gt;spart me-&gt;kunnr me-&gt;zzdeal_code INTO ls_message.
            APPEND INITIAL LINE TO lt_return ASSIGNING &lt;lw_return&gt;.
            &lt;lw_return&gt;-id         = sy-msgid.
            &lt;lw_return&gt;-type       = sy-msgty.
            &lt;lw_return&gt;-number     = sy-msgno.
            &lt;lw_return&gt;-message    = ls_message.
            &lt;lw_return&gt;-message_v1 = sy-msgv1.
            &lt;lw_return&gt;-message_v2 = sy-msgv2.
            &lt;lw_return&gt;-message_v3 = sy-msgv3.
            &lt;lw_return&gt;-message_v4 = sy-msgv4.
            RAISE EXCEPTION TYPE cx_bapi_error
              EXPORTING
                status = lt_return.
        ENDTRY.
        TRY .
            lo_consumption = zca_naoct_qtd_ctrld=&gt;agent-&gt;create_persistent(
                     i_spart               = me-&gt;spart
                     i_kunnr               = me-&gt;kunnr
                     i_zzdeal_code         = me-&gt;zzdeal_code
                     i_enddt               = me-&gt;enddt
                     i_vbeln               = i_vbeln
                     i_posnr               = i_posnr
                 ).
          CATCH cx_os_object_existing.
            TRY .
                lo_consumption = zca_naoct_qtd_ctrld=&gt;agent-&gt;get_persistent(
                     i_spart                = me-&gt;spart
                     i_kunnr                = me-&gt;kunnr
                     i_zzdeal_code          = me-&gt;zzdeal_code
                     i_enddt                = me-&gt;enddt
                     i_vbeln                = i_vbeln
                     i_posnr                = i_posnr
                 ).
              CATCH cx_os_object_not_found.
                MESSAGE e009 WITH me-&gt;spart me-&gt;kunnr me-&gt;zzdeal_code INTO ls_message.
                APPEND INITIAL LINE TO lt_return ASSIGNING &lt;lw_return&gt;.
                &lt;lw_return&gt;-id         = sy-msgid.
                &lt;lw_return&gt;-type       = sy-msgty.
                &lt;lw_return&gt;-number     = sy-msgno.
                &lt;lw_return&gt;-message    = ls_message.
                &lt;lw_return&gt;-message_v1 = sy-msgv1.
                &lt;lw_return&gt;-message_v2 = sy-msgv2.
                &lt;lw_return&gt;-message_v3 = sy-msgv3.
                &lt;lw_return&gt;-message_v4 = sy-msgv4.
                RAISE EXCEPTION TYPE cx_bapi_error
                  EXPORTING
                    status = lt_return.
            ENDTRY.
        ENDTRY.
        DATA(lv_required) = i_menge.
        lv_required = me-&gt;convert_2_my_uom(
                  i_vrkme = i_vrkme
                  i_menge = i_menge
              ).
        data(lo_current) = NEW zcl_naoc_deal_qty_consumption(
            i_vbeln = i_vbeln
            i_posnr = i_posnr
            i_date  = me-&gt;enddt
        ).
        lo_current-&gt;removes_any_but( i_exception_dc = me-&gt;zzdeal_code ).
        lo_consumption-&gt;set_qtd_ordered( i_qtd_ordered = lv_required ).
      CATCH cx_bapi_error INTO lx_error.
        lo_api-&gt;release_deal_qty(
          EXPORTING
            i_spart       = me-&gt;spart
            i_kunnr       = me-&gt;kunnr
            i_zzdeal_code = me-&gt;zzdeal_code
            i_enddt       = me-&gt;enddt
        ).
        FREE lo_api.
        RAISE EXCEPTION lx_error.
      CATCH zcx_naoc_limit_reached INTO DATA(lx_excess).
        RAISE EXCEPTION lx_excess.
      CATCH zcx_naoc_no_deal_qty_defined.
        lo_api-&gt;release_deal_qty(
          EXPORTING
            i_spart       = me-&gt;spart
            i_kunnr       = me-&gt;kunnr
            i_zzdeal_code = me-&gt;zzdeal_code
            i_enddt       = me-&gt;enddt
        ).
        FREE lo_api.
        RETURN.
      CATCH cx_os_object_not_found.
        lo_api-&gt;release_deal_qty(
          EXPORTING
            i_spart       = me-&gt;spart
            i_kunnr       = me-&gt;kunnr
            i_zzdeal_code = me-&gt;zzdeal_code
            i_enddt       = me-&gt;enddt
        ).
        FREE lo_api.
        RETURN.
    ENDTRY.

    lo_api-&gt;release_deal_qty(
      EXPORTING
        i_spart       = me-&gt;spart
        i_kunnr       = me-&gt;kunnr
        i_zzdeal_code = me-&gt;zzdeal_code
        i_enddt       = me-&gt;enddt
    ).
    FREE lo_api.
  ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_NAOC_DEAL_QTY_MANAGER" CMPNAME="CONVERT_2_MY_UOM" VERSION="1" LANGU="E" DESCRIPT="Returns a given quantity converted to the UOM of this." EXPOSURE="2" STATE="1" EDITORDER="11 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_NAOC_DEAL_QTY_MANAGER" CMPNAME="CONVERT_2_MY_UOM" SCONAME="I_VRKME" VERSION="1" LANGU="E" DESCRIPT="Sales unit" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="VRKME"/>
   <parameter CLSNAME="ZCL_NAOC_DEAL_QTY_MANAGER" CMPNAME="CONVERT_2_MY_UOM" SCONAME="I_MENGE" VERSION="1" LANGU="E" DESCRIPT="Quantity" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="MENGE_D"/>
   <parameter CLSNAME="ZCL_NAOC_DEAL_QTY_MANAGER" CMPNAME="CONVERT_2_MY_UOM" SCONAME="R_MENGE" VERSION="1" LANGU="E" DESCRIPT="Quantity" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="MENGE_D"/>
   <source>METHOD convert_2_my_uom.
    DATA  lo_api TYPE REF TO lcl_api.

    lo_api ?= me-&gt;get_api( ).

    CLEAR r_menge.
    TRY .
        IF i_vrkme &lt;&gt; me-&gt;uom.
          r_menge = lo_api-&gt;convert_unit( i_from  = i_vrkme
                                          i_to    = me-&gt;uom
                                          i_quant = i_menge ).
        ELSE.
          r_menge = i_menge.
        ENDIF.
      CATCH cx_bapi_error.
        r_menge = i_menge.
    ENDTRY.

  ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_NAOC_DEAL_QTY_MANAGER" CMPNAME="DISPLAY" VERSION="1" LANGU="E" DESCRIPT="Displays quota management transaction" EXPOSURE="2" STATE="1" EDITORDER="8 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD display.
    DATA: lr_spart       TYPE RANGE OF spart,
          lr_kunnr       TYPE RANGE OF kunnr,
          lr_zzdeal_code TYPE RANGE OF zgloc_deal_code,
          lr_enddt       TYPE RANGE OF znaoce_deal_end,
          lw_spart       LIKE LINE OF lr_spart,
          lw_kunnr       LIKE LINE OF lr_kunnr,
          lw_zzdeal_code LIKE LINE OF lr_zzdeal_code,
          lw_enddt       LIKE LINE OF lr_enddt,
          lo_api         TYPE REF TO lcl_api.

    lw_spart-sign   = lw_kunnr-sign   = lw_zzdeal_code-sign   = lw_enddt-sign   = &apos;I&apos;.
    lw_spart-option = lw_kunnr-option = lw_zzdeal_code-option = lw_enddt-option = &apos;EQ&apos;.
    lw_spart-low = me-&gt;spart.
    lw_kunnr-low = me-&gt;kunnr.
    lw_zzdeal_code-low = me-&gt;zzdeal_code.
    lw_enddt-low = me-&gt;enddt.
    APPEND: lw_spart TO lr_spart,
            lw_kunnr TO lr_kunnr,
            lw_zzdeal_code TO lr_zzdeal_code,
            lw_enddt TO lr_enddt.

    lo_api ?= me-&gt;get_api( ).
    DATA(lt_sellist) = lo_api-&gt;set_sellist( EXPORTING ir_spart = lr_spart
                                                      ir_kunnr = lr_kunnr
                                                      ir_zzdeal_code = lr_zzdeal_code
                                                      ir_enddt = lr_enddt ).
    lo_api-&gt;deal_qty_display( it_sellist = lt_sellist ).

  ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_NAOC_DEAL_QTY_MANAGER" CMPNAME="FIND_DEAL_QUANTITY" VERSION="1" LANGU="E" DESCRIPT="Returns an instance of ZCL_NAOCT_QTD_CTRLH" EXPOSURE="0" STATE="1" EDITORDER="10 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_NAOC_DEAL_QTY_MANAGER" CMPNAME="FIND_DEAL_QUANTITY" SCONAME="I_DATE" VERSION="1" LANGU="E" DESCRIPT="Reference date" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="DATS"/>
   <parameter CLSNAME="ZCL_NAOC_DEAL_QTY_MANAGER" CMPNAME="FIND_DEAL_QUANTITY" SCONAME="RO_DEAL_QTY" VERSION="1" LANGU="E" DESCRIPT="Allowed quantity per Deal Code - Persistence" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_NAOCT_QTD_CTRLH"/>
   <exception CLSNAME="ZCL_NAOC_DEAL_QTY_MANAGER" CMPNAME="FIND_DEAL_QUANTITY" SCONAME="CX_OS_OBJECT_NOT_FOUND" VERSION="1" LANGU="E" DESCRIPT="Object Services: Object not Found" MTDTYPE="0" EDITORDER="1 " IS_RESUMABLE="X"/>
   <exception CLSNAME="ZCL_NAOC_DEAL_QTY_MANAGER" CMPNAME="FIND_DEAL_QUANTITY" SCONAME="ZCX_NAOC_QUERY_ERROR" VERSION="1" LANGU="E" DESCRIPT="Query error" MTDTYPE="0" EDITORDER="2 " IS_RESUMABLE="X"/>
   <source>METHOD find_deal_quantity.
    DATA: lo_query TYPE REF TO cl_os_query,
          ls_value TYPE string.

    CLEAR ro_deal_qty.
    TRY .
        DATA(lo_query_mng) = cl_os_system=&gt;get_query_manager( ).
        lo_query ?= lo_query_mng-&gt;create_query( ).
        ls_value = me-&gt;spart.
        DATA(lo_expr1) = lo_query-&gt;if_os_query_expr_factory~create_operator_expr(
                    i_attr1                     = &apos;SPART&apos;
                    i_operator                  = &apos;=&apos;
                    i_val                       = ls_value
                ).
        ls_value = me-&gt;kunnr.
        DATA(lo_expr2) = lo_query-&gt;if_os_query_expr_factory~create_operator_expr(
                    i_attr1                     = &apos;KUNNR&apos;
                    i_operator                  = &apos;=&apos;
                    i_val                       = ls_value
                ).
        ls_value = me-&gt;zzdeal_code.
        DATA(lo_expr3) = lo_query-&gt;if_os_query_expr_factory~create_operator_expr(
                    i_attr1                     = &apos;ZZDEAL_CODE&apos;
                    i_operator                  = &apos;=&apos;
                    i_val                       = ls_value
                ).
        ls_value = i_date.
        DATA(lo_expr4) = lo_query-&gt;if_os_query_expr_factory~create_operator_expr(
                    i_attr1                     = &apos;ENDDT&apos;
                    i_operator                  = &apos;&gt;=&apos;
                    i_val                       = ls_value
                ).
        ls_value = i_date.
        DATA(lo_expr5) = lo_query-&gt;if_os_query_expr_factory~create_operator_expr(
                    i_attr1                     = &apos;BEGDT&apos;
                    i_operator                  = &apos;&lt;=&apos;
                    i_val                       = ls_value
                ).
        DATA(lo_expr) = lo_query-&gt;if_os_query_expr_factory~create_and_expr(
                    i_expr1 = lo_expr1
                    i_expr2 = lo_expr2
                ).
        lo_expr = lo_query-&gt;if_os_query_expr_factory~create_and_expr(
                    i_expr1 = lo_expr
                    i_expr2 = lo_expr3
                ).
        lo_expr = lo_query-&gt;if_os_query_expr_factory~create_and_expr(
                    i_expr1 = lo_expr
                    i_expr2 = lo_expr4
                ).
        lo_expr = lo_query-&gt;if_os_query_expr_factory~create_and_expr(
                    i_expr1 = lo_expr
                    i_expr2 = lo_expr5
                ).
        lo_query-&gt;if_os_query~set_filter_expr( i_filter_expr = lo_expr  ).

        DATA(lt_deal_qty) = zca_naoct_qtd_ctrlh=&gt;agent-&gt;if_os_ca_persistency~get_persistent_by_query(
                            i_query                = lo_query
                        ).
        CASE lines( lt_deal_qty ).
          WHEN 0.
            RAISE EXCEPTION TYPE cx_os_object_not_found.
          WHEN 1.
            READ TABLE lt_deal_qty INDEX 1 ASSIGNING FIELD-SYMBOL(&lt;lo_deal_qty&gt;).
            IF sy-subrc &lt;&gt; 0.
              RAISE EXCEPTION TYPE cx_os_object_not_found.
            ELSE.
              ro_deal_qty ?= &lt;lo_deal_qty&gt;.
            ENDIF.
          WHEN OTHERS.
            RAISE EXCEPTION TYPE zcx_naoc_query_error.
        ENDCASE.

      CATCH cx_os_query_expr_fact_error
            cx_os_class_not_found
            cx_os_query_error.
        RAISE EXCEPTION TYPE zcx_naoc_query_error.
      CATCH cx_os_object_not_found INTO DATA(lx_not_found).
        RAISE EXCEPTION lx_not_found.
    ENDTRY.
  ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_NAOC_DEAL_QTY_MANAGER" CMPNAME="FIND_FIRST_TO_BE_VALID" VERSION="1" LANGU="E" DESCRIPT="Returns first to be valid instance of ZCL_NAOCT_QTD_CTRLH" EXPOSURE="0" STATE="1" EDITORDER="16 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_NAOC_DEAL_QTY_MANAGER" CMPNAME="FIND_FIRST_TO_BE_VALID" SCONAME="RO_DEAL_QTY" VERSION="1" LANGU="E" DESCRIPT="Allowed quantity per Deal Code - Persistence" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_NAOCT_QTD_CTRLH"/>
   <exception CLSNAME="ZCL_NAOC_DEAL_QTY_MANAGER" CMPNAME="FIND_FIRST_TO_BE_VALID" SCONAME="CX_OS_OBJECT_NOT_FOUND" VERSION="1" LANGU="E" DESCRIPT="Object Services: Object not Found" MTDTYPE="0" EDITORDER="1 " IS_RESUMABLE="X"/>
   <exception CLSNAME="ZCL_NAOC_DEAL_QTY_MANAGER" CMPNAME="FIND_FIRST_TO_BE_VALID" SCONAME="ZCX_NAOC_QUERY_ERROR" VERSION="1" LANGU="E" DESCRIPT="Query error" MTDTYPE="0" EDITORDER="2 " IS_RESUMABLE="X"/>
   <source>METHOD FIND_FIRST_TO_BE_VALID.
    DATA: lo_query     TYPE REF TO cl_os_query,
          ls_value     TYPE string,
          lo_deal_qty  TYPE REF TO zcl_naoct_qtd_ctrlh,
          lx_not_found TYPE REF TO cx_os_object_not_found.

    CLEAR ro_deal_qty.
    TRY .
        DATA(lo_query_mng) = cl_os_system=&gt;get_query_manager( ).
        lo_query ?= lo_query_mng-&gt;create_query( ).
        ls_value = me-&gt;spart.
        DATA(lo_expr1) = lo_query-&gt;if_os_query_expr_factory~create_operator_expr(
                    i_attr1                     = &apos;SPART&apos;
                    i_operator                  = &apos;=&apos;
                    i_val                       = ls_value
                ).
        ls_value = me-&gt;kunnr.
        DATA(lo_expr2) = lo_query-&gt;if_os_query_expr_factory~create_operator_expr(
                    i_attr1                     = &apos;KUNNR&apos;
                    i_operator                  = &apos;=&apos;
                    i_val                       = ls_value
                ).
        ls_value = me-&gt;zzdeal_code.
        DATA(lo_expr3) = lo_query-&gt;if_os_query_expr_factory~create_operator_expr(
                    i_attr1                     = &apos;ZZDEAL_CODE&apos;
                    i_operator                  = &apos;=&apos;
                    i_val                       = ls_value
                ).
        DATA(lo_expr) = lo_query-&gt;if_os_query_expr_factory~create_and_expr(
                    i_expr1 = lo_expr1
                    i_expr2 = lo_expr2
                ).
        lo_expr = lo_query-&gt;if_os_query_expr_factory~create_and_expr(
                    i_expr1 = lo_expr
                    i_expr2 = lo_expr3
                ).

        DATA(lo_order) = lo_query-&gt;if_os_query_expr_factory~create_ordering_expr( ).
        lo_order-&gt;append_ascending( i_attr = &apos;ENDDT&apos; ).

        lo_query-&gt;if_os_query~set_filter_expr( i_filter_expr = lo_expr  ).
        lo_query-&gt;if_os_query~set_ordering_expr( i_ordering_expr = lo_order ).

        DATA(lt_deal_qty) = zca_naoct_qtd_ctrlh=&gt;agent-&gt;if_os_ca_persistency~get_persistent_by_query(
                            i_query                = lo_query
                        ).
        CASE lines( lt_deal_qty ).
          WHEN 0.
            RAISE EXCEPTION TYPE cx_os_object_not_found.
          WHEN OTHERS.
            LOOP AT lt_deal_qty ASSIGNING FIELD-SYMBOL(&lt;lo_line&gt;).
              lo_deal_qty ?= &lt;lo_line&gt;.
              TRY .
                  IF lo_deal_qty-&gt;get_enddt( ) &gt;= sy-datum.
                    ro_deal_qty = lo_deal_qty.
                    RETURN.
                  ENDIF.
                CATCH cx_os_object_not_found INTO lx_not_found.
                  CONTINUE.
              ENDTRY.
            ENDLOOP.
            IF lx_not_found IS BOUND.
              RAISE EXCEPTION lx_not_found.
            ENDIF.
            IF ro_deal_qty IS INITIAL.
              RAISE EXCEPTION TYPE cx_os_object_not_found.
            ENDIF.
        ENDCASE.
      CATCH cx_os_query_expr_fact_error
            cx_os_class_not_found
            cx_os_query_error.
        RAISE EXCEPTION TYPE zcx_naoc_query_error.
      CATCH cx_os_object_not_found INTO lx_not_found.
        RAISE EXCEPTION lx_not_found.
    ENDTRY.
  ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_NAOC_DEAL_QTY_MANAGER" CMPNAME="FIND_LAST" VERSION="1" LANGU="E" DESCRIPT="Returns the last  instance of ZCL_NAOCT_QTD_CTRLH" EXPOSURE="0" STATE="1" EDITORDER="15 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_NAOC_DEAL_QTY_MANAGER" CMPNAME="FIND_LAST" SCONAME="RO_DEAL_QTY" VERSION="1" LANGU="E" DESCRIPT="Allowed quantity per Deal Code - Persistence" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_NAOCT_QTD_CTRLH"/>
   <exception CLSNAME="ZCL_NAOC_DEAL_QTY_MANAGER" CMPNAME="FIND_LAST" SCONAME="CX_OS_OBJECT_NOT_FOUND" VERSION="1" LANGU="E" DESCRIPT="Object Services: Object not Found" MTDTYPE="0" EDITORDER="1 " IS_RESUMABLE="X"/>
   <exception CLSNAME="ZCL_NAOC_DEAL_QTY_MANAGER" CMPNAME="FIND_LAST" SCONAME="ZCX_NAOC_QUERY_ERROR" VERSION="1" LANGU="E" DESCRIPT="Query error" MTDTYPE="0" EDITORDER="2 " IS_RESUMABLE="X"/>
   <source>METHOD find_last.
    DATA: lo_query     TYPE REF TO cl_os_query,
          ls_value     TYPE string,
          lo_deal_qty  TYPE REF TO zcl_naoct_qtd_ctrlh,
          lx_not_found TYPE REF TO cx_os_object_not_found.

    CLEAR ro_deal_qty.
    TRY .
        DATA(lo_query_mng) = cl_os_system=&gt;get_query_manager( ).
        lo_query ?= lo_query_mng-&gt;create_query( ).
        ls_value = me-&gt;spart.
        DATA(lo_expr1) = lo_query-&gt;if_os_query_expr_factory~create_operator_expr(
                    i_attr1                     = &apos;SPART&apos;
                    i_operator                  = &apos;=&apos;
                    i_val                       = ls_value
                ).
        ls_value = me-&gt;kunnr.
        DATA(lo_expr2) = lo_query-&gt;if_os_query_expr_factory~create_operator_expr(
                    i_attr1                     = &apos;KUNNR&apos;
                    i_operator                  = &apos;=&apos;
                    i_val                       = ls_value
                ).
        ls_value = me-&gt;zzdeal_code.
        DATA(lo_expr3) = lo_query-&gt;if_os_query_expr_factory~create_operator_expr(
                    i_attr1                     = &apos;ZZDEAL_CODE&apos;
                    i_operator                  = &apos;=&apos;
                    i_val                       = ls_value
                ).
        DATA(lo_expr) = lo_query-&gt;if_os_query_expr_factory~create_and_expr(
                    i_expr1 = lo_expr1
                    i_expr2 = lo_expr2
                ).
        lo_expr = lo_query-&gt;if_os_query_expr_factory~create_and_expr(
                    i_expr1 = lo_expr
                    i_expr2 = lo_expr3
                ).

        DATA(lo_order) = lo_query-&gt;if_os_query_expr_factory~create_ordering_expr( ).
        lo_order-&gt;append_descending( i_attr = &apos;ENDDT&apos; ).

        lo_query-&gt;if_os_query~set_filter_expr( i_filter_expr = lo_expr  ).
        lo_query-&gt;if_os_query~set_ordering_expr( i_ordering_expr = lo_order ).

        DATA(lt_deal_qty) = zca_naoct_qtd_ctrlh=&gt;agent-&gt;if_os_ca_persistency~get_persistent_by_query(
                            i_query                = lo_query
                        ).
        CASE lines( lt_deal_qty ).
          WHEN 0.
            RAISE EXCEPTION TYPE cx_os_object_not_found.
          WHEN OTHERS.
            READ TABLE lt_deal_qty ASSIGNING FIELD-SYMBOL(&lt;lo_line&gt;) INDEX 1.
            IF sy-subrc = 0.
              lo_deal_qty ?= &lt;lo_line&gt;.
              ro_deal_qty = lo_deal_qty.
            ELSE.
              RAISE EXCEPTION TYPE cx_os_object_not_found.
            ENDIF.
        ENDCASE.
      CATCH cx_os_query_expr_fact_error
            cx_os_class_not_found
            cx_os_query_error.
        RAISE EXCEPTION TYPE zcx_naoc_query_error.
      CATCH cx_os_object_not_found INTO lx_not_found.
        RAISE EXCEPTION lx_not_found.
    ENDTRY.
  ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_NAOC_DEAL_QTY_MANAGER" CMPNAME="GET_API" VERSION="1" LANGU="E" DESCRIPT="Returns a API calls mediator" EXPOSURE="0" STATE="1" EDITORDER="4 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_NAOC_DEAL_QTY_MANAGER" CMPNAME="GET_API" SCONAME="RO_API" VERSION="1" LANGU="E" DESCRIPT="API calls mediator" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="OBJECT"/>
   <source>method GET_API.

    ro_api = NEW lcl_api( ).
  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_NAOC_DEAL_QTY_MANAGER" CMPNAME="GET_BOOKED_QTY" VERSION="1" LANGU="E" DESCRIPT="Returns booked quantity, excluding the order item provided" EXPOSURE="2" STATE="1" EDITORDER="5 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_NAOC_DEAL_QTY_MANAGER" CMPNAME="GET_BOOKED_QTY" SCONAME="I_VBELN" VERSION="1" LANGU="E" DESCRIPT="Sales and Distribution Document Number" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="VBELN" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_NAOC_DEAL_QTY_MANAGER" CMPNAME="GET_BOOKED_QTY" SCONAME="I_POSNR" VERSION="1" LANGU="E" DESCRIPT="Item number of the SD document" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="POSNR" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_NAOC_DEAL_QTY_MANAGER" CMPNAME="GET_BOOKED_QTY" SCONAME="R_BOOKED" VERSION="1" LANGU="E" DESCRIPT="Consumed quantity" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="MENGE_D"/>
   <exception CLSNAME="ZCL_NAOC_DEAL_QTY_MANAGER" CMPNAME="GET_BOOKED_QTY" SCONAME="CX_BAPI_ERROR" VERSION="1" LANGU="E" DESCRIPT='BAPI Error Exception: Migrated Error Messages Type &quot;E&quot;' MTDTYPE="0" EDITORDER="1 "/>
   <source>METHOD get_booked_qty.
    DATA: lo_query       TYPE REF TO cl_os_query,
          lo_consumption TYPE REF TO zcl_naoct_qtd_ctrld,
          lo_db          TYPE REF TO lcl_db,
          lv_vbeln       TYPE vbeln,
          lv_posnr       TYPE posnr,
          ls_value       TYPE string,
          ls_message     TYPE string,
          lt_return      TYPE bapiret2_t.

    CLEAR r_booked.

    IF me-&gt;enddt IS INITIAL.
      TRY .
          me-&gt;set_attributes( ).
        CATCH zcx_naoc_no_deal_qty_defined
              zcx_naoc_query_error.
          RETURN.
      ENDTRY.
    ENDIF.

    TRY .
        DATA(lo_query_mng) = cl_os_system=&gt;get_query_manager( ).
        lo_query ?= lo_query_mng-&gt;create_query( ).

        ls_value = me-&gt;spart.
        DATA(lo_expr1) = lo_query-&gt;if_os_query_expr_factory~create_operator_expr(
                    i_attr1                     = &apos;SPART&apos;
                    i_operator                  = &apos;=&apos;
                    i_val                       = ls_value
                ).
        ls_value = me-&gt;kunnr.
        DATA(lo_expr2) = lo_query-&gt;if_os_query_expr_factory~create_operator_expr(
                    i_attr1                     = &apos;KUNNR&apos;
                    i_operator                  = &apos;=&apos;
                    i_val                       = ls_value
                ).
        ls_value = me-&gt;zzdeal_code.
        DATA(lo_expr3) = lo_query-&gt;if_os_query_expr_factory~create_operator_expr(
                    i_attr1                     = &apos;ZZDEAL_CODE&apos;
                    i_operator                  = &apos;=&apos;
                    i_val                       = ls_value
                ).
        ls_value = me-&gt;enddt.
        DATA(lo_expr4) = lo_query-&gt;if_os_query_expr_factory~create_operator_expr(
                    i_attr1                     = &apos;ENDDT&apos;
                    i_operator                  = &apos;=&apos;
                    i_val                       = ls_value
                ).
        DATA(lo_expr) = lo_query-&gt;if_os_query_expr_factory~create_and_expr(
                    i_expr1 = lo_expr1
                    i_expr2 = lo_expr2
                ).
        lo_expr = lo_query-&gt;if_os_query_expr_factory~create_and_expr(
                    i_expr1 = lo_expr
                    i_expr2 = lo_expr3
                ).
        lo_expr = lo_query-&gt;if_os_query_expr_factory~create_and_expr(
                    i_expr1 = lo_expr
                    i_expr2 = lo_expr4
                ).

        lo_query-&gt;if_os_query~set_filter_expr( i_filter_expr = lo_expr  ).

        DATA(lt_consumptions) = zca_naoct_qtd_ctrld=&gt;agent-&gt;if_os_ca_persistency~get_persistent_by_query(
                            i_query                = lo_query
                        ).
        IF lt_consumptions IS NOT INITIAL.
          lo_db ?= me-&gt;get_db( ).
          LOOP AT lt_consumptions ASSIGNING FIELD-SYMBOL(&lt;lo_record&gt;).
            lo_consumption ?= &lt;lo_record&gt;.
            TRY .
                lo_db-&gt;check_vbup( &quot; Checking whether this entry is orphan
                  EXPORTING
                    i_vbeln         = lo_consumption-&gt;get_vbeln( )
                    i_posnr         = lo_consumption-&gt;get_posnr( )
                ).

                IF i_vbeln IS SUPPLIED.
                  lv_vbeln = lo_consumption-&gt;get_vbeln( ).
                  IF i_posnr IS SUPPLIED.
                    lv_posnr = lo_consumption-&gt;get_posnr( ).
                    IF lv_vbeln = i_vbeln AND lv_posnr = i_posnr.
                      CONTINUE.
                    ENDIF.
                  ENDIF.
                ENDIF.
                IF lo_consumption-&gt;get_rejected( ) = abap_true.
                  CONTINUE.
                ENDIF.
              CATCH cx_os_object_not_found. &quot; Must not occur
                CONTINUE.
              CATCH cx_sy_sql_error.
                TRY . &quot; If the entry is orphan it is deleted and not computed as booked quantity
                    zca_naoct_qtd_ctrld=&gt;agent-&gt;delete_persistent(
                      EXPORTING
                        i_spart                   =  lo_consumption-&gt;get_spart( )   &quot; Business Key
                        i_kunnr                   =  lo_consumption-&gt;get_kunnr( )   &quot; Business Key
                        i_zzdeal_code             =  lo_consumption-&gt;get_zzdeal_code( )   &quot; Business Key
                        i_enddt                   =  lo_consumption-&gt;get_enddt( )   &quot; Business Key
                        i_vbeln                   =  lo_consumption-&gt;get_vbeln( )   &quot; Business Key
                        i_posnr                   =  lo_consumption-&gt;get_posnr( )   &quot; Business Key
                    ).
                    CONTINUE.
                  CATCH cx_os_object_not_existing
                        cx_os_object_not_found.
                    CONTINUE.
                ENDTRY.
            ENDTRY.

            r_booked = r_booked + lo_consumption-&gt;get_qtd_ordered( ).
          ENDLOOP.
        ENDIF.
      CATCH cx_os_query_expr_fact_error.
      CATCH cx_os_class_not_found.
      CATCH cx_os_query_error.
      CATCH cx_os_object_not_found.
        RETURN.
    ENDTRY.
  ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_NAOC_DEAL_QTY_MANAGER" CMPNAME="GET_CONSOLIDATED_BOOKED_QTY" VERSION="1" LANGU="E" DESCRIPT="Returns booked quantity, excluding the order provided" EXPOSURE="2" STATE="1" EDITORDER="13 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_NAOC_DEAL_QTY_MANAGER" CMPNAME="GET_CONSOLIDATED_BOOKED_QTY" SCONAME="I_VBELN" VERSION="1" LANGU="E" DESCRIPT="Sales and Distribution Document Number" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="VBELN" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_NAOC_DEAL_QTY_MANAGER" CMPNAME="GET_CONSOLIDATED_BOOKED_QTY" SCONAME="R_BOOKED" VERSION="1" LANGU="E" DESCRIPT="Consumed quantity" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="MENGE_D"/>
   <exception CLSNAME="ZCL_NAOC_DEAL_QTY_MANAGER" CMPNAME="GET_CONSOLIDATED_BOOKED_QTY" SCONAME="CX_BAPI_ERROR" VERSION="1" LANGU="E" DESCRIPT='BAPI Error Exception: Migrated Error Messages Type &quot;E&quot;' MTDTYPE="0" EDITORDER="1 "/>
   <source>METHOD get_consolidated_booked_qty.
    DATA: lo_query       TYPE REF TO cl_os_query,
          lo_consumption TYPE REF TO zcl_naoct_qtd_ctrld,
          lv_vbeln       TYPE vbeln,
          lv_posnr       TYPE posnr,
          ls_value       TYPE string,
          ls_message     TYPE string,
          lt_return      TYPE bapiret2_t.

    CLEAR r_booked.

    IF me-&gt;enddt IS INITIAL.
      TRY .
          me-&gt;set_attributes( ).
        CATCH zcx_naoc_no_deal_qty_defined
              zcx_naoc_query_error.
          RETURN.
      ENDTRY.
    ENDIF.

    TRY .
        DATA(lo_query_mng) = cl_os_system=&gt;get_query_manager( ).
        lo_query ?= lo_query_mng-&gt;create_query( ).

        ls_value = me-&gt;spart.
        DATA(lo_expr1) = lo_query-&gt;if_os_query_expr_factory~create_operator_expr(
                    i_attr1                     = &apos;SPART&apos;
                    i_operator                  = &apos;=&apos;
                    i_val                       = ls_value
                ).
        ls_value = me-&gt;kunnr.
        DATA(lo_expr2) = lo_query-&gt;if_os_query_expr_factory~create_operator_expr(
                    i_attr1                     = &apos;KUNNR&apos;
                    i_operator                  = &apos;=&apos;
                    i_val                       = ls_value
                ).
        ls_value = me-&gt;zzdeal_code.
        DATA(lo_expr3) = lo_query-&gt;if_os_query_expr_factory~create_operator_expr(
                    i_attr1                     = &apos;ZZDEAL_CODE&apos;
                    i_operator                  = &apos;=&apos;
                    i_val                       = ls_value
                ).
        ls_value = me-&gt;enddt.
        DATA(lo_expr4) = lo_query-&gt;if_os_query_expr_factory~create_operator_expr(
                    i_attr1                     = &apos;ENDDT&apos;
                    i_operator                  = &apos;=&apos;
                    i_val                       = ls_value
                ).
        DATA(lo_expr) = lo_query-&gt;if_os_query_expr_factory~create_and_expr(
                    i_expr1 = lo_expr1
                    i_expr2 = lo_expr2
                ).
        lo_expr = lo_query-&gt;if_os_query_expr_factory~create_and_expr(
                    i_expr1 = lo_expr
                    i_expr2 = lo_expr3
                ).
        lo_expr = lo_query-&gt;if_os_query_expr_factory~create_and_expr(
                    i_expr1 = lo_expr
                    i_expr2 = lo_expr4
                ).

        lo_query-&gt;if_os_query~set_filter_expr( i_filter_expr = lo_expr  ).

        DATA(lt_consumptions) = zca_naoct_qtd_ctrld=&gt;agent-&gt;if_os_ca_persistency~get_persistent_by_query(
                            i_query                = lo_query
                        ).
        LOOP AT lt_consumptions ASSIGNING FIELD-SYMBOL(&lt;lo_record&gt;).
          lo_consumption ?= &lt;lo_record&gt;.
          TRY .
              IF i_vbeln IS SUPPLIED.
                lv_vbeln = lo_consumption-&gt;get_vbeln( ).
                IF lv_vbeln = i_vbeln.
                  CONTINUE.
                ENDIF.
              ENDIF.
              IF lo_consumption-&gt;get_rejected( ) = abap_true.
                CONTINUE.
              ENDIF.
            CATCH cx_os_object_not_found. &quot; Must not occur
              CONTINUE.
          ENDTRY.

          r_booked = r_booked + lo_consumption-&gt;get_qtd_ordered( ).
        ENDLOOP.
      CATCH cx_os_query_expr_fact_error.
      CATCH cx_os_class_not_found.
      CATCH cx_os_query_error.
      CATCH cx_os_object_not_found.
        RETURN.
    ENDTRY.
  ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_NAOC_DEAL_QTY_MANAGER" CMPNAME="GET_DB" VERSION="1" LANGU="E" DESCRIPT="Returns a database mediator instance." EXPOSURE="0" STATE="1" EDITORDER="17 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_NAOC_DEAL_QTY_MANAGER" CMPNAME="GET_DB" SCONAME="RO_DB" VERSION="1" LANGU="E" DESCRIPT="Database mediator instance" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="OBJECT"/>
   <source>method GET_DB.

    ro_db = NEW lcl_db( ).
  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_NAOC_DEAL_QTY_MANAGER" CMPNAME="REMOVE_CONSUMPTION" VERSION="1" LANGU="E" DESCRIPT="Removes a consumption item." EXPOSURE="0" STATE="1" EDITORDER="9 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_NAOC_DEAL_QTY_MANAGER" CMPNAME="REMOVE_CONSUMPTION" SCONAME="I_VBELN" VERSION="1" LANGU="E" DESCRIPT="Sales and Distribution Document Number" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="VBELN"/>
   <parameter CLSNAME="ZCL_NAOC_DEAL_QTY_MANAGER" CMPNAME="REMOVE_CONSUMPTION" SCONAME="I_POSNR" VERSION="1" LANGU="E" DESCRIPT="Item number of the SD document" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="POSNR"/>
   <exception CLSNAME="ZCL_NAOC_DEAL_QTY_MANAGER" CMPNAME="REMOVE_CONSUMPTION" SCONAME="CX_BAPI_ERROR" VERSION="1" LANGU="E" DESCRIPT='BAPI Error Exception: Migrated Error Messages Type &quot;E&quot;' MTDTYPE="0" EDITORDER="1 "/>
   <source>METHOD remove_consumption.
    DATA: lo_api     TYPE REF TO lcl_api,
          ls_message TYPE string,
          lt_return  TYPE bapiret2_t,
          lx_error   TYPE REF TO cx_bapi_error.
    FIELD-SYMBOLS  &lt;lw_return&gt; TYPE bapiret2.

    IF me-&gt;enddt IS INITIAL.
      TRY .
          me-&gt;set_attributes( ).
        CATCH zcx_naoc_no_deal_qty_defined
              zcx_naoc_query_error.
          RETURN.
      ENDTRY.
    ENDIF.

    lo_api ?= me-&gt;get_api( ).

    TRY .
        lo_api-&gt;lock_deal_qty(
          EXPORTING
            i_spart       = me-&gt;spart
            i_kunnr       = me-&gt;kunnr
            i_zzdeal_code = me-&gt;zzdeal_code
            i_enddt       = me-&gt;enddt
        ).

        TRY .
            zca_naoct_qtd_ctrld=&gt;agent-&gt;delete_persistent(
              EXPORTING
                i_spart                   =  me-&gt;spart   &quot; Business Key
                i_kunnr                   =  me-&gt;kunnr   &quot; Business Key
                i_zzdeal_code             =  me-&gt;zzdeal_code   &quot; Business Key
                i_enddt                   =  me-&gt;enddt   &quot; Business Key
                i_vbeln                   =  i_vbeln   &quot; Business Key
                i_posnr                   =  i_posnr   &quot; Business Key
            ).
          CATCH cx_os_object_not_existing.
            lo_api-&gt;release_deal_qty(
              EXPORTING
                i_spart       = me-&gt;spart
                i_kunnr       = me-&gt;kunnr
                i_zzdeal_code = me-&gt;zzdeal_code
                i_enddt       = me-&gt;enddt
            ).
            FREE lo_api.
            RETURN.
        ENDTRY.
      CATCH cx_bapi_error INTO lx_error.
        lo_api-&gt;release_deal_qty(
          EXPORTING
            i_spart       = me-&gt;spart
            i_kunnr       = me-&gt;kunnr
            i_zzdeal_code = me-&gt;zzdeal_code
            i_enddt       = me-&gt;enddt
        ).
        FREE lo_api.
        RAISE EXCEPTION lx_error.
    ENDTRY.

    lo_api-&gt;release_deal_qty(
      EXPORTING
        i_spart       = me-&gt;spart
        i_kunnr       = me-&gt;kunnr
        i_zzdeal_code = me-&gt;zzdeal_code
        i_enddt       = me-&gt;enddt
    ).
    FREE lo_api.
  ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_NAOC_DEAL_QTY_MANAGER" CMPNAME="SET_ATTRIBUTES" VERSION="1" LANGU="E" DESCRIPT="Sets non key attributes" EXPOSURE="2" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <exception CLSNAME="ZCL_NAOC_DEAL_QTY_MANAGER" CMPNAME="SET_ATTRIBUTES" SCONAME="ZCX_NAOC_NO_DEAL_QTY_DEFINED" VERSION="1" LANGU="E" DESCRIPT="No deal quantity defined" MTDTYPE="0" EDITORDER="1 "/>
   <exception CLSNAME="ZCL_NAOC_DEAL_QTY_MANAGER" CMPNAME="SET_ATTRIBUTES" SCONAME="ZCX_NAOC_QUERY_ERROR" VERSION="1" LANGU="E" DESCRIPT="Query error" MTDTYPE="0" EDITORDER="2 "/>
   <source>METHOD set_attributes.
    DATA: ls_message TYPE string,
          lt_return  TYPE bapiret2_t.

    TRY .
        DATA(lo_deal) = me-&gt;find_deal_quantity( me-&gt;ref_date ).
        me-&gt;enddt = lo_deal-&gt;get_enddt( ).
        me-&gt;begdt = lo_deal-&gt;get_begdt( ).
        me-&gt;uom = lo_deal-&gt;get_uom( ).
        me-&gt;qtd_allowed = lo_deal-&gt;get_qtd_allowed( ).
      CATCH cx_os_object_not_found.
        RAISE EXCEPTION TYPE zcx_naoc_no_deal_qty_defined.
      CATCH zcx_naoc_query_error.
        RAISE EXCEPTION TYPE zcx_naoc_query_error.
    ENDTRY.

  ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_NAOC_DEAL_QTY_MANAGER" CMPNAME="SET_ITEM_AS_REJECTED" VERSION="1" LANGU="E" DESCRIPT="Sets a consumption item as rejected" EXPOSURE="2" STATE="1" EDITORDER="7 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_NAOC_DEAL_QTY_MANAGER" CMPNAME="SET_ITEM_AS_REJECTED" SCONAME="I_VBELN" VERSION="1" LANGU="E" DESCRIPT="Sales and Distribution Document Number" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="VBELN"/>
   <parameter CLSNAME="ZCL_NAOC_DEAL_QTY_MANAGER" CMPNAME="SET_ITEM_AS_REJECTED" SCONAME="I_POSNR" VERSION="1" LANGU="E" DESCRIPT="Item number of the SD document" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="POSNR"/>
   <source>METHOD set_item_as_rejected.
    DATA lo_api TYPE REF TO lcl_api.

    IF me-&gt;enddt IS INITIAL.
      TRY .
          me-&gt;set_attributes( ).
        CATCH zcx_naoc_no_deal_qty_defined
              zcx_naoc_query_error.
          RETURN.
      ENDTRY.
    ENDIF.

    lo_api ?= me-&gt;get_api( ).

    TRY .
        lo_api-&gt;lock_deal_qty(
          EXPORTING
            i_spart       = me-&gt;spart
            i_kunnr       = me-&gt;kunnr
            i_zzdeal_code = me-&gt;zzdeal_code
            i_enddt       = me-&gt;enddt
        ).

        TRY .
            DATA(lo_deal_qty) = zca_naoct_qtd_ctrlh=&gt;agent-&gt;get_persistent(
                       i_spart                = me-&gt;spart
                       i_kunnr                = me-&gt;kunnr
                       i_zzdeal_code          = me-&gt;zzdeal_code
                       i_enddt                = me-&gt;enddt
                   ).
          CATCH cx_os_object_not_found.
            lo_api-&gt;release_deal_qty(
              EXPORTING
                i_spart       = me-&gt;spart
                i_kunnr       = me-&gt;kunnr
                i_zzdeal_code = me-&gt;zzdeal_code
                i_enddt       = me-&gt;enddt
            ).
            FREE lo_api.
            RETURN.
        ENDTRY.
        TRY .
            DATA(lo_consumption) = zca_naoct_qtd_ctrld=&gt;agent-&gt;get_persistent(
                           i_spart                = me-&gt;spart
                           i_kunnr                = me-&gt;kunnr
                           i_zzdeal_code          = me-&gt;zzdeal_code
                           i_enddt                = me-&gt;enddt
                           i_vbeln                = i_vbeln
                           i_posnr                = i_posnr
                       ).
            lo_consumption-&gt;set_rejected( i_rejected = abap_true ).
          CATCH cx_os_object_not_found.
            lo_api-&gt;release_deal_qty(
              EXPORTING
                i_spart       = me-&gt;spart
                i_kunnr       = me-&gt;kunnr
                i_zzdeal_code = me-&gt;zzdeal_code
                i_enddt       = me-&gt;enddt
            ).
            FREE: lo_api, lo_consumption, lo_deal_qty.
            RETURN.
        ENDTRY.
      CATCH cx_bapi_error.
        lo_api-&gt;release_deal_qty(
          EXPORTING
            i_spart       = me-&gt;spart
            i_kunnr       = me-&gt;kunnr
            i_zzdeal_code = me-&gt;zzdeal_code
            i_enddt       = me-&gt;enddt
        ).
        FREE: lo_api, lo_consumption, lo_deal_qty.
        RETURN.
      CATCH zcx_naoc_no_deal_qty_defined.
        lo_api-&gt;release_deal_qty(
          EXPORTING
            i_spart       = me-&gt;spart
            i_kunnr       = me-&gt;kunnr
            i_zzdeal_code = me-&gt;zzdeal_code
            i_enddt       = me-&gt;enddt
        ).
        FREE: lo_api, lo_consumption, lo_deal_qty.
        RETURN.
      CATCH cx_os_object_not_found.
        lo_api-&gt;release_deal_qty(
          EXPORTING
            i_spart       = me-&gt;spart
            i_kunnr       = me-&gt;kunnr
            i_zzdeal_code = me-&gt;zzdeal_code
            i_enddt       = me-&gt;enddt
        ).
        FREE: lo_api, lo_consumption, lo_deal_qty.
        RETURN.
    ENDTRY.

    lo_api-&gt;release_deal_qty(
      EXPORTING
        i_spart       = me-&gt;spart
        i_kunnr       = me-&gt;kunnr
        i_zzdeal_code = me-&gt;zzdeal_code
        i_enddt       = me-&gt;enddt
    ).
    FREE: lo_api, lo_consumption, lo_deal_qty.
  ENDMETHOD.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZCX_NAOC_LIMIT_REACHED" VERSION="1" LANGU="E" DESCRIPT="Limit reached" CATEGORY="40" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" RSTAT="K" CLSBCCAT="00" MSG_ID="ZNAOC" DURATION_TYPE="0 " RISK_LEVEL="0 " REFCLSNAME="CX_STATIC_CHECK">
  <implementing CLSNAME="ZCX_NAOC_LIMIT_REACHED" REFCLSNAME="IF_T100_MESSAGE" VERSION="1" EXPOSURE="2" STATE="1" RELTYPE="1" EDITORDER="0 "/>
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <attribute CLSNAME="ZCX_NAOC_LIMIT_REACHED" CMPNAME="MENGE" VERSION="1" LANGU="E" DESCRIPT="Excess" EXPOSURE="2" STATE="1" EDITORDER="2 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="MENGE_D" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCX_NAOC_LIMIT_REACHED" CMPNAME="T_RETURN" VERSION="1" LANGU="E" DESCRIPT="Return parameter table" EXPOSURE="2" STATE="1" EDITORDER="1 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="BAPIRET2_T" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCX_NAOC_LIMIT_REACHED" CMPNAME="UOM" VERSION="1" LANGU="E" DESCRIPT="Sales unit" EXPOSURE="2" STATE="1" EDITORDER="3 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="VRKME" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <inheritance CLSNAME="ZCX_NAOC_LIMIT_REACHED" REFCLSNAME="CX_STATIC_CHECK" VERSION="1" STATE="1"/>
 </CLAS>
 <CLAS CLSNAME="ZCX_NAOC_NO_DEAL_QTY_DEFINED" VERSION="1" LANGU="E" DESCRIPT="No deal quantity defined" CATEGORY="40" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" RSTAT="K" CLSBCCAT="00" MSG_ID="ZNAOC" DURATION_TYPE="0 " RISK_LEVEL="0 " REFCLSNAME="CX_BO_ERROR">
  <implementing CLSNAME="ZCX_NAOC_NO_DEAL_QTY_DEFINED" REFCLSNAME="IF_T100_MESSAGE" VERSION="1" EXPOSURE="2" STATE="1" RELTYPE="1" EDITORDER="0 "/>
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <attribute CLSNAME="ZCX_NAOC_NO_DEAL_QTY_DEFINED" CMPNAME="STATUS" VERSION="1" LANGU="E" DESCRIPT="Return parameter table" EXPOSURE="2" STATE="1" EDITORDER="1 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="BAPIRET2_T" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <inheritance CLSNAME="ZCX_NAOC_NO_DEAL_QTY_DEFINED" REFCLSNAME="CX_BO_ERROR" VERSION="1" STATE="1"/>
 </CLAS>
 <CLAS CLSNAME="ZCX_NAOC_QUERY_ERROR" VERSION="1" LANGU="E" DESCRIPT="Query error" CATEGORY="40" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " REFCLSNAME="CX_STATIC_CHECK">
  <implementing CLSNAME="ZCX_NAOC_QUERY_ERROR" REFCLSNAME="IF_T100_MESSAGE" VERSION="1" EXPOSURE="2" STATE="1" RELTYPE="1" EDITORDER="0 "/>
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <inheritance CLSNAME="ZCX_NAOC_QUERY_ERROR" REFCLSNAME="CX_STATIC_CHECK" VERSION="1" STATE="1"/>
 </CLAS>
 <DTEL ROLLNAME="ZGLOC_ELIM_ON" DDLANGUAGE="E" ROUTPUTLEN="000000" HEADLEN="17" SCRLEN1="10" SCRLEN2="20" SCRLEN3="40" DDTEXT="Date of exclusion" REPTEXT="Date of exclusion" SCRTEXT_S="Exclusion" SCRTEXT_M="Date of exclusion" SCRTEXT_L="Date of exclusion" AUTHCLASS="00" DTELMASTER="E" DATATYPE="DATS" LENG="000008" DECIMALS="000000" OUTPUTLEN="000010">
  <tpara/>
 </DTEL>
 <DTEL ROLLNAME="ZNAOCE_DEAL_ALLOWED_QTY" DDLANGUAGE="E" DOMNAME="MENG15" ROUTPUTLEN="000000" HEADLEN="19" SCRLEN1="10" SCRLEN2="20" SCRLEN3="40" DDTEXT="Allowed quantity" REPTEXT="Allowed quantity" SCRTEXT_S="Quantity" SCRTEXT_M="Allowed quantity" SCRTEXT_L="Allowed quantity" AUTHCLASS="00" DTELMASTER="E" DATATYPE="QUAN" LENG="000015" DECIMALS="000003" OUTPUTLEN="000019" REFKIND="D">
  <tpara/>
 </DTEL>
 <DTEL ROLLNAME="ZNAOCE_DEAL_BEGIN" DDLANGUAGE="E" DOMNAME="DATS" ROUTPUTLEN="000000" HEADLEN="14" SCRLEN1="10" SCRLEN2="14" SCRLEN3="14" DDTEXT="Effective date" REPTEXT="Effective date" SCRTEXT_S="Effective" SCRTEXT_M="Effective date" SCRTEXT_L="Effective date" AUTHCLASS="00" DTELMASTER="E" DATATYPE="DATS" LENG="000008" DECIMALS="000000" OUTPUTLEN="000010" REFKIND="D">
  <tpara/>
 </DTEL>
 <DTEL ROLLNAME="ZNAOCE_DEAL_CHANGER" DDLANGUAGE="E" DOMNAME="XUBNAME" ROUTPUTLEN="000000" HEADLEN="52" SCRLEN1="10" SCRLEN2="20" SCRLEN3="40" DDTEXT="User name of the changer of the deal quantity record" REPTEXT="User name of the changer of the deal quantity record" SCRTEXT_S="Changer" SCRTEXT_M="Deal qty. changer" SCRTEXT_L="Changer of the deal quantity record" AUTHCLASS="00" DTELMASTER="E" DATATYPE="CHAR" LENG="000012" DECIMALS="000000" OUTPUTLEN="000012" ENTITYTAB="USR02" REFKIND="D">
  <tpara/>
 </DTEL>
 <DTEL ROLLNAME="ZNAOCE_DEAL_CREATION" DDLANGUAGE="E" DOMNAME="DATS" ROUTPUTLEN="000000" HEADLEN="44" SCRLEN1="10" SCRLEN2="20" SCRLEN3="40" DDTEXT="Date of creation of the deal quantity record" REPTEXT="Date of creation of the deal quantity record" SCRTEXT_S="Creation" SCRTEXT_M="Creation date" SCRTEXT_L="Creation of the deal quantity record" AUTHCLASS="00" DTELMASTER="E" DATATYPE="DATS" LENG="000008" DECIMALS="000000" OUTPUTLEN="000010" REFKIND="D">
  <tpara/>
 </DTEL>
 <DTEL ROLLNAME="ZNAOCE_DEAL_CREATOR" DDLANGUAGE="E" DOMNAME="XUBNAME" ROUTPUTLEN="000000" HEADLEN="45" SCRLEN1="10" SCRLEN2="20" SCRLEN3="40" DDTEXT="User code of the creator of the deal quantity" REPTEXT="User code of the creator of the deal quantity" SCRTEXT_S="Creator" SCRTEXT_M="Deal qty. creator" SCRTEXT_L="Creator of the deal quantity" AUTHCLASS="00" DTELMASTER="E" DATATYPE="CHAR" LENG="000012" DECIMALS="000000" OUTPUTLEN="000012" ENTITYTAB="USR02" REFKIND="D">
  <tpara/>
 </DTEL>
 <DTEL ROLLNAME="ZNAOCE_DEAL_END" DDLANGUAGE="E" DOMNAME="DATUM" ROUTPUTLEN="000000" HEADLEN="15" SCRLEN1="10" SCRLEN2="15" SCRLEN3="15" DDTEXT="Expiration date" REPTEXT="Expiration date" SCRTEXT_S="Expiration" SCRTEXT_M="Expiration date" SCRTEXT_L="Expiration date" AUTHCLASS="00" DTELMASTER="E" DATATYPE="DATS" LENG="000008" DECIMALS="000000" OUTPUTLEN="000010" REFKIND="D">
  <tpara/>
 </DTEL>
 <FUGR AREA="ZNAOCFG_DEAL_QUANTITIES" SPRAS="E" AREAT="Deal Quantities functions">
  <functionGroupDocumentation/>
  <mainprogram NAME="SAPLZNAOCFG_DEAL_QUANTITIES" VARCL="X" DBAPL="S" DBNA="D$" SUBC="F" APPL="S" RMAND="200" RLOAD="E" FIXPT="X" LDBNAME="D$S" UCCHECK="X">
   <textPool>
    <language SPRAS="E">
     <textElement ID="I" KEY="H01" ENTRY="Deal Quantities Management" LENGTH="44 "/>
     <textElement ID="I" KEY="H02" ENTRY="Booked Quantity:" LENGTH="26 "/>
     <textElement ID="I" KEY="H03" ENTRY="Ordered Quantity" LENGTH="26 "/>
     <textElement ID="I" KEY="M01" ENTRY="No consumption found." LENGTH="40 "/>
    </language>
    <language SPRAS="P">
     <textElement ID="I" KEY="H01" ENTRY="Gerenciamento de quotas de vendas" LENGTH="44 "/>
     <textElement ID="I" KEY="H02" ENTRY="Quantidade reservada:" LENGTH="26 "/>
     <textElement ID="I" KEY="M01" ENTRY="Nenhum consumo encontrado." LENGTH="40 "/>
    </language>
    <language SPRAS="S">
     <textElement ID="I" KEY="H01" ENTRY="Gestión de las cuotas de ventas" LENGTH="44 "/>
     <textElement ID="I" KEY="H02" ENTRY="Cantidad reservada:" LENGTH="26 "/>
     <textElement ID="I" KEY="M01" ENTRY="No se ha encontrado consumo." LENGTH="40 "/>
    </language>
   </textPool>
   <dynpros>
    <dynpro PROG="SAPLZNAOCFG_DEAL_QUANTITIES" DNUM="0100" FNUM="0100" BZMX="0 " BZBR="0 " MILI="192 " MICO="37 " MALI="0 " MACO="0 " NOLI="24 " NOCO="47 " VALP="0 " CUAN="G" SPRA="E" DTEXT="Quota Details">
     <dynprofield FNAM="CC_CONSUMPTION" DIDX="0018" FLG1="00" FLG2="00" FLG3="00" FILL="U" FMB1="30" FMB2="00" LENG="2C" LINE="01" COLN="03" LANF="00" LBLK="00" LREP="00" AUTH="101" AGLT="01" ADEZ="01"/>
     <dynprofield FNAM="GV_OK_CODE" DIDX="0000" FLG1="80" FLG2="10" FLG3="00" FMB1="00" FMB2="00" LENG="14" LINE="FF" COLN="01" LTYP="O" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="____________________"/>
     <dynproflowsource>PROCESS BEFORE OUTPUT.
 MODULE: STATUS_0100,
         TREE_AND_DOCKING,
         ALV_DISPLAY.
*
PROCESS AFTER INPUT.
  MODULE USER_COMMAND_0100.</dynproflowsource>
    </dynpro>
   </dynpros>
   <pfstatus ACTCODE="000001" MENCODE="000005" PFKCODE="000001">
    <pfstatus_sta CODE="100" MODAL="D" ACTCODE="000001" PFKCODE="000001" BUTCODE="0001" INT_NOTE="Status 100"/>
    <pfstatus_fun CODE="BACK" TEXTNO="001" TYPE="E" TEXT_TYPE="S" FUN_TEXT="Back" PATH="B"/>
    <pfstatus_fun CODE="END" TEXTNO="001" TYPE="E" TEXT_TYPE="S" FUN_TEXT="Exit" PATH="X"/>
    <pfstatus_fun CODE="ENTR" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_OKAY" ICON_ID="@0V@" FUN_TEXT="Enter"/>
    <pfstatus_fun CODE="ESC" TEXTNO="001" TYPE="E" TEXT_TYPE="S" TEXT_NAME="ICON_CANCEL" ICON_ID="@0W@" FUN_TEXT="Cancel" PATH="A"/>
    <pfstatus_men CODE="000001" NO="01" REF_TYPE="F" REF_CODE="END" REF_NO="001"/>
    <pfstatus_men CODE="000002" NO="01" REF_TYPE="F" REF_CODE="ESC" REF_NO="001"/>
    <pfstatus_men CODE="000003" NO="01" REF_TYPE="F" REF_CODE="BACK" REF_NO="001"/>
    <pfstatus_mtx CODE="000001" TEXT_TYPE="S" TEXT="Quotas" INT_NOTE="Standard Supplement"/>
    <pfstatus_mtx CODE="000002" TEXT_TYPE="S" TEXT="Edit" PATH="E" INT_NOTE="Standard Supplement"/>
    <pfstatus_mtx CODE="000003" TEXT_TYPE="S" TEXT="Goto" PATH="G" INT_NOTE="Standard Supplement"/>
    <pfstatus_act CODE="000001" NO="01" MENUCODE="000001"/>
    <pfstatus_act CODE="000001" NO="02" MENUCODE="000002"/>
    <pfstatus_act CODE="000001" NO="03" MENUCODE="000003"/>
    <pfstatus_pfk CODE="000001" PFNO="00" FUNCODE="ENTR" FUNNO="001"/>
    <pfstatus_pfk CODE="000001" PFNO="03" FUNCODE="BACK" FUNNO="001"/>
    <pfstatus_pfk CODE="000001" PFNO="12" FUNCODE="ESC" FUNNO="001"/>
    <pfstatus_pfk CODE="000001" PFNO="15" FUNCODE="END" FUNNO="001"/>
    <pfstatus_set STATUS="100" FUNCTION="BACK"/>
    <pfstatus_set STATUS="100" FUNCTION="END"/>
    <pfstatus_set STATUS="100" FUNCTION="ENTR"/>
    <pfstatus_set STATUS="100" FUNCTION="ESC"/>
    <pfstatus_doc OBJ_TYPE="A" OBJ_CODE="000001" MODAL="D" INT_NOTE="Status 100"/>
    <pfstatus_doc OBJ_TYPE="P" OBJ_CODE="000001" MODAL="D" INT_NOTE="Status 100"/>
    <pfstatus_doc OBJ_TYPE="B" OBJ_CODE="000001" SUB_CODE="0001" MODAL="D" INT_NOTE="Status 100"/>
    <pfstatus_tit CODE="100" TEXT="Deal Quantities Consumption"/>
   </pfstatus>
   <source>*******************************************************************
*   System-defined Include-files.                                 *
*******************************************************************
  INCLUDE LZNAOCFG_DEAL_QUANTITIESTOP.           &quot; Global Data
  INCLUDE LZNAOCFG_DEAL_QUANTITIESUXX.           &quot; Function Modules

*******************************************************************
*   User-defined Include-files (if necessary).                    *
*******************************************************************
INCLUDE LZNAOCFG_DEAL_QUANTITIESO01.
INCLUDE LZNAOCFG_DEAL_QUANTITIESI01.
INCLUDE LZNAOCFG_DEAL_QUANTITIESP01.</source>
  </mainprogram>
  <includeprograms>
   <include NAME="LZNAOCFG_DEAL_QUANTITIESD01" VARCL="X" SUBC="I" APPL="S" LEVL="740" RMAND="200" RLOAD="E" UCCHECK="X">
    <include_source>*&amp;---------------------------------------------------------------------*
*&amp;  Include           LZNAOCFG_DEAL_QUANTITIESD01
*&amp;---------------------------------------------------------------------*
CLASS lcl_services DEFINITION FINAL.
  PUBLIC SECTION.
    TYPES  yt_fields TYPE STANDARD TABLE OF viewfield.
    CLASS-DATA  ref_date TYPE dats.
    CLASS-METHODS:  sellist2query IMPORTING it_sellist      TYPE scprvimsellist
                                            it_exceptions   TYPE yt_fields OPTIONAL
                                  RETURNING VALUE(ro_query) TYPE REF TO cl_os_query,
      hide_fields   CHANGING ct_fieldcat        TYPE lvc_t_fcat,
      set_header    RETURNING VALUE(rt_header) TYPE slis_t_listheader,
      set_sort      RETURNING VALUE(rt_sort) TYPE lvc_t_sort,
      set_sort_grid RETURNING VALUE(rt_sort) TYPE lvc_t_sort,
      register_events IMPORTING io_tree TYPE REF TO cl_gui_alv_tree_simple,
      set_new_consumptions IMPORTING i_index      TYPE lvc_index
                                     i_grouplevel TYPE lvc_fname,
      set_booked_qty_title RETURNING VALUE(r_title) TYPE lvc_title.
    METHODS:  get_api RETURNING VALUE(ro_api) TYPE REF TO object,
      get_db RETURNING VALUE(ro_db) TYPE REF TO object,
      get_customer_name IMPORTING i_kunnr        TYPE kunnr
                        RETURNING VALUE(r_name1) TYPE name1_gp.
ENDCLASS.


CLASS lcl_api DEFINITION.
  PUBLIC SECTION.
    METHODS: get_field_catalog IMPORTING i_structure_name   TYPE tabname
                               RETURNING VALUE(rt_fieldcat) TYPE lvc_t_fcat
                               RAISING   cx_bapi_error,
      customer_address_data IMPORTING i_kunnr           TYPE kunnr
                            RETURNING VALUE(rw_address) TYPE bapicustomer_04
                            RAISING   cx_bapi_error.
ENDCLASS.


CLASS lcl_db DEFINITION.
  PUBLIC SECTION.
    METHODS: check_vbup IMPORTING i_vbeln TYPE vbeln
                                  i_posnr TYPE posnr
                        RAISING cx_sy_sql_error.
ENDCLASS.


CLASS lcl_tree_event_receiver DEFINITION FINAL.
  PUBLIC SECTION.
*   double click item
    METHODS handle_double_click
                  FOR EVENT node_double_click OF cl_gui_alv_tree_simple
      IMPORTING index_outtab
                  grouplevel.
*   Drag
    METHODS handle_on_drag
                  FOR EVENT on_drag OF cl_gui_alv_tree_simple
      IMPORTING drag_drop_object
                  fieldname
                  index_outtab
                  grouplevel.
ENDCLASS.</include_source>
   </include>
   <include NAME="LZNAOCFG_DEAL_QUANTITIESI01" VARCL="X" SUBC="I" APPL="S" LEVL="740" RMAND="200" RLOAD="E" UCCHECK="X">
    <include_source>*&amp;---------------------------------------------------------------------*
*&amp;  Include           LZMXOCFG_SALES_QUOTAI01
*&amp;---------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*&amp;      Module  USER_COMMAND_0100  INPUT
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_0100 INPUT.
  gv_save_ok_code = gv_ok_code.
  CLEAR gv_ok_code.
  CASE gv_save_ok_code.
*   Exit program
    WHEN gc_fcode_back OR
         gc_fcode_end  OR
         gc_fcode_esc.
      CALL METHOD go_grid-&gt;free.
      CALL METHOD go_tree-&gt;free.
      CALL METHOD go_custom_container-&gt;free.
      LEAVE TO SCREEN 0.
    WHEN OTHERS.
      cl_gui_cfw=&gt;dispatch(
*        IMPORTING
*          return_code =     &quot; Return Code
      ).
  ENDCASE.
ENDMODULE.</include_source>
   </include>
   <include NAME="LZNAOCFG_DEAL_QUANTITIESO01" VARCL="X" SUBC="I" APPL="S" LEVL="740" RMAND="200" RLOAD="E" UCCHECK="X">
    <include_source>*&amp;---------------------------------------------------------------------*
*&amp;  Include           LZNAOCFG_DEAL_QUANTITIESO01
*&amp;---------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*&amp;      Module  STATUS_0100  OUTPUT
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE status_0100 OUTPUT.
  SET PF-STATUS &apos;100&apos;.
  SET TITLEBAR &apos;100&apos;.
ENDMODULE.
*&amp;---------------------------------------------------------------------*
*&amp;      Module  TREE_AND_DOCKING  OUTPUT
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE tree_and_docking OUTPUT.
  IF go_docking_container IS INITIAL.
    go_docking_container = NEW cl_gui_docking_container(
*        parent                      =
         repid                       = sy-repid
         dynnr                       = &apos;0100&apos;
*        side                        = DOCK_AT_LEFT
         extension                   = 1000
*        style                       =
*        lifetime                    = LIFETIME_DEFAULT
*        caption                     =
*        metric                      = 0
*        ratio                       =
*        no_autodef_progid_dynnr     =
*        name                        =
    ).

    go_tree_listener = NEW lcl_tree_event_receiver( ).
    go_tree = NEW cl_gui_alv_tree_simple(
*        i_lifetime                  =
         i_parent                    = go_docking_container
*        i_shellstyle                =
*        i_node_selection_mode       = CL_GUI_COLUMN_TREE=&gt;NODE_SEL_MODE_SINGLE
*        i_hide_selection            =
         i_item_selection            = abap_false
*        i_no_toolbar                =
*        i_no_html_header            =
*        i_print                     =
    ).


    go_api ?= go_services-&gt;get_api( ).
    TRY .
        DATA(gt_fieldcat) = go_api-&gt;get_field_catalog( i_structure_name = &apos;ZNAOCS_DEAL_QTY_DETAIL&apos; ).
      CATCH cx_bapi_error.
        CLEAR gt_fieldcat.
    ENDTRY.

    lcl_services=&gt;hide_fields( CHANGING ct_fieldcat = gt_fieldcat ).
    DATA(gt_header) = lcl_services=&gt;set_header( ).
    DATA(gt_sort) = lcl_services=&gt;set_sort( ).
    go_dragdrop_tree-&gt;get_handle( IMPORTING handle = gw_layout_tree-s_dragdrop-row_ddid ).
    go_tree-&gt;column_optimize(
*      EXPORTING
*        i_start_column         =     &quot; First Column to Optimize
*        i_end_column           =     &quot; Last Column to Optimize
*        i_include_heading      = &apos;X&apos;    &quot; Include Heading
*      EXCEPTIONS
*        start_column_not_found = 1
*        end_column_not_found   = 2
*        others                 = 3
    ).
    IF sy-subrc &lt;&gt; 0.
      MESSAGE x534(0k).
    ENDIF.

    go_tree-&gt;set_table_for_first_display(
       EXPORTING
*        i_structure_name     =     &quot; Internal Output Table Structure Name
*        is_variant           =     &quot; Layout
*        i_save               =     &quot; Save Layout
*        i_default            = &apos;X&apos;    &quot; Default Display Variant
         is_layout            = gw_layout_tree    &quot; Layout Structure
*        it_special_groups    =     &quot; Field Groups
         it_list_commentary   = gt_header    &quot; Header Information
*        i_logo               =     &quot; Logo
*        i_background_id      =     &quot; HTML Background
*        it_toolbar_excluding =     &quot; Excluded Toolbar Standard Functions
*        it_grouplevel_layout =     &quot; Node Layout of Group Levels
*        it_except_qinfo      =     &quot; Quickinfos for Exceptions
      CHANGING
        it_outtab            =  gt_deal_qty   &quot; Output Table
        it_fieldcatalog      =  gt_fieldcat   &quot; Field Catalog
*        it_filter            =     &quot; Filter Criteria (not yet Implemented)
        it_sort              =  gt_sort   &quot; Sort Criteria
    ).

    lcl_services=&gt;register_events( EXPORTING io_tree = go_tree ).
    SET HANDLER: go_tree_listener-&gt;handle_double_click FOR go_tree,
                 go_tree_listener-&gt;handle_on_drag FOR go_tree.
  ENDIF.
ENDMODULE.
*&amp;---------------------------------------------------------------------*
*&amp;      Module  ALV_DISPLAY  OUTPUT
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE alv_display OUTPUT.
  IF go_custom_container IS INITIAL.
    go_custom_container = NEW cl_gui_custom_container(
*        parent                      =
        container_name              = &apos;CC_CONSUMPTION&apos;
*        style                       =
*        lifetime                    = LIFETIME_DEFAULT
*        repid                       =
*        dynnr                       =
*        no_autodef_progid_dynnr     =
    ).
  ENDIF.

  IF go_grid IS INITIAL.
    DATA(gt_grid_sort) = lcl_services=&gt;set_sort_grid( ).

    go_grid = NEW cl_gui_alv_grid(
*        i_shellstyle      = 0
*        i_lifetime        =
        i_parent          = go_custom_container
*        i_appl_events     = SPACE
*        i_parentdbg       =
*        i_applogparent    =
*        i_graphicsparent  =
*        i_name            =
*        i_fcat_complete   = SPACE
    ).

    gw_layout_alv-cwidth_opt = abap_true.
    go_dragdrop_alv-&gt;get_handle( IMPORTING handle = gw_layout_alv-s_dragdrop-row_ddid ).

    go_grid-&gt;set_table_for_first_display(
       EXPORTING
*        i_buffer_active               =     &quot; Buffering Active
*        i_bypassing_buffer            =     &quot; Switch Off Buffer
*        i_consistency_check           =     &quot; Starting Consistency Check for Interface Error Recognition
         i_structure_name              =  &apos;ZNAOCS_DEAL_QTY_CONSUMPTION&apos;   &quot; Internal Output Table Structure Name
*        is_variant                    =     &quot; Layout
*        i_save                        =     &quot; Save Layout
*        i_default                     = &apos;X&apos;    &quot; Default Display Variant
         is_layout                     =  gw_layout_alv   &quot; Layout
*        is_print                      =     &quot; Print Control
*        it_special_groups             =     &quot; Field Groups
*        it_toolbar_excluding          =     &quot; Excluded Toolbar Standard Functions
*        it_hyperlink                  =     &quot; Hyperlinks
*        it_alv_graphics               =     &quot; Table of Structure DTC_S_TC
*        it_except_qinfo               =     &quot; Table for Exception Quickinfo
*        ir_salv_adapter               =     &quot; Interface ALV Adapter
      CHANGING
        it_outtab                     =  gt_consumption_dsp      &quot; Output Table
*        it_fieldcatalog               =     &quot; Field Catalog
        it_sort                       =  gt_grid_sort   &quot; Sort Criteria
*        it_filter                     =     &quot; Filter Criteria
      EXCEPTIONS
        invalid_parameter_combination = 1
        program_error                 = 2
        too_many_lines                = 3
        OTHERS                        = 4
    ).
    IF sy-subrc &lt;&gt; 0.
      MESSAGE x534(0k).
    ENDIF.
    cl_gui_control=&gt;set_focus(
      EXPORTING
        control           =  go_grid   &quot; Control
      EXCEPTIONS
        cntl_error        = 1
        cntl_system_error = 2
        OTHERS            = 3
    ).
    IF sy-subrc &lt;&gt; 0.
      MESSAGE x534(0k).
    ENDIF.
    cl_gui_cfw=&gt;flush(
      EXCEPTIONS
        cntl_system_error = 1
        cntl_error        = 2
        OTHERS            = 3
    ).
    IF sy-subrc &lt;&gt; 0.
      MESSAGE x534(0k).
    ENDIF.
  ENDIF.

  IF gv_new = abap_true.
    gv_new = abap_false.
    gw_layout_alv-grid_title = lcl_services=&gt;set_booked_qty_title( ).
    go_grid-&gt;set_table_for_first_display(
       EXPORTING
         i_structure_name              =  &apos;ZNAOCS_DEAL_QTY_CONSUMPTION&apos;   &quot; Internal Output Table Structure Name
         is_layout                     =  gw_layout_alv   &quot; Layout
      CHANGING
        it_outtab                     =  gt_consumption_dsp      &quot; Output Table
        it_sort                       =  gt_grid_sort   &quot; Sort Criteria
      EXCEPTIONS
        invalid_parameter_combination = 1
        program_error                 = 2
        too_many_lines                = 3
        OTHERS                        = 4
    ).
    IF sy-subrc &lt;&gt; 0.
      MESSAGE x534(0k).
    ENDIF.
    cl_gui_control=&gt;set_focus(
      EXPORTING
        control           =  go_grid   &quot; Control
      EXCEPTIONS
        cntl_error        = 1
        cntl_system_error = 2
        OTHERS            = 3
    ).
    IF sy-subrc &lt;&gt; 0.
      MESSAGE x534(0k).
    ENDIF.
    cl_gui_cfw=&gt;flush(
      EXCEPTIONS
        cntl_system_error = 1
        cntl_error        = 2
        OTHERS            = 3
    ).
    IF sy-subrc &lt;&gt; 0.
      MESSAGE x534(0k).
    ENDIF.
  ENDIF.
ENDMODULE.</include_source>
   </include>
   <include NAME="LZNAOCFG_DEAL_QUANTITIESP01" VARCL="X" SUBC="I" APPL="S" LEVL="740" RMAND="200" RLOAD="E" UCCHECK="X">
    <include_source>*&amp;---------------------------------------------------------------------*
*&amp;  Include           LZNAOCFG_DEAL_QUANTITIESP01
*&amp;---------------------------------------------------------------------*
CLASS lcl_services IMPLEMENTATION.
  METHOD sellist2query.
    DATA: ls_attr     TYPE string,
          ls_oper     TYPE string,
          ls_value    TYPE string,
          lv_link     TYPE vsconj,
          lo_expr     TYPE REF TO if_os_query_filter_expr,
          lo_new_expr TYPE REF TO if_os_query_filter_expr.

    CLEAR ro_query.

    TRY .
        DATA(lo_query_mng) = cl_os_system=&gt;get_query_manager( ).
        ro_query ?= lo_query_mng-&gt;create_query( ).

        LOOP AT it_sellist ASSIGNING FIELD-SYMBOL(&lt;lw_sellist&gt;).
          AT NEW viewfield.
            IF it_exceptions IS SUPPLIED.
              READ TABLE it_exceptions TRANSPORTING NO FIELDS WITH KEY table_line = &lt;lw_sellist&gt;-viewfield.
              IF sy-subrc = 0.
                CONTINUE.
              ENDIF.
            ENDIF.
            CLEAR lv_link.
            ls_attr  = &lt;lw_sellist&gt;-viewfield.
            ls_oper  = &lt;lw_sellist&gt;-operator.
            ls_value = &lt;lw_sellist&gt;-value.
            lo_new_expr = ro_query-&gt;if_os_query_expr_factory~create_operator_expr(
                           i_attr1                     = ls_attr
                           i_operator                  = ls_oper
                           i_val                       = ls_value
*                          i_val_w_quotes              =
*                          i_idx                       =
*                          i_attr2                     =
                        ).
            IF &lt;lw_sellist&gt;-negation IS NOT INITIAL.
              lo_new_expr = ro_query-&gt;if_os_query_expr_factory~create_not_expr( i_expr = lo_new_expr ).
            ENDIF.
            lv_link = &lt;lw_sellist&gt;-and_or.
            IF lo_expr IS INITIAL.
              lo_expr = lo_new_expr.
            ELSE.
              lo_expr = ro_query-&gt;if_os_query_expr_factory~create_and_expr(
                            i_expr1 = lo_expr
                            i_expr2 = lo_new_expr
                        ).
            ENDIF.
            CONTINUE.
          ENDAT.
          ls_attr  = &lt;lw_sellist&gt;-viewfield.
          ls_oper  = &lt;lw_sellist&gt;-operator.
          ls_value = &lt;lw_sellist&gt;-value.
          lo_new_expr = ro_query-&gt;if_os_query_expr_factory~create_operator_expr(
                  i_attr1                     = ls_attr
                  i_operator                  = ls_oper
                  i_val                       = ls_value
*                  i_val_w_quotes              =
*                  i_idx                       =
*                  i_attr2                     =
              ).
          CASE lv_link.
            WHEN &apos;OR&apos;.
              lo_expr = ro_query-&gt;if_os_query_expr_factory~create_or_expr(
                              i_expr1 = lo_expr
                              i_expr2 = lo_new_expr
                          ).
            WHEN &apos;AND&apos;.
              lo_expr = ro_query-&gt;if_os_query_expr_factory~create_and_expr(
                            i_expr1 = lo_expr
                            i_expr2 = lo_new_expr
                        ).
            WHEN OTHERS.
          ENDCASE.
        ENDLOOP.
        ro_query-&gt;if_os_query~set_filter_expr( i_filter_expr = lo_expr ).
      CATCH cx_os_query_expr_fact_error.
        RETURN.
    ENDTRY.
  ENDMETHOD.


  METHOD hide_fields.


    LOOP AT ct_fieldcat ASSIGNING FIELD-SYMBOL(&lt;lw_fieldcat&gt;).
      IF &lt;lw_fieldcat&gt;-fieldname = &apos;MANDT&apos; OR &lt;lw_fieldcat&gt;-fieldname = &apos;NAME1&apos;.
        &lt;lw_fieldcat&gt;-no_out = abap_true.
        &lt;lw_fieldcat&gt;-key    = abap_false.
      ENDIF.
    ENDLOOP.
  ENDMETHOD.


  METHOD set_header.

    APPEND INITIAL LINE TO rt_header ASSIGNING FIELD-SYMBOL(&lt;lw_header&gt;).
    &lt;lw_header&gt;-typ = &apos;H&apos;.
    &lt;lw_header&gt;-info = &apos;Deal Quantities Management&apos;(H01).
  ENDMETHOD.


  METHOD set_sort.

    APPEND INITIAL LINE TO rt_sort ASSIGNING FIELD-SYMBOL(&lt;lw_sort&gt;).
    &lt;lw_sort&gt;-spos = &apos;1&apos;.
    &lt;lw_sort&gt;-fieldname = &apos;SPART&apos;.
    &lt;lw_sort&gt;-up = abap_false.
    &lt;lw_sort&gt;-subtot = abap_false.
    APPEND INITIAL LINE TO rt_sort ASSIGNING &lt;lw_sort&gt;.
    &lt;lw_sort&gt;-spos = &apos;2&apos;.
    &lt;lw_sort&gt;-fieldname = &apos;NAME1&apos;.
    &lt;lw_sort&gt;-up = abap_false.
    &lt;lw_sort&gt;-subtot = abap_false.
    APPEND INITIAL LINE TO rt_sort ASSIGNING &lt;lw_sort&gt;.
    &lt;lw_sort&gt;-spos = &apos;3&apos;.
    &lt;lw_sort&gt;-fieldname = &apos;ZZDEAL_CODE&apos;.
    &lt;lw_sort&gt;-up = abap_true.
    &lt;lw_sort&gt;-subtot = abap_false.
  ENDMETHOD.


  METHOD set_sort_grid.
    APPEND INITIAL LINE TO rt_sort ASSIGNING FIELD-SYMBOL(&lt;lw_sort&gt;).
    &lt;lw_sort&gt;-spos = &apos;1&apos;.
    &lt;lw_sort&gt;-fieldname = &apos;VBELN&apos;.
    &lt;lw_sort&gt;-up = abap_false.
    &lt;lw_sort&gt;-subtot = abap_false.
    APPEND INITIAL LINE TO rt_sort ASSIGNING &lt;lw_sort&gt;.
    &lt;lw_sort&gt;-spos = &apos;2&apos;.
    &lt;lw_sort&gt;-fieldname = &apos;POSNR&apos;.
    &lt;lw_sort&gt;-up = abap_false.
    &lt;lw_sort&gt;-subtot = abap_false.
  ENDMETHOD.


  METHOD register_events.
    DATA  lt_events TYPE cntl_simple_events.

    APPEND INITIAL LINE TO lt_events ASSIGNING FIELD-SYMBOL(&lt;lw_event&gt;).
    &lt;lw_event&gt;-eventid    = cl_gui_column_tree=&gt;eventid_node_double_click.
    &lt;lw_event&gt;-appl_event = abap_true.
    APPEND INITIAL LINE TO lt_events ASSIGNING &lt;lw_event&gt;.
    &lt;lw_event&gt;-eventid    = cl_gui_column_tree=&gt;eventid_expand_no_children.
    APPEND INITIAL LINE TO lt_events ASSIGNING &lt;lw_event&gt;.
    &lt;lw_event&gt;-eventid   = cl_gui_column_tree=&gt;eventid_header_click.

    io_tree-&gt;set_registered_events(
      EXPORTING
        events                    =   lt_events  &quot; Event Table
      EXCEPTIONS
        cntl_error                = 1
        cntl_system_error         = 2
        illegal_event_combination = 3
        OTHERS                    = 4
    ).
    IF sy-subrc &lt;&gt; 0.
      MESSAGE x534(0k).
    ENDIF.
  ENDMETHOD.

  METHOD set_new_consumptions.
    FIELD-SYMBOLS  &lt;lw_consumption_dsp&gt; TYPE znaocs_deal_qty_consumption.

    CLEAR gt_consumption_dsp.

    READ TABLE gt_deal_qty INDEX i_index ASSIGNING FIELD-SYMBOL(&lt;lw_deal_qty&gt;).
    IF sy-subrc = 0.
      gw_deal_qty = &lt;lw_deal_qty&gt;.
      ref_date = &lt;lw_deal_qty&gt;-enddt.
      LOOP AT gt_consumption ASSIGNING FIELD-SYMBOL(&lt;lw_consumption&gt;)
        WHERE spart = &lt;lw_deal_qty&gt;-spart
          AND kunnr = &lt;lw_deal_qty&gt;-kunnr
          AND zzdeal_code = &lt;lw_deal_qty&gt;-zzdeal_code
          AND enddt = &lt;lw_deal_qty&gt;-enddt.
        APPEND INITIAL LINE TO gt_consumption_dsp ASSIGNING &lt;lw_consumption_dsp&gt;.
        MOVE-CORRESPONDING &lt;lw_consumption&gt; TO &lt;lw_consumption_dsp&gt;.
      ENDLOOP.
    ENDIF.

    IF gt_consumption_dsp IS INITIAL.
      CLEAR gw_deal_qty.
*      MESSAGE i000(0k) WITH &apos;No consumption found.&apos;(M01) space space space.
      APPEND INITIAL LINE TO gt_consumption_dsp.
    ENDIF.
    gv_new = abap_true.
  ENDMETHOD.


  METHOD set_booked_qty_title.

    CLEAR r_title.

    DATA(lo_manager) = NEW zcl_naoc_deal_qty_manager(
        i_spart       = gw_deal_qty-spart
        i_kunnr       = gw_deal_qty-kunnr
        i_zzdeal_code = gw_deal_qty-zzdeal_code
        i_date        = ref_date
    ).

    TRY .
        WRITE lo_manager-&gt;get_booked_qty( ) UNIT lo_manager-&gt;uom TO r_title.
      CATCH cx_bapi_error.
        RETURN.
    ENDTRY.

    SHIFT r_title LEFT DELETING LEADING space.

    CONCATENATE &apos;Booked Quantity:&apos;(H02) r_title lo_manager-&gt;uom INTO r_title SEPARATED BY space.

  ENDMETHOD.

  METHOD get_api.

    ro_api = NEW lcl_api( ).
  ENDMETHOD.

  METHOD get_db.

    ro_db = NEW lcl_db( ).
  ENDMETHOD.

  METHOD get_customer_name.
    DATA  lo_api TYPE REF TO lcl_api.

    CLEAR r_name1.

    lo_api ?= me-&gt;get_api( ).

    TRY .
        DATA(lw_address) = lo_api-&gt;customer_address_data( i_kunnr = i_kunnr ).
      CATCH cx_bapi_error.
        RETURN.
    ENDTRY.

    r_name1 = lw_address-name.

  ENDMETHOD.
ENDCLASS.


*&amp;---------------------------------------------------------------------*
*&amp;       Class (Implementation)  lcl_tree_event_receiver
*&amp;---------------------------------------------------------------------*
*        Text
*----------------------------------------------------------------------*
CLASS lcl_tree_event_receiver IMPLEMENTATION.
* handle double_click
  METHOD handle_double_click.
    CHECK NOT index_outtab IS INITIAL.

    lcl_services=&gt;set_new_consumptions( EXPORTING i_index = index_outtab
                                                  i_grouplevel = grouplevel   ).
  ENDMETHOD.
* Drag &amp; Drop
  METHOD handle_on_drag.
    CHECK NOT index_outtab IS INITIAL.

    lcl_services=&gt;set_new_consumptions( EXPORTING i_index = index_outtab
                                                  i_grouplevel = grouplevel   ).

    cl_gui_cfw=&gt;set_new_ok_code(
      EXPORTING
        new_code =  gc_fcode_entr   &quot; New OK_CODE
*     IMPORTING
*       rc       =     &quot; Return code
    ).
  ENDMETHOD.
ENDCLASS.               &quot;lcl_tree_event_receiver


CLASS lcl_api IMPLEMENTATION.
  METHOD get_field_catalog.
    DATA: ls_message TYPE string,
          lt_return  TYPE bapiret2_t.

    CLEAR rt_fieldcat.

    CALL FUNCTION &apos;LVC_FIELDCATALOG_MERGE&apos;
      EXPORTING
*       I_BUFFER_ACTIVE        =
        i_structure_name       = i_structure_name
*       I_CLIENT_NEVER_DISPLAY = &apos;X&apos;
*       I_BYPASSING_BUFFER     =
*       I_INTERNAL_TABNAME     =
      CHANGING
        ct_fieldcat            = rt_fieldcat
      EXCEPTIONS
        inconsistent_interface = 1
        program_error          = 2
        OTHERS                 = 3.
    IF sy-subrc &lt;&gt; 0.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4 INTO ls_message.
      APPEND INITIAL LINE TO lt_return ASSIGNING FIELD-SYMBOL(&lt;lw_return&gt;).
      &lt;lw_return&gt;-id         = sy-msgid.
      &lt;lw_return&gt;-type       = sy-msgty.
      &lt;lw_return&gt;-number     = sy-msgno.
      &lt;lw_return&gt;-message    = ls_message.
      &lt;lw_return&gt;-message_v1 = sy-msgv1.
      &lt;lw_return&gt;-message_v2 = sy-msgv2.
      &lt;lw_return&gt;-message_v3 = sy-msgv3.
      &lt;lw_return&gt;-message_v4 = sy-msgv4.
      RAISE EXCEPTION TYPE cx_bapi_error
        EXPORTING
          status = lt_return.
    ENDIF.
  ENDMETHOD.

  METHOD customer_address_data.
    DATA: ls_message TYPE string,
          lt_return  TYPE bapiret2_t,
          lw_return1 TYPE bapiret1.

    CLEAR rw_address.
    CALL FUNCTION &apos;BAPI_CUSTOMER_GETDETAIL2&apos;
      EXPORTING
        customerno      = i_kunnr
*       COMPANYCODE     =
      IMPORTING
        customeraddress = rw_address
*       CUSTOMERGENERALDETAIL       =
*       CUSTOMERCOMPANYDETAIL       =
        return          = lw_return1
*     TABLES
*       CUSTOMERBANKDETAIL          =
*       CUSTOMERIBANDETAIL          =
*       CUSTOMERSEPADETAIL          =
      .
    IF lw_return1 IS NOT INITIAL.
      APPEND INITIAL LINE TO lt_return ASSIGNING FIELD-SYMBOL(&lt;lw_return&gt;).
      MOVE-CORRESPONDING lw_return1 TO &lt;lw_return&gt;.
      RAISE EXCEPTION TYPE cx_bapi_error
        EXPORTING
          status = lt_return.
    ENDIF.

  ENDMETHOD.
ENDCLASS.


CLASS lcl_db IMPLEMENTATION.
  METHOD check_vbup.

    SELECT COUNT(*)
      FROM vbup
      INTO @DATA(lv_counter)
     WHERE vbeln = @i_vbeln
       AND posnr = @i_posnr.
    IF lv_counter = 0.
      RAISE EXCEPTION TYPE cx_sy_sql_error.
    ENDIF.
  ENDMETHOD.
ENDCLASS.</include_source>
   </include>
   <include NAME="LZNAOCFG_DEAL_QUANTITIESTOP" VARCL="X" DBAPL="S" DBNA="D$" SUBC="I" APPL="S" RMAND="200" FIXPT="X" LDBNAME="D$S" UCCHECK="X">
    <include_source>FUNCTION-POOL znaocfg_deal_quantities.          &quot;MESSAGE-ID ..

INCLUDE lznaocfg_deal_quantitiesd01.           &quot; Local class definition

TYPE-POOLS  slis.

CONSTANTS: gc_fcode_back LIKE sy-ucomm VALUE &apos;BACK&apos;,
           gc_fcode_end  LIKE sy-ucomm VALUE &apos;END&apos;,
           gc_fcode_entr LIKE sy-ucomm VALUE &apos;ENTR&apos;,
           gc_fcode_esc  LIKE sy-ucomm VALUE &apos;ESC&apos;.


DATA: gv_new               TYPE abap_bool,
      gv_ok_code           TYPE syucomm,
      gv_save_ok_code      TYPE syucomm,
      gt_deal_qty          TYPE znaoctt_deal_qty_detail,
      gt_deal_qty_plain    TYPE znaoctt_plain_view,
      gt_consumption       TYPE STANDARD TABLE OF znaoct_qtd_ctrld,
      gt_consumption_dsp   TYPE znaoctt_deal_qty_consumption,
      gw_deal_qty          TYPE znaocs_deal_qty_detail,
      gw_layout_tree       TYPE lvc_s_layo,
      gw_layout_alv        TYPE lvc_s_layo,
      gw_toolbar           TYPE stb_button,
      go_services          TYPE REF TO lcl_services,
      go_api               TYPE REF TO lcl_api,
      go_dragdrop_tree     TYPE REF TO cl_dragdrop,
      go_dragdrop_alv      TYPE REF TO cl_dragdrop,
      go_docking_container TYPE REF TO cl_gui_docking_container,
      go_custom_container  TYPE REF TO cl_gui_custom_container,
      go_grid              TYPE REF TO cl_gui_alv_grid,
      go_tree_listener     TYPE REF TO lcl_tree_event_receiver,
      go_tree              TYPE REF TO cl_gui_alv_tree_simple.

DEFINE m_add_sort_column.
  TRY .
      o_sort = o_sorts-&gt;add_sort(
        EXPORTING
          columnname         =  &amp;1   &quot; ALV Control: Field Name of Internal Table Field
*              position           =
*              sequence           =     &quot; Sort Sequence
              subtotal       =  &amp;2    &quot; Boolean Variable (X=True, Space=False)
*              group              =     &quot; Control Break
*              obligatory         = IF_SALV_C_BOOL_SAP=&gt;FALSE    &quot; Boolean Variable (X=True, Space=False)
      ).
      o_sort-&gt;set_sequence( value = if_salv_c_sort=&gt;sort_up ).
    CATCH cx_salv_not_found
          cx_salv_existing
          cx_salv_data_error.
      CLEAR o_sort.
  ENDTRY.
END-OF-DEFINITION.</include_source>
   </include>
  </includeprograms>
  <functionmodules>
   <functionmodule NAME="ZNAOC_DEAL_QTY_DISPLAY" STEXT="Shows Sales quota comsumption details">
    <importing PARAMETER="IT_SELLIST" REFERENCE="X" TYP="SCPRVIMSELLIST"/>
    <documentation PARAMETER="IT_SELLIST" KIND="P" STEXT="Selection arguments" INDEX=" 001"/>
    <fm_source_new>DATA: o_deal_qty    TYPE REF TO zcl_naoct_qtd_ctrlh,
        o_consumption TYPE REF TO zcl_naoct_qtd_ctrld.

  go_services = NEW lcl_services( ).

  DATA(o_query) = lcl_services=&gt;sellist2query( it_sellist = it_sellist ).

  DATA(t_entries) = zca_naoct_qtd_ctrlh=&gt;agent-&gt;if_os_ca_persistency~get_persistent_by_query(
                                                      i_query                = o_query
                                                  ).
  LOOP AT t_entries ASSIGNING FIELD-SYMBOL(&lt;o_entry&gt;).
    o_deal_qty ?= &lt;o_entry&gt;.
    APPEND INITIAL LINE TO gt_deal_qty ASSIGNING FIELD-SYMBOL(&lt;w_deal_qty&gt;).
    &lt;w_deal_qty&gt;-spart = o_deal_qty-&gt;get_spart( ).
    &lt;w_deal_qty&gt;-kunnr = o_deal_qty-&gt;get_kunnr( ).
    &lt;w_deal_qty&gt;-zzdeal_code = o_deal_qty-&gt;get_zzdeal_code( ).
    &lt;w_deal_qty&gt;-enddt = o_deal_qty-&gt;get_enddt( ).
    &lt;w_deal_qty&gt;-begdt = o_deal_qty-&gt;get_begdt( ).
    &lt;w_deal_qty&gt;-uom   = o_deal_qty-&gt;get_uom( ).
    &lt;w_deal_qty&gt;-qtd_allowed = o_deal_qty-&gt;get_qtd_allowed( ).
    &lt;w_deal_qty&gt;-credat = o_deal_qty-&gt;get_credat( ).
    &lt;w_deal_qty&gt;-creusr = o_deal_qty-&gt;get_creusr( ).
    &lt;w_deal_qty&gt;-cretim = o_deal_qty-&gt;get_cretim( ).
    &lt;w_deal_qty&gt;-aenam = o_deal_qty-&gt;get_aenam( ).
    &lt;w_deal_qty&gt;-aedat = o_deal_qty-&gt;get_aedat( ).
    &lt;w_deal_qty&gt;-aetim = o_deal_qty-&gt;get_aetim( ).
    &lt;w_deal_qty&gt;-chnusr = o_deal_qty-&gt;get_chnusr( ).
    &lt;w_deal_qty&gt;-name1 = go_services-&gt;get_customer_name( i_kunnr = &lt;w_deal_qty&gt;-kunnr ).
  ENDLOOP.

  CLEAR t_entries.
  t_entries = zca_naoct_qtd_ctrld=&gt;agent-&gt;if_os_ca_persistency~get_persistent_by_query(
                                                      i_query                = o_query
                                                  ).
  LOOP AT t_entries ASSIGNING &lt;o_entry&gt;.
    o_consumption ?= &lt;o_entry&gt;.
    IF o_consumption-&gt;get_rejected( ) = abap_true.
      CONTINUE.
    ENDIF.
    APPEND INITIAL LINE TO gt_consumption ASSIGNING FIELD-SYMBOL(&lt;w_consumption&gt;).
    &lt;w_consumption&gt;-spart = o_consumption-&gt;get_spart( ).
    &lt;w_consumption&gt;-kunnr = o_consumption-&gt;get_kunnr( ).
    &lt;w_consumption&gt;-zzdeal_code = o_consumption-&gt;get_zzdeal_code( ).
    &lt;w_consumption&gt;-enddt = o_consumption-&gt;get_enddt( ).
    &lt;w_consumption&gt;-vbeln = o_consumption-&gt;get_vbeln( ).
    &lt;w_consumption&gt;-posnr = o_consumption-&gt;get_posnr( ).
    &lt;w_consumption&gt;-qtd_ordered = o_consumption-&gt;get_qtd_ordered( ).
  ENDLOOP.

  lcl_services=&gt;set_new_consumptions( EXPORTING i_index = 1
                                                i_grouplevel = space   ).

  go_dragdrop_tree  = NEW cl_dragdrop( ).
  go_dragdrop_tree-&gt;add(
    EXPORTING
      flavor          =  &apos;LINE&apos;   &quot; Name of Class/Type
      dragsrc         =  abap_true   &quot; ? DragSource
      droptarget      =  abap_false  &quot; ? DropTarget
      effect          = cl_dragdrop=&gt;move    &quot; ? Move/Copy
*      effect_in_ctrl  = USEDEFAULTEFFECT    &quot; ? Default Behavior for Drag and Drop Within a Control
    EXCEPTIONS
      already_defined = 1
      obj_invalid     = 2
      OTHERS          = 3
  ).
  IF sy-subrc &lt;&gt; 0.
    MESSAGE x534(0k).
  ENDIF.

  go_dragdrop_alv = NEW cl_dragdrop( ).
  go_dragdrop_alv-&gt;add(
    EXPORTING
      flavor          =  &apos;LINE&apos;   &quot; Name of Class/Type
      dragsrc         =  abap_false   &quot; ? DragSource
      droptarget      =  abap_true   &quot; ? DropTarget
      effect          =  cl_dragdrop=&gt;move    &quot; ? Move/Copy
*      effect_in_ctrl  = USEDEFAULTEFFECT    &quot; ? Default Behavior for Drag and Drop Within a Control
    EXCEPTIONS
      already_defined = 1
      obj_invalid     = 2
      OTHERS          = 3
  ).
  IF sy-subrc &lt;&gt; 0.
    MESSAGE x534(0k).
  ENDIF.

  CALL SCREEN 100.</fm_source_new>
    <functionModuleDocumentation/>
   </functionmodule>
   <functionmodule NAME="ZNAOC_DEAL_QTY_PLAIN_DISPLAY" STEXT="Shows Sales quota comsumption details">
    <importing PARAMETER="IT_SELLIST" REFERENCE="X" TYP="SCPRVIMSELLIST"/>
    <documentation PARAMETER="IT_SELLIST" KIND="P" STEXT="Selection arguments" INDEX=" 001"/>
    <fm_source_new>CONSTANTS  c_begdt TYPE viewfield VALUE &apos;BEGDT&apos;.
  DATA: o_deal_qty    TYPE REF TO zcl_naoct_qtd_ctrlh,
        o_consumption TYPE REF TO zcl_naoct_qtd_ctrld,
        lt_exceptions TYPE lcl_services=&gt;yt_fields.

  go_services = NEW lcl_services( ).

  DATA(o_query) = lcl_services=&gt;sellist2query( it_sellist = it_sellist ).

  DATA(t_entries) = zca_naoct_qtd_ctrlh=&gt;agent-&gt;if_os_ca_persistency~get_persistent_by_query(
                                                      i_query                = o_query
                                                  ).
  LOOP AT t_entries ASSIGNING FIELD-SYMBOL(&lt;o_entry&gt;).
    o_deal_qty ?= &lt;o_entry&gt;.
    APPEND INITIAL LINE TO gt_deal_qty ASSIGNING FIELD-SYMBOL(&lt;w_deal_qty&gt;).
    &lt;w_deal_qty&gt;-spart = o_deal_qty-&gt;get_spart( ).
    &lt;w_deal_qty&gt;-kunnr = o_deal_qty-&gt;get_kunnr( ).
    &lt;w_deal_qty&gt;-zzdeal_code = o_deal_qty-&gt;get_zzdeal_code( ).
    &lt;w_deal_qty&gt;-enddt = o_deal_qty-&gt;get_enddt( ).
    &lt;w_deal_qty&gt;-begdt = o_deal_qty-&gt;get_begdt( ).
    &lt;w_deal_qty&gt;-uom   = o_deal_qty-&gt;get_uom( ).
    &lt;w_deal_qty&gt;-qtd_allowed = o_deal_qty-&gt;get_qtd_allowed( ).
    &lt;w_deal_qty&gt;-credat = o_deal_qty-&gt;get_credat( ).
    &lt;w_deal_qty&gt;-creusr = o_deal_qty-&gt;get_creusr( ).
    &lt;w_deal_qty&gt;-cretim = o_deal_qty-&gt;get_cretim( ).
    &lt;w_deal_qty&gt;-aenam = o_deal_qty-&gt;get_aenam( ).
    &lt;w_deal_qty&gt;-aedat = o_deal_qty-&gt;get_aedat( ).
    &lt;w_deal_qty&gt;-aetim = o_deal_qty-&gt;get_aetim( ).
    &lt;w_deal_qty&gt;-chnusr = o_deal_qty-&gt;get_chnusr( ).
    &lt;w_deal_qty&gt;-name1 = go_services-&gt;get_customer_name( i_kunnr = &lt;w_deal_qty&gt;-kunnr ).
  ENDLOOP.
  SORT gt_deal_qty BY spart kunnr zzdeal_code enddt.

  CLEAR t_entries.
  APPEND c_begdt TO lt_exceptions.
  o_query = lcl_services=&gt;sellist2query( it_sellist = it_sellist
                                         it_exceptions = lt_exceptions ).
  t_entries = zca_naoct_qtd_ctrld=&gt;agent-&gt;if_os_ca_persistency~get_persistent_by_query(
                                                      i_query                = o_query
                                                  ).
  LOOP AT t_entries ASSIGNING &lt;o_entry&gt;.
    o_consumption ?= &lt;o_entry&gt;.
    IF o_consumption-&gt;get_rejected( ) = abap_true.
      CONTINUE.
    ENDIF.
    APPEND INITIAL LINE TO gt_consumption ASSIGNING FIELD-SYMBOL(&lt;w_consumption&gt;).
    &lt;w_consumption&gt;-spart = o_consumption-&gt;get_spart( ).
    &lt;w_consumption&gt;-kunnr = o_consumption-&gt;get_kunnr( ).
    &lt;w_consumption&gt;-zzdeal_code = o_consumption-&gt;get_zzdeal_code( ).
    &lt;w_consumption&gt;-enddt = o_consumption-&gt;get_enddt( ).
    &lt;w_consumption&gt;-vbeln = o_consumption-&gt;get_vbeln( ).
    &lt;w_consumption&gt;-posnr = o_consumption-&gt;get_posnr( ).
    &lt;w_consumption&gt;-qtd_ordered = o_consumption-&gt;get_qtd_ordered( ).
  ENDLOOP.
  SORT gt_consumption BY spart kunnr zzdeal_code enddt vbeln posnr.

  LOOP AT gt_deal_qty ASSIGNING &lt;w_deal_qty&gt;.
    APPEND INITIAL LINE TO gt_deal_qty_plain ASSIGNING FIELD-SYMBOL(&lt;w_deal_qty_plain&gt;).
    MOVE-CORRESPONDING &lt;w_deal_qty&gt; TO &lt;w_deal_qty_plain&gt;.
    READ TABLE gt_consumption ASSIGNING &lt;w_consumption&gt; WITH KEY spart       = &lt;w_deal_qty&gt;-spart
                                                                 kunnr       = &lt;w_deal_qty&gt;-kunnr
                                                                 zzdeal_code = &lt;w_deal_qty&gt;-zzdeal_code
                                                                 enddt       = &lt;w_deal_qty&gt;-enddt
     BINARY SEARCH.
    IF sy-subrc = 0.
      DATA(index) = sy-tabix + 1.
      MOVE-CORRESPONDING &lt;w_consumption&gt; TO &lt;w_deal_qty_plain&gt;.
      LOOP AT gt_consumption ASSIGNING &lt;w_consumption&gt; FROM index.
        IF &lt;w_consumption&gt;-spart       &lt;&gt; &lt;w_deal_qty&gt;-spart          OR
           &lt;w_consumption&gt;-kunnr       &lt;&gt; &lt;w_deal_qty&gt;-kunnr          OR
           &lt;w_consumption&gt;-zzdeal_code &lt;&gt; &lt;w_deal_qty&gt;-zzdeal_code OR
           &lt;w_consumption&gt;-enddt       &lt;&gt; &lt;w_deal_qty&gt;-enddt.
          EXIT.
        ENDIF.
        APPEND INITIAL LINE TO gt_deal_qty_plain ASSIGNING &lt;w_deal_qty_plain&gt;.
        MOVE-CORRESPONDING: &lt;w_deal_qty&gt;    TO &lt;w_deal_qty_plain&gt;,
                            &lt;w_consumption&gt; TO &lt;w_deal_qty_plain&gt;.
        CLEAR &lt;w_deal_qty_plain&gt;-qtd_allowed.
      ENDLOOP.
    ENDIF.
  ENDLOOP.

  DATA  v_line_color TYPE lvc_col.
  LOOP AT gt_deal_qty_plain ASSIGNING &lt;w_deal_qty_plain&gt;.
    IF v_line_color IS INITIAL OR v_line_color = 4.
      v_line_color = 2.
    ELSE.
      v_line_color = 4.
    ENDIF.
    APPEND INITIAL LINE TO &lt;w_deal_qty_plain&gt;-t_col ASSIGNING FIELD-SYMBOL(&lt;w_col&gt;).
    &lt;w_col&gt;-nokeycol  = abap_false.
    &lt;w_col&gt;-color-col = v_line_color.
    &lt;w_col&gt;-color-int = 0.
    &lt;w_col&gt;-color-inv = 0.
  ENDLOOP.

  TRY.
      cl_salv_table=&gt;factory(
        IMPORTING
          r_salv_table = DATA(o_table)
        CHANGING
          t_table = gt_deal_qty_plain ).
    CATCH cx_salv_msg.
      RETURN.
  ENDTRY.

  DATA: v_long   TYPE scrtext_l,
        v_medium TYPE scrtext_m,
        v_short  TYPE scrtext_s,
        o_sort   TYPE REF TO cl_salv_sort.

  DATA(o_columns)   = o_table-&gt;get_columns( ).
  DATA(o_sorts)     = o_table-&gt;get_sorts( ).
  DATA(o_functions) = o_table-&gt;get_functions( ).

  TRY .

      o_functions-&gt;set_all( value = if_salv_c_bool_sap=&gt;true ).

      o_columns-&gt;set_color_column( value = &apos;T_COL&apos; ).
      o_columns-&gt;set_column_position(
        EXPORTING
          columnname =  &apos;NAME1&apos;   &quot; ALV Control: Field Name of Internal Table Field
          position   =  3
      ).
      o_columns-&gt;set_optimize(
*          value = IF_SALV_C_BOOL_SAP~TRUE
      ).
      m_add_sort_column: &apos;SPART&apos;       if_salv_c_bool_sap=&gt;true,
                         &apos;KUNNR&apos;       if_salv_c_bool_sap=&gt;true,
                         &apos;NAME1&apos;       if_salv_c_bool_sap=&gt;false,
                         &apos;ZZDEAL_CODE&apos; if_salv_c_bool_sap=&gt;true,
                         &apos;ENDDT&apos;       if_salv_c_bool_sap=&gt;true,
                         &apos;BEGDT&apos;       if_salv_c_bool_sap=&gt;false,
                         &apos;UOM&apos;         if_salv_c_bool_sap=&gt;false,
                         &apos;CREDAT&apos;      if_salv_c_bool_sap=&gt;false,
                         &apos;CREUSR&apos;      if_salv_c_bool_sap=&gt;false,
                         &apos;CRETIM&apos;      if_salv_c_bool_sap=&gt;false,
                         &apos;AENAM&apos;       if_salv_c_bool_sap=&gt;false,
                         &apos;AEDAT&apos;       if_salv_c_bool_sap=&gt;false,
                         &apos;AETIM&apos;       if_salv_c_bool_sap=&gt;false,
                         &apos;CHNUSR&apos;      if_salv_c_bool_sap=&gt;false.

      DATA(o_column) = o_columns-&gt;get_column( columnname = &apos;QTD_ORDERED&apos;  ).
      v_short = v_medium = v_long = &apos;Ordered Quantity&apos;(H03).
      o_column-&gt;set_long_text( value = v_long ).
      o_column-&gt;set_medium_text( value = v_medium ).
      o_column-&gt;set_short_text( value = v_short ).
      o_column-&gt;set_zero(
          value = if_salv_c_bool_sap=&gt;false
      ).
      o_table-&gt;get_aggregations( )-&gt;add_aggregation(
        EXPORTING
          columnname         =  &apos;QTD_ORDERED&apos;   &quot; ALV Control: Field Name of Internal Table Field
          aggregation        =  if_salv_c_aggregation=&gt;total   &quot; Aggregation
*        RECEIVING
*          value              =     &quot; ALV: Aggregations
      ).
*        CATCH cx_salv_data_error.    &quot;
*        CATCH cx_salv_not_found.    &quot;
*        CATCH cx_salv_existing.    &quot; .
      o_column = o_columns-&gt;get_column( columnname = &apos;QTD_ALLOWED&apos;  ).
      o_column-&gt;set_zero(
          value = if_salv_c_bool_sap=&gt;false
      ).

      o_table-&gt;display( ).
    CATCH cx_salv_not_found
          cx_salv_data_error
          cx_salv_existing.
      RETURN.
  ENDTRY.</fm_source_new>
    <functionModuleDocumentation/>
   </functionmodule>
   <functionmodule NAME="ZNAOC_DEAL_QTY_CLEANING_UP" STEXT="Import a function module for versioning">
    <importing PARAMETER="IT_SELLIST" REFERENCE="X" TYP="SCPRVIMSELLIST"/>
    <exporting PARAMETER="ET_REMOVED" REFERENCE="X" TYP="ZNAOCTT_QTD_CTRLD"/>
    <documentation PARAMETER="IT_SELLIST" KIND="P" STEXT="Selection arguments" INDEX=" 001"/>
    <documentation PARAMETER="ET_REMOVED" KIND="P" STEXT="Table of ZNAOCT_QTD_CTRLD" INDEX=" 002"/>
    <fm_source_new>CONSTANTS  c_begdt TYPE viewfield VALUE &apos;BEGDT&apos;.
  DATA: o_consumption TYPE REF TO zcl_naoct_qtd_ctrld,
        o_db          TYPE REF TO lcl_db,
        lt_exceptions TYPE lcl_services=&gt;yt_fields,
        w_removed     TYPE znaoct_qtd_ctrld.

  go_services = NEW lcl_services( ).

  o_db ?= go_services-&gt;get_db( ).

  APPEND c_begdt TO lt_exceptions.
  DATA(o_query) = lcl_services=&gt;sellist2query( it_sellist = it_sellist
                                               it_exceptions = lt_exceptions ).

  DATA(t_entries) = zca_naoct_qtd_ctrld=&gt;agent-&gt;if_os_ca_persistency~get_persistent_by_query(
                                                      i_query                = o_query
                                                  ).
  LOOP AT t_entries ASSIGNING FIELD-SYMBOL(&lt;o_entry&gt;).
    o_consumption ?= &lt;o_entry&gt;.

    TRY .
        o_db-&gt;check_vbup(
          EXPORTING
            i_vbeln         = o_consumption-&gt;get_vbeln( )
            i_posnr         = o_consumption-&gt;get_posnr( )
        ).
      CATCH cx_os_object_not_found.
        CONTINUE.
      CATCH cx_sy_sql_error.
        TRY .
            w_removed-mandt = sy-mandt.
            w_removed-spart = o_consumption-&gt;get_spart( ).
            w_removed-kunnr = o_consumption-&gt;get_kunnr( ).
            w_removed-zzdeal_code = o_consumption-&gt;get_zzdeal_code( ).
            w_removed-enddt = o_consumption-&gt;get_enddt( ).
            w_removed-vbeln = o_consumption-&gt;get_vbeln( ).
            w_removed-posnr = o_consumption-&gt;get_posnr( ).
            w_removed-qtd_ordered = o_consumption-&gt;get_qtd_ordered( ).
            w_removed-rejected = o_consumption-&gt;get_rejected( ).
            INSERT w_removed INTO TABLE et_removed.
            CLEAR w_removed.

            zca_naoct_qtd_ctrld=&gt;agent-&gt;delete_persistent(
              EXPORTING
                i_spart                   =  o_consumption-&gt;get_spart( )   &quot; Business Key
                i_kunnr                   =  o_consumption-&gt;get_kunnr( )   &quot; Business Key
                i_zzdeal_code             =  o_consumption-&gt;get_zzdeal_code( )   &quot; Business Key
                i_enddt                   =  o_consumption-&gt;get_enddt( )   &quot; Business Key
                i_vbeln                   =  o_consumption-&gt;get_vbeln( )   &quot; Business Key
                i_posnr                   =  o_consumption-&gt;get_posnr( )   &quot; Business Key
            ).
          CATCH cx_os_object_not_existing
                cx_os_object_not_found.
            CONTINUE.
        ENDTRY.
    ENDTRY.
  ENDLOOP.
  IF et_removed IS NOT INITIAL.
    COMMIT WORK AND WAIT.
  ENDIF.</fm_source_new>
    <functionModuleDocumentation/>
   </functionmodule>
  </functionmodules>
 </FUGR>
 <MSAG ARBGB="ZNAOC" MASTERLANG="E" RESPUSER="META" STEXT="Order to Cash related messages for North America">
  <t100 SPRSL="E" ARBGB="ZNAOC" MSGNR="000" TEXT="&amp; &amp; &amp; &amp;"/>
  <t100 SPRSL="E" ARBGB="ZNAOC" MSGNR="001" TEXT="Deal code &amp; cannot be excluded because there is comsumption based on it."/>
  <t100 SPRSL="E" ARBGB="ZNAOC" MSGNR="002" TEXT="Dates overlapping in lines &amp; and &amp;."/>
  <t100 SPRSL="E" ARBGB="ZNAOC" MSGNR="003" TEXT="Expiration date greater than Effective date in line &amp;."/>
  <t100 SPRSL="E" ARBGB="ZNAOC" MSGNR="004" TEXT="Expiration date greater than Effective date."/>
  <t100 SPRSL="E" ARBGB="ZNAOC" MSGNR="005" TEXT="Unit cannot be changed because there is comsumption based on it."/>
  <t100 SPRSL="E" ARBGB="ZNAOC" MSGNR="006" TEXT="Internal error."/>
  <t100 SPRSL="E" ARBGB="ZNAOC" MSGNR="007" TEXT="Deal quantity inconsistency detected."/>
  <t100 SPRSL="E" ARBGB="ZNAOC" MSGNR="008" TEXT="Deal code &amp; is valid from &amp; to &amp; for &amp;."/>
  <t100 SPRSL="E" ARBGB="ZNAOC" MSGNR="009" TEXT="There is no valid limit registered for &amp;/&amp;/&amp;."/>
  <t100 SPRSL="E" ARBGB="ZNAOC" MSGNR="010" TEXT="Date &amp; cannot be used, because there would be inconsistent consumption."/>
  <t100 SPRSL="E" ARBGB="ZNAOC" MSGNR="011" TEXT="Fail when retrieving quota consumption for &amp;/&amp;."/>
  <t100 SPRSL="E" ARBGB="ZNAOC" MSGNR="012" TEXT="Deal code &amp; is valid for &amp; - &amp; for &amp;."/>
  <t100 SPRSL="E" ARBGB="ZNAOC" MSGNR="013" TEXT="The validity of deal code &amp; expired in &amp;."/>
  <t100t SPRSL="E" ARBGB="ZNAOC" STEXT="Order to Cash related messages for North America"/>
 </MSAG>
 <PROG NAME="ZNAOCN_DEAL_CODE_PRICING" VARCL="X" SUBC="I" APPL="Z" RSTAT="K" RMAND="200" RLOAD="E" UCCHECK="X">
  <textPool>
   <language SPRAS="E">
    <textElement ID="R" ENTRY="Deal code Pricing - Include for user-exists coding" LENGTH="50 "/>
   </language>
  </textPool>
  <source>CONSTANTS: lc_nadealc_fcode TYPE string VALUE &apos;(SAPMV45A)FCODE&apos;,
           lc_nadealc_loes  TYPE fcode  VALUE &apos;LOES&apos;.
DATA: lr_nadealc_auart TYPE RANGE OF auart,
      lr_nadealc_vkorg TYPE RANGE OF vkorg.

DATA(lo_nadealc_tvarv) = NEW zcl_glit_tvarv( im_id = &apos;ZNAOCN_DEAL_CODE_PRICING&apos; ).

lo_nadealc_tvarv-&gt;get_multiple(
  EXPORTING
    im_param =  &apos;AUART&apos;   &quot; Parameter Name
  IMPORTING
    ex_value =  lr_nadealc_auart    &quot; Parameter Value
).

IF vbak-auart IN lr_nadealc_auart.
  lo_nadealc_tvarv-&gt;get_multiple(
    EXPORTING
      im_param =  &apos;VKORG&apos;   &quot; Parameter Name
    IMPORTING
      ex_value =  lr_nadealc_vkorg    &quot; Parameter Value
  ).

  IF vbak-vkorg IN lr_nadealc_vkorg.
    ASSIGN (lc_nadealc_fcode) TO FIELD-SYMBOL(&lt;lv_nadealc_fcode&gt;).
    IF &lt;lv_nadealc_fcode&gt; IS ASSIGNED.
      IF &lt;lv_nadealc_fcode&gt; = lc_nadealc_loes.
        TRY .
            PERFORM zf_delete_nadealc(znaocsp_deal_code_pricing)
              USING vbak
                    xvbap[]
                    xvbep[].
          CATCH cx_bapi_error INTO DATA(lx_nadealc_error).
            READ TABLE lx_nadealc_error-&gt;status ASSIGNING FIELD-SYMBOL(&lt;lw_nadealc_return&gt;) INDEX 1.
            IF sy-subrc = 0.
              MESSAGE &lt;lw_nadealc_return&gt;-message TYPE &lt;lw_nadealc_return&gt;-type.
            ENDIF.
        ENDTRY.
      ELSE.
        PERFORM zf_consumes_nadealc(znaocsp_deal_code_pricing)
          USING xvbap[]
                vbap
                vbak
                xvbep[].
      ENDIF.
    ELSE.
      PERFORM zf_consumes_nadealc(znaocsp_deal_code_pricing)
        USING xvbap[]
              vbap
              vbak
              xvbep[].
    ENDIF.
  ENDIF.
ENDIF.</source>
 </PROG>
 <PROG NAME="ZNAOCR_DEAL_QTY_MONITORING" VARCL="X" SUBC="1" APPL="Z" RSTAT="K" RMAND="200" RLOAD="E" FIXPT="X" UCCHECK="X">
  <textPool>
   <language SPRAS="E">
    <textElement ID="I" KEY="001" ENTRY="Selection arguments" LENGTH="29 "/>
    <textElement ID="R" ENTRY="Monitor Deals" LENGTH="21 "/>
    <textElement ID="S" KEY="S_BEGDT" ENTRY="        Effective date" LENGTH="22 "/>
    <textElement ID="S" KEY="S_DEALC" ENTRY="        Deal code" LENGTH="17 "/>
    <textElement ID="S" KEY="S_ENDDT" ENTRY="        Expiration date" LENGTH="23 "/>
    <textElement ID="S" KEY="S_KUNNR" ENTRY="D       ." LENGTH="9 "/>
    <textElement ID="S" KEY="S_SPART" ENTRY="D       ." LENGTH="9 "/>
   </language>
  </textPool>
  <source>*&amp;---------------------------------------------------------------------*
*&amp; Report  ZNAOCR_DEAL_QTY_SETTING
*&amp;
*&amp;---------------------------------------------------------------------*
*&amp;
*&amp;
*&amp;---------------------------------------------------------------------*
REPORT znaocr_deal_qty_monitoring.
DATA: gt_sellist TYPE scprvimsellist,
      spart      TYPE spart,
      kunnr      TYPE kunnr,
      dealc      TYPE zgloc_deal_code,
      begdt      TYPE vim_begda,
      enddt      TYPE vim_endda.

SELECTION-SCREEN BEGIN OF BLOCK b1 WITH FRAME TITLE text-001.
SELECT-OPTIONS: s_spart FOR spart,
                s_kunnr FOR kunnr,
                s_dealc FOR dealc,
                s_begdt FOR begdt,
                s_enddt FOR enddt.
SELECTION-SCREEN END OF BLOCK b1.

DEFINE m_add_select_option.
  IF &amp;2 is NOT INITIAL.
  CALL FUNCTION &apos;VIEW_RANGETAB_TO_SELLIST&apos;
    EXPORTING
      fieldname = &amp;1
      APPEND_CONJUNCTION = &amp;3
    TABLES
      sellist   = gt_sellist
      rangetab  = &amp;2[].

  ENDIF.
END-OF-DEFINITION.

START-OF-SELECTION.
  m_add_select_option: &apos;SPART&apos;       s_spart  space,
                       &apos;KUNNR&apos;       s_kunnr &apos;AND&apos;,
                       &apos;ZZDEAL_CODE&apos; s_dealc &apos;AND&apos;,
                       &apos;ENDDT&apos;       s_enddt &apos;AND&apos;,
                       &apos;BEGDT&apos;       s_begdt &apos;AND&apos;.

END-OF-SELECTION.
  CALL FUNCTION &apos;ZNAOC_DEAL_QTY_CLEANING_UP&apos; &quot; Removing eventual orphan entries before showing results
    EXPORTING
      it_sellist = gt_sellist
*   IMPORTING
*     ET_REMOVED =
    .

  CALL FUNCTION &apos;ZNAOC_DEAL_QTY_PLAIN_DISPLAY&apos; &quot;&apos;ZNAOC_DEAL_QTY_DISPLAY&apos;
    EXPORTING
      it_sellist = gt_sellist.</source>
 </PROG>
 <PROG NAME="ZNAOCR_DEAL_QTY_SETTING" VARCL="X" SUBC="1" APPL="Z" RSTAT="K" RMAND="200" RLOAD="E" FIXPT="X" UCCHECK="X">
  <textPool>
   <language SPRAS="E">
    <textElement ID="I" KEY="001" ENTRY="Selection arguments" LENGTH="29 "/>
    <textElement ID="R" ENTRY="Deal Quantity Setting" LENGTH="21 "/>
    <textElement ID="S" KEY="S_BEGDT" ENTRY="        Effective date" LENGTH="22 "/>
    <textElement ID="S" KEY="S_DEALC" ENTRY="        Deal code" LENGTH="17 "/>
    <textElement ID="S" KEY="S_ENDDT" ENTRY="        Expiration date" LENGTH="23 "/>
    <textElement ID="S" KEY="S_KUNNR" ENTRY="D       ." LENGTH="9 "/>
    <textElement ID="S" KEY="S_SPART" ENTRY="D       ." LENGTH="9 "/>
   </language>
  </textPool>
  <source>*&amp;---------------------------------------------------------------------*
*&amp; Report  ZNAOCR_DEAL_QTY_SETTING
*&amp;
*&amp;---------------------------------------------------------------------*
*&amp;
*&amp;
*&amp;---------------------------------------------------------------------*
REPORT znaocr_deal_qty_setting.
DATA: gt_sellist TYPE scprvimsellist,
      spart      TYPE spart,
      kunnr      TYPE kunnr,
      dealc      TYPE zgloc_deal_code,
      begdt      TYPE vim_begda,
      enddt      TYPE vim_endda.

SELECTION-SCREEN BEGIN OF BLOCK b1 WITH FRAME TITLE text-001.
SELECT-OPTIONS: s_spart FOR spart,
                s_kunnr FOR kunnr,
                s_dealc FOR dealc,
                s_begdt FOR begdt,
                s_enddt FOR enddt.
SELECTION-SCREEN END OF BLOCK b1.

DEFINE m_add_select_option.
  IF &amp;2 is NOT INITIAL.
  CALL FUNCTION &apos;VIEW_RANGETAB_TO_SELLIST&apos;
    EXPORTING
      fieldname = &amp;1
      APPEND_CONJUNCTION = &amp;3
    TABLES
      sellist   = gt_sellist
      rangetab  = &amp;2[].

  ENDIF.
END-OF-DEFINITION.

START-OF-SELECTION.
  m_add_select_option: &apos;SPART&apos;       s_spart  space,
                       &apos;KUNNR&apos;       s_kunnr &apos;AND&apos;,
                       &apos;ZZDEAL_CODE&apos; s_dealc &apos;AND&apos;,
                       &apos;ENDDT&apos;       s_enddt &apos;AND&apos;,
                       &apos;BEGDT&apos;       s_begdt &apos;AND&apos;.

  LOOP AT gt_sellist ASSIGNING FIELD-SYMBOL(&lt;w_sellist&gt;) WHERE viewfield = &apos;BEGDT&apos;
                                                            OR viewfield = &apos;ENDDT&apos;.
    CALL FUNCTION &apos;CONVERSION_EXIT_PDATE_OUTPUT&apos;
      EXPORTING
        input  = &lt;w_sellist&gt;-value
      IMPORTING
        output = &lt;w_sellist&gt;-value.
  ENDLOOP.

END-OF-SELECTION.
  CALL FUNCTION &apos;VIEW_MAINTENANCE_CALL&apos;
    EXPORTING
      action                       = &apos;S&apos;
      view_name                    = &apos;ZNAOCV_QTD_CTRLH&apos;
    TABLES
      dba_sellist                  = gt_sellist
    EXCEPTIONS
      client_reference             = 1
      foreign_lock                 = 2
      invalid_action               = 3
      no_clientindependent_auth    = 4
      no_database_function         = 5
      no_editor_function           = 6
      no_show_auth                 = 7
      no_tvdir_entry               = 8
      no_upd_auth                  = 9
      only_show_allowed            = 10
      system_failure               = 11
      unknown_field_in_dba_sellist = 12
      view_not_found               = 13
      maintenance_prohibited       = 14
      OTHERS                       = 15.
  IF sy-subrc &lt;&gt; 0.
    MESSAGE
         ID sy-msgid
       TYPE sy-msgty
     NUMBER sy-msgno
       WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.</source>
 </PROG>
 <PROG NAME="ZNAOCSP_DEAL_CODE_PRICING" VARCL="X" SUBC="S" APPL="Z" RSTAT="K" RMAND="200" RLOAD="E" FIXPT="X" UCCHECK="X">
  <textPool>
   <language SPRAS="E">
    <textElement ID="R" ENTRY="Deal Codes - Pool of subroutines" LENGTH="36 "/>
   </language>
  </textPool>
  <source>PROGRAM znaocsp_deal_code_pricing.

INCLUDE vbakdata.
TYPES: BEGIN OF y_checking,
         spart       TYPE spart,
         enddt       TYPE znaoce_deal_end,
         zzdeal_code TYPE zgloc_deal_code,
         uom         TYPE kmein,
         menge       TYPE menge_d,
       END OF y_checking,
       yt_checking TYPE STANDARD TABLE OF y_checking.
FORM zf_check_nadealc_prp USING it_xvbap TYPE tab_xyvbap
                                iw_vbap  TYPE vbap
                                iw_vbak  TYPE vbak
                                it_xvbep TYPE va_vbepvb_t.
  DATA: lv_nadealc_kunwe      TYPE kunwe,
        lv_nadealc_prp_menge  TYPE menge_d,
        lt_checking           TYPE yt_checking,
        lw_checking           TYPE y_checking,
        lx_nadealc_prp_2b     TYPE REF TO zcx_naoc_deal_to_be_valid_in,
        lx_nadealc_prp_exp    TYPE REF TO zcx_naoc_deal_qty_expired,
        lx_nadealc_prp_excess TYPE REF TO zcx_naoc_limit_reached,
        lx_nadealc_prp_error  TYPE REF TO cx_bapi_error.
  FIELD-SYMBOLS  &lt;lw_nadealc_prp_error&gt; TYPE bapiret2.

  DATA(lo_nadealc_prp_tvarv) = NEW zcl_glit_tvarv( im_id = &apos;ZNAOCN_DEAL_CODE_PRICING&apos; ).

  DATA(lt_nadealc_prp_xvbap) = it_xvbap[].
  DATA(lt_nadealc_prp_xvbep) = it_xvbep[].
  LOOP AT lt_nadealc_prp_xvbap ASSIGNING FIELD-SYMBOL(&lt;lw_nadealc_prp_vbap&gt;).

    IF &lt;lw_nadealc_prp_vbap&gt;-zzdeal_code IS INITIAL.
      CONTINUE.
    ENDIF.

    READ TABLE lt_nadealc_prp_xvbep WITH KEY vbeln = &lt;lw_nadealc_prp_vbap&gt;-vbeln
                                             posnr = &lt;lw_nadealc_prp_vbap&gt;-posnr
     ASSIGNING FIELD-SYMBOL(&lt;lw_nadealc_prp_vbep&gt;).
    IF sy-subrc &lt;&gt; 0.
      CONTINUE.
    ENDIF.

    DATA(lo_nadealc_prp) = NEW zcl_naoc_deal_qty_manager(
        i_spart       = &lt;lw_nadealc_prp_vbap&gt;-spart
        i_kunnr       = iw_vbak-kunnr
        i_zzdeal_code = &lt;lw_nadealc_prp_vbap&gt;-zzdeal_code
        i_date        = &lt;lw_nadealc_prp_vbep&gt;-edatu
    ).

    IF &lt;lw_nadealc_prp_vbap&gt;-abgru IS NOT INITIAL.
      lo_nadealc_prp-&gt;set_item_as_rejected(
        EXPORTING
          i_vbeln =  iw_vbak-vbeln   &quot; Sales and Distribution Document Number
          i_posnr =  &lt;lw_nadealc_prp_vbap&gt;-posnr   &quot; Item number of the SD document
      ).
    ELSE.
      TRY .
          lo_nadealc_prp-&gt;checks_deal_validity(
*            IMPORTING
*              e_enddt                      =     &quot; Expiration date
*              e_begdt                      =     &quot; Effective date
*              e_uom                        =     &quot; Condition unit
*              e_menge                      =     &quot; Allowed quantity
          ).
          lv_nadealc_prp_menge = &lt;lw_nadealc_prp_vbap&gt;-kwmeng.
          lo_nadealc_prp-&gt;checks_deal_quantity(
            EXPORTING
              i_vbeln                      =  iw_vbak-vbeln   &quot; Sales and Distribution Document Number
              i_posnr                      =  &lt;lw_nadealc_prp_vbap&gt;-posnr   &quot; Item number of the SD document
              i_vrkme                      =  &lt;lw_nadealc_prp_vbap&gt;-vrkme   &quot; Sales unit
              i_menge                      =  lv_nadealc_prp_menge   &quot; Quantity
          ).
          lw_checking-spart = &lt;lw_nadealc_prp_vbap&gt;-spart.
          lw_checking-enddt = lo_nadealc_prp-&gt;enddt.
          lw_checking-zzdeal_code = lo_nadealc_prp-&gt;zzdeal_code.
          lw_checking-uom = lo_nadealc_prp-&gt;uom.
          lw_checking-menge = lo_nadealc_prp-&gt;convert_2_my_uom(
                        i_vrkme = &lt;lw_nadealc_prp_vbap&gt;-vrkme
                        i_menge = lv_nadealc_prp_menge
                    ).
          COLLECT lw_checking INTO lt_checking.
          CLEAR lw_checking.
        CATCH zcx_naoc_deal_to_be_valid_in INTO lx_nadealc_prp_2b.
          READ TABLE lx_nadealc_prp_2b-&gt;status INDEX 1 ASSIGNING &lt;lw_nadealc_prp_error&gt;.
          IF sy-subrc = 0.
            MESSAGE
                 ID &lt;lw_nadealc_prp_error&gt;-id
               TYPE &apos;E&apos;
             NUMBER &lt;lw_nadealc_prp_error&gt;-number
               WITH &lt;lw_nadealc_prp_error&gt;-message_v1 &lt;lw_nadealc_prp_error&gt;-message_v2
                    &lt;lw_nadealc_prp_error&gt;-message_v3 &lt;lw_nadealc_prp_error&gt;-message_v4.
          ENDIF.
        CATCH zcx_naoc_deal_qty_expired INTO lx_nadealc_prp_exp.
          READ TABLE lx_nadealc_prp_exp-&gt;status INDEX 1 ASSIGNING &lt;lw_nadealc_prp_error&gt;.
          IF sy-subrc = 0.
            MESSAGE
                 ID &lt;lw_nadealc_prp_error&gt;-id
               TYPE &apos;E&apos;
             NUMBER &lt;lw_nadealc_prp_error&gt;-number
               WITH &lt;lw_nadealc_prp_error&gt;-message_v1 &lt;lw_nadealc_prp_error&gt;-message_v2
                    &lt;lw_nadealc_prp_error&gt;-message_v3 &lt;lw_nadealc_prp_error&gt;-message_v4.
          ENDIF.
        CATCH zcx_naoc_limit_reached INTO lx_nadealc_prp_excess.
          READ TABLE lx_nadealc_prp_excess-&gt;t_return INDEX 1 ASSIGNING &lt;lw_nadealc_prp_error&gt;.
          IF sy-subrc = 0.
            MESSAGE
                 ID &lt;lw_nadealc_prp_error&gt;-id
               TYPE &apos;E&apos;
             NUMBER &lt;lw_nadealc_prp_error&gt;-number
               WITH &lt;lw_nadealc_prp_error&gt;-message_v1 &lt;lw_nadealc_prp_error&gt;-message_v2
                    &lt;lw_nadealc_prp_error&gt;-message_v3 &lt;lw_nadealc_prp_error&gt;-message_v4.
          ENDIF.
        CATCH zcx_naoc_no_deal_qty_defined.
        CATCH cx_bapi_error INTO lx_nadealc_prp_error.
          READ TABLE lx_nadealc_prp_error-&gt;status INDEX 1 ASSIGNING &lt;lw_nadealc_prp_error&gt;.
          IF sy-subrc = 0.
            MESSAGE
                 ID &lt;lw_nadealc_prp_error&gt;-id
               TYPE &lt;lw_nadealc_prp_error&gt;-type
             NUMBER &lt;lw_nadealc_prp_error&gt;-number
               WITH &lt;lw_nadealc_prp_error&gt;-message_v1 &lt;lw_nadealc_prp_error&gt;-message_v2
                    &lt;lw_nadealc_prp_error&gt;-message_v3 &lt;lw_nadealc_prp_error&gt;-message_v4.
          ENDIF.
      ENDTRY.
    ENDIF.
  ENDLOOP.

  LOOP AT lt_checking INTO lw_checking.
    lo_nadealc_prp = NEW zcl_naoc_deal_qty_manager(
        i_spart       = lw_checking-spart
        i_kunnr       = iw_vbak-kunnr
        i_zzdeal_code = lw_checking-zzdeal_code
        i_date        = lw_checking-enddt ).
    TRY .
        lo_nadealc_prp-&gt;checks_consolidated_quantity(
              EXPORTING
                i_vbeln                      =  iw_vbak-vbeln     &quot; Sales and Distribution Document Number
                i_vrkme                      =  lw_checking-uom   &quot; Unit
                i_menge                      =  lw_checking-menge &quot; Quantity
            ).
      CATCH zcx_naoc_limit_reached INTO lx_nadealc_prp_excess.
        READ TABLE lx_nadealc_prp_excess-&gt;t_return INDEX 1 ASSIGNING &lt;lw_nadealc_prp_error&gt;.
        IF sy-subrc = 0.
          MESSAGE
               ID &lt;lw_nadealc_prp_error&gt;-id
             TYPE &apos;E&apos;
           NUMBER &lt;lw_nadealc_prp_error&gt;-number
             WITH &lt;lw_nadealc_prp_error&gt;-message_v1 &lt;lw_nadealc_prp_error&gt;-message_v2
                  &lt;lw_nadealc_prp_error&gt;-message_v3 &lt;lw_nadealc_prp_error&gt;-message_v4.
        ENDIF.
      CATCH zcx_naoc_no_deal_qty_defined.
      CATCH cx_bapi_error INTO lx_nadealc_prp_error.
        READ TABLE lx_nadealc_prp_error-&gt;status INDEX 1 ASSIGNING &lt;lw_nadealc_prp_error&gt;.
        IF sy-subrc = 0.
          MESSAGE
               ID &lt;lw_nadealc_prp_error&gt;-id
             TYPE &lt;lw_nadealc_prp_error&gt;-type
           NUMBER &lt;lw_nadealc_prp_error&gt;-number
             WITH &lt;lw_nadealc_prp_error&gt;-message_v1 &lt;lw_nadealc_prp_error&gt;-message_v2
                  &lt;lw_nadealc_prp_error&gt;-message_v3 &lt;lw_nadealc_prp_error&gt;-message_v4.
        ENDIF.
    ENDTRY.
  ENDLOOP.
  FREE: lo_nadealc_prp, lo_nadealc_prp_tvarv.
ENDFORM.

FORM zf_delete_nadealc USING iw_vbak  TYPE vbak
                             it_xvbap TYPE tab_xyvbap
                             it_xvbep TYPE va_vbepvb_t
                       RAISING cx_bapi_error.
  FIELD-SYMBOLS  &lt;lw_nadealc_error&gt; TYPE bapiret2.

  DATA(lt_nadealc_xvbap) = it_xvbap.
  DATA(lt_nadealc_xvbep) = it_xvbep.
  LOOP AT lt_nadealc_xvbap ASSIGNING FIELD-SYMBOL(&lt;lw_nadealc_vbap&gt;).

    READ TABLE lt_nadealc_xvbep WITH KEY vbeln = &lt;lw_nadealc_vbap&gt;-vbeln
                                         posnr = &lt;lw_nadealc_vbap&gt;-posnr
     ASSIGNING FIELD-SYMBOL(&lt;lw_nadealc_vbep&gt;).
    IF sy-subrc = 0.


      DATA(lo_nadealc_consumption) = NEW zcl_naoc_deal_qty_consumption(
          i_vbeln = iw_vbak-vbeln
          i_posnr = &lt;lw_nadealc_vbap&gt;-posnr
          i_date  = &lt;lw_nadealc_vbep&gt;-edatu
      ).
      TRY .
          lo_nadealc_consumption-&gt;removes_me( ).
        CATCH cx_bapi_error INTO DATA(lx_nadealc_error).
          RAISE EXCEPTION lx_nadealc_error.
      ENDTRY.
      FREE lo_nadealc_consumption.
    ENDIF.
  ENDLOOP.
ENDFORM.


*&amp;---------------------------------------------------------------------*
*&amp;      Form  ZF_CONSUMES_nadealc
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      --&gt;IT_XVBAP  text
*      --&gt;IW_VBAP  text
*      --&gt;IW_VBAK  text
*      --&gt;IT_XVBEP
*----------------------------------------------------------------------*
FORM zf_consumes_nadealc    USING it_xvbap    TYPE tab_xyvbap
                                  iw_vbap     TYPE vbap
                                  iw_vbak     TYPE vbak
                                  it_xvbep    TYPE va_vbepvb_t.
  DATA: lv_nadealc_kunwe  TYPE kunwe,
        lv_nadealc_menge  TYPE menge_d,
        lt_checking       TYPE yt_checking,
        lw_checking       TYPE y_checking,
        lx_nadealc_excess TYPE REF TO zcx_naoc_limit_reached,
        lx_nadealc_error  TYPE REF TO cx_bapi_error.
  FIELD-SYMBOLS  &lt;lw_nadealc_error&gt; TYPE bapiret2.

  DATA(lo_nadealc_tvarv) = NEW zcl_glit_tvarv( im_id = &apos;ZNAOCN_DEAL_CODE_PRICING&apos; ).

  DATA(lt_nadealc_xvbap) = it_xvbap[].
  DATA(lt_nadealc_xvbep) = it_xvbep[].

  LOOP AT lt_nadealc_xvbap ASSIGNING FIELD-SYMBOL(&lt;lw_nadealc_vbap&gt;).
    IF &lt;lw_nadealc_vbap&gt;-zzdeal_code IS NOT INITIAL.
      READ TABLE lt_nadealc_xvbep WITH KEY vbeln = &lt;lw_nadealc_vbap&gt;-vbeln
                                           posnr = &lt;lw_nadealc_vbap&gt;-posnr
       ASSIGNING FIELD-SYMBOL(&lt;lw_nadealc_vbep&gt;).
      IF sy-subrc &lt;&gt; 0.
        CONTINUE.
      ENDIF.

      DATA(lo_nadealc) = NEW zcl_naoc_deal_qty_manager(
                                i_spart       = &lt;lw_nadealc_vbap&gt;-spart
                                i_kunnr       = iw_vbak-kunnr
                                i_zzdeal_code = &lt;lw_nadealc_vbap&gt;-zzdeal_code
                                i_date        = &lt;lw_nadealc_vbep&gt;-edatu
                            ).
      TRY .
          lo_nadealc-&gt;set_attributes( ).
        CATCH zcx_naoc_no_deal_qty_defined
              zcx_naoc_query_error.
          CONTINUE.
      ENDTRY.

      lw_checking-spart = &lt;lw_nadealc_vbap&gt;-spart.
      lw_checking-enddt = lo_nadealc-&gt;enddt.
      lw_checking-zzdeal_code = lo_nadealc-&gt;zzdeal_code.
      lw_checking-uom = lo_nadealc-&gt;uom.

      lv_nadealc_menge = &lt;lw_nadealc_vbap&gt;-kwmeng.
      lw_checking-menge = lo_nadealc-&gt;convert_2_my_uom(
                    i_vrkme = &lt;lw_nadealc_vbap&gt;-vrkme
                    i_menge = lv_nadealc_menge
                ).
      COLLECT lw_checking INTO lt_checking.
      CLEAR lw_checking.
    ENDIF.
  ENDLOOP.

  LOOP AT lt_checking INTO lw_checking.
    lo_nadealc = NEW zcl_naoc_deal_qty_manager(
        i_spart       = lw_checking-spart
        i_kunnr       = iw_vbak-kunnr
        i_zzdeal_code = lw_checking-zzdeal_code
        i_date        = lw_checking-enddt ).
    TRY .
        lo_nadealc-&gt;checks_consolidated_quantity(
              EXPORTING
                i_vbeln                      =  iw_vbak-vbeln     &quot; Sales and Distribution Document Number
                i_vrkme                      =  lw_checking-uom   &quot; Unit
                i_menge                      =  lw_checking-menge &quot; Quantity
            ).
      CATCH zcx_naoc_limit_reached INTO lx_nadealc_excess.
        READ TABLE lx_nadealc_excess-&gt;t_return INDEX 1 ASSIGNING &lt;lw_nadealc_error&gt;.
        IF sy-subrc = 0.
          MESSAGE
               ID &lt;lw_nadealc_error&gt;-id
             TYPE &apos;E&apos;
           NUMBER &lt;lw_nadealc_error&gt;-number
             WITH &lt;lw_nadealc_error&gt;-message_v1 &lt;lw_nadealc_error&gt;-message_v2
                  &lt;lw_nadealc_error&gt;-message_v3 &lt;lw_nadealc_error&gt;-message_v4.
        ENDIF.
      CATCH zcx_naoc_no_deal_qty_defined.
      CATCH cx_bapi_error INTO lx_nadealc_error.
        READ TABLE lx_nadealc_error-&gt;status INDEX 1 ASSIGNING &lt;lw_nadealc_error&gt;.
        IF sy-subrc = 0.
          MESSAGE
               ID &lt;lw_nadealc_error&gt;-id
             TYPE &lt;lw_nadealc_error&gt;-type
           NUMBER &lt;lw_nadealc_error&gt;-number
             WITH &lt;lw_nadealc_error&gt;-message_v1 &lt;lw_nadealc_error&gt;-message_v2
                  &lt;lw_nadealc_error&gt;-message_v3 &lt;lw_nadealc_error&gt;-message_v4.
        ENDIF.
    ENDTRY.
  ENDLOOP.

  LOOP AT lt_nadealc_xvbap ASSIGNING &lt;lw_nadealc_vbap&gt;.
    READ TABLE lt_nadealc_xvbep WITH KEY vbeln = &lt;lw_nadealc_vbap&gt;-vbeln
                                         posnr = &lt;lw_nadealc_vbap&gt;-posnr
     ASSIGNING &lt;lw_nadealc_vbep&gt;.
    IF sy-subrc &lt;&gt; 0.
      CONTINUE.
    ENDIF.
    IF &lt;lw_nadealc_vbap&gt;-zzdeal_code IS NOT INITIAL AND &lt;lw_nadealc_vbap&gt;-updkz &lt;&gt; &apos;D&apos;.
      lo_nadealc = NEW zcl_naoc_deal_qty_manager(
          i_spart       = &lt;lw_nadealc_vbap&gt;-spart
          i_kunnr       = iw_vbak-kunnr
          i_zzdeal_code = &lt;lw_nadealc_vbap&gt;-zzdeal_code
          i_date        = &lt;lw_nadealc_vbep&gt;-edatu
      ).
      IF &lt;lw_nadealc_vbap&gt;-abgru IS NOT INITIAL.
        lo_nadealc-&gt;set_item_as_rejected(
          EXPORTING
            i_vbeln =  iw_vbak-vbeln   &quot; Sales and Distribution Document Number
            i_posnr =  &lt;lw_nadealc_vbap&gt;-posnr   &quot; Item number of the SD document
        ).
      ELSE.
        TRY .
            lv_nadealc_menge = &lt;lw_nadealc_vbap&gt;-kwmeng.
            lo_nadealc-&gt;consumes_deal_quantity(
              EXPORTING
                i_vbeln                =  iw_vbak-vbeln   &quot; Sales and Distribution Document Number
                i_posnr                =  &lt;lw_nadealc_vbap&gt;-posnr   &quot; Item number of the SD document
                i_vrkme                =  &lt;lw_nadealc_vbap&gt;-vrkme   &quot; Sales unit
                i_menge                =  lv_nadealc_menge   &quot; Quantity
            ).
          CATCH zcx_naoc_limit_reached INTO lx_nadealc_excess.
            READ TABLE lx_nadealc_excess-&gt;t_return INDEX 1 ASSIGNING &lt;lw_nadealc_error&gt;.
            IF sy-subrc = 0.
              MESSAGE
                   ID &lt;lw_nadealc_error&gt;-id
                 TYPE &apos;E&apos;
               NUMBER &lt;lw_nadealc_error&gt;-number
                 WITH &lt;lw_nadealc_error&gt;-message_v1 &lt;lw_nadealc_error&gt;-message_v2
                      &lt;lw_nadealc_error&gt;-message_v3 &lt;lw_nadealc_error&gt;-message_v4.
            ENDIF.
          CATCH cx_bapi_error INTO lx_nadealc_error.
            READ TABLE lx_nadealc_error-&gt;status INDEX 1 ASSIGNING &lt;lw_nadealc_error&gt;.
            IF sy-subrc = 0.
              MESSAGE
                   ID &lt;lw_nadealc_error&gt;-id
                 TYPE &lt;lw_nadealc_error&gt;-type
               NUMBER &lt;lw_nadealc_error&gt;-number
                 WITH &lt;lw_nadealc_error&gt;-message_v1 &lt;lw_nadealc_error&gt;-message_v2
                      &lt;lw_nadealc_error&gt;-message_v3 &lt;lw_nadealc_error&gt;-message_v4.
            ENDIF.
        ENDTRY.
      ENDIF.
    ELSE.
      IF &lt;lw_nadealc_vbap&gt;-vbeln IS NOT INITIAL.
        DATA(lo_nadealc_consumption) = NEW zcl_naoc_deal_qty_consumption(
            i_vbeln = &lt;lw_nadealc_vbap&gt;-vbeln
            i_posnr = &lt;lw_nadealc_vbap&gt;-posnr
            i_date  = &lt;lw_nadealc_vbep&gt;-edatu
        ).
        TRY .
            lo_nadealc_consumption-&gt;removes_me( ).
          CATCH cx_bapi_error INTO lx_nadealc_error.
            CONTINUE.
        ENDTRY.
        FREE lo_nadealc_consumption.
      ENDIF.
    ENDIF.
  ENDLOOP.
  FREE  lo_nadealc_tvarv.
ENDFORM.


*&amp;---------------------------------------------------------------------*
*&amp;      Form  ZF_CHECK_nadealc_MFP
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      --&gt;IW_VBAP  text
*      --&gt;IW_VBAK  text
*      --&gt;IT_XVBEP
*----------------------------------------------------------------------*
FORM zf_check_nadealc_mfp  USING iw_vbap     TYPE vbap
                                 iw_vbak     TYPE vbak
                                 it_xvbep    TYPE va_vbepvb_t.
  DATA: lv_nadealc_mfp_menge TYPE menge_d,
        lx_nadealc_mfp_error TYPE REF TO cx_bapi_error.
  FIELD-SYMBOLS  &lt;lw_nadealc_mfp_error&gt; TYPE bapiret2.

  IF iw_vbap-zzdeal_code IS INITIAL.
    RETURN.
  ENDIF.

  DATA(lo_nadealc_mfp_tvarv) = NEW zcl_glit_tvarv( im_id = &apos;ZNAOCN_DEAL_CODE_PRICING&apos; ).

  DATA(lt_nadealc_xvbep) = it_xvbep[].

  READ TABLE lt_nadealc_xvbep WITH KEY vbeln = iw_vbak-vbeln
                                       posnr = iw_vbap-posnr
   ASSIGNING FIELD-SYMBOL(&lt;lw_nadealc_vbep&gt;).
  IF sy-subrc = 0.
    DATA(lo_nadealc_mfp) = NEW zcl_naoc_deal_qty_manager(
        i_spart       = iw_vbap-spart
        i_kunnr       = iw_vbak-kunnr
        i_zzdeal_code = iw_vbap-zzdeal_code
        i_date        = &lt;lw_nadealc_vbep&gt;-edatu
    ).

    IF iw_vbap-abgru IS NOT INITIAL.
      lo_nadealc_mfp-&gt;set_item_as_rejected(
        EXPORTING
          i_vbeln =  iw_vbap-vbeln   &quot; Sales and Distribution Document Number
          i_posnr =  iw_vbap-posnr   &quot; Item number of the SD document
      ).
    ELSE.
      TRY .
          lo_nadealc_mfp-&gt;checks_deal_validity(
*            IMPORTING
*              e_enddt                      =     &quot; Expiration date
*              e_begdt                      =     &quot; Effective date
*              e_uom                        =     &quot; Condition unit
*              e_menge                      =     &quot; Allowed quantity
          ).
          lv_nadealc_mfp_menge = iw_vbap-kwmeng.
          lo_nadealc_mfp-&gt;checks_deal_quantity(
            EXPORTING
              i_vbeln                      =  iw_vbak-vbeln   &quot; Sales and Distribution Document Number
              i_posnr                      =  iw_vbap-posnr   &quot; Item number of the SD document
              i_vrkme                      =  iw_vbap-vrkme   &quot; Sales unit
              i_menge                      =  lv_nadealc_mfp_menge   &quot; Quantity
          ).
        CATCH zcx_naoc_deal_to_be_valid_in INTO DATA(lx_nadealc_mfp_2b).
          READ TABLE lx_nadealc_mfp_2b-&gt;status INDEX 1 ASSIGNING &lt;lw_nadealc_mfp_error&gt;.
          IF sy-subrc = 0.
            MESSAGE
                 ID &lt;lw_nadealc_mfp_error&gt;-id
               TYPE &apos;W&apos;
             NUMBER &lt;lw_nadealc_mfp_error&gt;-number
               WITH &lt;lw_nadealc_mfp_error&gt;-message_v1 &lt;lw_nadealc_mfp_error&gt;-message_v2
                    &lt;lw_nadealc_mfp_error&gt;-message_v3 &lt;lw_nadealc_mfp_error&gt;-message_v4.
          ENDIF.
        CATCH zcx_naoc_deal_qty_expired INTO DATA(lx_nadealc_mfp_exp).
          READ TABLE lx_nadealc_mfp_exp-&gt;status INDEX 1 ASSIGNING &lt;lw_nadealc_mfp_error&gt;.
          IF sy-subrc = 0.
            MESSAGE
                 ID &lt;lw_nadealc_mfp_error&gt;-id
               TYPE &apos;W&apos;
             NUMBER &lt;lw_nadealc_mfp_error&gt;-number
               WITH &lt;lw_nadealc_mfp_error&gt;-message_v1 &lt;lw_nadealc_mfp_error&gt;-message_v2
                    &lt;lw_nadealc_mfp_error&gt;-message_v3 &lt;lw_nadealc_mfp_error&gt;-message_v4.
          ENDIF.
        CATCH zcx_naoc_limit_reached INTO DATA(lx_nadealc_mfp_excess).
          READ TABLE lx_nadealc_mfp_excess-&gt;t_return INDEX 1 ASSIGNING &lt;lw_nadealc_mfp_error&gt;.
          IF sy-subrc = 0.
            MESSAGE
                 ID &lt;lw_nadealc_mfp_error&gt;-id
               TYPE &apos;W&apos;
             NUMBER &lt;lw_nadealc_mfp_error&gt;-number
               WITH &lt;lw_nadealc_mfp_error&gt;-message_v1 &lt;lw_nadealc_mfp_error&gt;-message_v2
                    &lt;lw_nadealc_mfp_error&gt;-message_v3 &lt;lw_nadealc_mfp_error&gt;-message_v4.
          ENDIF.
        CATCH zcx_naoc_no_deal_qty_defined.
        CATCH cx_bapi_error INTO lx_nadealc_mfp_error.
          READ TABLE lx_nadealc_mfp_error-&gt;status INDEX 1 ASSIGNING &lt;lw_nadealc_mfp_error&gt;.
          IF sy-subrc = 0.
            MESSAGE
                 ID &lt;lw_nadealc_mfp_error&gt;-id
               TYPE &lt;lw_nadealc_mfp_error&gt;-type
             NUMBER &lt;lw_nadealc_mfp_error&gt;-number
               WITH &lt;lw_nadealc_mfp_error&gt;-message_v1 &lt;lw_nadealc_mfp_error&gt;-message_v2
                    &lt;lw_nadealc_mfp_error&gt;-message_v3 &lt;lw_nadealc_mfp_error&gt;-message_v4.
          ENDIF.
      ENDTRY.
    ENDIF.
  ENDIF.

  FREE: lo_nadealc_mfp_tvarv, lo_nadealc_mfp.
ENDFORM.</source>
 </PROG>
 <TABL TABNAME="ZNAOCT_QTD_CTRLD" DDLANGUAGE="E" TABCLASS="TRANSP" DATMIN="0000000000" DATMAX="0000000000" DATAVG="0000000000" CLIDEP="X" DDTEXT="Deal Code consumption" AUTHCLASS="00" CONTFLAG="A" PROZPUFF="000" EXCLASS="3">
  <dd09l TABNAME="ZNAOCT_QTD_CTRLD" AS4LOCAL="A" AS4VERS="0000" TABKAT="5" TABART="USER" PUFFERUNG="G" SCHFELDANZ="003" BUFALLOW="X" ROWORCOLST="C"/>
  <dd03p TABNAME="ZNAOCT_QTD_CTRLD" FIELDNAME="MANDT" DDLANGUAGE="E" POSITION="0001" KEYFLAG="X" ROLLNAME="MANDT" CHECKTABLE="T000" ADMINFIELD="0" INTTYPE="C" INTLEN="000006" NOTNULL="X" DOMNAME="MANDT" ROUTPUTLEN="000000" HEADLEN="03" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="CLNT" LENG="000003" OUTPUTLEN="000003" DECIMALS="000000" ENTITYTAB="T000" MASK="  CLNTE" MASKLEN="0000" DDTEXT="Client" REPTEXT="Cl." SCRTEXT_S="Client" SCRTEXT_M="Client" SCRTEXT_L="Client" DOMNAME3L="MANDT" SHLPORIGIN="P" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZNAOCT_QTD_CTRLD" FIELDNAME="SPART" DDLANGUAGE="E" POSITION="0002" KEYFLAG="X" ROLLNAME="SPART" CHECKTABLE="TSPA" ADMINFIELD="0" INTTYPE="C" INTLEN="000004" NOTNULL="X" DOMNAME="SPART" ROUTPUTLEN="000000" MEMORYID="SPA" LOGFLAG="X" HEADLEN="02" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="CHAR" LENG="000002" OUTPUTLEN="000002" DECIMALS="000000" ENTITYTAB="TSPA" MASK="  CHARE" MASKLEN="0000" DDTEXT="Division" REPTEXT="Dv" SCRTEXT_S="Division" SCRTEXT_M="Division" SCRTEXT_L="Division" DOMNAME3L="SPART" SHLPORIGIN="P" SHLPNAME="C_SPART" SHLPFIELD="SPART" DEPTH="00" COMPTYPE="E" DEFFDNAME="DIVISION" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZNAOCT_QTD_CTRLD" FIELDNAME="KUNNR" DDLANGUAGE="E" POSITION="0003" KEYFLAG="X" ROLLNAME="KUNNR" CHECKTABLE="KNA1" ADMINFIELD="0" INTTYPE="C" INTLEN="000020" NOTNULL="X" DOMNAME="KUNNR" ROUTPUTLEN="000000" MEMORYID="KUN" LOGFLAG="X" HEADLEN="10" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="CHAR" LENG="000010" OUTPUTLEN="000010" DECIMALS="000000" ENTITYTAB="KNA1" CONVEXIT="ALPHA" MASK="  CHARE" MASKLEN="0000" DDTEXT="Customer Number" REPTEXT="Customer" SCRTEXT_S="Customer" SCRTEXT_M="Customer" SCRTEXT_L="Customer" DOMNAME3L="KUNNR" SHLPORIGIN="P" SHLPNAME="C_KUNNR" SHLPFIELD="KUNNR" DEPTH="00" COMPTYPE="E" DEFFDNAME="CUSTOMER" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZNAOCT_QTD_CTRLD" FIELDNAME="ZZDEAL_CODE" DDLANGUAGE="E" POSITION="0004" KEYFLAG="X" ROLLNAME="ZGLOC_DEAL_CODE" CHECKTABLE="ZNAOCT_QTD_CTRLH" ADMINFIELD="0" INTTYPE="C" INTLEN="000010" NOTNULL="X" DOMNAME="CHAR005" ROUTPUTLEN="000000" HEADLEN="17" SCRLEN1="10" SCRLEN2="17" SCRLEN3="20" DTELMASTER="E" DATATYPE="CHAR" LENG="000005" OUTPUTLEN="000005" DECIMALS="000000" MASK="  CHARE" MASKLEN="0000" DDTEXT="Deal code - JBOSS" REPTEXT="Deal code - JBOSS" SCRTEXT_S="Deal code" SCRTEXT_M="Deal code - JBOSS" SCRTEXT_L="Deal code - JBOSS" DOMNAME3L="CHAR005" SHLPORIGIN="P" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZNAOCT_QTD_CTRLD" FIELDNAME="ENDDT" DDLANGUAGE="E" POSITION="0005" KEYFLAG="X" ROLLNAME="ZNAOCE_DEAL_END" CHECKTABLE="ZNAOCT_QTD_CTRLH" ADMINFIELD="0" INTTYPE="D" INTLEN="000016" NOTNULL="X" DOMNAME="DATUM" ROUTPUTLEN="000000" HEADLEN="15" SCRLEN1="10" SCRLEN2="15" SCRLEN3="15" DTELMASTER="E" DATATYPE="DATS" LENG="000008" OUTPUTLEN="000010" DECIMALS="000000" MASK="  DATSE" MASKLEN="0000" DDTEXT="Expiration date" REPTEXT="Expiration date" SCRTEXT_S="Expiration" SCRTEXT_M="Expiration date" SCRTEXT_L="Expiration date" DOMNAME3L="DATUM" SHLPORIGIN="P" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZNAOCT_QTD_CTRLD" FIELDNAME="VBELN" DDLANGUAGE="E" POSITION="0006" KEYFLAG="X" ROLLNAME="VBELN_VA" CHECKTABLE="VBUK" ADMINFIELD="0" INTTYPE="C" INTLEN="000020" NOTNULL="X" DOMNAME="VBELN" ROUTPUTLEN="000000" MEMORYID="AUN" HEADLEN="10" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="CHAR" LENG="000010" OUTPUTLEN="000010" DECIMALS="000000" ENTITYTAB="VBUK" CONVEXIT="ALPHA" MASK="  CHARE" MASKLEN="0000" DDTEXT="Sales Document" REPTEXT="Sales Doc." SCRTEXT_S="Sales Doc." SCRTEXT_M="Sales Document" SCRTEXT_L="Sales Document" DOMNAME3L="VBELN" SHLPORIGIN="P" DEPTH="00" COMPTYPE="E" DEFFDNAME="DOC_NUMBER" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZNAOCT_QTD_CTRLD" FIELDNAME="POSNR" DDLANGUAGE="E" POSITION="0007" KEYFLAG="X" ROLLNAME="POSNR_VA" CHECKTABLE="VBUP" ADMINFIELD="0" INTTYPE="N" INTLEN="000012" NOTNULL="X" DOMNAME="POSNR" ROUTPUTLEN="000000" MEMORYID="APO" HEADLEN="06" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="NUMC" LENG="000006" OUTPUTLEN="000006" DECIMALS="000000" ENTITYTAB="VBUP" MASK="  NUMCE" MASKLEN="0000" DDTEXT="Sales Document Item" REPTEXT="Item" SCRTEXT_S="Item" SCRTEXT_M="Item" SCRTEXT_L="Sales Document Item" DOMNAME3L="POSNR" SHLPORIGIN="P" DEPTH="00" COMPTYPE="E" DEFFDNAME="ITM_NUMBER" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZNAOCT_QTD_CTRLD" FIELDNAME="QTD_ORDERED" DDLANGUAGE="E" POSITION="0008" ROLLNAME="MENGE_D" ADMINFIELD="0" INTTYPE="P" INTLEN="000007" REFTABLE="ZNAOCT_QTD_CTRLH" REFFIELD="UOM" DOMNAME="MENG13" ROUTPUTLEN="000000" LOGFLAG="X" HEADLEN="17" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="QUAN" LENG="000013" OUTPUTLEN="000017" DECIMALS="000003" MASK="  QUANE" MASKLEN="0000" DDTEXT="Quantity" REPTEXT="Quantity" SCRTEXT_S="Quantity" SCRTEXT_M="Quantity" SCRTEXT_L="Quantity" DOMNAME3L="MENG13" DEPTH="00" COMPTYPE="E" DEFFDNAME="QUANTITY" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZNAOCT_QTD_CTRLD" FIELDNAME="REJECTED" DDLANGUAGE="E" POSITION="0009" ROLLNAME="XFELD" ADMINFIELD="0" INTTYPE="C" INTLEN="000002" DOMNAME="XFELD" ROUTPUTLEN="000000" LOGFLAG="X" HEADLEN="00" SCRLEN1="00" SCRLEN2="00" SCRLEN3="00" DTELMASTER="D" DATATYPE="CHAR" LENG="000001" OUTPUTLEN="000001" DECIMALS="000000" VALEXI="X" MASK="  CHARE" MASKLEN="0000" DDTEXT="Checkbox" DOMNAME3L="XFELD" SHLPORIGIN="F" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd05m TABNAME="ZNAOCT_QTD_CTRLD" FIELDNAME="ENDDT" FORTABLE="ZNAOCT_QTD_CTRLD" FORKEY="MANDT" CHECKTABLE="ZNAOCT_QTD_CTRLH" CHECKFIELD="MANDT" PRIMPOS="0001" DOMNAME="MANDT" DATATYPE="CLNT" LENG="000003"/>
  <dd05m TABNAME="ZNAOCT_QTD_CTRLD" FIELDNAME="ENDDT" FORTABLE="ZNAOCT_QTD_CTRLD" FORKEY="SPART" CHECKTABLE="ZNAOCT_QTD_CTRLH" CHECKFIELD="SPART" PRIMPOS="0002" DOMNAME="SPART" DATATYPE="CHAR" LENG="000002"/>
  <dd05m TABNAME="ZNAOCT_QTD_CTRLD" FIELDNAME="ENDDT" FORTABLE="ZNAOCT_QTD_CTRLD" FORKEY="KUNNR" CHECKTABLE="ZNAOCT_QTD_CTRLH" CHECKFIELD="KUNNR" PRIMPOS="0003" DOMNAME="KUNNR" DATATYPE="CHAR" LENG="000010"/>
  <dd05m TABNAME="ZNAOCT_QTD_CTRLD" FIELDNAME="ENDDT" FORTABLE="ZNAOCT_QTD_CTRLD" FORKEY="ZZDEAL_CODE" CHECKTABLE="ZNAOCT_QTD_CTRLH" CHECKFIELD="ZZDEAL_CODE" PRIMPOS="0004" DOMNAME="CHAR005" DATATYPE="CHAR" LENG="000005"/>
  <dd05m TABNAME="ZNAOCT_QTD_CTRLD" FIELDNAME="ENDDT" FORTABLE="ZNAOCT_QTD_CTRLD" FORKEY="ENDDT" CHECKTABLE="ZNAOCT_QTD_CTRLH" CHECKFIELD="ENDDT" PRIMPOS="0005" DOMNAME="DATUM" DATATYPE="DATS" LENG="000008"/>
  <dd05m TABNAME="ZNAOCT_QTD_CTRLD" FIELDNAME="KUNNR" FORTABLE="ZNAOCT_QTD_CTRLD" FORKEY="MANDT" CHECKTABLE="KNA1" CHECKFIELD="MANDT" PRIMPOS="0001" DOMNAME="MANDT" DATATYPE="CLNT" LENG="000003"/>
  <dd05m TABNAME="ZNAOCT_QTD_CTRLD" FIELDNAME="KUNNR" FORTABLE="ZNAOCT_QTD_CTRLD" FORKEY="KUNNR" CHECKTABLE="KNA1" CHECKFIELD="KUNNR" PRIMPOS="0002" DOMNAME="KUNNR" DATATYPE="CHAR" LENG="000010"/>
  <dd05m TABNAME="ZNAOCT_QTD_CTRLD" FIELDNAME="MANDT" FORTABLE="ZNAOCT_QTD_CTRLD" FORKEY="MANDT" CHECKTABLE="T000" CHECKFIELD="MANDT" PRIMPOS="0001" DOMNAME="MANDT" DATATYPE="CLNT" LENG="000003"/>
  <dd05m TABNAME="ZNAOCT_QTD_CTRLD" FIELDNAME="POSNR" FORTABLE="ZNAOCT_QTD_CTRLD" FORKEY="MANDT" CHECKTABLE="VBUP" CHECKFIELD="MANDT" PRIMPOS="0001" DOMNAME="MANDT" DATATYPE="CLNT" LENG="000003"/>
  <dd05m TABNAME="ZNAOCT_QTD_CTRLD" FIELDNAME="POSNR" FORTABLE="ZNAOCT_QTD_CTRLD" FORKEY="VBELN" CHECKTABLE="VBUP" CHECKFIELD="VBELN" PRIMPOS="0002" DOMNAME="VBELN" DATATYPE="CHAR" LENG="000010"/>
  <dd05m TABNAME="ZNAOCT_QTD_CTRLD" FIELDNAME="POSNR" FORTABLE="ZNAOCT_QTD_CTRLD" FORKEY="POSNR" CHECKTABLE="VBUP" CHECKFIELD="POSNR" PRIMPOS="0003" DOMNAME="POSNR" DATATYPE="NUMC" LENG="000006"/>
  <dd05m TABNAME="ZNAOCT_QTD_CTRLD" FIELDNAME="SPART" FORTABLE="ZNAOCT_QTD_CTRLD" FORKEY="MANDT" CHECKTABLE="TSPA" CHECKFIELD="MANDT" PRIMPOS="0001" DOMNAME="MANDT" DATATYPE="CLNT" LENG="000003"/>
  <dd05m TABNAME="ZNAOCT_QTD_CTRLD" FIELDNAME="SPART" FORTABLE="ZNAOCT_QTD_CTRLD" FORKEY="SPART" CHECKTABLE="TSPA" CHECKFIELD="SPART" PRIMPOS="0002" DOMNAME="SPART" DATATYPE="CHAR" LENG="000002"/>
  <dd05m TABNAME="ZNAOCT_QTD_CTRLD" FIELDNAME="VBELN" FORTABLE="ZNAOCT_QTD_CTRLD" FORKEY="MANDT" CHECKTABLE="VBUK" CHECKFIELD="MANDT" PRIMPOS="0001" DOMNAME="MANDT" DATATYPE="CLNT" LENG="000003"/>
  <dd05m TABNAME="ZNAOCT_QTD_CTRLD" FIELDNAME="VBELN" FORTABLE="ZNAOCT_QTD_CTRLD" FORKEY="VBELN" CHECKTABLE="VBUK" CHECKFIELD="VBELN" PRIMPOS="0002" DOMNAME="VBELN" DATATYPE="CHAR" LENG="000010"/>
  <dd05m TABNAME="ZNAOCT_QTD_CTRLD" FIELDNAME="ZZDEAL_CODE" FORTABLE="ZNAOCT_QTD_CTRLD" FORKEY="MANDT" CHECKTABLE="ZNAOCT_QTD_CTRLH" CHECKFIELD="MANDT" PRIMPOS="0001" DOMNAME="MANDT" DATATYPE="CLNT" LENG="000003"/>
  <dd05m TABNAME="ZNAOCT_QTD_CTRLD" FIELDNAME="ZZDEAL_CODE" FORTABLE="ZNAOCT_QTD_CTRLD" FORKEY="SPART" CHECKTABLE="ZNAOCT_QTD_CTRLH" CHECKFIELD="SPART" PRIMPOS="0002" DOMNAME="SPART" DATATYPE="CHAR" LENG="000002"/>
  <dd05m TABNAME="ZNAOCT_QTD_CTRLD" FIELDNAME="ZZDEAL_CODE" FORTABLE="ZNAOCT_QTD_CTRLD" FORKEY="KUNNR" CHECKTABLE="ZNAOCT_QTD_CTRLH" CHECKFIELD="KUNNR" PRIMPOS="0003" DOMNAME="KUNNR" DATATYPE="CHAR" LENG="000010"/>
  <dd05m TABNAME="ZNAOCT_QTD_CTRLD" FIELDNAME="ZZDEAL_CODE" FORTABLE="ZNAOCT_QTD_CTRLD" FORKEY="ZZDEAL_CODE" CHECKTABLE="ZNAOCT_QTD_CTRLH" CHECKFIELD="ZZDEAL_CODE" PRIMPOS="0004" DOMNAME="CHAR005" DATATYPE="CHAR" LENG="000005"/>
  <dd05m TABNAME="ZNAOCT_QTD_CTRLD" FIELDNAME="ZZDEAL_CODE" FORTABLE="ZNAOCT_QTD_CTRLD" FORKEY="ENDDT" CHECKTABLE="ZNAOCT_QTD_CTRLH" CHECKFIELD="ENDDT" PRIMPOS="0005" DOMNAME="DATUM" DATATYPE="DATS" LENG="000008"/>
  <dd08v TABNAME="ZNAOCT_QTD_CTRLD" FIELDNAME="ENDDT" DDLANGUAGE="E" CHECKTABLE="ZNAOCT_QTD_CTRLH" FRKART="KEY" CARD="CN" DDTEXT="From Deal quantity setting" CARDLEFT="1"/>
  <dd08v TABNAME="ZNAOCT_QTD_CTRLD" FIELDNAME="KUNNR" DDLANGUAGE="E" CHECKTABLE="KNA1" FRKART="KEY" CARD="CN" DDTEXT="From customers master data" CARDLEFT="1"/>
  <dd08v TABNAME="ZNAOCT_QTD_CTRLD" FIELDNAME="MANDT" DDLANGUAGE="E" CHECKTABLE="T000" FRKART="KEY" CARD="CN" DDTEXT="From clients master" CARDLEFT="1"/>
  <dd08v TABNAME="ZNAOCT_QTD_CTRLD" FIELDNAME="POSNR" DDLANGUAGE="E" CHECKTABLE="VBUP" FRKART="KEY" CARD="CN" DDTEXT="Sales Document: Item Status" CARDLEFT="1"/>
  <dd08v TABNAME="ZNAOCT_QTD_CTRLD" FIELDNAME="SPART" DDLANGUAGE="E" CHECKTABLE="TSPA" FRKART="KEY" CARD="CN" DDTEXT="From divisions master data" CARDLEFT="1"/>
  <dd08v TABNAME="ZNAOCT_QTD_CTRLD" FIELDNAME="VBELN" DDLANGUAGE="E" CHECKTABLE="VBUK" FRKART="KEY" CARD="CN" DDTEXT="From Sales Document: Header Status and Administrative Data" CARDLEFT="1"/>
  <dd08v TABNAME="ZNAOCT_QTD_CTRLD" FIELDNAME="ZZDEAL_CODE" DDLANGUAGE="E" CHECKTABLE="ZNAOCT_QTD_CTRLH" FRKART="KEY" CARD="CN" DDTEXT="From Deal quantity setting" CARDLEFT="1"/>
 </TABL>
 <TABL TABNAME="ZNAOCT_QTD_CTRLH" DDLANGUAGE="E" TABCLASS="TRANSP" DATMIN="0000000000" DATMAX="0000000000" DATAVG="0000000000" CLIDEP="X" DDTEXT="Allowed quantity per Deal Code" AUTHCLASS="00" MAINFLAG="X" CONTFLAG="A" PROZPUFF="000" EXCLASS="3">
  <dd09l TABNAME="ZNAOCT_QTD_CTRLH" AS4LOCAL="A" AS4VERS="0000" TABKAT="3" TABART="USER" PUFFERUNG="G" SCHFELDANZ="003" BUFALLOW="X" ROWORCOLST="C"/>
  <dd03p TABNAME="ZNAOCT_QTD_CTRLH" FIELDNAME="MANDT" DDLANGUAGE="E" POSITION="0001" KEYFLAG="X" ROLLNAME="MANDT" CHECKTABLE="T000" ADMINFIELD="0" INTTYPE="C" INTLEN="000006" NOTNULL="X" DOMNAME="MANDT" ROUTPUTLEN="000000" HEADLEN="03" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="CLNT" LENG="000003" OUTPUTLEN="000003" DECIMALS="000000" ENTITYTAB="T000" MASK="  CLNTE" MASKLEN="0000" DDTEXT="Client" REPTEXT="Cl." SCRTEXT_S="Client" SCRTEXT_M="Client" SCRTEXT_L="Client" DOMNAME3L="MANDT" SHLPORIGIN="P" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZNAOCT_QTD_CTRLH" FIELDNAME="SPART" DDLANGUAGE="E" POSITION="0002" KEYFLAG="X" ROLLNAME="SPART" CHECKTABLE="TSPA" ADMINFIELD="0" INTTYPE="C" INTLEN="000004" NOTNULL="X" DOMNAME="SPART" ROUTPUTLEN="000000" MEMORYID="SPA" LOGFLAG="X" HEADLEN="02" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="CHAR" LENG="000002" OUTPUTLEN="000002" DECIMALS="000000" ENTITYTAB="TSPA" MASK="  CHARE" MASKLEN="0000" DDTEXT="Division" REPTEXT="Dv" SCRTEXT_S="Division" SCRTEXT_M="Division" SCRTEXT_L="Division" DOMNAME3L="SPART" SHLPORIGIN="P" SHLPNAME="C_SPART" SHLPFIELD="SPART" DEPTH="00" COMPTYPE="E" DEFFDNAME="DIVISION" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZNAOCT_QTD_CTRLH" FIELDNAME="KUNNR" DDLANGUAGE="E" POSITION="0003" KEYFLAG="X" ROLLNAME="KUNNR" CHECKTABLE="KNA1" ADMINFIELD="0" INTTYPE="C" INTLEN="000020" NOTNULL="X" DOMNAME="KUNNR" ROUTPUTLEN="000000" MEMORYID="KUN" LOGFLAG="X" HEADLEN="10" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="CHAR" LENG="000010" OUTPUTLEN="000010" DECIMALS="000000" ENTITYTAB="KNA1" CONVEXIT="ALPHA" MASK="  CHARE" MASKLEN="0000" DDTEXT="Customer Number" REPTEXT="Customer" SCRTEXT_S="Customer" SCRTEXT_M="Customer" SCRTEXT_L="Customer" DOMNAME3L="KUNNR" SHLPORIGIN="P" SHLPNAME="C_KUNNR" SHLPFIELD="KUNNR" DEPTH="00" COMPTYPE="E" DEFFDNAME="CUSTOMER" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZNAOCT_QTD_CTRLH" FIELDNAME="ZZDEAL_CODE" DDLANGUAGE="E" POSITION="0004" KEYFLAG="X" ROLLNAME="ZGLOC_DEAL_CODE" ADMINFIELD="0" INTTYPE="C" INTLEN="000010" NOTNULL="X" DOMNAME="CHAR005" ROUTPUTLEN="000000" HEADLEN="17" SCRLEN1="10" SCRLEN2="17" SCRLEN3="20" DTELMASTER="E" DATATYPE="CHAR" LENG="000005" OUTPUTLEN="000005" DECIMALS="000000" MASK="  CHARE" MASKLEN="0000" DDTEXT="Deal code - JBOSS" REPTEXT="Deal code - JBOSS" SCRTEXT_S="Deal code" SCRTEXT_M="Deal code - JBOSS" SCRTEXT_L="Deal code - JBOSS" DOMNAME3L="CHAR005" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZNAOCT_QTD_CTRLH" FIELDNAME="ENDDT" DDLANGUAGE="E" POSITION="0005" KEYFLAG="X" ROLLNAME="ZNAOCE_DEAL_END" ADMINFIELD="0" INTTYPE="D" INTLEN="000016" NOTNULL="X" DOMNAME="DATUM" ROUTPUTLEN="000000" HEADLEN="15" SCRLEN1="10" SCRLEN2="15" SCRLEN3="15" DTELMASTER="E" DATATYPE="DATS" LENG="000008" OUTPUTLEN="000010" DECIMALS="000000" MASK="  DATSE" MASKLEN="0000" DDTEXT="Expiration date" REPTEXT="Expiration date" SCRTEXT_S="Expiration" SCRTEXT_M="Expiration date" SCRTEXT_L="Expiration date" DOMNAME3L="DATUM" SHLPORIGIN="T" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZNAOCT_QTD_CTRLH" FIELDNAME="BEGDT" DDLANGUAGE="E" POSITION="0006" ROLLNAME="ZNAOCE_DEAL_BEGIN" ADMINFIELD="0" INTTYPE="D" INTLEN="000016" DOMNAME="DATS" ROUTPUTLEN="000000" HEADLEN="14" SCRLEN1="10" SCRLEN2="14" SCRLEN3="14" DTELMASTER="E" DATATYPE="DATS" LENG="000008" OUTPUTLEN="000010" DECIMALS="000000" MASK="  DATSE" MASKLEN="0000" DDTEXT="Effective date" REPTEXT="Effective date" SCRTEXT_S="Effective" SCRTEXT_M="Effective date" SCRTEXT_L="Effective date" DOMMASTER="D" DOMNAME3L="DATS" SHLPORIGIN="T" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZNAOCT_QTD_CTRLH" FIELDNAME="UOM" DDLANGUAGE="E" POSITION="0007" ROLLNAME="KMEIN" CHECKTABLE="T006" ADMINFIELD="0" INTTYPE="C" INTLEN="000006" DOMNAME="MEINS" ROUTPUTLEN="000000" LOGFLAG="X" HEADLEN="03" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="UNIT" LENG="000003" OUTPUTLEN="000003" DECIMALS="000000" LOWERCASE="X" ENTITYTAB="T006" CONVEXIT="CUNIT" MASK="  UNITE" MASKLEN="0000" DDTEXT="Condition unit" REPTEXT="UoM" SCRTEXT_S="Unit" SCRTEXT_M="Unit of measure" SCRTEXT_L="Unit of measure" DOMNAME3L="MEINS" SHLPORIGIN="P" DEPTH="00" COMPTYPE="E" DEFFDNAME="COND_UNIT" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZNAOCT_QTD_CTRLH" FIELDNAME="QTD_ALLOWED" DDLANGUAGE="E" POSITION="0008" ROLLNAME="ZNAOCE_DEAL_ALLOWED_QTY" ADMINFIELD="0" INTTYPE="P" INTLEN="000008" REFTABLE="ZNAOCT_QTD_CTRLH" REFFIELD="UOM" DOMNAME="MENG15" ROUTPUTLEN="000000" HEADLEN="19" SCRLEN1="10" SCRLEN2="20" SCRLEN3="40" DTELMASTER="E" DATATYPE="QUAN" LENG="000015" OUTPUTLEN="000019" DECIMALS="000003" MASK="  QUANE" MASKLEN="0000" DDTEXT="Allowed quantity" REPTEXT="Allowed quantity" SCRTEXT_S="Quantity" SCRTEXT_M="Allowed quantity" SCRTEXT_L="Allowed quantity" DOMNAME3L="MENG15" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZNAOCT_QTD_CTRLH" FIELDNAME="CREDAT" DDLANGUAGE="E" POSITION="0009" ROLLNAME="ZNAOCE_DEAL_CREATION" ADMINFIELD="0" INTTYPE="D" INTLEN="000016" DOMNAME="DATS" ROUTPUTLEN="000000" HEADLEN="44" SCRLEN1="10" SCRLEN2="20" SCRLEN3="40" DTELMASTER="E" DATATYPE="DATS" LENG="000008" OUTPUTLEN="000010" DECIMALS="000000" MASK="  DATSE" MASKLEN="0000" DDTEXT="Date of creation of the deal quantity record" REPTEXT="Date of creation of the deal quantity record" SCRTEXT_S="Creation" SCRTEXT_M="Creation date" SCRTEXT_L="Creation of the deal quantity record" DOMMASTER="D" DOMNAME3L="DATS" SHLPORIGIN="T" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZNAOCT_QTD_CTRLH" FIELDNAME="CREUSR" DDLANGUAGE="E" POSITION="0010" ROLLNAME="ZNAOCE_DEAL_CREATOR" ADMINFIELD="0" INTTYPE="C" INTLEN="000024" DOMNAME="XUBNAME" ROUTPUTLEN="000000" HEADLEN="45" SCRLEN1="10" SCRLEN2="20" SCRLEN3="40" DTELMASTER="E" DATATYPE="CHAR" LENG="000012" OUTPUTLEN="000012" DECIMALS="000000" ENTITYTAB="USR02" MASK="  CHARE" MASKLEN="0000" DDTEXT="User code of the creator of the deal quantity" REPTEXT="User code of the creator of the deal quantity" SCRTEXT_S="Creator" SCRTEXT_M="Deal qty. creator" SCRTEXT_L="Creator of the deal quantity" DOMMASTER="D" DOMNAME3L="XUBNAME" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZNAOCT_QTD_CTRLH" FIELDNAME="CRETIM" DDLANGUAGE="E" POSITION="0011" ROLLNAME="CTME" ADMINFIELD="0" INTTYPE="T" INTLEN="000012" DOMNAME="CTME" ROUTPUTLEN="000000" HEADLEN="20" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DATATYPE="TIMS" LENG="000006" OUTPUTLEN="000008" DECIMALS="000000" MASK="  TIMSE" MASKLEN="0000" DDTEXT="Time of creation" REPTEXT="Time" SCRTEXT_S="Time" SCRTEXT_M="Time" SCRTEXT_L="Time of creation" DOMNAME3L="CTME" SHLPORIGIN="T" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZNAOCT_QTD_CTRLH" FIELDNAME="AENAM" DDLANGUAGE="E" POSITION="0012" ROLLNAME="AENAM" ADMINFIELD="0" INTTYPE="C" INTLEN="000024" DOMNAME="USNAM" ROUTPUTLEN="000000" HEADLEN="12" SCRLEN1="06" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="CHAR" LENG="000012" OUTPUTLEN="000012" DECIMALS="000000" MASK="  CHARE" MASKLEN="0000" DDTEXT="Name of Person Who Changed Object" REPTEXT="Changed by" SCRTEXT_S="By" SCRTEXT_M="Changed by" SCRTEXT_L="Changed by" DOMNAME3L="USNAM" DEPTH="00" COMPTYPE="E" DEFFDNAME="CHANGED_BY" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZNAOCT_QTD_CTRLH" FIELDNAME="AEDAT" DDLANGUAGE="E" POSITION="0013" ROLLNAME="AEDAT" ADMINFIELD="0" INTTYPE="D" INTLEN="000016" DOMNAME="DATUM" ROUTPUTLEN="000000" HEADLEN="08" SCRLEN1="05" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="DATS" LENG="000008" OUTPUTLEN="000010" DECIMALS="000000" MASK="  DATSE" MASKLEN="0000" DDTEXT="Changed On" REPTEXT="Chngd on" SCRTEXT_S="Chngd" SCRTEXT_M="Changed on" SCRTEXT_L="Changed on" DOMNAME3L="DATUM" SHLPORIGIN="T" DEPTH="00" COMPTYPE="E" DEFFDNAME="CH_ON" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZNAOCT_QTD_CTRLH" FIELDNAME="AETIM" DDLANGUAGE="E" POSITION="0014" ROLLNAME="AEZET" ADMINFIELD="0" INTTYPE="T" INTLEN="000012" DOMNAME="UZEIT" ROUTPUTLEN="000000" LOGFLAG="X" HEADLEN="10" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DATATYPE="TIMS" LENG="000006" OUTPUTLEN="000008" DECIMALS="000000" MASK="  TIMSE" MASKLEN="0000" DDTEXT="Time last change was made" REPTEXT="TimeOfChng" SCRTEXT_S="TimeOfChng" SCRTEXT_M="Time of change" SCRTEXT_L="Changed at" DOMNAME3L="UZEIT" SHLPORIGIN="T" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZNAOCT_QTD_CTRLH" FIELDNAME="CHNUSR" DDLANGUAGE="E" POSITION="0015" ROLLNAME="ZNAOCE_DEAL_CHANGER" ADMINFIELD="0" INTTYPE="C" INTLEN="000024" DOMNAME="XUBNAME" ROUTPUTLEN="000000" HEADLEN="52" SCRLEN1="10" SCRLEN2="20" SCRLEN3="40" DTELMASTER="E" DATATYPE="CHAR" LENG="000012" OUTPUTLEN="000012" DECIMALS="000000" ENTITYTAB="USR02" MASK="  CHARE" MASKLEN="0000" DDTEXT="User name of the changer of the deal quantity record" REPTEXT="User name of the changer of the deal quantity record" SCRTEXT_S="Changer" SCRTEXT_M="Deal qty. changer" SCRTEXT_L="Changer of the deal quantity record" DOMMASTER="D" DOMNAME3L="XUBNAME" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd05m TABNAME="ZNAOCT_QTD_CTRLH" FIELDNAME="KUNNR" FORTABLE="ZNAOCT_QTD_CTRLH" FORKEY="MANDT" CHECKTABLE="KNA1" CHECKFIELD="MANDT" PRIMPOS="0001" DOMNAME="MANDT" DATATYPE="CLNT" LENG="000003"/>
  <dd05m TABNAME="ZNAOCT_QTD_CTRLH" FIELDNAME="KUNNR" FORTABLE="ZNAOCT_QTD_CTRLH" FORKEY="KUNNR" CHECKTABLE="KNA1" CHECKFIELD="KUNNR" PRIMPOS="0002" DOMNAME="KUNNR" DATATYPE="CHAR" LENG="000010"/>
  <dd05m TABNAME="ZNAOCT_QTD_CTRLH" FIELDNAME="MANDT" FORTABLE="ZNAOCT_QTD_CTRLH" FORKEY="MANDT" CHECKTABLE="T000" CHECKFIELD="MANDT" PRIMPOS="0001" DOMNAME="MANDT" DATATYPE="CLNT" LENG="000003"/>
  <dd05m TABNAME="ZNAOCT_QTD_CTRLH" FIELDNAME="SPART" FORTABLE="ZNAOCT_QTD_CTRLH" FORKEY="MANDT" CHECKTABLE="TSPA" CHECKFIELD="MANDT" PRIMPOS="0001" DOMNAME="MANDT" DATATYPE="CLNT" LENG="000003"/>
  <dd05m TABNAME="ZNAOCT_QTD_CTRLH" FIELDNAME="SPART" FORTABLE="ZNAOCT_QTD_CTRLH" FORKEY="SPART" CHECKTABLE="TSPA" CHECKFIELD="SPART" PRIMPOS="0002" DOMNAME="SPART" DATATYPE="CHAR" LENG="000002"/>
  <dd05m TABNAME="ZNAOCT_QTD_CTRLH" FIELDNAME="UOM" FORTABLE="ZNAOCT_QTD_CTRLH" FORKEY="MANDT" CHECKTABLE="T006" CHECKFIELD="MANDT" PRIMPOS="0001" DOMNAME="MANDT" DATATYPE="CLNT" LENG="000003"/>
  <dd05m TABNAME="ZNAOCT_QTD_CTRLH" FIELDNAME="UOM" FORTABLE="ZNAOCT_QTD_CTRLH" FORKEY="UOM" CHECKTABLE="T006" CHECKFIELD="MSEHI" PRIMPOS="0002" DOMNAME="MEINS" DATATYPE="UNIT" LENG="000003"/>
  <dd08v TABNAME="ZNAOCT_QTD_CTRLH" FIELDNAME="KUNNR" DDLANGUAGE="E" CHECKTABLE="KNA1" FRKART="KEY" CARD="CN" DDTEXT="From customers master data" CARDLEFT="1"/>
  <dd08v TABNAME="ZNAOCT_QTD_CTRLH" FIELDNAME="MANDT" DDLANGUAGE="E" CHECKTABLE="T000" FRKART="KEY" CARD="CN" DDTEXT="From clients master" CARDLEFT="1"/>
  <dd08v TABNAME="ZNAOCT_QTD_CTRLH" FIELDNAME="SPART" DDLANGUAGE="E" CHECKTABLE="TSPA" FRKART="KEY" CARD="CN" DDTEXT="From divisions master data" CARDLEFT="1"/>
  <dd08v TABNAME="ZNAOCT_QTD_CTRLH" FIELDNAME="UOM" DDLANGUAGE="E" CHECKTABLE="T006" FRKART="KEY" CARD="CN" DDTEXT="From Units of Measure master data" CARDLEFT="1"/>
 </TABL>
 <TABL TABNAME="ZNAOCS_DEAL_QTY_CONSUMPTION" DDLANGUAGE="E" TABCLASS="INTTAB" DATMIN="0000000000" DATMAX="0000000000" DATAVG="0000000000" DDTEXT="Quota consumption entry" AUTHCLASS="00" PROZPUFF="000" EXCLASS="1">
  <dd09l AS4VERS="0000" SCHFELDANZ="000"/>
  <dd03p TABNAME="ZNAOCS_DEAL_QTY_CONSUMPTION" FIELDNAME="VBELN" DDLANGUAGE="E" POSITION="0001" ROLLNAME="VBELN" ADMINFIELD="0" INTTYPE="C" INTLEN="000020" DOMNAME="VBELN" ROUTPUTLEN="000000" MEMORYID="AUN" HEADLEN="10" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="CHAR" LENG="000010" OUTPUTLEN="000010" DECIMALS="000000" ENTITYTAB="VBUK" CONVEXIT="ALPHA" MASK="  CHARE" MASKLEN="0000" DDTEXT="Sales and Distribution Document Number" REPTEXT="Document" SCRTEXT_S="SD Doc." SCRTEXT_M="Sales Document" SCRTEXT_L="Sales Document" DOMNAME3L="VBELN" DEPTH="00" COMPTYPE="E" DEFFDNAME="SD_DOC" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZNAOCS_DEAL_QTY_CONSUMPTION" FIELDNAME="POSNR" DDLANGUAGE="E" POSITION="0002" ROLLNAME="POSNR" ADMINFIELD="0" INTTYPE="N" INTLEN="000012" DOMNAME="POSNR" ROUTPUTLEN="000000" HEADLEN="06" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="NUMC" LENG="000006" OUTPUTLEN="000006" DECIMALS="000000" ENTITYTAB="VBUP" MASK="  NUMCE" MASKLEN="0000" DDTEXT="Item number of the SD document" REPTEXT="Item" SCRTEXT_S="Item" SCRTEXT_M="Item" SCRTEXT_L="Item (SD)" DOMNAME3L="POSNR" DEPTH="00" COMPTYPE="E" DEFFDNAME="ITM_NUMBER" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZNAOCS_DEAL_QTY_CONSUMPTION" FIELDNAME="QTD_ORDERED" DDLANGUAGE="E" POSITION="0003" ROLLNAME="MENGE_D" ADMINFIELD="0" INTTYPE="P" INTLEN="000007" REFTABLE="ZNAOCT_QTD_CTRLH" REFFIELD="UOM" DOMNAME="MENG13" ROUTPUTLEN="000000" LOGFLAG="X" HEADLEN="17" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="QUAN" LENG="000013" OUTPUTLEN="000017" DECIMALS="000003" MASK="  QUANE" MASKLEN="0000" DDTEXT="Quantity" REPTEXT="Quantity" SCRTEXT_S="Quantity" SCRTEXT_M="Quantity" SCRTEXT_L="Quantity" DOMNAME3L="MENG13" DEPTH="00" COMPTYPE="E" DEFFDNAME="QUANTITY" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
 </TABL>
 <TABL TABNAME="ZNAOCS_PLAIN_VIEW" DDLANGUAGE="E" TABCLASS="INTTAB" DATMIN="0000000000" DATMAX="0000000000" DATAVG="0000000000" DDTEXT="Allowed quantity per Deal Code - Plain view" AUTHCLASS="00" PROZPUFF="000" EXCLASS="4">
  <dd09l AS4VERS="0000" SCHFELDANZ="000"/>
  <dd03p TABNAME="ZNAOCS_PLAIN_VIEW" FIELDNAME="SPART" DDLANGUAGE="E" POSITION="0001" ROLLNAME="SPART" ADMINFIELD="0" INTTYPE="C" INTLEN="000004" DOMNAME="SPART" ROUTPUTLEN="000000" MEMORYID="SPA" LOGFLAG="X" HEADLEN="02" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="CHAR" LENG="000002" OUTPUTLEN="000002" DECIMALS="000000" ENTITYTAB="TSPA" MASK="  CHARE" MASKLEN="0000" DDTEXT="Division" REPTEXT="Dv" SCRTEXT_S="Division" SCRTEXT_M="Division" SCRTEXT_L="Division" DOMNAME3L="SPART" SHLPORIGIN="D" SHLPNAME="C_SPART" SHLPFIELD="SPART" DEPTH="00" COMPTYPE="E" DEFFDNAME="DIVISION" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZNAOCS_PLAIN_VIEW" FIELDNAME="KUNNR" DDLANGUAGE="E" POSITION="0002" ROLLNAME="KUNNR" ADMINFIELD="0" INTTYPE="C" INTLEN="000020" DOMNAME="KUNNR" ROUTPUTLEN="000000" MEMORYID="KUN" LOGFLAG="X" HEADLEN="10" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="CHAR" LENG="000010" OUTPUTLEN="000010" DECIMALS="000000" ENTITYTAB="KNA1" CONVEXIT="ALPHA" MASK="  CHARE" MASKLEN="0000" DDTEXT="Customer Number" REPTEXT="Customer" SCRTEXT_S="Customer" SCRTEXT_M="Customer" SCRTEXT_L="Customer" DOMNAME3L="KUNNR" SHLPORIGIN="D" SHLPNAME="C_KUNNR" SHLPFIELD="KUNNR" DEPTH="00" COMPTYPE="E" DEFFDNAME="CUSTOMER" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZNAOCS_PLAIN_VIEW" FIELDNAME="ZZDEAL_CODE" DDLANGUAGE="E" POSITION="0003" ROLLNAME="ZGLOC_DEAL_CODE" ADMINFIELD="0" INTTYPE="C" INTLEN="000010" DOMNAME="CHAR005" ROUTPUTLEN="000000" HEADLEN="17" SCRLEN1="10" SCRLEN2="17" SCRLEN3="20" DTELMASTER="E" DATATYPE="CHAR" LENG="000005" OUTPUTLEN="000005" DECIMALS="000000" MASK="  CHARE" MASKLEN="0000" DDTEXT="Deal code - JBOSS" REPTEXT="Deal code - JBOSS" SCRTEXT_S="Deal code" SCRTEXT_M="Deal code - JBOSS" SCRTEXT_L="Deal code - JBOSS" DOMNAME3L="CHAR005" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZNAOCS_PLAIN_VIEW" FIELDNAME="ENDDT" DDLANGUAGE="E" POSITION="0004" ROLLNAME="ZNAOCE_DEAL_END" ADMINFIELD="0" INTTYPE="D" INTLEN="000016" DOMNAME="DATUM" ROUTPUTLEN="000000" HEADLEN="15" SCRLEN1="10" SCRLEN2="15" SCRLEN3="15" DTELMASTER="E" DATATYPE="DATS" LENG="000008" OUTPUTLEN="000010" DECIMALS="000000" MASK="  DATSE" MASKLEN="0000" DDTEXT="Expiration date" REPTEXT="Expiration date" SCRTEXT_S="Expiration" SCRTEXT_M="Expiration date" SCRTEXT_L="Expiration date" DOMNAME3L="DATUM" SHLPORIGIN="T" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZNAOCS_PLAIN_VIEW" FIELDNAME="BEGDT" DDLANGUAGE="E" POSITION="0005" ROLLNAME="ZNAOCE_DEAL_BEGIN" ADMINFIELD="0" INTTYPE="D" INTLEN="000016" DOMNAME="DATS" ROUTPUTLEN="000000" HEADLEN="14" SCRLEN1="10" SCRLEN2="14" SCRLEN3="14" DTELMASTER="E" DATATYPE="DATS" LENG="000008" OUTPUTLEN="000010" DECIMALS="000000" MASK="  DATSE" MASKLEN="0000" DDTEXT="Effective date" REPTEXT="Effective date" SCRTEXT_S="Effective" SCRTEXT_M="Effective date" SCRTEXT_L="Effective date" DOMMASTER="D" DOMNAME3L="DATS" SHLPORIGIN="T" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZNAOCS_PLAIN_VIEW" FIELDNAME="UOM" DDLANGUAGE="E" POSITION="0006" ROLLNAME="KMEIN" ADMINFIELD="0" INTTYPE="C" INTLEN="000006" DOMNAME="MEINS" ROUTPUTLEN="000000" LOGFLAG="X" HEADLEN="03" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="UNIT" LENG="000003" OUTPUTLEN="000003" DECIMALS="000000" LOWERCASE="X" ENTITYTAB="T006" CONVEXIT="CUNIT" MASK="  UNITE" MASKLEN="0000" DDTEXT="Condition unit" REPTEXT="UoM" SCRTEXT_S="Unit" SCRTEXT_M="Unit of measure" SCRTEXT_L="Unit of measure" DOMNAME3L="MEINS" DEPTH="00" COMPTYPE="E" DEFFDNAME="COND_UNIT" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZNAOCS_PLAIN_VIEW" FIELDNAME="QTD_ALLOWED" DDLANGUAGE="E" POSITION="0007" ROLLNAME="ZNAOCE_DEAL_ALLOWED_QTY" ADMINFIELD="0" INTTYPE="P" INTLEN="000008" REFTABLE="ZNAOCS_PLAIN_VIEW" REFFIELD="UOM" DOMNAME="MENG15" ROUTPUTLEN="000000" HEADLEN="19" SCRLEN1="10" SCRLEN2="20" SCRLEN3="40" DTELMASTER="E" DATATYPE="QUAN" LENG="000015" OUTPUTLEN="000019" DECIMALS="000003" MASK="  QUANE" MASKLEN="0000" DDTEXT="Allowed quantity" REPTEXT="Allowed quantity" SCRTEXT_S="Quantity" SCRTEXT_M="Allowed quantity" SCRTEXT_L="Allowed quantity" DOMNAME3L="MENG15" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZNAOCS_PLAIN_VIEW" FIELDNAME="CREDAT" DDLANGUAGE="E" POSITION="0008" ROLLNAME="ZNAOCE_DEAL_CREATION" ADMINFIELD="0" INTTYPE="D" INTLEN="000016" DOMNAME="DATS" ROUTPUTLEN="000000" HEADLEN="44" SCRLEN1="10" SCRLEN2="20" SCRLEN3="40" DTELMASTER="E" DATATYPE="DATS" LENG="000008" OUTPUTLEN="000010" DECIMALS="000000" MASK="  DATSE" MASKLEN="0000" DDTEXT="Date of creation of the deal quantity record" REPTEXT="Date of creation of the deal quantity record" SCRTEXT_S="Creation" SCRTEXT_M="Creation date" SCRTEXT_L="Creation of the deal quantity record" DOMMASTER="D" DOMNAME3L="DATS" SHLPORIGIN="T" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZNAOCS_PLAIN_VIEW" FIELDNAME="CREUSR" DDLANGUAGE="E" POSITION="0009" ROLLNAME="ZNAOCE_DEAL_CREATOR" ADMINFIELD="0" INTTYPE="C" INTLEN="000024" DOMNAME="XUBNAME" ROUTPUTLEN="000000" HEADLEN="45" SCRLEN1="10" SCRLEN2="20" SCRLEN3="40" DTELMASTER="E" DATATYPE="CHAR" LENG="000012" OUTPUTLEN="000012" DECIMALS="000000" ENTITYTAB="USR02" MASK="  CHARE" MASKLEN="0000" DDTEXT="User code of the creator of the deal quantity" REPTEXT="User code of the creator of the deal quantity" SCRTEXT_S="Creator" SCRTEXT_M="Deal qty. creator" SCRTEXT_L="Creator of the deal quantity" DOMMASTER="D" DOMNAME3L="XUBNAME" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZNAOCS_PLAIN_VIEW" FIELDNAME="CRETIM" DDLANGUAGE="E" POSITION="0010" ROLLNAME="CTME" ADMINFIELD="0" INTTYPE="T" INTLEN="000012" DOMNAME="CTME" ROUTPUTLEN="000000" HEADLEN="20" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DATATYPE="TIMS" LENG="000006" OUTPUTLEN="000008" DECIMALS="000000" MASK="  TIMSE" MASKLEN="0000" DDTEXT="Time of creation" REPTEXT="Time" SCRTEXT_S="Time" SCRTEXT_M="Time" SCRTEXT_L="Time of creation" DOMNAME3L="CTME" SHLPORIGIN="T" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZNAOCS_PLAIN_VIEW" FIELDNAME="AENAM" DDLANGUAGE="E" POSITION="0011" ROLLNAME="AENAM" ADMINFIELD="0" INTTYPE="C" INTLEN="000024" DOMNAME="USNAM" ROUTPUTLEN="000000" HEADLEN="12" SCRLEN1="06" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="CHAR" LENG="000012" OUTPUTLEN="000012" DECIMALS="000000" MASK="  CHARE" MASKLEN="0000" DDTEXT="Name of Person Who Changed Object" REPTEXT="Changed by" SCRTEXT_S="By" SCRTEXT_M="Changed by" SCRTEXT_L="Changed by" DOMNAME3L="USNAM" DEPTH="00" COMPTYPE="E" DEFFDNAME="CHANGED_BY" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZNAOCS_PLAIN_VIEW" FIELDNAME="AEDAT" DDLANGUAGE="E" POSITION="0012" ROLLNAME="AEDAT" ADMINFIELD="0" INTTYPE="D" INTLEN="000016" DOMNAME="DATUM" ROUTPUTLEN="000000" HEADLEN="08" SCRLEN1="05" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="DATS" LENG="000008" OUTPUTLEN="000010" DECIMALS="000000" MASK="  DATSE" MASKLEN="0000" DDTEXT="Changed On" REPTEXT="Chngd on" SCRTEXT_S="Chngd" SCRTEXT_M="Changed on" SCRTEXT_L="Changed on" DOMNAME3L="DATUM" SHLPORIGIN="T" DEPTH="00" COMPTYPE="E" DEFFDNAME="CH_ON" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZNAOCS_PLAIN_VIEW" FIELDNAME="AETIM" DDLANGUAGE="E" POSITION="0013" ROLLNAME="AEZET" ADMINFIELD="0" INTTYPE="T" INTLEN="000012" DOMNAME="UZEIT" ROUTPUTLEN="000000" LOGFLAG="X" HEADLEN="10" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DATATYPE="TIMS" LENG="000006" OUTPUTLEN="000008" DECIMALS="000000" MASK="  TIMSE" MASKLEN="0000" DDTEXT="Time last change was made" REPTEXT="TimeOfChng" SCRTEXT_S="TimeOfChng" SCRTEXT_M="Time of change" SCRTEXT_L="Changed at" DOMNAME3L="UZEIT" SHLPORIGIN="T" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZNAOCS_PLAIN_VIEW" FIELDNAME="CHNUSR" DDLANGUAGE="E" POSITION="0014" ROLLNAME="ZNAOCE_DEAL_CHANGER" ADMINFIELD="0" INTTYPE="C" INTLEN="000024" DOMNAME="XUBNAME" ROUTPUTLEN="000000" HEADLEN="52" SCRLEN1="10" SCRLEN2="20" SCRLEN3="40" DTELMASTER="E" DATATYPE="CHAR" LENG="000012" OUTPUTLEN="000012" DECIMALS="000000" ENTITYTAB="USR02" MASK="  CHARE" MASKLEN="0000" DDTEXT="User name of the changer of the deal quantity record" REPTEXT="User name of the changer of the deal quantity record" SCRTEXT_S="Changer" SCRTEXT_M="Deal qty. changer" SCRTEXT_L="Changer of the deal quantity record" DOMMASTER="D" DOMNAME3L="XUBNAME" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZNAOCS_PLAIN_VIEW" FIELDNAME="VBELN" DDLANGUAGE="E" POSITION="0015" ROLLNAME="VBELN_VA" ADMINFIELD="0" INTTYPE="C" INTLEN="000020" DOMNAME="VBELN" ROUTPUTLEN="000000" MEMORYID="AUN" HEADLEN="10" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="CHAR" LENG="000010" OUTPUTLEN="000010" DECIMALS="000000" ENTITYTAB="VBUK" CONVEXIT="ALPHA" MASK="  CHARE" MASKLEN="0000" DDTEXT="Sales Document" REPTEXT="Sales Doc." SCRTEXT_S="Sales Doc." SCRTEXT_M="Sales Document" SCRTEXT_L="Sales Document" DOMNAME3L="VBELN" DEPTH="00" COMPTYPE="E" DEFFDNAME="DOC_NUMBER" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZNAOCS_PLAIN_VIEW" FIELDNAME="POSNR" DDLANGUAGE="E" POSITION="0016" ROLLNAME="POSNR_VA" ADMINFIELD="0" INTTYPE="N" INTLEN="000012" DOMNAME="POSNR" ROUTPUTLEN="000000" MEMORYID="APO" HEADLEN="06" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="NUMC" LENG="000006" OUTPUTLEN="000006" DECIMALS="000000" ENTITYTAB="VBUP" MASK="  NUMCE" MASKLEN="0000" DDTEXT="Sales Document Item" REPTEXT="Item" SCRTEXT_S="Item" SCRTEXT_M="Item" SCRTEXT_L="Sales Document Item" DOMNAME3L="POSNR" DEPTH="00" COMPTYPE="E" DEFFDNAME="ITM_NUMBER" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZNAOCS_PLAIN_VIEW" FIELDNAME="QTD_ORDERED" DDLANGUAGE="E" POSITION="0017" ROLLNAME="MENGE_D" ADMINFIELD="0" INTTYPE="P" INTLEN="000007" REFTABLE="ZNAOCS_PLAIN_VIEW" REFFIELD="UOM" DOMNAME="MENG13" ROUTPUTLEN="000000" LOGFLAG="X" HEADLEN="17" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="QUAN" LENG="000013" OUTPUTLEN="000017" DECIMALS="000003" MASK="  QUANE" MASKLEN="0000" DDTEXT="Quantity" REPTEXT="Quantity" SCRTEXT_S="Quantity" SCRTEXT_M="Quantity" SCRTEXT_L="Quantity" DOMNAME3L="MENG13" DEPTH="00" COMPTYPE="E" DEFFDNAME="QUANTITY" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZNAOCS_PLAIN_VIEW" FIELDNAME="NAME1" DDLANGUAGE="E" POSITION="0018" ROLLNAME="NAME1_GP" ADMINFIELD="0" INTTYPE="C" INTLEN="000070" DOMNAME="NAME" ROUTPUTLEN="000000" LOGFLAG="X" HEADLEN="35" SCRLEN1="10" SCRLEN2="12" SCRLEN3="20" DTELMASTER="D" DATATYPE="CHAR" LENG="000035" OUTPUTLEN="000035" DECIMALS="000000" LOWERCASE="X" MASK="  CHARE" MASKLEN="0000" DDTEXT="Name 1" REPTEXT="Name 1" SCRTEXT_S="Name" SCRTEXT_M="Name" SCRTEXT_L="Name" DOMNAME3L="NAME" DEPTH="00" COMPTYPE="E" DEFFDNAME="NAME" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZNAOCS_PLAIN_VIEW" FIELDNAME="T_COL" DDLANGUAGE="E" POSITION="0019" ROLLNAME="LVC_T_SCOL" ADMINFIELD="0" INTLEN="000000" ROUTPUTLEN="000000" HEADLEN="00" SCRLEN1="00" SCRLEN2="00" SCRLEN3="00" DATATYPE="TTYP" LENG="000000" OUTPUTLEN="000000" DECIMALS="000000" MASK="  TTYPL" MASKLEN="0000" DDTEXT="ALV control: Table for cell coloring" DEPTH="00" COMPTYPE="L" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
 </TABL>
 <TABL TABNAME="ZNAOCS_DEAL_QTY_DETAIL" DDLANGUAGE="E" TABCLASS="INTTAB" DATMIN="0000000000" DATMAX="0000000000" DATAVG="0000000000" LANGDEP="X" DDTEXT="Deal quantity detail" AUTHCLASS="00" PROZPUFF="000" EXCLASS="3">
  <dd09l AS4VERS="0000" SCHFELDANZ="000"/>
  <dd03p TABNAME="ZNAOCS_DEAL_QTY_DETAIL" FIELDNAME=".INCLUDE" DDLANGUAGE="E" POSITION="0001" ADMINFIELD="0" INTLEN="000000" PRECFIELD="ZNAOCT_QTD_CTRLH" ROUTPUTLEN="000000" HEADLEN="00" SCRLEN1="00" SCRLEN2="00" SCRLEN3="00" LENG="000000" OUTPUTLEN="000000" DECIMALS="000000" MASK="      S" MASKLEN="0000" DDTEXT="Allowed quantity per Deal Code" DEPTH="00" COMPTYPE="S" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZNAOCS_DEAL_QTY_DETAIL" FIELDNAME="MANDT" DDLANGUAGE="E" POSITION="0002" ROLLNAME="MANDT" CHECKTABLE="T000" ADMINFIELD="1" INTTYPE="C" INTLEN="000006" DOMNAME="MANDT" ROUTPUTLEN="000000" HEADLEN="03" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="CLNT" LENG="000003" OUTPUTLEN="000003" DECIMALS="000000" ENTITYTAB="T000" MASK="  CLNTE" MASKLEN="0000" DDTEXT="Client" REPTEXT="Cl." SCRTEXT_S="Client" SCRTEXT_M="Client" SCRTEXT_L="Client" DOMNAME3L="MANDT" SHLPORIGIN="P" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZNAOCS_DEAL_QTY_DETAIL" FIELDNAME="SPART" DDLANGUAGE="E" POSITION="0003" ROLLNAME="SPART" CHECKTABLE="TSPA" ADMINFIELD="1" INTTYPE="C" INTLEN="000004" DOMNAME="SPART" ROUTPUTLEN="000000" MEMORYID="SPA" LOGFLAG="X" HEADLEN="02" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="CHAR" LENG="000002" OUTPUTLEN="000002" DECIMALS="000000" ENTITYTAB="TSPA" MASK="  CHARE" MASKLEN="0000" DDTEXT="Division" REPTEXT="Dv" SCRTEXT_S="Division" SCRTEXT_M="Division" SCRTEXT_L="Division" DOMNAME3L="SPART" SHLPORIGIN="P" SHLPNAME="C_SPART" SHLPFIELD="SPART" DEPTH="00" COMPTYPE="E" DEFFDNAME="DIVISION" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZNAOCS_DEAL_QTY_DETAIL" FIELDNAME="KUNNR" DDLANGUAGE="E" POSITION="0004" ROLLNAME="KUNNR" CHECKTABLE="KNA1" ADMINFIELD="1" INTTYPE="C" INTLEN="000020" DOMNAME="KUNNR" ROUTPUTLEN="000000" MEMORYID="KUN" LOGFLAG="X" HEADLEN="10" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="CHAR" LENG="000010" OUTPUTLEN="000010" DECIMALS="000000" ENTITYTAB="KNA1" CONVEXIT="ALPHA" MASK="  CHARE" MASKLEN="0000" DDTEXT="Customer Number" REPTEXT="Customer" SCRTEXT_S="Customer" SCRTEXT_M="Customer" SCRTEXT_L="Customer" DOMNAME3L="KUNNR" SHLPORIGIN="P" SHLPNAME="C_KUNNR" SHLPFIELD="KUNNR" DEPTH="00" COMPTYPE="E" DEFFDNAME="CUSTOMER" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZNAOCS_DEAL_QTY_DETAIL" FIELDNAME="ZZDEAL_CODE" DDLANGUAGE="E" POSITION="0005" ROLLNAME="ZGLOC_DEAL_CODE" ADMINFIELD="1" INTTYPE="C" INTLEN="000010" DOMNAME="CHAR005" ROUTPUTLEN="000000" HEADLEN="17" SCRLEN1="10" SCRLEN2="17" SCRLEN3="20" DTELMASTER="E" DATATYPE="CHAR" LENG="000005" OUTPUTLEN="000005" DECIMALS="000000" MASK="  CHARE" MASKLEN="0000" DDTEXT="Deal code - JBOSS" REPTEXT="Deal code - JBOSS" SCRTEXT_S="Deal code" SCRTEXT_M="Deal code - JBOSS" SCRTEXT_L="Deal code - JBOSS" DOMNAME3L="CHAR005" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZNAOCS_DEAL_QTY_DETAIL" FIELDNAME="ENDDT" DDLANGUAGE="E" POSITION="0006" ROLLNAME="ZNAOCE_DEAL_END" ADMINFIELD="1" INTTYPE="D" INTLEN="000016" DOMNAME="DATUM" ROUTPUTLEN="000000" HEADLEN="15" SCRLEN1="10" SCRLEN2="15" SCRLEN3="15" DTELMASTER="E" DATATYPE="DATS" LENG="000008" OUTPUTLEN="000010" DECIMALS="000000" MASK="  DATSE" MASKLEN="0000" DDTEXT="Expiration date" REPTEXT="Expiration date" SCRTEXT_S="Expiration" SCRTEXT_M="Expiration date" SCRTEXT_L="Expiration date" DOMNAME3L="DATUM" SHLPORIGIN="T" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZNAOCS_DEAL_QTY_DETAIL" FIELDNAME="BEGDT" DDLANGUAGE="E" POSITION="0007" ROLLNAME="ZNAOCE_DEAL_BEGIN" ADMINFIELD="1" INTTYPE="D" INTLEN="000016" DOMNAME="DATS" ROUTPUTLEN="000000" HEADLEN="14" SCRLEN1="10" SCRLEN2="14" SCRLEN3="14" DTELMASTER="E" DATATYPE="DATS" LENG="000008" OUTPUTLEN="000010" DECIMALS="000000" MASK="  DATSE" MASKLEN="0000" DDTEXT="Effective date" REPTEXT="Effective date" SCRTEXT_S="Effective" SCRTEXT_M="Effective date" SCRTEXT_L="Effective date" DOMMASTER="D" DOMNAME3L="DATS" SHLPORIGIN="T" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZNAOCS_DEAL_QTY_DETAIL" FIELDNAME="UOM" DDLANGUAGE="E" POSITION="0008" ROLLNAME="KMEIN" CHECKTABLE="T006" ADMINFIELD="1" INTTYPE="C" INTLEN="000006" DOMNAME="MEINS" ROUTPUTLEN="000000" LOGFLAG="X" HEADLEN="03" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="UNIT" LENG="000003" OUTPUTLEN="000003" DECIMALS="000000" LOWERCASE="X" ENTITYTAB="T006" CONVEXIT="CUNIT" MASK="  UNITE" MASKLEN="0000" DDTEXT="Condition unit" REPTEXT="UoM" SCRTEXT_S="Unit" SCRTEXT_M="Unit of measure" SCRTEXT_L="Unit of measure" DOMNAME3L="MEINS" SHLPORIGIN="P" DEPTH="00" COMPTYPE="E" DEFFDNAME="COND_UNIT" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZNAOCS_DEAL_QTY_DETAIL" FIELDNAME="QTD_ALLOWED" DDLANGUAGE="E" POSITION="0009" ROLLNAME="ZNAOCE_DEAL_ALLOWED_QTY" ADMINFIELD="1" INTTYPE="P" INTLEN="000008" REFTABLE="ZNAOCS_DEAL_QTY_DETAIL" REFFIELD="UOM" DOMNAME="MENG15" ROUTPUTLEN="000000" HEADLEN="19" SCRLEN1="10" SCRLEN2="20" SCRLEN3="40" DTELMASTER="E" DATATYPE="QUAN" LENG="000015" OUTPUTLEN="000019" DECIMALS="000003" MASK="  QUANE" MASKLEN="0000" DDTEXT="Allowed quantity" REPTEXT="Allowed quantity" SCRTEXT_S="Quantity" SCRTEXT_M="Allowed quantity" SCRTEXT_L="Allowed quantity" DOMNAME3L="MENG15" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZNAOCS_DEAL_QTY_DETAIL" FIELDNAME="CREDAT" DDLANGUAGE="E" POSITION="0010" ROLLNAME="ZNAOCE_DEAL_CREATION" ADMINFIELD="1" INTTYPE="D" INTLEN="000016" DOMNAME="DATS" ROUTPUTLEN="000000" HEADLEN="44" SCRLEN1="10" SCRLEN2="20" SCRLEN3="40" DTELMASTER="E" DATATYPE="DATS" LENG="000008" OUTPUTLEN="000010" DECIMALS="000000" MASK="  DATSE" MASKLEN="0000" DDTEXT="Date of creation of the deal quantity record" REPTEXT="Date of creation of the deal quantity record" SCRTEXT_S="Creation" SCRTEXT_M="Creation date" SCRTEXT_L="Creation of the deal quantity record" DOMMASTER="D" DOMNAME3L="DATS" SHLPORIGIN="T" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZNAOCS_DEAL_QTY_DETAIL" FIELDNAME="CREUSR" DDLANGUAGE="E" POSITION="0011" ROLLNAME="ZNAOCE_DEAL_CREATOR" ADMINFIELD="1" INTTYPE="C" INTLEN="000024" DOMNAME="XUBNAME" ROUTPUTLEN="000000" HEADLEN="45" SCRLEN1="10" SCRLEN2="20" SCRLEN3="40" DTELMASTER="E" DATATYPE="CHAR" LENG="000012" OUTPUTLEN="000012" DECIMALS="000000" ENTITYTAB="USR02" MASK="  CHARE" MASKLEN="0000" DDTEXT="User code of the creator of the deal quantity" REPTEXT="User code of the creator of the deal quantity" SCRTEXT_S="Creator" SCRTEXT_M="Deal qty. creator" SCRTEXT_L="Creator of the deal quantity" DOMMASTER="D" DOMNAME3L="XUBNAME" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZNAOCS_DEAL_QTY_DETAIL" FIELDNAME="CRETIM" DDLANGUAGE="E" POSITION="0012" ROLLNAME="CTME" ADMINFIELD="1" INTTYPE="T" INTLEN="000012" DOMNAME="CTME" ROUTPUTLEN="000000" HEADLEN="20" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DATATYPE="TIMS" LENG="000006" OUTPUTLEN="000008" DECIMALS="000000" MASK="  TIMSE" MASKLEN="0000" DDTEXT="Time of creation" REPTEXT="Time" SCRTEXT_S="Time" SCRTEXT_M="Time" SCRTEXT_L="Time of creation" DOMNAME3L="CTME" SHLPORIGIN="T" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZNAOCS_DEAL_QTY_DETAIL" FIELDNAME="AENAM" DDLANGUAGE="E" POSITION="0013" ROLLNAME="AENAM" ADMINFIELD="1" INTTYPE="C" INTLEN="000024" DOMNAME="USNAM" ROUTPUTLEN="000000" HEADLEN="12" SCRLEN1="06" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="CHAR" LENG="000012" OUTPUTLEN="000012" DECIMALS="000000" MASK="  CHARE" MASKLEN="0000" DDTEXT="Name of Person Who Changed Object" REPTEXT="Changed by" SCRTEXT_S="By" SCRTEXT_M="Changed by" SCRTEXT_L="Changed by" DOMNAME3L="USNAM" DEPTH="00" COMPTYPE="E" DEFFDNAME="CHANGED_BY" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZNAOCS_DEAL_QTY_DETAIL" FIELDNAME="AEDAT" DDLANGUAGE="E" POSITION="0014" ROLLNAME="AEDAT" ADMINFIELD="1" INTTYPE="D" INTLEN="000016" DOMNAME="DATUM" ROUTPUTLEN="000000" HEADLEN="08" SCRLEN1="05" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="DATS" LENG="000008" OUTPUTLEN="000010" DECIMALS="000000" MASK="  DATSE" MASKLEN="0000" DDTEXT="Changed On" REPTEXT="Chngd on" SCRTEXT_S="Chngd" SCRTEXT_M="Changed on" SCRTEXT_L="Changed on" DOMNAME3L="DATUM" SHLPORIGIN="T" DEPTH="00" COMPTYPE="E" DEFFDNAME="CH_ON" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZNAOCS_DEAL_QTY_DETAIL" FIELDNAME="AETIM" DDLANGUAGE="E" POSITION="0015" ROLLNAME="AEZET" ADMINFIELD="1" INTTYPE="T" INTLEN="000012" DOMNAME="UZEIT" ROUTPUTLEN="000000" LOGFLAG="X" HEADLEN="10" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DATATYPE="TIMS" LENG="000006" OUTPUTLEN="000008" DECIMALS="000000" MASK="  TIMSE" MASKLEN="0000" DDTEXT="Time last change was made" REPTEXT="TimeOfChng" SCRTEXT_S="TimeOfChng" SCRTEXT_M="Time of change" SCRTEXT_L="Changed at" DOMNAME3L="UZEIT" SHLPORIGIN="T" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZNAOCS_DEAL_QTY_DETAIL" FIELDNAME="CHNUSR" DDLANGUAGE="E" POSITION="0016" ROLLNAME="ZNAOCE_DEAL_CHANGER" ADMINFIELD="1" INTTYPE="C" INTLEN="000024" DOMNAME="XUBNAME" ROUTPUTLEN="000000" HEADLEN="52" SCRLEN1="10" SCRLEN2="20" SCRLEN3="40" DTELMASTER="E" DATATYPE="CHAR" LENG="000012" OUTPUTLEN="000012" DECIMALS="000000" ENTITYTAB="USR02" MASK="  CHARE" MASKLEN="0000" DDTEXT="User name of the changer of the deal quantity record" REPTEXT="User name of the changer of the deal quantity record" SCRTEXT_S="Changer" SCRTEXT_M="Deal qty. changer" SCRTEXT_L="Changer of the deal quantity record" DOMMASTER="D" DOMNAME3L="XUBNAME" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZNAOCS_DEAL_QTY_DETAIL" FIELDNAME="NAME1" DDLANGUAGE="E" POSITION="0017" ROLLNAME="NAME1_GP" ADMINFIELD="0" INTTYPE="C" INTLEN="000070" DOMNAME="NAME" ROUTPUTLEN="000000" LOGFLAG="X" HEADLEN="35" SCRLEN1="10" SCRLEN2="12" SCRLEN3="20" DTELMASTER="D" DATATYPE="CHAR" LENG="000035" OUTPUTLEN="000035" DECIMALS="000000" LOWERCASE="X" MASK="  CHARE" MASKLEN="0000" DDTEXT="Name 1" REPTEXT="Name 1" SCRTEXT_S="Name" SCRTEXT_M="Name" SCRTEXT_L="Name" DOMNAME3L="NAME" DEPTH="00" COMPTYPE="E" DEFFDNAME="NAME" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd05m TABNAME="ZNAOCS_DEAL_QTY_DETAIL" FIELDNAME="KUNNR" FORTABLE="ZNAOCS_DEAL_QTY_DETAIL" FORKEY="MANDT" CHECKTABLE="KNA1" CHECKFIELD="MANDT" PRIMPOS="0001" DOMNAME="MANDT" DATATYPE="CLNT" LENG="000003"/>
  <dd05m TABNAME="ZNAOCS_DEAL_QTY_DETAIL" FIELDNAME="KUNNR" FORTABLE="ZNAOCS_DEAL_QTY_DETAIL" FORKEY="KUNNR" CHECKTABLE="KNA1" CHECKFIELD="KUNNR" PRIMPOS="0002" DOMNAME="KUNNR" DATATYPE="CHAR" LENG="000010"/>
  <dd05m TABNAME="ZNAOCS_DEAL_QTY_DETAIL" FIELDNAME="MANDT" FORTABLE="ZNAOCS_DEAL_QTY_DETAIL" FORKEY="MANDT" CHECKTABLE="T000" CHECKFIELD="MANDT" PRIMPOS="0001" DOMNAME="MANDT" DATATYPE="CLNT" LENG="000003"/>
  <dd05m TABNAME="ZNAOCS_DEAL_QTY_DETAIL" FIELDNAME="SPART" FORTABLE="ZNAOCS_DEAL_QTY_DETAIL" FORKEY="MANDT" CHECKTABLE="TSPA" CHECKFIELD="MANDT" PRIMPOS="0001" DOMNAME="MANDT" DATATYPE="CLNT" LENG="000003"/>
  <dd05m TABNAME="ZNAOCS_DEAL_QTY_DETAIL" FIELDNAME="SPART" FORTABLE="ZNAOCS_DEAL_QTY_DETAIL" FORKEY="SPART" CHECKTABLE="TSPA" CHECKFIELD="SPART" PRIMPOS="0002" DOMNAME="SPART" DATATYPE="CHAR" LENG="000002"/>
  <dd05m TABNAME="ZNAOCS_DEAL_QTY_DETAIL" FIELDNAME="UOM" FORTABLE="ZNAOCS_DEAL_QTY_DETAIL" FORKEY="MANDT" CHECKTABLE="T006" CHECKFIELD="MANDT" PRIMPOS="0001" DOMNAME="MANDT" DATATYPE="CLNT" LENG="000003"/>
  <dd05m TABNAME="ZNAOCS_DEAL_QTY_DETAIL" FIELDNAME="UOM" FORTABLE="ZNAOCS_DEAL_QTY_DETAIL" FORKEY="UOM" CHECKTABLE="T006" CHECKFIELD="MSEHI" PRIMPOS="0002" DOMNAME="MEINS" DATATYPE="UNIT" LENG="000003"/>
  <dd08v TABNAME="ZNAOCS_DEAL_QTY_DETAIL" FIELDNAME="KUNNR" DDLANGUAGE="E" CHECKTABLE="KNA1" FRKART="KEY" CARD="CN" DDTEXT="From customers master data" NOINHERIT="N" CARDLEFT="1"/>
  <dd08v TABNAME="ZNAOCS_DEAL_QTY_DETAIL" FIELDNAME="MANDT" DDLANGUAGE="E" CHECKTABLE="T000" FRKART="KEY" CARD="CN" DDTEXT="From clients master" NOINHERIT="N" CARDLEFT="1"/>
  <dd08v TABNAME="ZNAOCS_DEAL_QTY_DETAIL" FIELDNAME="SPART" DDLANGUAGE="E" CHECKTABLE="TSPA" FRKART="KEY" CARD="CN" DDTEXT="From divisions master data" NOINHERIT="N" CARDLEFT="1"/>
  <dd08v TABNAME="ZNAOCS_DEAL_QTY_DETAIL" FIELDNAME="UOM" DDLANGUAGE="E" CHECKTABLE="T006" FRKART="KEY" CARD="CN" DDTEXT="From Units of Measure master data" NOINHERIT="N" CARDLEFT="1"/>
 </TABL>
 <TRAN TCODE="ZNAOC081" PGMNA="ZNAOCR_DEAL_QTY_MONITORING" DYPNO="1000" CINFO="80">
  <tstct SPRSL="E" TCODE="ZNAOC081" TTEXT="Monitor Deals"/>
  <tstcc TCODE="ZNAOC081" S_WEBGUI="1" S_WIN32="X" S_PLATIN="X"/>
  <tstcp/>
  <rsstcd ST_PROG="X" DEVCLASS="$TMP"/>
 </TRAN>
 <TRAN TCODE="ZNAOC080" PGMNA="ZNAOCR_DEAL_QTY_SETTING" DYPNO="1000" CINFO="80">
  <tstct SPRSL="E" TCODE="ZNAOC080" TTEXT="Setting of deal code quantity"/>
  <tstcc TCODE="ZNAOC080" S_WEBGUI="1" S_WIN32="X" S_PLATIN="X"/>
  <tstcp/>
  <rsstcd ST_PROG="X" DEVCLASS="$TMP"/>
 </TRAN>
 <TTYP TYPENAME="ZNAOCTT_PLAIN_VIEW" DDLANGUAGE="E" ROWTYPE="ZNAOCS_PLAIN_VIEW" ROWKIND="S" DATATYPE="STRU" LENG="000000" DECIMALS="000000" ACCESSMODE="T" KEYDEF="D" KEYKIND="N" KEYFDCOUNT="0000" DDTEXT="Table of Deal Code Quantities Details" TYPELEN="000328" CTLENG="000000" CTDECIMALS="000000" OCCURS="00000"/>
 <TTYP TYPENAME="ZNAOCTT_DEAL_QTY_CONSUMPTION" DDLANGUAGE="E" ROWTYPE="ZNAOCS_DEAL_QTY_CONSUMPTION" ROWKIND="S" DATATYPE="STRU" LENG="000000" DECIMALS="000000" ACCESSMODE="T" KEYDEF="D" KEYKIND="N" KEYFDCOUNT="0000" DDTEXT="Deal Quantities table" TYPELEN="000040" CTLENG="000000" CTDECIMALS="000000" OCCURS="00000"/>
 <TTYP TYPENAME="ZNAOCTT_DEAL_QTY_DETAIL" DDLANGUAGE="E" ROWTYPE="ZNAOCS_DEAL_QTY_DETAIL" ROWKIND="S" DATATYPE="STRU" LENG="000000" DECIMALS="000000" ACCESSMODE="T" KEYDEF="D" KEYKIND="N" KEYFDCOUNT="0000" DDTEXT="Deal quantity details table" TYPELEN="000284" CTLENG="000000" CTDECIMALS="000000" OCCURS="00000"/>
 <TTYP TYPENAME="ZTT_NAOC_DEAL_QTY_MANAGER" DDLANGUAGE="E" ROWTYPE="ZCL_NAOC_DEAL_QTY_MANAGER" ROWKIND="R" DATATYPE="REF" LENG="000000" DECIMALS="000000" ACCESSMODE="T" KEYDEF="D" KEYKIND="N" KEYFDCOUNT="0000" DDTEXT="Table of Deal quantity managers" TYPELEN="000008" CTLENG="000000" CTDECIMALS="000000" REFTYPE="C" OCCURS="00000"/>
 <VIEW VIEWNAME="ZNAOCV_QTD_CTRLH" AS4LOCAL="A" AS4VERS="0000" DDLANGUAGE="E" AGGTYPE="V" AUTHCLASS="00" ROOTTAB="ZNAOCT_QTD_CTRLH" DDTEXT="Allowed quantity per Deal Code" VIEWCLASS="C" CUSTOMAUTH="A" GLOBALFLAG="X">
  <dd09l AS4VERS="0000" SCHFELDANZ="000"/>
  <dd26v VIEWNAME="ZNAOCV_QTD_CTRLH" TABNAME="ZNAOCT_QTD_CTRLH" TABPOS="0001" FORTABNAME="ZNAOCT_QTD_CTRLH"/>
  <dd26v VIEWNAME="ZNAOCV_QTD_CTRLH" TABNAME="KNA1" TABPOS="0002" FORTABNAME="ZNAOCT_QTD_CTRLH" FORFIELD="KUNNR" FORDIR="E"/>
  <dd27p VIEWNAME="ZNAOCV_QTD_CTRLH" OBJPOS="0001" DDLANGUAGE="E" VIEWFIELD="MANDT" TABNAME="ZNAOCT_QTD_CTRLH" FIELDNAME="MANDT" KEYFLAG="X" ROLLNAME="MANDT" ROLLNAMEVI="MANDT" DOMNAME="MANDT" DATATYPE="CLNT" FLENGTH="000003" CHECKTABLE="T000" SHLPORIGIN="P" ENTITYTAB="T000" INTTYPE="C" INTLEN="000006" HEADLEN="03" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" OUTPUTLEN="000003" DECIMALS="000000" DDTEXT="Client" REPTEXT="Cl." SCRTEXT_S="Client" SCRTEXT_M="Client" SCRTEXT_L="Client" OUTPUTSTYLE="00" EXVFLENGTH="000000" EXVDECIMALS="000000"/>
  <dd27p VIEWNAME="ZNAOCV_QTD_CTRLH" OBJPOS="0002" DDLANGUAGE="E" VIEWFIELD="SPART" TABNAME="ZNAOCT_QTD_CTRLH" FIELDNAME="SPART" KEYFLAG="X" ROLLNAME="SPART" ROLLNAMEVI="SPART" MEMORYID="SPA" DOMNAME="SPART" DATATYPE="CHAR" FLENGTH="000002" CHECKTABLE="TSPA" SHLPORIGIN="P" SHLPNAME="C_SPART" SHLPFIELD="SPART" ENTITYTAB="TSPA" INTTYPE="C" INTLEN="000004" LOGFLAG="X" HEADLEN="02" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" OUTPUTLEN="000002" DECIMALS="000000" DDTEXT="Division" REPTEXT="Dv" SCRTEXT_S="Division" SCRTEXT_M="Division" SCRTEXT_L="Division" OUTPUTSTYLE="00" EXVFLENGTH="000000" EXVDECIMALS="000000"/>
  <dd27p VIEWNAME="ZNAOCV_QTD_CTRLH" OBJPOS="0003" DDLANGUAGE="E" VIEWFIELD="KUNNR" TABNAME="ZNAOCT_QTD_CTRLH" FIELDNAME="KUNNR" KEYFLAG="X" ROLLNAME="KUNNR" ROLLNAMEVI="KUNNR" MEMORYID="KUN" DOMNAME="KUNNR" DATATYPE="CHAR" FLENGTH="000010" CHECKTABLE="KNA1" SHLPORIGIN="P" SHLPNAME="C_KUNNR" SHLPFIELD="KUNNR" ENTITYTAB="KNA1" INTTYPE="C" INTLEN="000020" LOGFLAG="X" HEADLEN="10" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" OUTPUTLEN="000010" DECIMALS="000000" CONVEXIT="ALPHA" DDTEXT="Customer Number" REPTEXT="Customer" SCRTEXT_S="Customer" SCRTEXT_M="Customer" SCRTEXT_L="Customer" OUTPUTSTYLE="00" EXVFLENGTH="000000" EXVDECIMALS="000000"/>
  <dd27p VIEWNAME="ZNAOCV_QTD_CTRLH" OBJPOS="0004" DDLANGUAGE="E" VIEWFIELD="NAME1" TABNAME="KNA1" FIELDNAME="NAME1" ROLLNAME="NAME1_GP" ROLLNAMEVI="NAME1_GP" DOMNAME="NAME" DATATYPE="CHAR" FLENGTH="000035" INTTYPE="C" INTLEN="000070" LOGFLAG="X" HEADLEN="35" SCRLEN1="10" SCRLEN2="12" SCRLEN3="20" OUTPUTLEN="000035" DECIMALS="000000" LOWERCASE="X" DDTEXT="Name 1" REPTEXT="Name 1" SCRTEXT_S="Name" SCRTEXT_M="Name" SCRTEXT_L="Name" OUTPUTSTYLE="00" EXVFLENGTH="000000" EXVDECIMALS="000000"/>
  <dd27p VIEWNAME="ZNAOCV_QTD_CTRLH" OBJPOS="0005" DDLANGUAGE="E" VIEWFIELD="ZZDEAL_CODE" TABNAME="ZNAOCT_QTD_CTRLH" FIELDNAME="ZZDEAL_CODE" KEYFLAG="X" ROLLNAME="ZGLOC_DEAL_CODE" ROLLNAMEVI="ZGLOC_DEAL_CODE" DOMNAME="CHAR005" DATATYPE="CHAR" FLENGTH="000005" INTTYPE="C" INTLEN="000010" HEADLEN="17" SCRLEN1="10" SCRLEN2="17" SCRLEN3="20" OUTPUTLEN="000005" DECIMALS="000000" DDTEXT="Deal code - JBOSS" REPTEXT="Deal code - JBOSS" SCRTEXT_S="Deal code" SCRTEXT_M="Deal code - JBOSS" SCRTEXT_L="Deal code - JBOSS" OUTPUTSTYLE="00" EXVFLENGTH="000000" EXVDECIMALS="000000"/>
  <dd27p VIEWNAME="ZNAOCV_QTD_CTRLH" OBJPOS="0006" DDLANGUAGE="E" VIEWFIELD="ENDDT" TABNAME="ZNAOCT_QTD_CTRLH" FIELDNAME="ENDDT" KEYFLAG="X" ROLLNAME="ZNAOCE_DEAL_END" ROLLNAMEVI="ZNAOCE_DEAL_END" DOMNAME="DATUM" DATATYPE="DATS" FLENGTH="000008" SHLPORIGIN="T" INTTYPE="D" INTLEN="000016" HEADLEN="15" SCRLEN1="10" SCRLEN2="15" SCRLEN3="15" OUTPUTLEN="000010" DECIMALS="000000" DDTEXT="Expiration date" REPTEXT="Expiration date" SCRTEXT_S="Expiration" SCRTEXT_M="Expiration date" SCRTEXT_L="Expiration date" OUTPUTSTYLE="00" EXVFLENGTH="000000" EXVDECIMALS="000000"/>
  <dd27p VIEWNAME="ZNAOCV_QTD_CTRLH" OBJPOS="0007" DDLANGUAGE="E" VIEWFIELD="BEGDT" TABNAME="ZNAOCT_QTD_CTRLH" FIELDNAME="BEGDT" ROLLNAME="ZNAOCE_DEAL_BEGIN" ROLLNAMEVI="ZNAOCE_DEAL_BEGIN" DOMNAME="DATS" DATATYPE="DATS" FLENGTH="000008" SHLPORIGIN="T" INTTYPE="D" INTLEN="000016" HEADLEN="14" SCRLEN1="10" SCRLEN2="14" SCRLEN3="14" OUTPUTLEN="000010" DECIMALS="000000" DDTEXT="Effective date" REPTEXT="Effective date" SCRTEXT_S="Effective" SCRTEXT_M="Effective date" SCRTEXT_L="Effective date" OUTPUTSTYLE="00" EXVFLENGTH="000000" EXVDECIMALS="000000"/>
  <dd27p VIEWNAME="ZNAOCV_QTD_CTRLH" OBJPOS="0008" DDLANGUAGE="E" VIEWFIELD="UOM" TABNAME="ZNAOCT_QTD_CTRLH" FIELDNAME="UOM" ROLLNAME="KMEIN" ROLLNAMEVI="KMEIN" DOMNAME="MEINS" DATATYPE="UNIT" FLENGTH="000003" CHECKTABLE="T006" SHLPORIGIN="P" ENTITYTAB="T006" INTTYPE="C" INTLEN="000006" LOGFLAG="X" HEADLEN="03" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" OUTPUTLEN="000003" DECIMALS="000000" LOWERCASE="X" CONVEXIT="CUNIT" DDTEXT="Condition unit" REPTEXT="UoM" SCRTEXT_S="Unit" SCRTEXT_M="Unit of measure" SCRTEXT_L="Unit of measure" OUTPUTSTYLE="00" EXVFLENGTH="000000" EXVDECIMALS="000000"/>
  <dd27p VIEWNAME="ZNAOCV_QTD_CTRLH" OBJPOS="0009" DDLANGUAGE="E" VIEWFIELD="QTD_ALLOWED" TABNAME="ZNAOCT_QTD_CTRLH" FIELDNAME="QTD_ALLOWED" ROLLNAME="ZNAOCE_DEAL_ALLOWED_QTY" ROLLNAMEVI="ZNAOCE_DEAL_ALLOWED_QTY" DOMNAME="MENG15" DATATYPE="QUAN" FLENGTH="000015" REFTABLE="ZNAOCT_QTD_CTRLH" REFFIELD="UOM" INTTYPE="P" INTLEN="000008" HEADLEN="19" SCRLEN1="10" SCRLEN2="20" SCRLEN3="40" OUTPUTLEN="000019" DECIMALS="000003" DDTEXT="Allowed quantity" REPTEXT="Allowed quantity" SCRTEXT_S="Quantity" SCRTEXT_M="Allowed quantity" SCRTEXT_L="Allowed quantity" OUTPUTSTYLE="00" EXVFLENGTH="000000" EXVDECIMALS="000000"/>
  <dd27p VIEWNAME="ZNAOCV_QTD_CTRLH" OBJPOS="0010" DDLANGUAGE="E" VIEWFIELD="CREDAT" TABNAME="ZNAOCT_QTD_CTRLH" FIELDNAME="CREDAT" ROLLNAME="ZNAOCE_DEAL_CREATION" ROLLNAMEVI="ZNAOCE_DEAL_CREATION" DOMNAME="DATS" DATATYPE="DATS" FLENGTH="000008" SHLPORIGIN="T" INTTYPE="D" INTLEN="000016" HEADLEN="44" SCRLEN1="10" SCRLEN2="20" SCRLEN3="40" OUTPUTLEN="000010" DECIMALS="000000" DDTEXT="Date of creation of the deal quantity record" REPTEXT="Date of creation of the deal quantity record" SCRTEXT_S="Creation" SCRTEXT_M="Creation date" SCRTEXT_L="Creation of the deal quantity record" OUTPUTSTYLE="00" EXVFLENGTH="000000" EXVDECIMALS="000000"/>
  <dd27p VIEWNAME="ZNAOCV_QTD_CTRLH" OBJPOS="0011" DDLANGUAGE="E" VIEWFIELD="CREUSR" TABNAME="ZNAOCT_QTD_CTRLH" FIELDNAME="CREUSR" ROLLNAME="ZNAOCE_DEAL_CREATOR" ROLLNAMEVI="ZNAOCE_DEAL_CREATOR" DOMNAME="XUBNAME" DATATYPE="CHAR" FLENGTH="000012" ENTITYTAB="USR02" INTTYPE="C" INTLEN="000024" HEADLEN="45" SCRLEN1="10" SCRLEN2="20" SCRLEN3="40" OUTPUTLEN="000012" DECIMALS="000000" DDTEXT="User code of the creator of the deal quantity" REPTEXT="User code of the creator of the deal quantity" SCRTEXT_S="Creator" SCRTEXT_M="Deal qty. creator" SCRTEXT_L="Creator of the deal quantity" OUTPUTSTYLE="00" EXVFLENGTH="000000" EXVDECIMALS="000000"/>
  <dd27p VIEWNAME="ZNAOCV_QTD_CTRLH" OBJPOS="0012" DDLANGUAGE="E" VIEWFIELD="CRETIM" TABNAME="ZNAOCT_QTD_CTRLH" FIELDNAME="CRETIM" ROLLNAME="CTME" ROLLNAMEVI="CTME" DOMNAME="CTME" DATATYPE="TIMS" FLENGTH="000006" SHLPORIGIN="T" INTTYPE="T" INTLEN="000012" HEADLEN="20" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" OUTPUTLEN="000008" DECIMALS="000000" DDTEXT="Time of creation" REPTEXT="Time" SCRTEXT_S="Time" SCRTEXT_M="Time" SCRTEXT_L="Time of creation" OUTPUTSTYLE="00" EXVFLENGTH="000000" EXVDECIMALS="000000"/>
  <dd27p VIEWNAME="ZNAOCV_QTD_CTRLH" OBJPOS="0013" DDLANGUAGE="E" VIEWFIELD="AENAM" TABNAME="ZNAOCT_QTD_CTRLH" FIELDNAME="AENAM" ROLLNAME="AENAM" ROLLNAMEVI="AENAM" DOMNAME="USNAM" DATATYPE="CHAR" FLENGTH="000012" INTTYPE="C" INTLEN="000024" HEADLEN="12" SCRLEN1="06" SCRLEN2="15" SCRLEN3="20" OUTPUTLEN="000012" DECIMALS="000000" DDTEXT="Name of Person Who Changed Object" REPTEXT="Changed by" SCRTEXT_S="By" SCRTEXT_M="Changed by" SCRTEXT_L="Changed by" OUTPUTSTYLE="00" EXVFLENGTH="000000" EXVDECIMALS="000000"/>
  <dd27p VIEWNAME="ZNAOCV_QTD_CTRLH" OBJPOS="0014" DDLANGUAGE="E" VIEWFIELD="AEDAT" TABNAME="ZNAOCT_QTD_CTRLH" FIELDNAME="AEDAT" ROLLNAME="AEDAT" ROLLNAMEVI="AEDAT" DOMNAME="DATUM" DATATYPE="DATS" FLENGTH="000008" SHLPORIGIN="T" INTTYPE="D" INTLEN="000016" HEADLEN="08" SCRLEN1="05" SCRLEN2="15" SCRLEN3="20" OUTPUTLEN="000010" DECIMALS="000000" DDTEXT="Changed On" REPTEXT="Chngd on" SCRTEXT_S="Chngd" SCRTEXT_M="Changed on" SCRTEXT_L="Changed on" OUTPUTSTYLE="00" EXVFLENGTH="000000" EXVDECIMALS="000000"/>
  <dd27p VIEWNAME="ZNAOCV_QTD_CTRLH" OBJPOS="0015" DDLANGUAGE="E" VIEWFIELD="AETIM" TABNAME="ZNAOCT_QTD_CTRLH" FIELDNAME="AETIM" ROLLNAME="AEZET" ROLLNAMEVI="AEZET" DOMNAME="UZEIT" DATATYPE="TIMS" FLENGTH="000006" SHLPORIGIN="T" INTTYPE="T" INTLEN="000012" LOGFLAG="X" HEADLEN="10" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" OUTPUTLEN="000008" DECIMALS="000000" DDTEXT="Time last change was made" REPTEXT="TimeOfChng" SCRTEXT_S="TimeOfChng" SCRTEXT_M="Time of change" SCRTEXT_L="Changed at" OUTPUTSTYLE="00" EXVFLENGTH="000000" EXVDECIMALS="000000"/>
  <dd27p VIEWNAME="ZNAOCV_QTD_CTRLH" OBJPOS="0016" DDLANGUAGE="E" VIEWFIELD="CHNUSR" TABNAME="ZNAOCT_QTD_CTRLH" FIELDNAME="CHNUSR" ROLLNAME="ZNAOCE_DEAL_CHANGER" ROLLNAMEVI="ZNAOCE_DEAL_CHANGER" DOMNAME="XUBNAME" DATATYPE="CHAR" FLENGTH="000012" ENTITYTAB="USR02" INTTYPE="C" INTLEN="000024" HEADLEN="52" SCRLEN1="10" SCRLEN2="20" SCRLEN3="40" OUTPUTLEN="000012" DECIMALS="000000" DDTEXT="User name of the changer of the deal quantity record" REPTEXT="User name of the changer of the deal quantity record" SCRTEXT_S="Changer" SCRTEXT_M="Deal qty. changer" SCRTEXT_L="Changer of the deal quantity record" OUTPUTSTYLE="00" EXVFLENGTH="000000" EXVDECIMALS="000000"/>
  <dd28j VIEWNAME="ZNAOCV_QTD_CTRLH" LTAB="KNA1" LFIELD="MANDT" OPERATOR="EQ" RTAB="ZNAOCT_QTD_CTRLH" RFIELD="MANDT" SOURCE="F" FRKTAB="ZNAOCT_QTD_CTRLH" FRKFIELD="KUNNR" FRKDIR="E"/>
  <dd28j VIEWNAME="ZNAOCV_QTD_CTRLH" LTAB="KNA1" LFIELD="KUNNR" OPERATOR="EQ" RTAB="ZNAOCT_QTD_CTRLH" RFIELD="KUNNR" SOURCE="F" FRKTAB="ZNAOCT_QTD_CTRLH" FRKFIELD="KUNNR" FRKDIR="E"/>
 </VIEW>
 <CLAS CLSNAME="ZCL_NAOCT_QTD_CTRLH" VERSION="1" LANGU="E" DESCRIPT="Allowed quantity per Deal Code - Persistence" CATEGORY="10" EXPOSURE="1" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 ">
  <friends CLSNAME="ZCL_NAOCT_QTD_CTRLH" REFCLSNAME="ZCB_NAOCT_QTD_CTRLH" FRIENDTYPE="0" VERSION="1" STATE="1"/>
  <implementing CLSNAME="ZCL_NAOCT_QTD_CTRLH" REFCLSNAME="IF_OS_STATE" VERSION="1" EXPOSURE="2" STATE="1" RELTYPE="1" EDITORDER="0 "/>
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <typeClasDef CLSNAME="ZCL_NAOCT_QTD_CTRLH" TYPEGROUP="CL_OS_SYSTEM" VERSION="1" TPUTYPE="1"/>
  <attribute CLSNAME="ZCL_NAOCT_QTD_CTRLH" CMPNAME="AEDAT" VERSION="1" LANGU="E" DESCRIPT="Changed On" EXPOSURE="1" STATE="1" EDITORDER="12 " ATTDECLTYP="0" ATTPERSIST="X" ATTEXPVIRT="2" TYPTYPE="1" TYPE="AEDAT" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_NAOCT_QTD_CTRLH" CMPNAME="AENAM" VERSION="1" LANGU="E" DESCRIPT="Name of Person Who Changed Object" EXPOSURE="1" STATE="1" EDITORDER="11 " ATTDECLTYP="0" ATTPERSIST="X" ATTEXPVIRT="2" TYPTYPE="1" TYPE="AENAM" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_NAOCT_QTD_CTRLH" CMPNAME="AETIM" VERSION="1" LANGU="E" DESCRIPT="Time last change was made" EXPOSURE="1" STATE="1" EDITORDER="13 " ATTDECLTYP="0" ATTPERSIST="X" ATTEXPVIRT="2" TYPTYPE="1" TYPE="AEZET" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_NAOCT_QTD_CTRLH" CMPNAME="BEGDT" VERSION="1" LANGU="E" DESCRIPT="View Maintenance: Start of Validity" EXPOSURE="1" STATE="1" EDITORDER="5 " ATTDECLTYP="0" ATTPERSIST="X" ATTEXPVIRT="2" TYPTYPE="1" TYPE="VIM_BEGDA" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_NAOCT_QTD_CTRLH" CMPNAME="CHNUSR" VERSION="1" LANGU="E" DESCRIPT="User name of the changer of the deal quantity record" EXPOSURE="1" STATE="1" EDITORDER="14 " ATTDECLTYP="0" ATTPERSIST="X" ATTEXPVIRT="2" TYPTYPE="1" TYPE="ZNAOCE_DEAL_CHANGER" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_NAOCT_QTD_CTRLH" CMPNAME="CREDAT" VERSION="1" LANGU="E" DESCRIPT="Date of creation of the deal quantity record" EXPOSURE="1" STATE="1" EDITORDER="8 " ATTDECLTYP="0" ATTPERSIST="X" ATTEXPVIRT="2" TYPTYPE="1" TYPE="ZNAOCE_DEAL_CREATION" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_NAOCT_QTD_CTRLH" CMPNAME="CRETIM" VERSION="1" LANGU="E" DESCRIPT="Time of creation" EXPOSURE="1" STATE="1" EDITORDER="10 " ATTDECLTYP="0" ATTPERSIST="X" ATTEXPVIRT="2" TYPTYPE="1" TYPE="CTME" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_NAOCT_QTD_CTRLH" CMPNAME="CREUSR" VERSION="1" LANGU="E" DESCRIPT="User code of the creator of the deal quantity" EXPOSURE="1" STATE="1" EDITORDER="9 " ATTDECLTYP="0" ATTPERSIST="X" ATTEXPVIRT="2" TYPTYPE="1" TYPE="ZNAOCE_DEAL_CREATOR" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_NAOCT_QTD_CTRLH" CMPNAME="ENDDT" VERSION="1" LANGU="E" DESCRIPT="View Maintenance: End of Validity" EXPOSURE="1" STATE="1" EDITORDER="4 " ATTDECLTYP="0" ATTPERSIST="X" ATTEXPVIRT="7" TYPTYPE="1" TYPE="VIM_ENDDA" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_NAOCT_QTD_CTRLH" CMPNAME="KUNNR" VERSION="1" LANGU="E" DESCRIPT="Customer Number" EXPOSURE="1" STATE="1" EDITORDER="2 " ATTDECLTYP="0" ATTPERSIST="X" ATTEXPVIRT="7" TYPTYPE="1" TYPE="KUNNR" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_NAOCT_QTD_CTRLH" CMPNAME="QTD_ALLOWED" VERSION="1" LANGU="E" DESCRIPT="Allowed quantity" EXPOSURE="1" STATE="1" EDITORDER="7 " ATTDECLTYP="0" ATTPERSIST="X" ATTEXPVIRT="2" TYPTYPE="1" TYPE="ZNAOCE_DEAL_ALLOWED_QTY" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_NAOCT_QTD_CTRLH" CMPNAME="SPART" VERSION="1" LANGU="E" DESCRIPT="Division" EXPOSURE="1" STATE="1" EDITORDER="1 " ATTDECLTYP="0" ATTPERSIST="X" ATTEXPVIRT="7" TYPTYPE="1" TYPE="SPART" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_NAOCT_QTD_CTRLH" CMPNAME="UOM" VERSION="1" LANGU="E" DESCRIPT="Condition unit" EXPOSURE="1" STATE="1" EDITORDER="6 " ATTDECLTYP="0" ATTPERSIST="X" ATTEXPVIRT="2" TYPTYPE="1" TYPE="KMEIN" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_NAOCT_QTD_CTRLH" CMPNAME="ZZDEAL_CODE" VERSION="1" LANGU="E" DESCRIPT="Deal code - JBOSS" EXPOSURE="1" STATE="1" EDITORDER="3 " ATTDECLTYP="0" ATTPERSIST="X" ATTEXPVIRT="7" TYPTYPE="1" TYPE="ZGLOC_DEAL_CODE" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <interfaceMethod CLSNAME="ZCL_NAOCT_QTD_CTRLH" CPDNAME="IF_OS_STATE~GET">
   <source>method IF_OS_STATE~GET.
***BUILD 090501
     &quot; returning result type ref to object
************************************************************************
* Purpose        : Get state.
*
* Version        : 2.0
*
* Precondition   : -
*
* Postcondition  : -
*
* OO Exceptions  : -
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 2000-03-07   : (BGR) Initial Version 2.0
************************************************************************
* GENERATED: Do not modify
************************************************************************

  data: STATE_OBJECT type ref to CL_OS_STATE.

  create object STATE_OBJECT.
  call method STATE_OBJECT-&gt;SET_STATE_FROM_OBJECT( ME ).
  result = STATE_OBJECT.

  endmethod.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_NAOCT_QTD_CTRLH" CPDNAME="IF_OS_STATE~HANDLE_EXCEPTION">
   <source>method IF_OS_STATE~HANDLE_EXCEPTION.
***BUILD 090501
     &quot; importing I_EXCEPTION type ref to IF_OS_EXCEPTION_INFO optional
     &quot; importing I_EX_OS type ref to CX_OS_OBJECT_NOT_FOUND optional
************************************************************************
* Purpose        : Handles exceptions during attribute access.
*
* Version        : 2.0
*
* Precondition   : -
*
* Postcondition  : -
*
* OO Exceptions  : CX_OS_OBJECT_NOT_FOUND
*
* Implementation : If an exception is raised during attribut access,
*                  this method is called and the exception is passed
*                  as a paramater. The default is to raise the exception
*                  again, so that the caller can handle the exception.
*                  But it is also possible to handle the exception
*                  here in the callee.
*
************************************************************************
* Changelog:
* - 2000-03-07   : (BGR) Initial Version 2.0
* - 2000-08-02   : (SB)  OO Exceptions
************************************************************************
* Modify if you like
************************************************************************

  if i_ex_os is not initial.
    raise exception i_ex_os.
  endif.

  endmethod.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_NAOCT_QTD_CTRLH" CPDNAME="IF_OS_STATE~INIT">
   <source>method IF_OS_STATE~INIT.
***BUILD 090501
&quot;#EC NEEDED
************************************************************************
* Purpose        : Initialisation of the transient state partition.
*
* Version        : 2.0
*
* Precondition   : -
*
* Postcondition  : Transient state is initial.
*
* OO Exceptions  : -
*
* Implementation : Caution!: Avoid Throwing ACCESS Events.
*
************************************************************************
* Changelog:
* - 2000-03-07   : (BGR) Initial Version 2.0
************************************************************************
* Modify if you like
************************************************************************

  endmethod.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_NAOCT_QTD_CTRLH" CPDNAME="IF_OS_STATE~INVALIDATE">
   <source>method IF_OS_STATE~INVALIDATE.
***BUILD 090501
&quot;#EC NEEDED
************************************************************************
* Purpose        : Do something before all persistent attributes are
*                  cleared.
*
* Version        : 2.0
*
* Precondition   : -
*
* Postcondition  : -
*
* OO Exceptions  : -
*
* Implementation : Whatever you like to do.
*
************************************************************************
* Changelog:
* - 2000-03-07   : (BGR) Initial Version 2.0
************************************************************************
* Modify if you like
************************************************************************

  endmethod.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_NAOCT_QTD_CTRLH" CPDNAME="IF_OS_STATE~SET">
   <source>method IF_OS_STATE~SET.
***BUILD 090501
     &quot; importing I_STATE type ref to object
************************************************************************
* Purpose        : Set state.
*
* Version        : 2.0
*
* Precondition   : -
*
* Postcondition  : -
*
* OO Exceptions  : -
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 2000-03-07   : (BGR) Initial Version 2.0
************************************************************************
* GENERATED: Do not modify
************************************************************************

  data: STATE_OBJECT type ref to CL_OS_STATE.

  STATE_OBJECT ?= I_STATE.
  call method STATE_OBJECT-&gt;SET_OBJECT_FROM_STATE( ME ).

  endmethod.</source>
  </interfaceMethod>
  <method CLSNAME="ZCL_NAOCT_QTD_CTRLH" CMPNAME="GET_AEDAT" VERSION="1" LANGU="E" DESCRIPT="Reads Attribute AEDAT" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="4" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_NAOCT_QTD_CTRLH" CMPNAME="GET_AEDAT" SCONAME="RESULT" VERSION="1" LANGU="E" DESCRIPT="Attribute Value" CMPTYPE="1" MTDTYPE="4" EDITORDER="0 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="AEDAT"/>
   <exception CLSNAME="ZCL_NAOCT_QTD_CTRLH" CMPNAME="GET_AEDAT" SCONAME="CX_OS_OBJECT_NOT_FOUND" VERSION="1" LANGU="E" DESCRIPT="Object Services Exception" MTDTYPE="4" EDITORDER="0 "/>
   <source>method GET_AEDAT.
***BUILD 090501
     &quot; returning RESULT
     &quot; raising CX_OS_OBJECT_NOT_FOUND
************************************************************************
* Purpose        : Get Attribute AEDAT
*
* Version        : 2.0
*
* Precondition   : -
*
* Postcondition  : The object state is loaded, result is set
*
* OO Exceptions  : CX_OS_OBJECT_NOT_FOUND
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 2000-03-14   : (BGR) Version 2.0
* - 2000-07-28   : (SB)  OO Exceptions
************************************************************************

* * Inform class agent and handle exceptions
  state_read_access.

  result = AEDAT.

           &quot; GET_AEDAT
  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_NAOCT_QTD_CTRLH" CMPNAME="GET_AENAM" VERSION="1" LANGU="E" DESCRIPT="Reads Attribute AENAM" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="4" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_NAOCT_QTD_CTRLH" CMPNAME="GET_AENAM" SCONAME="RESULT" VERSION="1" LANGU="E" DESCRIPT="Attribute Value" CMPTYPE="1" MTDTYPE="4" EDITORDER="0 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="AENAM"/>
   <exception CLSNAME="ZCL_NAOCT_QTD_CTRLH" CMPNAME="GET_AENAM" SCONAME="CX_OS_OBJECT_NOT_FOUND" VERSION="1" LANGU="E" DESCRIPT="Object Services Exception" MTDTYPE="4" EDITORDER="0 "/>
   <source>method GET_AENAM.
***BUILD 090501
     &quot; returning RESULT
     &quot; raising CX_OS_OBJECT_NOT_FOUND
************************************************************************
* Purpose        : Get Attribute AENAM
*
* Version        : 2.0
*
* Precondition   : -
*
* Postcondition  : The object state is loaded, result is set
*
* OO Exceptions  : CX_OS_OBJECT_NOT_FOUND
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 2000-03-14   : (BGR) Version 2.0
* - 2000-07-28   : (SB)  OO Exceptions
************************************************************************

* * Inform class agent and handle exceptions
  state_read_access.

  result = AENAM.

           &quot; GET_AENAM
  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_NAOCT_QTD_CTRLH" CMPNAME="GET_AETIM" VERSION="1" LANGU="E" DESCRIPT="Reads Attribute AETIM" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="4" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_NAOCT_QTD_CTRLH" CMPNAME="GET_AETIM" SCONAME="RESULT" VERSION="1" LANGU="E" DESCRIPT="Attribute Value" CMPTYPE="1" MTDTYPE="4" EDITORDER="0 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="AEZET"/>
   <exception CLSNAME="ZCL_NAOCT_QTD_CTRLH" CMPNAME="GET_AETIM" SCONAME="CX_OS_OBJECT_NOT_FOUND" VERSION="1" LANGU="E" DESCRIPT="Object Services Exception" MTDTYPE="4" EDITORDER="0 "/>
   <source>method GET_AETIM.
***BUILD 090501
     &quot; returning RESULT
     &quot; raising CX_OS_OBJECT_NOT_FOUND
************************************************************************
* Purpose        : Get Attribute AETIM
*
* Version        : 2.0
*
* Precondition   : -
*
* Postcondition  : The object state is loaded, result is set
*
* OO Exceptions  : CX_OS_OBJECT_NOT_FOUND
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 2000-03-14   : (BGR) Version 2.0
* - 2000-07-28   : (SB)  OO Exceptions
************************************************************************

* * Inform class agent and handle exceptions
  state_read_access.

  result = AETIM.

           &quot; GET_AETIM
  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_NAOCT_QTD_CTRLH" CMPNAME="GET_BEGDT" VERSION="1" LANGU="E" DESCRIPT="Reads Attribute BEGDT" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="4" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_NAOCT_QTD_CTRLH" CMPNAME="GET_BEGDT" SCONAME="RESULT" VERSION="1" LANGU="E" DESCRIPT="Attribute Value" CMPTYPE="1" MTDTYPE="4" EDITORDER="0 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="VIM_BEGDA"/>
   <exception CLSNAME="ZCL_NAOCT_QTD_CTRLH" CMPNAME="GET_BEGDT" SCONAME="CX_OS_OBJECT_NOT_FOUND" VERSION="1" LANGU="E" DESCRIPT="Object Services Exception" MTDTYPE="4" EDITORDER="0 "/>
   <source>method GET_BEGDT.
***BUILD 090501
     &quot; returning RESULT
     &quot; raising CX_OS_OBJECT_NOT_FOUND
************************************************************************
* Purpose        : Get Attribute BEGDT
*
* Version        : 2.0
*
* Precondition   : -
*
* Postcondition  : The object state is loaded, result is set
*
* OO Exceptions  : CX_OS_OBJECT_NOT_FOUND
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 2000-03-14   : (BGR) Version 2.0
* - 2000-07-28   : (SB)  OO Exceptions
************************************************************************

* * Inform class agent and handle exceptions
  state_read_access.

  result = BEGDT.

           &quot; GET_BEGDT
  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_NAOCT_QTD_CTRLH" CMPNAME="GET_CHNUSR" VERSION="1" LANGU="E" DESCRIPT="Reads Attribute CHNUSR" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="4" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_NAOCT_QTD_CTRLH" CMPNAME="GET_CHNUSR" SCONAME="RESULT" VERSION="1" LANGU="E" DESCRIPT="Attribute Value" CMPTYPE="1" MTDTYPE="4" EDITORDER="0 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="ZNAOCE_DEAL_CHANGER"/>
   <exception CLSNAME="ZCL_NAOCT_QTD_CTRLH" CMPNAME="GET_CHNUSR" SCONAME="CX_OS_OBJECT_NOT_FOUND" VERSION="1" LANGU="E" DESCRIPT="Object Services Exception" MTDTYPE="4" EDITORDER="0 "/>
   <source>method GET_CHNUSR.
***BUILD 090501
     &quot; returning RESULT
     &quot; raising CX_OS_OBJECT_NOT_FOUND
************************************************************************
* Purpose        : Get Attribute CHNUSR
*
* Version        : 2.0
*
* Precondition   : -
*
* Postcondition  : The object state is loaded, result is set
*
* OO Exceptions  : CX_OS_OBJECT_NOT_FOUND
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 2000-03-14   : (BGR) Version 2.0
* - 2000-07-28   : (SB)  OO Exceptions
************************************************************************

* * Inform class agent and handle exceptions
  state_read_access.

  result = CHNUSR.

           &quot; GET_CHNUSR
  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_NAOCT_QTD_CTRLH" CMPNAME="GET_CREDAT" VERSION="1" LANGU="E" DESCRIPT="Reads Attribute CREDAT" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="4" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_NAOCT_QTD_CTRLH" CMPNAME="GET_CREDAT" SCONAME="RESULT" VERSION="1" LANGU="E" DESCRIPT="Attribute Value" CMPTYPE="1" MTDTYPE="4" EDITORDER="0 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="ZNAOCE_DEAL_CREATION"/>
   <exception CLSNAME="ZCL_NAOCT_QTD_CTRLH" CMPNAME="GET_CREDAT" SCONAME="CX_OS_OBJECT_NOT_FOUND" VERSION="1" LANGU="E" DESCRIPT="Object Services Exception" MTDTYPE="4" EDITORDER="0 "/>
   <source>method GET_CREDAT.
***BUILD 090501
     &quot; returning RESULT
     &quot; raising CX_OS_OBJECT_NOT_FOUND
************************************************************************
* Purpose        : Get Attribute CREDAT
*
* Version        : 2.0
*
* Precondition   : -
*
* Postcondition  : The object state is loaded, result is set
*
* OO Exceptions  : CX_OS_OBJECT_NOT_FOUND
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 2000-03-14   : (BGR) Version 2.0
* - 2000-07-28   : (SB)  OO Exceptions
************************************************************************

* * Inform class agent and handle exceptions
  state_read_access.

  result = CREDAT.

           &quot; GET_CREDAT
  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_NAOCT_QTD_CTRLH" CMPNAME="GET_CRETIM" VERSION="1" LANGU="E" DESCRIPT="Reads Attribute CRETIM" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="4" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_NAOCT_QTD_CTRLH" CMPNAME="GET_CRETIM" SCONAME="RESULT" VERSION="1" LANGU="E" DESCRIPT="Attribute Value" CMPTYPE="1" MTDTYPE="4" EDITORDER="0 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="CTME"/>
   <exception CLSNAME="ZCL_NAOCT_QTD_CTRLH" CMPNAME="GET_CRETIM" SCONAME="CX_OS_OBJECT_NOT_FOUND" VERSION="1" LANGU="E" DESCRIPT="Object Services Exception" MTDTYPE="4" EDITORDER="0 "/>
   <source>method GET_CRETIM.
***BUILD 090501
     &quot; returning RESULT
     &quot; raising CX_OS_OBJECT_NOT_FOUND
************************************************************************
* Purpose        : Get Attribute CRETIM
*
* Version        : 2.0
*
* Precondition   : -
*
* Postcondition  : The object state is loaded, result is set
*
* OO Exceptions  : CX_OS_OBJECT_NOT_FOUND
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 2000-03-14   : (BGR) Version 2.0
* - 2000-07-28   : (SB)  OO Exceptions
************************************************************************

* * Inform class agent and handle exceptions
  state_read_access.

  result = CRETIM.

           &quot; GET_CRETIM
  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_NAOCT_QTD_CTRLH" CMPNAME="GET_CREUSR" VERSION="1" LANGU="E" DESCRIPT="Reads Attribute CREUSR" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="4" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_NAOCT_QTD_CTRLH" CMPNAME="GET_CREUSR" SCONAME="RESULT" VERSION="1" LANGU="E" DESCRIPT="Attribute Value" CMPTYPE="1" MTDTYPE="4" EDITORDER="0 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="ZNAOCE_DEAL_CREATOR"/>
   <exception CLSNAME="ZCL_NAOCT_QTD_CTRLH" CMPNAME="GET_CREUSR" SCONAME="CX_OS_OBJECT_NOT_FOUND" VERSION="1" LANGU="E" DESCRIPT="Object Services Exception" MTDTYPE="4" EDITORDER="0 "/>
   <source>method GET_CREUSR.
***BUILD 090501
     &quot; returning RESULT
     &quot; raising CX_OS_OBJECT_NOT_FOUND
************************************************************************
* Purpose        : Get Attribute CREUSR
*
* Version        : 2.0
*
* Precondition   : -
*
* Postcondition  : The object state is loaded, result is set
*
* OO Exceptions  : CX_OS_OBJECT_NOT_FOUND
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 2000-03-14   : (BGR) Version 2.0
* - 2000-07-28   : (SB)  OO Exceptions
************************************************************************

* * Inform class agent and handle exceptions
  state_read_access.

  result = CREUSR.

           &quot; GET_CREUSR
  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_NAOCT_QTD_CTRLH" CMPNAME="GET_ENDDT" VERSION="1" LANGU="E" DESCRIPT="Reads Attribute ENDDT" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="4" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_NAOCT_QTD_CTRLH" CMPNAME="GET_ENDDT" SCONAME="RESULT" VERSION="1" LANGU="E" DESCRIPT="Attribute Value" CMPTYPE="1" MTDTYPE="4" EDITORDER="0 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="VIM_ENDDA"/>
   <exception CLSNAME="ZCL_NAOCT_QTD_CTRLH" CMPNAME="GET_ENDDT" SCONAME="CX_OS_OBJECT_NOT_FOUND" VERSION="1" LANGU="E" DESCRIPT="Object Services Exception" MTDTYPE="4" EDITORDER="0 "/>
   <source>method GET_ENDDT.
***BUILD 090501
     &quot; returning RESULT
     &quot; raising CX_OS_OBJECT_NOT_FOUND
************************************************************************
* Purpose        : Get Attribute ENDDT
*
* Version        : 2.0
*
* Precondition   : -
*
* Postcondition  : The object state is loaded, result is set
*
* OO Exceptions  : CX_OS_OBJECT_NOT_FOUND
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 2000-03-14   : (BGR) Version 2.0
* - 2000-07-28   : (SB)  OO Exceptions
************************************************************************

* * Inform class agent and handle exceptions
  state_read_access.

  result = ENDDT.

           &quot; GET_ENDDT
  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_NAOCT_QTD_CTRLH" CMPNAME="GET_KUNNR" VERSION="1" LANGU="E" DESCRIPT="Reads Attribute KUNNR" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="4" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_NAOCT_QTD_CTRLH" CMPNAME="GET_KUNNR" SCONAME="RESULT" VERSION="1" LANGU="E" DESCRIPT="Attribute Value" CMPTYPE="1" MTDTYPE="4" EDITORDER="0 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="KUNNR"/>
   <exception CLSNAME="ZCL_NAOCT_QTD_CTRLH" CMPNAME="GET_KUNNR" SCONAME="CX_OS_OBJECT_NOT_FOUND" VERSION="1" LANGU="E" DESCRIPT="Object Services Exception" MTDTYPE="4" EDITORDER="0 "/>
   <source>method GET_KUNNR.
***BUILD 090501
     &quot; returning RESULT
     &quot; raising CX_OS_OBJECT_NOT_FOUND
************************************************************************
* Purpose        : Get Attribute KUNNR
*
* Version        : 2.0
*
* Precondition   : -
*
* Postcondition  : The object state is loaded, result is set
*
* OO Exceptions  : CX_OS_OBJECT_NOT_FOUND
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 2000-03-14   : (BGR) Version 2.0
* - 2000-07-28   : (SB)  OO Exceptions
************************************************************************

* * Inform class agent and handle exceptions
  state_read_access.

  result = KUNNR.

           &quot; GET_KUNNR
  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_NAOCT_QTD_CTRLH" CMPNAME="GET_QTD_ALLOWED" VERSION="1" LANGU="E" DESCRIPT="Reads Attribute QTD_ALLOWED" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="4" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_NAOCT_QTD_CTRLH" CMPNAME="GET_QTD_ALLOWED" SCONAME="RESULT" VERSION="1" LANGU="E" DESCRIPT="Attribute Value" CMPTYPE="1" MTDTYPE="4" EDITORDER="0 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="ZNAOCE_DEAL_ALLOWED_QTY"/>
   <exception CLSNAME="ZCL_NAOCT_QTD_CTRLH" CMPNAME="GET_QTD_ALLOWED" SCONAME="CX_OS_OBJECT_NOT_FOUND" VERSION="1" LANGU="E" DESCRIPT="Object Services Exception" MTDTYPE="4" EDITORDER="0 "/>
   <source>method GET_QTD_ALLOWED.
***BUILD 090501
     &quot; returning RESULT
     &quot; raising CX_OS_OBJECT_NOT_FOUND
************************************************************************
* Purpose        : Get Attribute QTD_ALLOWED
*
* Version        : 2.0
*
* Precondition   : -
*
* Postcondition  : The object state is loaded, result is set
*
* OO Exceptions  : CX_OS_OBJECT_NOT_FOUND
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 2000-03-14   : (BGR) Version 2.0
* - 2000-07-28   : (SB)  OO Exceptions
************************************************************************

* * Inform class agent and handle exceptions
  state_read_access.

  result = QTD_ALLOWED.

           &quot; GET_QTD_ALLOWED
  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_NAOCT_QTD_CTRLH" CMPNAME="GET_SPART" VERSION="1" LANGU="E" DESCRIPT="Reads Attribute SPART" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="4" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_NAOCT_QTD_CTRLH" CMPNAME="GET_SPART" SCONAME="RESULT" VERSION="1" LANGU="E" DESCRIPT="Attribute Value" CMPTYPE="1" MTDTYPE="4" EDITORDER="0 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="SPART"/>
   <exception CLSNAME="ZCL_NAOCT_QTD_CTRLH" CMPNAME="GET_SPART" SCONAME="CX_OS_OBJECT_NOT_FOUND" VERSION="1" LANGU="E" DESCRIPT="Object Services Exception" MTDTYPE="4" EDITORDER="0 "/>
   <source>method GET_SPART.
***BUILD 090501
     &quot; returning RESULT
     &quot; raising CX_OS_OBJECT_NOT_FOUND
************************************************************************
* Purpose        : Get Attribute SPART
*
* Version        : 2.0
*
* Precondition   : -
*
* Postcondition  : The object state is loaded, result is set
*
* OO Exceptions  : CX_OS_OBJECT_NOT_FOUND
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 2000-03-14   : (BGR) Version 2.0
* - 2000-07-28   : (SB)  OO Exceptions
************************************************************************

* * Inform class agent and handle exceptions
  state_read_access.

  result = SPART.

           &quot; GET_SPART
  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_NAOCT_QTD_CTRLH" CMPNAME="GET_UOM" VERSION="1" LANGU="E" DESCRIPT="Reads Attribute UOM" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="4" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_NAOCT_QTD_CTRLH" CMPNAME="GET_UOM" SCONAME="RESULT" VERSION="1" LANGU="E" DESCRIPT="Attribute Value" CMPTYPE="1" MTDTYPE="4" EDITORDER="0 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="KMEIN"/>
   <exception CLSNAME="ZCL_NAOCT_QTD_CTRLH" CMPNAME="GET_UOM" SCONAME="CX_OS_OBJECT_NOT_FOUND" VERSION="1" LANGU="E" DESCRIPT="Object Services Exception" MTDTYPE="4" EDITORDER="0 "/>
   <source>method GET_UOM.
***BUILD 090501
     &quot; returning RESULT
     &quot; raising CX_OS_OBJECT_NOT_FOUND
************************************************************************
* Purpose        : Get Attribute UOM
*
* Version        : 2.0
*
* Precondition   : -
*
* Postcondition  : The object state is loaded, result is set
*
* OO Exceptions  : CX_OS_OBJECT_NOT_FOUND
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 2000-03-14   : (BGR) Version 2.0
* - 2000-07-28   : (SB)  OO Exceptions
************************************************************************

* * Inform class agent and handle exceptions
  state_read_access.

  result = UOM.

           &quot; GET_UOM
  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_NAOCT_QTD_CTRLH" CMPNAME="GET_ZZDEAL_CODE" VERSION="1" LANGU="E" DESCRIPT="Reads Attribute ZZDEAL_CODE" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="4" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_NAOCT_QTD_CTRLH" CMPNAME="GET_ZZDEAL_CODE" SCONAME="RESULT" VERSION="1" LANGU="E" DESCRIPT="Attribute Value" CMPTYPE="1" MTDTYPE="4" EDITORDER="0 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="ZGLOC_DEAL_CODE"/>
   <exception CLSNAME="ZCL_NAOCT_QTD_CTRLH" CMPNAME="GET_ZZDEAL_CODE" SCONAME="CX_OS_OBJECT_NOT_FOUND" VERSION="1" LANGU="E" DESCRIPT="Object Services Exception" MTDTYPE="4" EDITORDER="0 "/>
   <source>method GET_ZZDEAL_CODE.
***BUILD 090501
     &quot; returning RESULT
     &quot; raising CX_OS_OBJECT_NOT_FOUND
************************************************************************
* Purpose        : Get Attribute ZZDEAL_CODE
*
* Version        : 2.0
*
* Precondition   : -
*
* Postcondition  : The object state is loaded, result is set
*
* OO Exceptions  : CX_OS_OBJECT_NOT_FOUND
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 2000-03-14   : (BGR) Version 2.0
* - 2000-07-28   : (SB)  OO Exceptions
************************************************************************

* * Inform class agent and handle exceptions
  state_read_access.

  result = ZZDEAL_CODE.

           &quot; GET_ZZDEAL_CODE
  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_NAOCT_QTD_CTRLH" CMPNAME="SET_AEDAT" VERSION="1" LANGU="E" DESCRIPT="Sets Attribute AEDAT" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="5" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_NAOCT_QTD_CTRLH" CMPNAME="SET_AEDAT" SCONAME="I_AEDAT" VERSION="1" LANGU="E" DESCRIPT="Attribute Value" CMPTYPE="1" MTDTYPE="5" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="AEDAT"/>
   <exception CLSNAME="ZCL_NAOCT_QTD_CTRLH" CMPNAME="SET_AEDAT" SCONAME="CX_OS_OBJECT_NOT_FOUND" VERSION="1" LANGU="E" DESCRIPT="Object Services Exception" MTDTYPE="5" EDITORDER="0 "/>
   <source>method SET_AEDAT.
***BUILD 090501
     &quot; importing I_AEDAT
     &quot; raising CX_OS_OBJECT_NOT_FOUND
************************************************************************
* Purpose        : Set attribute AEDAT
*
* Version        : 2.0
*
* Precondition   : -
*
* Postcondition  : The object state is loaded, attribute is set
*
* OO Exceptions  : CX_OS_OBJECT_NOT_FOUND
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 2000-03-14   : (BGR) Version 2.0
* - 2000-07-28   : (SB)  OO Exceptions
* - 2000-10-04   : (SB)  Namespaces
************************************************************************

* * Inform class agent and handle exceptions
  state_write_access.

  if ( I_AEDAT &lt;&gt; AEDAT ).

    AEDAT = I_AEDAT.

*   * Inform class agent and handle exceptions
    state_changed.

  endif. &quot;( I_AEDAT &lt;&gt; AEDAT )

           &quot; GET_AEDAT
  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_NAOCT_QTD_CTRLH" CMPNAME="SET_AENAM" VERSION="1" LANGU="E" DESCRIPT="Sets Attribute AENAM" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="5" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_NAOCT_QTD_CTRLH" CMPNAME="SET_AENAM" SCONAME="I_AENAM" VERSION="1" LANGU="E" DESCRIPT="Attribute Value" CMPTYPE="1" MTDTYPE="5" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="AENAM"/>
   <exception CLSNAME="ZCL_NAOCT_QTD_CTRLH" CMPNAME="SET_AENAM" SCONAME="CX_OS_OBJECT_NOT_FOUND" VERSION="1" LANGU="E" DESCRIPT="Object Services Exception" MTDTYPE="5" EDITORDER="0 "/>
   <source>method SET_AENAM.
***BUILD 090501
     &quot; importing I_AENAM
     &quot; raising CX_OS_OBJECT_NOT_FOUND
************************************************************************
* Purpose        : Set attribute AENAM
*
* Version        : 2.0
*
* Precondition   : -
*
* Postcondition  : The object state is loaded, attribute is set
*
* OO Exceptions  : CX_OS_OBJECT_NOT_FOUND
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 2000-03-14   : (BGR) Version 2.0
* - 2000-07-28   : (SB)  OO Exceptions
* - 2000-10-04   : (SB)  Namespaces
************************************************************************

* * Inform class agent and handle exceptions
  state_write_access.

  if ( I_AENAM &lt;&gt; AENAM ).

    AENAM = I_AENAM.

*   * Inform class agent and handle exceptions
    state_changed.

  endif. &quot;( I_AENAM &lt;&gt; AENAM )

           &quot; GET_AENAM
  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_NAOCT_QTD_CTRLH" CMPNAME="SET_AETIM" VERSION="1" LANGU="E" DESCRIPT="Sets Attribute AETIM" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="5" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_NAOCT_QTD_CTRLH" CMPNAME="SET_AETIM" SCONAME="I_AETIM" VERSION="1" LANGU="E" DESCRIPT="Attribute Value" CMPTYPE="1" MTDTYPE="5" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="AEZET"/>
   <exception CLSNAME="ZCL_NAOCT_QTD_CTRLH" CMPNAME="SET_AETIM" SCONAME="CX_OS_OBJECT_NOT_FOUND" VERSION="1" LANGU="E" DESCRIPT="Object Services Exception" MTDTYPE="5" EDITORDER="0 "/>
   <source>method SET_AETIM.
***BUILD 090501
     &quot; importing I_AETIM
     &quot; raising CX_OS_OBJECT_NOT_FOUND
************************************************************************
* Purpose        : Set attribute AETIM
*
* Version        : 2.0
*
* Precondition   : -
*
* Postcondition  : The object state is loaded, attribute is set
*
* OO Exceptions  : CX_OS_OBJECT_NOT_FOUND
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 2000-03-14   : (BGR) Version 2.0
* - 2000-07-28   : (SB)  OO Exceptions
* - 2000-10-04   : (SB)  Namespaces
************************************************************************

* * Inform class agent and handle exceptions
  state_write_access.

  if ( I_AETIM &lt;&gt; AETIM ).

    AETIM = I_AETIM.

*   * Inform class agent and handle exceptions
    state_changed.

  endif. &quot;( I_AETIM &lt;&gt; AETIM )

           &quot; GET_AETIM
  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_NAOCT_QTD_CTRLH" CMPNAME="SET_BEGDT" VERSION="1" LANGU="E" DESCRIPT="Sets Attribute BEGDT" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="5" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_NAOCT_QTD_CTRLH" CMPNAME="SET_BEGDT" SCONAME="I_BEGDT" VERSION="1" LANGU="E" DESCRIPT="Attribute Value" CMPTYPE="1" MTDTYPE="5" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="VIM_BEGDA"/>
   <exception CLSNAME="ZCL_NAOCT_QTD_CTRLH" CMPNAME="SET_BEGDT" SCONAME="CX_OS_OBJECT_NOT_FOUND" VERSION="1" LANGU="E" DESCRIPT="Object Services Exception" MTDTYPE="5" EDITORDER="0 "/>
   <source>method SET_BEGDT.
***BUILD 090501
     &quot; importing I_BEGDT
     &quot; raising CX_OS_OBJECT_NOT_FOUND
************************************************************************
* Purpose        : Set attribute BEGDT
*
* Version        : 2.0
*
* Precondition   : -
*
* Postcondition  : The object state is loaded, attribute is set
*
* OO Exceptions  : CX_OS_OBJECT_NOT_FOUND
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 2000-03-14   : (BGR) Version 2.0
* - 2000-07-28   : (SB)  OO Exceptions
* - 2000-10-04   : (SB)  Namespaces
************************************************************************

* * Inform class agent and handle exceptions
  state_write_access.

  if ( I_BEGDT &lt;&gt; BEGDT ).

    BEGDT = I_BEGDT.

*   * Inform class agent and handle exceptions
    state_changed.

  endif. &quot;( I_BEGDT &lt;&gt; BEGDT )

           &quot; GET_BEGDT
  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_NAOCT_QTD_CTRLH" CMPNAME="SET_CHNUSR" VERSION="1" LANGU="E" DESCRIPT="Sets Attribute CHNUSR" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="5" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_NAOCT_QTD_CTRLH" CMPNAME="SET_CHNUSR" SCONAME="I_CHNUSR" VERSION="1" LANGU="E" DESCRIPT="Attribute Value" CMPTYPE="1" MTDTYPE="5" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZNAOCE_DEAL_CHANGER"/>
   <exception CLSNAME="ZCL_NAOCT_QTD_CTRLH" CMPNAME="SET_CHNUSR" SCONAME="CX_OS_OBJECT_NOT_FOUND" VERSION="1" LANGU="E" DESCRIPT="Object Services Exception" MTDTYPE="5" EDITORDER="0 "/>
   <source>method SET_CHNUSR.
***BUILD 090501
     &quot; importing I_CHNUSR
     &quot; raising CX_OS_OBJECT_NOT_FOUND
************************************************************************
* Purpose        : Set attribute CHNUSR
*
* Version        : 2.0
*
* Precondition   : -
*
* Postcondition  : The object state is loaded, attribute is set
*
* OO Exceptions  : CX_OS_OBJECT_NOT_FOUND
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 2000-03-14   : (BGR) Version 2.0
* - 2000-07-28   : (SB)  OO Exceptions
* - 2000-10-04   : (SB)  Namespaces
************************************************************************

* * Inform class agent and handle exceptions
  state_write_access.

  if ( I_CHNUSR &lt;&gt; CHNUSR ).

    CHNUSR = I_CHNUSR.

*   * Inform class agent and handle exceptions
    state_changed.

  endif. &quot;( I_CHNUSR &lt;&gt; CHNUSR )

           &quot; GET_CHNUSR
  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_NAOCT_QTD_CTRLH" CMPNAME="SET_CREDAT" VERSION="1" LANGU="E" DESCRIPT="Sets Attribute CREDAT" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="5" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_NAOCT_QTD_CTRLH" CMPNAME="SET_CREDAT" SCONAME="I_CREDAT" VERSION="1" LANGU="E" DESCRIPT="Attribute Value" CMPTYPE="1" MTDTYPE="5" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZNAOCE_DEAL_CREATION"/>
   <exception CLSNAME="ZCL_NAOCT_QTD_CTRLH" CMPNAME="SET_CREDAT" SCONAME="CX_OS_OBJECT_NOT_FOUND" VERSION="1" LANGU="E" DESCRIPT="Object Services Exception" MTDTYPE="5" EDITORDER="0 "/>
   <source>method SET_CREDAT.
***BUILD 090501
     &quot; importing I_CREDAT
     &quot; raising CX_OS_OBJECT_NOT_FOUND
************************************************************************
* Purpose        : Set attribute CREDAT
*
* Version        : 2.0
*
* Precondition   : -
*
* Postcondition  : The object state is loaded, attribute is set
*
* OO Exceptions  : CX_OS_OBJECT_NOT_FOUND
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 2000-03-14   : (BGR) Version 2.0
* - 2000-07-28   : (SB)  OO Exceptions
* - 2000-10-04   : (SB)  Namespaces
************************************************************************

* * Inform class agent and handle exceptions
  state_write_access.

  if ( I_CREDAT &lt;&gt; CREDAT ).

    CREDAT = I_CREDAT.

*   * Inform class agent and handle exceptions
    state_changed.

  endif. &quot;( I_CREDAT &lt;&gt; CREDAT )

           &quot; GET_CREDAT
  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_NAOCT_QTD_CTRLH" CMPNAME="SET_CRETIM" VERSION="1" LANGU="E" DESCRIPT="Sets Attribute CRETIM" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="5" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_NAOCT_QTD_CTRLH" CMPNAME="SET_CRETIM" SCONAME="I_CRETIM" VERSION="1" LANGU="E" DESCRIPT="Attribute Value" CMPTYPE="1" MTDTYPE="5" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="CTME"/>
   <exception CLSNAME="ZCL_NAOCT_QTD_CTRLH" CMPNAME="SET_CRETIM" SCONAME="CX_OS_OBJECT_NOT_FOUND" VERSION="1" LANGU="E" DESCRIPT="Object Services Exception" MTDTYPE="5" EDITORDER="0 "/>
   <source>method SET_CRETIM.
***BUILD 090501
     &quot; importing I_CRETIM
     &quot; raising CX_OS_OBJECT_NOT_FOUND
************************************************************************
* Purpose        : Set attribute CRETIM
*
* Version        : 2.0
*
* Precondition   : -
*
* Postcondition  : The object state is loaded, attribute is set
*
* OO Exceptions  : CX_OS_OBJECT_NOT_FOUND
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 2000-03-14   : (BGR) Version 2.0
* - 2000-07-28   : (SB)  OO Exceptions
* - 2000-10-04   : (SB)  Namespaces
************************************************************************

* * Inform class agent and handle exceptions
  state_write_access.

  if ( I_CRETIM &lt;&gt; CRETIM ).

    CRETIM = I_CRETIM.

*   * Inform class agent and handle exceptions
    state_changed.

  endif. &quot;( I_CRETIM &lt;&gt; CRETIM )

           &quot; GET_CRETIM
  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_NAOCT_QTD_CTRLH" CMPNAME="SET_CREUSR" VERSION="1" LANGU="E" DESCRIPT="Sets Attribute CREUSR" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="5" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_NAOCT_QTD_CTRLH" CMPNAME="SET_CREUSR" SCONAME="I_CREUSR" VERSION="1" LANGU="E" DESCRIPT="Attribute Value" CMPTYPE="1" MTDTYPE="5" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZNAOCE_DEAL_CREATOR"/>
   <exception CLSNAME="ZCL_NAOCT_QTD_CTRLH" CMPNAME="SET_CREUSR" SCONAME="CX_OS_OBJECT_NOT_FOUND" VERSION="1" LANGU="E" DESCRIPT="Object Services Exception" MTDTYPE="5" EDITORDER="0 "/>
   <source>method SET_CREUSR.
***BUILD 090501
     &quot; importing I_CREUSR
     &quot; raising CX_OS_OBJECT_NOT_FOUND
************************************************************************
* Purpose        : Set attribute CREUSR
*
* Version        : 2.0
*
* Precondition   : -
*
* Postcondition  : The object state is loaded, attribute is set
*
* OO Exceptions  : CX_OS_OBJECT_NOT_FOUND
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 2000-03-14   : (BGR) Version 2.0
* - 2000-07-28   : (SB)  OO Exceptions
* - 2000-10-04   : (SB)  Namespaces
************************************************************************

* * Inform class agent and handle exceptions
  state_write_access.

  if ( I_CREUSR &lt;&gt; CREUSR ).

    CREUSR = I_CREUSR.

*   * Inform class agent and handle exceptions
    state_changed.

  endif. &quot;( I_CREUSR &lt;&gt; CREUSR )

           &quot; GET_CREUSR
  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_NAOCT_QTD_CTRLH" CMPNAME="SET_QTD_ALLOWED" VERSION="1" LANGU="E" DESCRIPT="Sets Attribute QTD_ALLOWED" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="5" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_NAOCT_QTD_CTRLH" CMPNAME="SET_QTD_ALLOWED" SCONAME="I_QTD_ALLOWED" VERSION="1" LANGU="E" DESCRIPT="Attribute Value" CMPTYPE="1" MTDTYPE="5" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZNAOCE_DEAL_ALLOWED_QTY"/>
   <exception CLSNAME="ZCL_NAOCT_QTD_CTRLH" CMPNAME="SET_QTD_ALLOWED" SCONAME="CX_OS_OBJECT_NOT_FOUND" VERSION="1" LANGU="E" DESCRIPT="Object Services Exception" MTDTYPE="5" EDITORDER="0 "/>
   <source>method SET_QTD_ALLOWED.
***BUILD 090501
     &quot; importing I_QTD_ALLOWED
     &quot; raising CX_OS_OBJECT_NOT_FOUND
************************************************************************
* Purpose        : Set attribute QTD_ALLOWED
*
* Version        : 2.0
*
* Precondition   : -
*
* Postcondition  : The object state is loaded, attribute is set
*
* OO Exceptions  : CX_OS_OBJECT_NOT_FOUND
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 2000-03-14   : (BGR) Version 2.0
* - 2000-07-28   : (SB)  OO Exceptions
* - 2000-10-04   : (SB)  Namespaces
************************************************************************

* * Inform class agent and handle exceptions
  state_write_access.

  if ( I_QTD_ALLOWED &lt;&gt; QTD_ALLOWED ).

    QTD_ALLOWED = I_QTD_ALLOWED.

*   * Inform class agent and handle exceptions
    state_changed.

  endif. &quot;( I_QTD_ALLOWED &lt;&gt; QTD_ALLOWED )

           &quot; GET_QTD_ALLOWED
  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_NAOCT_QTD_CTRLH" CMPNAME="SET_UOM" VERSION="1" LANGU="E" DESCRIPT="Sets Attribute UOM" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="5" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_NAOCT_QTD_CTRLH" CMPNAME="SET_UOM" SCONAME="I_UOM" VERSION="1" LANGU="E" DESCRIPT="Attribute Value" CMPTYPE="1" MTDTYPE="5" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="KMEIN"/>
   <exception CLSNAME="ZCL_NAOCT_QTD_CTRLH" CMPNAME="SET_UOM" SCONAME="CX_OS_OBJECT_NOT_FOUND" VERSION="1" LANGU="E" DESCRIPT="Object Services Exception" MTDTYPE="5" EDITORDER="0 "/>
   <source>method SET_UOM.
***BUILD 090501
     &quot; importing I_UOM
     &quot; raising CX_OS_OBJECT_NOT_FOUND
************************************************************************
* Purpose        : Set attribute UOM
*
* Version        : 2.0
*
* Precondition   : -
*
* Postcondition  : The object state is loaded, attribute is set
*
* OO Exceptions  : CX_OS_OBJECT_NOT_FOUND
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 2000-03-14   : (BGR) Version 2.0
* - 2000-07-28   : (SB)  OO Exceptions
* - 2000-10-04   : (SB)  Namespaces
************************************************************************

* * Inform class agent and handle exceptions
  state_write_access.

  if ( I_UOM &lt;&gt; UOM ).

    UOM = I_UOM.

*   * Inform class agent and handle exceptions
    state_changed.

  endif. &quot;( I_UOM &lt;&gt; UOM )

           &quot; GET_UOM
  endmethod.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZCL_NAOCT_QTD_CTRLD" VERSION="1" LANGU="E" DESCRIPT="Deal Code consumption - Persistence" CATEGORY="10" EXPOSURE="1" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 ">
  <friends CLSNAME="ZCL_NAOCT_QTD_CTRLD" REFCLSNAME="ZCB_NAOCT_QTD_CTRLD" FRIENDTYPE="0" VERSION="1" STATE="1"/>
  <implementing CLSNAME="ZCL_NAOCT_QTD_CTRLD" REFCLSNAME="IF_OS_STATE" VERSION="1" EXPOSURE="2" STATE="1" RELTYPE="1" EDITORDER="0 "/>
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <typeClasDef CLSNAME="ZCL_NAOCT_QTD_CTRLD" TYPEGROUP="CL_OS_SYSTEM" VERSION="1" TPUTYPE="1"/>
  <attribute CLSNAME="ZCL_NAOCT_QTD_CTRLD" CMPNAME="ENDDT" VERSION="1" LANGU="E" DESCRIPT="Expiration date" EXPOSURE="1" STATE="1" EDITORDER="4 " ATTDECLTYP="0" ATTPERSIST="X" ATTEXPVIRT="7" TYPTYPE="1" TYPE="ZNAOCE_DEAL_END" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_NAOCT_QTD_CTRLD" CMPNAME="KUNNR" VERSION="1" LANGU="E" DESCRIPT="Customer Number" EXPOSURE="1" STATE="1" EDITORDER="2 " ATTDECLTYP="0" ATTPERSIST="X" ATTEXPVIRT="7" TYPTYPE="1" TYPE="KUNNR" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_NAOCT_QTD_CTRLD" CMPNAME="POSNR" VERSION="1" LANGU="E" DESCRIPT="Sales Document Item" EXPOSURE="1" STATE="1" EDITORDER="6 " ATTDECLTYP="0" ATTPERSIST="X" ATTEXPVIRT="7" TYPTYPE="1" TYPE="POSNR_VA" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_NAOCT_QTD_CTRLD" CMPNAME="QTD_ORDERED" VERSION="1" LANGU="E" DESCRIPT="Quantity" EXPOSURE="1" STATE="1" EDITORDER="7 " ATTDECLTYP="0" ATTPERSIST="X" ATTEXPVIRT="2" TYPTYPE="1" TYPE="MENGE_D" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_NAOCT_QTD_CTRLD" CMPNAME="REJECTED" VERSION="1" LANGU="E" DESCRIPT="Checkbox" EXPOSURE="1" STATE="1" EDITORDER="8 " ATTDECLTYP="0" ATTPERSIST="X" ATTEXPVIRT="2" TYPTYPE="1" TYPE="XFELD" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_NAOCT_QTD_CTRLD" CMPNAME="SPART" VERSION="1" LANGU="E" DESCRIPT="Division" EXPOSURE="1" STATE="1" EDITORDER="1 " ATTDECLTYP="0" ATTPERSIST="X" ATTEXPVIRT="7" TYPTYPE="1" TYPE="SPART" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_NAOCT_QTD_CTRLD" CMPNAME="VBELN" VERSION="1" LANGU="E" DESCRIPT="Sales Document" EXPOSURE="1" STATE="1" EDITORDER="5 " ATTDECLTYP="0" ATTPERSIST="X" ATTEXPVIRT="7" TYPTYPE="1" TYPE="VBELN_VA" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_NAOCT_QTD_CTRLD" CMPNAME="ZZDEAL_CODE" VERSION="1" LANGU="E" DESCRIPT="Deal code - JBOSS" EXPOSURE="1" STATE="1" EDITORDER="3 " ATTDECLTYP="0" ATTPERSIST="X" ATTEXPVIRT="7" TYPTYPE="1" TYPE="ZGLOC_DEAL_CODE" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <interfaceMethod CLSNAME="ZCL_NAOCT_QTD_CTRLD" CPDNAME="IF_OS_STATE~GET">
   <source>method IF_OS_STATE~GET.
***BUILD 090501
     &quot; returning result type ref to object
************************************************************************
* Purpose        : Get state.
*
* Version        : 2.0
*
* Precondition   : -
*
* Postcondition  : -
*
* OO Exceptions  : -
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 2000-03-07   : (BGR) Initial Version 2.0
************************************************************************
* GENERATED: Do not modify
************************************************************************

  data: STATE_OBJECT type ref to CL_OS_STATE.

  create object STATE_OBJECT.
  call method STATE_OBJECT-&gt;SET_STATE_FROM_OBJECT( ME ).
  result = STATE_OBJECT.

  endmethod.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_NAOCT_QTD_CTRLD" CPDNAME="IF_OS_STATE~HANDLE_EXCEPTION">
   <source>method IF_OS_STATE~HANDLE_EXCEPTION.
***BUILD 090501
     &quot; importing I_EXCEPTION type ref to IF_OS_EXCEPTION_INFO optional
     &quot; importing I_EX_OS type ref to CX_OS_OBJECT_NOT_FOUND optional
************************************************************************
* Purpose        : Handles exceptions during attribute access.
*
* Version        : 2.0
*
* Precondition   : -
*
* Postcondition  : -
*
* OO Exceptions  : CX_OS_OBJECT_NOT_FOUND
*
* Implementation : If an exception is raised during attribut access,
*                  this method is called and the exception is passed
*                  as a paramater. The default is to raise the exception
*                  again, so that the caller can handle the exception.
*                  But it is also possible to handle the exception
*                  here in the callee.
*
************************************************************************
* Changelog:
* - 2000-03-07   : (BGR) Initial Version 2.0
* - 2000-08-02   : (SB)  OO Exceptions
************************************************************************
* Modify if you like
************************************************************************

  if i_ex_os is not initial.
    raise exception i_ex_os.
  endif.

  endmethod.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_NAOCT_QTD_CTRLD" CPDNAME="IF_OS_STATE~INIT">
   <source>method IF_OS_STATE~INIT.
***BUILD 090501
&quot;#EC NEEDED
************************************************************************
* Purpose        : Initialisation of the transient state partition.
*
* Version        : 2.0
*
* Precondition   : -
*
* Postcondition  : Transient state is initial.
*
* OO Exceptions  : -
*
* Implementation : Caution!: Avoid Throwing ACCESS Events.
*
************************************************************************
* Changelog:
* - 2000-03-07   : (BGR) Initial Version 2.0
************************************************************************
* Modify if you like
************************************************************************

  endmethod.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_NAOCT_QTD_CTRLD" CPDNAME="IF_OS_STATE~INVALIDATE">
   <source>method IF_OS_STATE~INVALIDATE.
***BUILD 090501
&quot;#EC NEEDED
************************************************************************
* Purpose        : Do something before all persistent attributes are
*                  cleared.
*
* Version        : 2.0
*
* Precondition   : -
*
* Postcondition  : -
*
* OO Exceptions  : -
*
* Implementation : Whatever you like to do.
*
************************************************************************
* Changelog:
* - 2000-03-07   : (BGR) Initial Version 2.0
************************************************************************
* Modify if you like
************************************************************************

  endmethod.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_NAOCT_QTD_CTRLD" CPDNAME="IF_OS_STATE~SET">
   <source>method IF_OS_STATE~SET.
***BUILD 090501
     &quot; importing I_STATE type ref to object
************************************************************************
* Purpose        : Set state.
*
* Version        : 2.0
*
* Precondition   : -
*
* Postcondition  : -
*
* OO Exceptions  : -
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 2000-03-07   : (BGR) Initial Version 2.0
************************************************************************
* GENERATED: Do not modify
************************************************************************

  data: STATE_OBJECT type ref to CL_OS_STATE.

  STATE_OBJECT ?= I_STATE.
  call method STATE_OBJECT-&gt;SET_OBJECT_FROM_STATE( ME ).

  endmethod.</source>
  </interfaceMethod>
  <method CLSNAME="ZCL_NAOCT_QTD_CTRLD" CMPNAME="GET_ENDDT" VERSION="1" LANGU="E" DESCRIPT="Reads Attribute ENDDT" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="4" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_NAOCT_QTD_CTRLD" CMPNAME="GET_ENDDT" SCONAME="RESULT" VERSION="1" LANGU="E" DESCRIPT="Attribute Value" CMPTYPE="1" MTDTYPE="4" EDITORDER="0 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="ZNAOCE_DEAL_END"/>
   <exception CLSNAME="ZCL_NAOCT_QTD_CTRLD" CMPNAME="GET_ENDDT" SCONAME="CX_OS_OBJECT_NOT_FOUND" VERSION="1" LANGU="E" DESCRIPT="Object Services Exception" MTDTYPE="4" EDITORDER="0 "/>
   <source>method GET_ENDDT.
***BUILD 090501
     &quot; returning RESULT
     &quot; raising CX_OS_OBJECT_NOT_FOUND
************************************************************************
* Purpose        : Get Attribute ENDDT
*
* Version        : 2.0
*
* Precondition   : -
*
* Postcondition  : The object state is loaded, result is set
*
* OO Exceptions  : CX_OS_OBJECT_NOT_FOUND
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 2000-03-14   : (BGR) Version 2.0
* - 2000-07-28   : (SB)  OO Exceptions
************************************************************************

* * Inform class agent and handle exceptions
  state_read_access.

  result = ENDDT.

           &quot; GET_ENDDT
  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_NAOCT_QTD_CTRLD" CMPNAME="GET_KUNNR" VERSION="1" LANGU="E" DESCRIPT="Reads Attribute KUNNR" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="4" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_NAOCT_QTD_CTRLD" CMPNAME="GET_KUNNR" SCONAME="RESULT" VERSION="1" LANGU="E" DESCRIPT="Attribute Value" CMPTYPE="1" MTDTYPE="4" EDITORDER="0 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="KUNNR"/>
   <exception CLSNAME="ZCL_NAOCT_QTD_CTRLD" CMPNAME="GET_KUNNR" SCONAME="CX_OS_OBJECT_NOT_FOUND" VERSION="1" LANGU="E" DESCRIPT="Object Services Exception" MTDTYPE="4" EDITORDER="0 "/>
   <source>method GET_KUNNR.
***BUILD 090501
     &quot; returning RESULT
     &quot; raising CX_OS_OBJECT_NOT_FOUND
************************************************************************
* Purpose        : Get Attribute KUNNR
*
* Version        : 2.0
*
* Precondition   : -
*
* Postcondition  : The object state is loaded, result is set
*
* OO Exceptions  : CX_OS_OBJECT_NOT_FOUND
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 2000-03-14   : (BGR) Version 2.0
* - 2000-07-28   : (SB)  OO Exceptions
************************************************************************

* * Inform class agent and handle exceptions
  state_read_access.

  result = KUNNR.

           &quot; GET_KUNNR
  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_NAOCT_QTD_CTRLD" CMPNAME="GET_POSNR" VERSION="1" LANGU="E" DESCRIPT="Reads Attribute POSNR" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="4" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_NAOCT_QTD_CTRLD" CMPNAME="GET_POSNR" SCONAME="RESULT" VERSION="1" LANGU="E" DESCRIPT="Attribute Value" CMPTYPE="1" MTDTYPE="4" EDITORDER="0 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="POSNR_VA"/>
   <exception CLSNAME="ZCL_NAOCT_QTD_CTRLD" CMPNAME="GET_POSNR" SCONAME="CX_OS_OBJECT_NOT_FOUND" VERSION="1" LANGU="E" DESCRIPT="Object Services Exception" MTDTYPE="4" EDITORDER="0 "/>
   <source>method GET_POSNR.
***BUILD 090501
     &quot; returning RESULT
     &quot; raising CX_OS_OBJECT_NOT_FOUND
************************************************************************
* Purpose        : Get Attribute POSNR
*
* Version        : 2.0
*
* Precondition   : -
*
* Postcondition  : The object state is loaded, result is set
*
* OO Exceptions  : CX_OS_OBJECT_NOT_FOUND
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 2000-03-14   : (BGR) Version 2.0
* - 2000-07-28   : (SB)  OO Exceptions
************************************************************************

* * Inform class agent and handle exceptions
  state_read_access.

  result = POSNR.

           &quot; GET_POSNR
  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_NAOCT_QTD_CTRLD" CMPNAME="GET_QTD_ORDERED" VERSION="1" LANGU="E" DESCRIPT="Reads Attribute QTD_ORDERED" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="4" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_NAOCT_QTD_CTRLD" CMPNAME="GET_QTD_ORDERED" SCONAME="RESULT" VERSION="1" LANGU="E" DESCRIPT="Attribute Value" CMPTYPE="1" MTDTYPE="4" EDITORDER="0 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="MENGE_D"/>
   <exception CLSNAME="ZCL_NAOCT_QTD_CTRLD" CMPNAME="GET_QTD_ORDERED" SCONAME="CX_OS_OBJECT_NOT_FOUND" VERSION="1" LANGU="E" DESCRIPT="Object Services Exception" MTDTYPE="4" EDITORDER="0 "/>
   <source>method GET_QTD_ORDERED.
***BUILD 090501
     &quot; returning RESULT
     &quot; raising CX_OS_OBJECT_NOT_FOUND
************************************************************************
* Purpose        : Get Attribute QTD_ORDERED
*
* Version        : 2.0
*
* Precondition   : -
*
* Postcondition  : The object state is loaded, result is set
*
* OO Exceptions  : CX_OS_OBJECT_NOT_FOUND
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 2000-03-14   : (BGR) Version 2.0
* - 2000-07-28   : (SB)  OO Exceptions
************************************************************************

* * Inform class agent and handle exceptions
  state_read_access.

  result = QTD_ORDERED.

           &quot; GET_QTD_ORDERED
  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_NAOCT_QTD_CTRLD" CMPNAME="GET_REJECTED" VERSION="1" LANGU="E" DESCRIPT="Reads Attribute REJECTED" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="4" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_NAOCT_QTD_CTRLD" CMPNAME="GET_REJECTED" SCONAME="RESULT" VERSION="1" LANGU="E" DESCRIPT="Attribute Value" CMPTYPE="1" MTDTYPE="4" EDITORDER="0 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="XFELD"/>
   <exception CLSNAME="ZCL_NAOCT_QTD_CTRLD" CMPNAME="GET_REJECTED" SCONAME="CX_OS_OBJECT_NOT_FOUND" VERSION="1" LANGU="E" DESCRIPT="Object Services Exception" MTDTYPE="4" EDITORDER="0 "/>
   <source>method GET_REJECTED.
***BUILD 090501
     &quot; returning RESULT
     &quot; raising CX_OS_OBJECT_NOT_FOUND
************************************************************************
* Purpose        : Get Attribute REJECTED
*
* Version        : 2.0
*
* Precondition   : -
*
* Postcondition  : The object state is loaded, result is set
*
* OO Exceptions  : CX_OS_OBJECT_NOT_FOUND
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 2000-03-14   : (BGR) Version 2.0
* - 2000-07-28   : (SB)  OO Exceptions
************************************************************************

* * Inform class agent and handle exceptions
  state_read_access.

  result = REJECTED.

           &quot; GET_REJECTED
  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_NAOCT_QTD_CTRLD" CMPNAME="GET_SPART" VERSION="1" LANGU="E" DESCRIPT="Reads Attribute SPART" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="4" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_NAOCT_QTD_CTRLD" CMPNAME="GET_SPART" SCONAME="RESULT" VERSION="1" LANGU="E" DESCRIPT="Attribute Value" CMPTYPE="1" MTDTYPE="4" EDITORDER="0 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="SPART"/>
   <exception CLSNAME="ZCL_NAOCT_QTD_CTRLD" CMPNAME="GET_SPART" SCONAME="CX_OS_OBJECT_NOT_FOUND" VERSION="1" LANGU="E" DESCRIPT="Object Services Exception" MTDTYPE="4" EDITORDER="0 "/>
   <source>method GET_SPART.
***BUILD 090501
     &quot; returning RESULT
     &quot; raising CX_OS_OBJECT_NOT_FOUND
************************************************************************
* Purpose        : Get Attribute SPART
*
* Version        : 2.0
*
* Precondition   : -
*
* Postcondition  : The object state is loaded, result is set
*
* OO Exceptions  : CX_OS_OBJECT_NOT_FOUND
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 2000-03-14   : (BGR) Version 2.0
* - 2000-07-28   : (SB)  OO Exceptions
************************************************************************

* * Inform class agent and handle exceptions
  state_read_access.

  result = SPART.

           &quot; GET_SPART
  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_NAOCT_QTD_CTRLD" CMPNAME="GET_VBELN" VERSION="1" LANGU="E" DESCRIPT="Reads Attribute VBELN" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="4" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_NAOCT_QTD_CTRLD" CMPNAME="GET_VBELN" SCONAME="RESULT" VERSION="1" LANGU="E" DESCRIPT="Attribute Value" CMPTYPE="1" MTDTYPE="4" EDITORDER="0 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="VBELN_VA"/>
   <exception CLSNAME="ZCL_NAOCT_QTD_CTRLD" CMPNAME="GET_VBELN" SCONAME="CX_OS_OBJECT_NOT_FOUND" VERSION="1" LANGU="E" DESCRIPT="Object Services Exception" MTDTYPE="4" EDITORDER="0 "/>
   <source>method GET_VBELN.
***BUILD 090501
     &quot; returning RESULT
     &quot; raising CX_OS_OBJECT_NOT_FOUND
************************************************************************
* Purpose        : Get Attribute VBELN
*
* Version        : 2.0
*
* Precondition   : -
*
* Postcondition  : The object state is loaded, result is set
*
* OO Exceptions  : CX_OS_OBJECT_NOT_FOUND
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 2000-03-14   : (BGR) Version 2.0
* - 2000-07-28   : (SB)  OO Exceptions
************************************************************************

* * Inform class agent and handle exceptions
  state_read_access.

  result = VBELN.

           &quot; GET_VBELN
  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_NAOCT_QTD_CTRLD" CMPNAME="GET_ZZDEAL_CODE" VERSION="1" LANGU="E" DESCRIPT="Reads Attribute ZZDEAL_CODE" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="4" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_NAOCT_QTD_CTRLD" CMPNAME="GET_ZZDEAL_CODE" SCONAME="RESULT" VERSION="1" LANGU="E" DESCRIPT="Attribute Value" CMPTYPE="1" MTDTYPE="4" EDITORDER="0 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="ZGLOC_DEAL_CODE"/>
   <exception CLSNAME="ZCL_NAOCT_QTD_CTRLD" CMPNAME="GET_ZZDEAL_CODE" SCONAME="CX_OS_OBJECT_NOT_FOUND" VERSION="1" LANGU="E" DESCRIPT="Object Services Exception" MTDTYPE="4" EDITORDER="0 "/>
   <source>method GET_ZZDEAL_CODE.
***BUILD 090501
     &quot; returning RESULT
     &quot; raising CX_OS_OBJECT_NOT_FOUND
************************************************************************
* Purpose        : Get Attribute ZZDEAL_CODE
*
* Version        : 2.0
*
* Precondition   : -
*
* Postcondition  : The object state is loaded, result is set
*
* OO Exceptions  : CX_OS_OBJECT_NOT_FOUND
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 2000-03-14   : (BGR) Version 2.0
* - 2000-07-28   : (SB)  OO Exceptions
************************************************************************

* * Inform class agent and handle exceptions
  state_read_access.

  result = ZZDEAL_CODE.

           &quot; GET_ZZDEAL_CODE
  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_NAOCT_QTD_CTRLD" CMPNAME="SET_QTD_ORDERED" VERSION="1" LANGU="E" DESCRIPT="Sets Attribute QTD_ORDERED" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="5" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_NAOCT_QTD_CTRLD" CMPNAME="SET_QTD_ORDERED" SCONAME="I_QTD_ORDERED" VERSION="1" LANGU="E" DESCRIPT="Attribute Value" CMPTYPE="1" MTDTYPE="5" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="MENGE_D"/>
   <exception CLSNAME="ZCL_NAOCT_QTD_CTRLD" CMPNAME="SET_QTD_ORDERED" SCONAME="CX_OS_OBJECT_NOT_FOUND" VERSION="1" LANGU="E" DESCRIPT="Object Services Exception" MTDTYPE="5" EDITORDER="0 "/>
   <source>method SET_QTD_ORDERED.
***BUILD 090501
     &quot; importing I_QTD_ORDERED
     &quot; raising CX_OS_OBJECT_NOT_FOUND
************************************************************************
* Purpose        : Set attribute QTD_ORDERED
*
* Version        : 2.0
*
* Precondition   : -
*
* Postcondition  : The object state is loaded, attribute is set
*
* OO Exceptions  : CX_OS_OBJECT_NOT_FOUND
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 2000-03-14   : (BGR) Version 2.0
* - 2000-07-28   : (SB)  OO Exceptions
* - 2000-10-04   : (SB)  Namespaces
************************************************************************

* * Inform class agent and handle exceptions
  state_write_access.

  if ( I_QTD_ORDERED &lt;&gt; QTD_ORDERED ).

    QTD_ORDERED = I_QTD_ORDERED.

*   * Inform class agent and handle exceptions
    state_changed.

  endif. &quot;( I_QTD_ORDERED &lt;&gt; QTD_ORDERED )

           &quot; GET_QTD_ORDERED
  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_NAOCT_QTD_CTRLD" CMPNAME="SET_REJECTED" VERSION="1" LANGU="E" DESCRIPT="Sets Attribute REJECTED" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="5" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_NAOCT_QTD_CTRLD" CMPNAME="SET_REJECTED" SCONAME="I_REJECTED" VERSION="1" LANGU="E" DESCRIPT="Attribute Value" CMPTYPE="1" MTDTYPE="5" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="XFELD"/>
   <exception CLSNAME="ZCL_NAOCT_QTD_CTRLD" CMPNAME="SET_REJECTED" SCONAME="CX_OS_OBJECT_NOT_FOUND" VERSION="1" LANGU="E" DESCRIPT="Object Services Exception" MTDTYPE="5" EDITORDER="0 "/>
   <source>method SET_REJECTED.
***BUILD 090501
     &quot; importing I_REJECTED
     &quot; raising CX_OS_OBJECT_NOT_FOUND
************************************************************************
* Purpose        : Set attribute REJECTED
*
* Version        : 2.0
*
* Precondition   : -
*
* Postcondition  : The object state is loaded, attribute is set
*
* OO Exceptions  : CX_OS_OBJECT_NOT_FOUND
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 2000-03-14   : (BGR) Version 2.0
* - 2000-07-28   : (SB)  OO Exceptions
* - 2000-10-04   : (SB)  Namespaces
************************************************************************

* * Inform class agent and handle exceptions
  state_write_access.

  if ( I_REJECTED &lt;&gt; REJECTED ).

    REJECTED = I_REJECTED.

*   * Inform class agent and handle exceptions
    state_changed.

  endif. &quot;( I_REJECTED &lt;&gt; REJECTED )

           &quot; GET_REJECTED
  endmethod.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZCB_NAOCT_QTD_CTRLH" VERSION="1" LANGU="E" DESCRIPT="Base agent Allowed quantity per Deal Code - Persistence" CATEGORY="11" EXPOSURE="2" STATE="1" RELEASE="0" CLSABSTRCT="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " REFCLSNAME="CL_OS_CA_COMMON">
  <types CLSNAME="ZCB_NAOCT_QTD_CTRLH" CMPNAME="TYP_OID" VERSION="1" LANGU="E" DESCRIPT="Type of Generic Object Identifier" EXPOSURE="1" STATE="1" EDITORDER="0 " TYPTYPE="1" TYPE="OS_GUID" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <types CLSNAME="ZCB_NAOCT_QTD_CTRLH" CMPNAME="TYP_TYPE" VERSION="1" LANGU="E" DESCRIPT="Type of Type Identifier" EXPOSURE="1" STATE="1" EDITORDER="0 " TYPTYPE="1" TYPE="OS_GUID" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <types CLSNAME="ZCB_NAOCT_QTD_CTRLH" CMPNAME="TYP_OBJECT_REF" VERSION="1" LANGU="E" DESCRIPT="Type of Managed Object" EXPOSURE="1" STATE="1" EDITORDER="1 " TYPTYPE="3" TYPE="ZCL_NAOCT_QTD_CTRLH" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <types CLSNAME="ZCB_NAOCT_QTD_CTRLH" CMPNAME="TYP_BUSINESS_KEY" VERSION="1" LANGU="E" DESCRIPT="Business Key" EXPOSURE="1" STATE="1" EDITORDER="2 " TYPTYPE="4" SRCROW1="7 " SRCCOLUMN1="4 " SRCROW2="12 " SRCCOLUMN2="26 " TYPESRC_LENG="182 " TYPESRC="begin of TYP_BUSINESS_KEY ,
      SPART type SPART ,
      KUNNR type KUNNR ,
      ZZDEAL_CODE type ZGLOC_DEAL_CODE ,
      ENDDT type VIM_ENDDA ,
    end of TYP_BUSINESS_KEY
"/>
  <types CLSNAME="ZCB_NAOCT_QTD_CTRLH" CMPNAME="TYP_BUSINESS_KEY_TAB" VERSION="1" LANGU="E" DESCRIPT="Table Type Object Reference" EXPOSURE="1" STATE="1" EDITORDER="3 " TYPTYPE="4" TYPE="TYP_BUSINESS_KEY" SRCROW1="14 " SRCCOLUMN1="4 " SRCROW2="15 " SRCCOLUMN2="49 " TYPESRC_LENG="97 " TYPESRC="TYP_BUSINESS_KEY_TAB type standard table of
      TYP_BUSINESS_KEY with non-unique default key
"/>
  <types CLSNAME="ZCB_NAOCT_QTD_CTRLH" CMPNAME="TYP_DB_DATA" VERSION="1" LANGU="E" DESCRIPT="Line-Type Persistent Object Data" EXPOSURE="1" STATE="1" EDITORDER="4 " TYPTYPE="4" SRCROW1="17 " SRCCOLUMN1="4 " SRCROW2="32 " SRCCOLUMN2="21 " TYPESRC_LENG="504 " TYPESRC="begin of TYP_DB_DATA ,
      SPART type SPART ,
      KUNNR type KUNNR ,
      ZZDEAL_CODE type ZGLOC_DEAL_CODE ,
      ENDDT type VIM_ENDDA ,
      BEGDT type VIM_BEGDA ,
      UOM type KMEIN ,
      QTD_ALLOWED type ZNAOCE_DEAL_ALLOWED_QTY ,
      CREDAT type ZNAOCE_DEAL_CREATION ,
      CREUSR type ZNAOCE_DEAL_CREATOR ,
      CRETIM type CTME ,
      AENAM type AENAM ,
      AEDAT type AEDAT ,
      AETIM type AEZET ,
      CHNUSR type ZNAOCE_DEAL_CHANGER ,
    end of TYP_DB_DATA
"/>
  <types CLSNAME="ZCB_NAOCT_QTD_CTRLH" CMPNAME="TYP_DB_DATA_TAB" VERSION="1" LANGU="E" DESCRIPT="Table-Type Persistent Object Data" EXPOSURE="1" STATE="1" EDITORDER="5 " TYPTYPE="4" TYPE="TYP_DB_DATA" SRCROW1="34 " SRCCOLUMN1="4 " SRCROW2="35 " SRCCOLUMN2="44 " TYPESRC_LENG="87 " TYPESRC="TYP_DB_DATA_TAB type standard table of
      TYP_DB_DATA with non-unique default key
"/>
  <types CLSNAME="ZCB_NAOCT_QTD_CTRLH" CMPNAME="TYP_OID_TAB" VERSION="1" LANGU="E" DESCRIPT="Table Type Object Identifier" EXPOSURE="1" STATE="1" EDITORDER="5 " TYPTYPE="4" TYPE="TYP_OID" SRCROW1="37 " SRCCOLUMN1="4 " SRCROW2="38 " SRCCOLUMN2="40 " TYPESRC_LENG="79 " TYPESRC="TYP_OID_TAB type standard table of
      TYP_OID with non-unique default key
"/>
  <types CLSNAME="ZCB_NAOCT_QTD_CTRLH" CMPNAME="TYP_OBJECT_REF_TAB" VERSION="1" LANGU="E" DESCRIPT="Table Type Object Reference" EXPOSURE="1" STATE="1" EDITORDER="6 " TYPTYPE="4" TYPE="TYP_OBJECT_REF" SRCROW1="40 " SRCCOLUMN1="4 " SRCROW2="41 " SRCCOLUMN2="47 " TYPESRC_LENG="93 " TYPESRC="TYP_OBJECT_REF_TAB type standard table of
      TYP_OBJECT_REF with non-unique default key
"/>
  <types CLSNAME="ZCB_NAOCT_QTD_CTRLH" CMPNAME="TYP_SPECIAL_OBJECT_INFO" VERSION="1" LANGU="E" DESCRIPT="Line Type Class-Specific Object Data" EXPOSURE="1" STATE="1" EDITORDER="7 " TYPTYPE="4" SRCROW1="43 " SRCCOLUMN1="4 " SRCROW2="47 " SRCCOLUMN2="33 " TYPESRC_LENG="195 " TYPESRC="begin of TYP_SPECIAL_OBJECT_INFO ,
      OBJECT_ID type TYP_INTERNAL_OID ,
      ID_STATUS type TYP_ID_STATUS ,
      BUSINESS_KEY type TYP_BUSINESS_KEY ,
    end of TYP_SPECIAL_OBJECT_INFO
"/>
  <types CLSNAME="ZCB_NAOCT_QTD_CTRLH" CMPNAME="TYP_SPECIAL_OBJECT_INFO_TAB" VERSION="1" LANGU="E" DESCRIPT="Table Type Class-Specific Object Data" EXPOSURE="1" STATE="1" EDITORDER="8 " TYPTYPE="4" TYPE="TYP_SPECIAL_OBJECT_INFO" SRCROW1="49 " SRCCOLUMN1="4 " SRCROW2="51 " SRCCOLUMN2="14 " TYPESRC_LENG="114 " TYPESRC="TYP_SPECIAL_OBJECT_INFO_TAB type sorted table of
      TYP_SPECIAL_OBJECT_INFO with unique key
      OBJECT_ID
"/>
  <types CLSNAME="ZCB_NAOCT_QTD_CTRLH" CMPNAME="TYP_SPECIAL_BKEY_TAB" VERSION="1" LANGU="E" DESCRIPT="Table Type Search Table Business Keys" EXPOSURE="1" STATE="1" EDITORDER="9 " TYPTYPE="4" TYPE="TYP_SPECIAL_OBJECT_INFO" SRCROW1="53 " SRCCOLUMN1="4 " SRCROW2="55 " SRCCOLUMN2="17 " TYPESRC_LENG="110 " TYPESRC="TYP_SPECIAL_BKEY_TAB type sorted table of
      TYP_SPECIAL_OBJECT_INFO with unique key
      BUSINESS_KEY
"/>
  <types CLSNAME="ZCB_NAOCT_QTD_CTRLH" CMPNAME="TYP_DB_DELETE_TAB" VERSION="1" LANGU="E" DESCRIPT="Table Type Identifiers to Delete" EXPOSURE="1" STATE="1" EDITORDER="10 " TYPTYPE="4" TYPE="TYP_SPECIAL_OBJECT_INFO" SRCROW1="57 " SRCCOLUMN1="4 " SRCROW2="58 " SRCCOLUMN2="56 " TYPESRC_LENG="101 " TYPESRC="TYP_DB_DELETE_TAB type standard table of
      TYP_SPECIAL_OBJECT_INFO with non-unique default key
"/>
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <attribute CLSNAME="ZCB_NAOCT_QTD_CTRLH" CMPNAME="CURRENT_SPECIAL_OBJECT_INFO" VERSION="1" LANGU="E" DESCRIPT="Current Class-Specific Object Data" EXPOSURE="1" STATE="1" EDITORDER="0 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="TYP_SPECIAL_OBJECT_INFO" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCB_NAOCT_QTD_CTRLH" CMPNAME="MAP_ATT_INFO_TAB" VERSION="1" LANGU="E" DESCRIPT="Query: Mapping Metadata for Attributes" EXPOSURE="1" STATE="1" EDITORDER="0 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="OSTYP_RT_MAP_ATT_INFO_SRT_TAB" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCB_NAOCT_QTD_CTRLH" CMPNAME="SPECIAL_BKEY_TAB" VERSION="1" LANGU="E" DESCRIPT="Class-Specific: Search Table Business Keys" EXPOSURE="1" STATE="1" EDITORDER="0 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="TYP_SPECIAL_BKEY_TAB" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCB_NAOCT_QTD_CTRLH" CMPNAME="SPECIAL_OBJECT_INFO" VERSION="1" LANGU="E" DESCRIPT="Class-Specific Object Data" EXPOSURE="1" STATE="1" EDITORDER="0 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="TYP_SPECIAL_OBJECT_INFO_TAB" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <inheritance CLSNAME="ZCB_NAOCT_QTD_CTRLH" REFCLSNAME="CL_OS_CA_COMMON" VERSION="1" STATE="1">
   <redefinition CLSNAME="ZCB_NAOCT_QTD_CTRLH" REFCLSNAME="CL_OS_CA_COMMON" VERSION="1" MTDNAME="DELETE_SPECIAL_OBJECT_INFO" EXPOSURE="1"/>
   <redefinition CLSNAME="ZCB_NAOCT_QTD_CTRLH" REFCLSNAME="CL_OS_CA_COMMON" VERSION="1" MTDNAME="IF_OS_CA_PERSISTENCY~GET_PERSISTENT_BY_KEY" EXPOSURE="0"/>
   <redefinition CLSNAME="ZCB_NAOCT_QTD_CTRLH" REFCLSNAME="CL_OS_CA_COMMON" VERSION="1" MTDNAME="IF_OS_CA_PERSISTENCY~GET_PERSISTENT_BY_KEY_TAB" EXPOSURE="0"/>
   <redefinition CLSNAME="ZCB_NAOCT_QTD_CTRLH" REFCLSNAME="CL_OS_CA_COMMON" VERSION="1" MTDNAME="IF_OS_CA_PERSISTENCY~GET_PERSISTENT_BY_QUERY" EXPOSURE="0"/>
   <redefinition CLSNAME="ZCB_NAOCT_QTD_CTRLH" REFCLSNAME="CL_OS_CA_COMMON" VERSION="1" MTDNAME="IF_OS_CA_SERVICE~SAVE" EXPOSURE="0"/>
   <redefinition CLSNAME="ZCB_NAOCT_QTD_CTRLH" REFCLSNAME="CL_OS_CA_COMMON" VERSION="1" MTDNAME="IF_OS_CA_SERVICE~SAVE_IN_UPDATE_TASK" EXPOSURE="0"/>
   <redefinition CLSNAME="ZCB_NAOCT_QTD_CTRLH" REFCLSNAME="CL_OS_CA_COMMON" VERSION="1" MTDNAME="IF_OS_FACTORY~CREATE_PERSISTENT_BY_KEY" EXPOSURE="0"/>
   <redefinition CLSNAME="ZCB_NAOCT_QTD_CTRLH" REFCLSNAME="CL_OS_CA_COMMON" VERSION="1" MTDNAME="IF_OS_FACTORY~CREATE_TRANSIENT_BY_KEY" EXPOSURE="0"/>
   <redefinition CLSNAME="ZCB_NAOCT_QTD_CTRLH" REFCLSNAME="CL_OS_CA_COMMON" VERSION="1" MTDNAME="LOAD_SPECIAL_OBJECT_INFO" EXPOSURE="1"/>
   <redefinition CLSNAME="ZCB_NAOCT_QTD_CTRLH" REFCLSNAME="CL_OS_CA_COMMON" VERSION="1" MTDNAME="MAP_INVALIDATE" EXPOSURE="1"/>
   <redefinition CLSNAME="ZCB_NAOCT_QTD_CTRLH" REFCLSNAME="CL_OS_CA_COMMON" VERSION="1" MTDNAME="OS_PM_DELETE_PERSISTENT" EXPOSURE="1"/>
   <redefinition CLSNAME="ZCB_NAOCT_QTD_CTRLH" REFCLSNAME="CL_OS_CA_COMMON" VERSION="1" MTDNAME="PM_LOAD" EXPOSURE="1"/>
   <redefinition CLSNAME="ZCB_NAOCT_QTD_CTRLH" REFCLSNAME="CL_OS_CA_COMMON" VERSION="1" MTDNAME="SAVE_SPECIAL_OBJECT_INFO" EXPOSURE="1"/>
  </inheritance>
  <interfaceMethod CLSNAME="ZCB_NAOCT_QTD_CTRLH" CPDNAME="IF_OS_CA_PERSISTENCY~GET_PERSISTENT_BY_KEY">
   <source>method IF_OS_CA_PERSISTENCY~GET_PERSISTENT_BY_KEY.
***BUILD 093901
*      importing I_KEY type any
*      returning result type ref to object
************************************************************************
* Purpose        : Get a persistent object identified by the
*                  given business key
*
* Version        : 2.0
*
* Precondition   : The object exists with the given business key,
*                  either in memory or on database.
*
* Postcondition  : The object exists in memory, RESULT is the reference
*
* OO Exceptions  : propagates GET_PERSISTENT
*
* Implementation : call GET_PERSISTENT
*
************************************************************************
* Changelog:
* - 2000-03-06   : (BGR) Initial Version 2.0
* - 2000-08-02   : (SB)  OO Exceptions
************************************************************************

  data: BUSINESS_KEY             type TYP_BUSINESS_KEY.

  BUSINESS_KEY = I_KEY.

*&lt; Generated from mapping:
  call method GET_PERSISTENT
       exporting I_SPART = BUSINESS_KEY-SPART
                 I_KUNNR = BUSINESS_KEY-KUNNR
                 I_ZZDEAL_CODE = BUSINESS_KEY-ZZDEAL_CODE
                 I_ENDDT = BUSINESS_KEY-ENDDT
       receiving RESULT = RESULT.
*&gt;

           &quot;IF_OS_CA_PERSISTENCY~GET_PERSISTENT_BY_KEY
  endmethod.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCB_NAOCT_QTD_CTRLH" CPDNAME="IF_OS_CA_PERSISTENCY~GET_PERSISTENT_BY_KEY_TAB">
   <source>method IF_OS_CA_PERSISTENCY~GET_PERSISTENT_BY_KEY_TAB.
***BUILD 093901
      &quot;importing I_KEY_TAB type INDEX TABLE
      &quot;returning value(RESULT) type OSREFTAB
      &quot;raising   CX_OS_OBJECT_NOT_FOUND
************************************************************************
* Purpose        : Get persistent objects by Business Key table
*
* Version        : 2.0
*
* Precondition   : -
*
* Postcondition  : For each entry in the KEY table, there is a corres-
*                  ponding entry in the RESULT table. If the object was
*                  found in the cache or the database, then a reference
*                  to this object can be found in the RESULT table,
*                  if not, the reference is initial. The persistent
*                  objects are active.
*
* OO Exceptions  : CX_OS_OBJECT_NOT_FOUND
*                    (IS_TRANSIENT_BY_BKEY,DELETED_BY_BKEY)
*                  propagates PM_LOAD_AND_SET_ATTRIBUTES
*                  propagates OS_PM_LOADED_PERISISTENT
*
* Implementation : 1. Look for object in SPECIAL_OBJECT_INFO. If found,
*                     check if it is still valid
*                  2. Object found: Check PM_STATUS
*                     2a. If Status is TRANSIENT or DELETED, error!
*                     2b. If Status is NOT_LOADED, continue with 3.
*                     2c. If Status is NEW, LOADED or CHANGED, success!
*                  3. Load object data from database and set object
*                     3.a Completion in super class
*                  4. clean up
*
************************************************************************
* Changelog:
* - 2004-01-07   : (SB)  Initial version
************************************************************************

  types: begin of TYP_BUSINESS_KEY_INDEX,
           BUSINESS_KEY     type TYP_BUSINESS_KEY,
           INDEX            type SY-TABIX,
         end of TYP_BUSINESS_KEY_INDEX,
         TYP_BUSINESS_KEY_INDEX_TAB type sorted table
           of TYP_BUSINESS_KEY_INDEX with non-unique key BUSINESS_KEY.

  data: FLAG_NOT_LOADED        type OS_BOOLEAN,
        BKEY_STRING            type STRING,
        TEMP_OBJECT_REF        type TYP_OBJECT_REF,
        BUSINESS_KEY           type TYP_BUSINESS_KEY,
        BUSINESS_KEY_TAB       type TYP_BUSINESS_KEY_TAB,
        OBJECT_DATA_TAB        type TYP_DB_DATA_TAB,
        BUSINESS_KEY_INDEX     type TYP_BUSINESS_KEY_INDEX,
        BUSINESS_KEY_INDEX_TAB type TYP_BUSINESS_KEY_INDEX_TAB,
        NEXT_INDEX             type SY-TABIX.

  data: TEMP_CURRENT_OBJECT_IREF type ref to OBJECT.

  field-symbols: &lt;FS_OBJECT_DATA&gt;  type TYP_DB_DATA,
                 &lt;FS_BUSINESS_KEY&gt; type TYP_BUSINESS_KEY,
                 &lt;FS_BUSINESS_KEY_INDEX&gt; type TYP_BUSINESS_KEY_INDEX.

* * 1. Look for objects in SPECIAL_OBJECT_INFO. If found, check if they
* * are still valid

  loop at I_KEY_TAB assigning &lt;FS_BUSINESS_KEY&gt;. &quot;#EC GEN_OK

    clear CURRENT_OBJECT_IREF.

    read table SPECIAL_BKEY_TAB into CURRENT_SPECIAL_OBJECT_INFO
       with table key BUSINESS_KEY = &lt;FS_BUSINESS_KEY&gt;.

    if ( SY-SUBRC = 0 ).

      read table SPECIAL_OBJECT_INFO into CURRENT_SPECIAL_OBJECT_INFO
           with table key
           OBJECT_ID = CURRENT_SPECIAL_OBJECT_INFO-OBJECT_ID.
      call method OS_LOAD_AND_VALIDATE_CURRENT
           exporting I_INDEX = SY-TABIX.

    endif.

    if ( not CURRENT_OBJECT_IREF is initial ).

*   * 2. Object found: Check PM_STATUS

      case CURRENT_OBJECT_INFO-PM_STATUS.

*     * 2a. If Status is TRANSIENT or DELETED, error!
      when OSCON_OSTATUS_DELETED.

*!!!!!!! Error: Object activation failed - Object marked for deletion
        TEMP_CURRENT_OBJECT_IREF = CURRENT_OBJECT_IREF.
        BKEY_STRING  = MAP_SERIALIZE_BKEY( &lt;FS_BUSINESS_KEY&gt; ).
        call method OS_CLEAR_CURRENT.
        clear CURRENT_SPECIAL_OBJECT_INFO.
        class CX_OS_OBJECT_NOT_FOUND definition load.
        raise exception type CX_OS_OBJECT_NOT_FOUND
          exporting
            OBJECT = TEMP_CURRENT_OBJECT_IREF
            BKEY   = BKEY_STRING
            TEXTID = CX_OS_OBJECT_NOT_FOUND=&gt;DELETED_BY_BKEY.

      when OSCON_OSTATUS_TRANSIENT.

*!!!!!!! Error: Object activation failed - Object is transient
        TEMP_CURRENT_OBJECT_IREF = CURRENT_OBJECT_IREF.
        BKEY_STRING  = MAP_SERIALIZE_BKEY( &lt;FS_BUSINESS_KEY&gt; ).
        call method OS_CLEAR_CURRENT.
        clear CURRENT_SPECIAL_OBJECT_INFO.
        class CX_OS_OBJECT_NOT_FOUND definition load.
        raise exception type CX_OS_OBJECT_NOT_FOUND
          exporting
            OBJECT = TEMP_CURRENT_OBJECT_IREF
            BKEY   = BKEY_STRING
            TEXTID = CX_OS_OBJECT_NOT_FOUND=&gt;IS_TRANSIENT_BY_BKEY.

*     * 2b. If Status is NOT_LOADED, continue with 3.
      when OSCON_OSTATUS_NOT_LOADED.

        FLAG_NOT_LOADED = OSCON_TRUE.

*     * 2c. If Status is NEW, LOADED or CHANGED, success!
      when others.

        FLAG_NOT_LOADED = OSCON_FALSE.

      endcase.

    else.&quot; ( CURRENT_OBJECT_IREF is initial )

      FLAG_NOT_LOADED = OSCON_TRUE.

    endif.

    if ( FLAG_NOT_LOADED = OSCON_TRUE ).

      append &lt;FS_BUSINESS_KEY&gt; to BUSINESS_KEY_TAB.

    endif.

    TEMP_OBJECT_REF ?= CURRENT_OBJECT_IREF.
    append TEMP_OBJECT_REF to RESULT.

    call method OS_CLEAR_CURRENT.

  endloop.

* * 3. Load object data from database and set objects

  if ( BUSINESS_KEY_TAB is not initial ).

*   * internal Undo
    append INTERNAL_NEXT_UNDO_INFO to INTERNAL_TRANSACTION_STACK.
    INTERNAL_CURRENT_TRANSACTION = SY-TABIX.

    try.
        call method MAP_LOAD_FROM_DATABASE_KEY
             exporting I_BUSINESS_KEY_TAB = BUSINESS_KEY_TAB
             receiving result = OBJECT_DATA_TAB.
      catch CX_OS_DB_SELECT.
        clear OBJECT_DATA_TAB.
    endtry.

    loop at I_KEY_TAB assigning &lt;FS_BUSINESS_KEY&gt;. &quot;EC GEN_OK
      BUSINESS_KEY_INDEX-BUSINESS_KEY = &lt;FS_BUSINESS_KEY&gt;.
      BUSINESS_KEY_INDEX-INDEX = SY-TABIX.
      insert BUSINESS_KEY_INDEX into table BUSINESS_KEY_INDEX_TAB.
    endloop.

    try.

        loop at OBJECT_DATA_TAB assigning &lt;FS_OBJECT_DATA&gt;.

          call method MAP_EXTRACT_IDENTIFIER
               exporting I_DB_DATA  = &lt;FS_OBJECT_DATA&gt;
               importing E_BUSINESS_KEY = BUSINESS_KEY.

          clear CURRENT_OBJECT_IREF.

          call method PM_CHECK_AND_SET_ATTRIBUTES
               exporting I_OBJECT_DATA  = &lt;FS_OBJECT_DATA&gt;
                         I_ID_PROVIDED  = ID_STATUS_NONE.

          TEMP_OBJECT_REF ?= CURRENT_OBJECT_IREF.

          read table BUSINESS_KEY_INDEX_TAB
               with key BUSINESS_KEY = BUSINESS_KEY
               assigning &lt;FS_BUSINESS_KEY_INDEX&gt;.

          while ( ( SY-SUBRC = 0 ) and
                  ( &lt;FS_BUSINESS_KEY_INDEX&gt;-BUSINESS_KEY =
                    BUSINESS_KEY ) ).

            NEXT_INDEX = SY-TABIX + 1.

            modify RESULT from TEMP_OBJECT_REF
                          index &lt;FS_BUSINESS_KEY_INDEX&gt;-INDEX.

            read table BUSINESS_KEY_INDEX_TAB
                 index NEXT_INDEX
                 assigning &lt;FS_BUSINESS_KEY_INDEX&gt;.

          endwhile.

*         * 3.a. Completion in super class
          call method OS_PM_LOADED_PERSISTENT.

          clear CURRENT_SPECIAL_OBJECT_INFO.

        endloop.

      cleanup.
        call method OS_INTERNAL_UNDO.
        call method OS_CLEAR_CURRENT.
        clear CURRENT_SPECIAL_OBJECT_INFO.
    endtry.

*   * Clean-up internal Undo
    delete INTERNAL_TRANSACTION_STACK
           index INTERNAL_CURRENT_TRANSACTION.
    add -1 to INTERNAL_CURRENT_TRANSACTION.
    if ( INTERNAL_TRANSACTION_STACK is initial ).
      clear INTERNAL_UNDO_INFO.
      INTERNAL_NEXT_UNDO_INFO = 1.
    endif. &quot;( INTERNAL_TRANSACTION_STACK is initial? )

  endif.

* * 4. clean up

  clear CURRENT_SPECIAL_OBJECT_INFO.


           &quot;IF_OS_CA_PERSISTENCY~GET_PERSISTENT_BY_KEY_TAB
  endmethod.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCB_NAOCT_QTD_CTRLH" CPDNAME="IF_OS_CA_PERSISTENCY~GET_PERSISTENT_BY_QUERY">
   <source>method IF_OS_CA_PERSISTENCY~GET_PERSISTENT_BY_QUERY.
***BUILD 093901
     &quot; importing I_QUERY type ref to IF_OS_QUERY
     &quot;           I_PARAMETER_TAB type OSTYP_DREF_TAB optional
     &quot;           I_PAR1 type ANY optional
     &quot;           I_PAR2 type ANY optional
     &quot;           I_PAR3 type ANY optional
     &quot;           I_SUBCLASSES type OS_BOOLEAN default OSCON_FALSE
     &quot;           I_UPTO type I default 0
     &quot;           I_OPTIONS type IF_OS_QUERY_OPTIONS default
     &quot;             IF_OS_QUERY_OPTIONS=&gt;DEFAULT_OPTIONS
     &quot; returning value(RESULT) type OSREFTAB
     &quot; raising   CX_OS_OBJECT_NOT_FOUND
     &quot;           CX_OS_QUERY_ERROR
************************************************************************
* Purpose        : Get persistent objects by Query
*
* Version        : 2.0
*
* Precondition   : --
*
* Postcondition  : For each instance that satifies the filter
*                  expression, there is a corresponding entry in the
*                  RESULT table. The persistent objects are active.
*
* OO Exceptions  : CX_OS_OBJECT_NOT_FOUND
*                    (DELETED_BY_BKEY,TRANSIENT_BY_BKEY)
*                  propagates PM_CHECK_AND_SET_ATTRIBUTES
*                  propagates OS_PM_LOADED_PERISISTENT
*
* Implementation : 1. Load data by query
*                  2. Set objects from data
*                  2a. Object found: Check PM_STATUS
*                  2b. Object not found, replace
*                  2c. Set attributes
*                  2d. Completion in super class
*                  3. clean up
*
************************************************************************
* Changelog:
* - 2004-03-25   : (SB)  Initial version
************************************************************************

  data: FLAG_NOT_LOADED  type OS_BOOLEAN,
        BKEY_STRING      type STRING,
        TEMP_OBJECT_REF  type TYP_OBJECT_REF,
        BUSINESS_KEY     type TYP_BUSINESS_KEY,
        OBJECT_DATA_TAB  type TYP_DB_DATA_TAB,
        QUERY            type ref to IF_OS_QRY_SERVICE,
        WHERE_CLAUSE     type STRING,
        ORDER_BY_CLAUSE  type STRING.

  data: TEMP_CURRENT_OBJECT_IREF type ref to OBJECT.

  field-symbols: &lt;FS_OBJECT_DATA&gt;  type TYP_DB_DATA.

* * 1. Load data with query

  try.
      call method MAP_INITIALIZE_METADATA.

      QUERY ?= I_QUERY.

      call method QUERY-&gt;MAP
           exporting I_CLASS_AGENT = ME
                     I_MAP_ATT_TAB = MAP_ATT_INFO_TAB.

      call method QUERY-&gt;GET_ORDER_BY_CLAUSE
           receiving RESULT = ORDER_BY_CLAUSE.

      if ( I_PARAMETER_TAB is supplied ).

        if ( ( I_PAR1 is supplied ) or
             ( I_PAR2 is supplied ) or
             ( I_PAR3 is supplied ) ).

          raise exception type CX_OS_QUERY_PARAMETER_ERROR
            exporting TEXTID = CX_OS_QUERY_PARAMETER_ERROR=&gt;CALL_ERROR.

        endif.

        call method QUERY-&gt;GET_WHERE_CLAUSE
             exporting I_PARAMETER_TAB = I_PARAMETER_TAB
             receiving RESULT = WHERE_CLAUSE.

        call method MAP_LOAD_FROM_DATABASE
             exporting I_WHERE_CLAUSE    = WHERE_CLAUSE
                       I_ORDER_BY_CLAUSE = ORDER_BY_CLAUSE
                       I_SUBCLASSES      = I_SUBCLASSES
                       I_UPTO            = I_UPTO
             receiving result = OBJECT_DATA_TAB.

      else.

        call method QUERY-&gt;GET_WHERE_CLAUSE
             receiving RESULT = WHERE_CLAUSE.

        call method MAP_LOAD_FROM_DATABASE
             exporting I_WHERE_CLAUSE    = WHERE_CLAUSE
                       I_ORDER_BY_CLAUSE = ORDER_BY_CLAUSE
                       I_SUBCLASSES      = I_SUBCLASSES
                       I_UPTO            = I_UPTO
                       PAR1              = I_PAR1
                       PAR2              = I_PAR2
                       PAR3              = I_PAR3
             receiving result = OBJECT_DATA_TAB.

      endif.
    catch CX_OS_DB_SELECT.
      clear OBJECT_DATA_TAB.
  endtry.

* * 2. Set objects from data

  try.

*     * internal Undo
      append INTERNAL_NEXT_UNDO_INFO to INTERNAL_TRANSACTION_STACK.
      INTERNAL_CURRENT_TRANSACTION = SY-TABIX.

      loop at OBJECT_DATA_TAB assigning &lt;FS_OBJECT_DATA&gt;.

        call method MAP_EXTRACT_IDENTIFIER
             exporting I_DB_DATA  = &lt;FS_OBJECT_DATA&gt;
             importing E_BUSINESS_KEY = BUSINESS_KEY.

        clear CURRENT_OBJECT_IREF.

        read table SPECIAL_BKEY_TAB into CURRENT_SPECIAL_OBJECT_INFO
           with table key BUSINESS_KEY = BUSINESS_KEY.

        if ( SY-SUBRC = 0 ).

          read table SPECIAL_OBJECT_INFO
               into CURRENT_SPECIAL_OBJECT_INFO
               with table key
               OBJECT_ID = CURRENT_SPECIAL_OBJECT_INFO-OBJECT_ID.
          call method OS_LOAD_AND_VALIDATE_CURRENT
               exporting I_INDEX = SY-TABIX.

        endif.

        if ( not CURRENT_OBJECT_IREF is initial ).

*       * 2a. Object found: Check PM_STATUS

          case CURRENT_OBJECT_INFO-PM_STATUS.

*         * 2a1. If Status is DELETED, ignore or raise exception!
          when OSCON_OSTATUS_DELETED.

            if ( I_OPTIONS-DATABASE_QUERY_OPTIONS O
                 IF_OS_QUERY_OPTIONS=&gt;IGNORE_DELETED ).

              call method OS_CLEAR_CURRENT.
              continue.

            endif.

* !!!!!!!! Error: Object activation failed - Object marked for deletion
            TEMP_CURRENT_OBJECT_IREF = CURRENT_OBJECT_IREF.
            BKEY_STRING  = MAP_SERIALIZE_BKEY( BUSINESS_KEY ).
            call method OS_CLEAR_CURRENT.
            clear CURRENT_SPECIAL_OBJECT_INFO.
            class CX_OS_OBJECT_NOT_FOUND definition load.
            raise exception type CX_OS_OBJECT_NOT_FOUND
              exporting
                OBJECT = TEMP_CURRENT_OBJECT_IREF
                BKEY   = BKEY_STRING
                TEXTID = CX_OS_OBJECT_NOT_FOUND=&gt;DELETED_BY_BKEY.

*         * 2a2. If Status is TRANSIENT, error!
          when OSCON_OSTATUS_TRANSIENT.

* !!!!!!!!!! Error: Object activation failed - Object is transient
            TEMP_CURRENT_OBJECT_IREF = CURRENT_OBJECT_IREF.
            BKEY_STRING  = MAP_SERIALIZE_BKEY( BUSINESS_KEY ).
            call method OS_CLEAR_CURRENT.
            clear CURRENT_SPECIAL_OBJECT_INFO.
            class CX_OS_OBJECT_NOT_FOUND definition load.
            raise exception type CX_OS_OBJECT_NOT_FOUND
              exporting
                OBJECT = TEMP_CURRENT_OBJECT_IREF
                BKEY   = BKEY_STRING
                TEXTID = CX_OS_OBJECT_NOT_FOUND=&gt;IS_TRANSIENT_BY_BKEY.

*         * 2a3. If Status is CHANGED, don&apos;t replace or raise exception!
          when OSCON_OSTATUS_CHANGED.

            if ( I_OPTIONS-DATABASE_QUERY_OPTIONS O
                 IF_OS_QUERY_OPTIONS=&gt;REJECT_CHANGED ).

* !!!!!!!! Error: Object activation failed - Object marked as changed
            TEMP_CURRENT_OBJECT_IREF = CURRENT_OBJECT_IREF.
            BKEY_STRING  = MAP_SERIALIZE_BKEY( BUSINESS_KEY ).
            call method OS_CLEAR_CURRENT.
            clear CURRENT_SPECIAL_OBJECT_INFO.
            class CX_OS_OBJECT_NOT_FOUND definition load.
            raise exception type CX_OS_OBJECT_NOT_FOUND
              exporting
                OBJECT = TEMP_CURRENT_OBJECT_IREF
                BKEY   = BKEY_STRING
                TEXTID = CX_OS_OBJECT_NOT_FOUND=&gt;CHANGED_BY_BKEY.

            endif.

            FLAG_NOT_LOADED = OSCON_FALSE.

*         * 2a4. If Status is NOT_LOADED, replace
          when OSCON_OSTATUS_NOT_LOADED.

            FLAG_NOT_LOADED = OSCON_TRUE.

*         * 2a5. If Status is NEW or LOADED, don&apos;t replace
          when others.

            FLAG_NOT_LOADED = OSCON_FALSE.

          endcase.

        else.&quot; ( CURRENT_OBJECT_IREF is initial )

*       * 2b. Object not found, replace

          FLAG_NOT_LOADED = OSCON_TRUE.

        endif.

        TEMP_OBJECT_REF ?= CURRENT_OBJECT_IREF.

        if ( FLAG_NOT_LOADED = OSCON_TRUE ).

*         * 2c. Set attributes
          call method PM_CHECK_AND_SET_ATTRIBUTES
               exporting I_OBJECT_DATA  = &lt;FS_OBJECT_DATA&gt;
                         I_ID_PROVIDED  = ID_STATUS_NONE.

          TEMP_OBJECT_REF ?= CURRENT_OBJECT_IREF.

*         * 2d. Completion in super class
          call method OS_PM_LOADED_PERSISTENT.

        endif.

        append TEMP_OBJECT_REF to RESULT.

        call method OS_CLEAR_CURRENT.

      endloop.

*     * Clean-up internal Undo
      delete INTERNAL_TRANSACTION_STACK
             index INTERNAL_CURRENT_TRANSACTION.
      add -1 to INTERNAL_CURRENT_TRANSACTION.
      if ( INTERNAL_TRANSACTION_STACK is initial ).
        clear INTERNAL_UNDO_INFO.
        INTERNAL_NEXT_UNDO_INFO = 1.
      endif. &quot;( INTERNAL_TRANSACTION_STACK is initial? )

    cleanup.
      call method OS_INTERNAL_UNDO.
      call method OS_CLEAR_CURRENT.
      clear CURRENT_SPECIAL_OBJECT_INFO.
  endtry.

* * 3. clean up

  clear CURRENT_SPECIAL_OBJECT_INFO.


           &quot;IF_OS_CA_PERSISTENCY~GET_PERSISTENT_BY_QUERY
  endmethod.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCB_NAOCT_QTD_CTRLH" CPDNAME="IF_OS_CA_SERVICE~SAVE">
   <source>method IF_OS_CA_SERVICE~SAVE.
***BUILD 090501
************************************************************************
* Purpose        : Prepare data for database (buffer) transfer
*
* Version        : 2.0
*
* Precondition   : --
*
* Postcondition  : data is prepared for saving
*                  if UPDATE_MODE is direct, it is saved to DB
*                  if UPDATE_MODE is LOCAL or UPDATE_TASK,
*                    the corresponding function call is registered
*
* OO Exceptions  : propagates MAP_SAVE_TO_DATABASE
*                  propagates MAP_GET_ATTRIBUTES.
*
* Implementation :
*
************************************************************************
* Changelog:
* - 2000-03-02   : (BGR) Initial Version
* - 2000-08-02   : (SB) OO Exceptions
* - 2001-01-06   : (SB) Update with EXPORT TO DATA BUFFER
* - 2003-03-20   : (SB) post only if there dirty instances
************************************************************************

  data: NEW_OBJECT_REF_TAB       type TYP_OBJECT_REF_TAB,
        CHANGED_OBJECT_REF_TAB   type TYP_OBJECT_REF_TAB,
        INSERT_DATA_TAB          type TYP_DB_DATA_TAB ,
        INSERT_KEY_TAB           type TYP_BUSINESS_KEY_TAB,
        UPDATE_DATA_TAB          type TYP_DB_DATA_TAB ,
        UPDATE_KEY_TAB           type TYP_BUSINESS_KEY_TAB,
        DELETE_TAB               type TYP_DB_DELETE_TAB ,
        UPDATE_MODE              type OS_DMODE,
        OBJECT_REF               type TYP_OBJECT_REF,
        OBJECT_INDEX             type TYP_INDEX,
        XCONTAINER               type XSTRING.

  field-symbols:
          &lt;FS_OBJECT_INFO_ITEM&gt;         type TYP_OBJECT_INFO,
          &lt;FS_SPECIAL_OBJECT_INFO_ITEM&gt; type TYP_SPECIAL_OBJECT_INFO.

* * 1. get strong reference, BKey for all objects with status
* *    NEW, CHANGED or DELETED

  loop at OBJECT_INFO assigning &lt;FS_OBJECT_INFO_ITEM&gt; &quot;#EC CI_SORTSEQ
       where ( PM_STATUS = OSCON_OSTATUS_NEW or       &quot;#EC CI_SORTSEQ
               PM_STATUS = OSCON_OSTATUS_CHANGED or   &quot;#EC CI_SORTSEQ
               PM_STATUS = OSCON_OSTATUS_DELETED ) and &quot;#EC CI_SORTSEQ
               OM_IGNORE = OSCON_FALSE.               &quot;#EC CI_SORTSEQ

    OBJECT_INDEX = sy-tabix.

    case &lt;FS_OBJECT_INFO_ITEM&gt;-PM_STATUS.

      when OSCON_OSTATUS_NEW.

        read table SPECIAL_OBJECT_INFO
             assigning &lt;FS_SPECIAL_OBJECT_INFO_ITEM&gt;
             index OBJECT_INDEX.

        OBJECT_REF ?= &lt;FS_OBJECT_INFO_ITEM&gt;-OBJECT_IREF.
        append OBJECT_REF
            to NEW_OBJECT_REF_TAB.
        append &lt;FS_SPECIAL_OBJECT_INFO_ITEM&gt;-BUSINESS_KEY
            to INSERT_KEY_TAB.

      when OSCON_OSTATUS_CHANGED.

        read table SPECIAL_OBJECT_INFO
             assigning &lt;FS_SPECIAL_OBJECT_INFO_ITEM&gt;
             index OBJECT_INDEX.

        OBJECT_REF ?= &lt;FS_OBJECT_INFO_ITEM&gt;-OBJECT_IREF.
        append OBJECT_REF
            to CHANGED_OBJECT_REF_TAB.
        append &lt;FS_SPECIAL_OBJECT_INFO_ITEM&gt;-BUSINESS_KEY
            to UPDATE_KEY_TAB.

      when OSCON_OSTATUS_DELETED.

        read table SPECIAL_OBJECT_INFO
             assigning &lt;FS_SPECIAL_OBJECT_INFO_ITEM&gt;
             index OBJECT_INDEX.

        append &lt;FS_SPECIAL_OBJECT_INFO_ITEM&gt; to DELETE_TAB.

    endcase.&quot; Status

  endloop. &quot;at OBJECT_INFO


* * 2. get attributes for new and changed objects

* * New Objects
  if ( not NEW_OBJECT_REF_TAB is initial ).

    call method MAP_GET_ATTRIBUTES
         exporting I_OBJECT_REF_TAB  = NEW_OBJECT_REF_TAB
         importing E_OBJECT_DATA_TAB = INSERT_DATA_TAB.

    call method MAP_MERGE_IDENTIFIER
         exporting I_BUSINESS_KEY_TAB = INSERT_KEY_TAB
         changing  C_DB_DATA_TAB      = INSERT_DATA_TAB.

  endif. &quot;( not NEW_OBJECT_REF_TAB is initial ).

* * Changed Objects
  if ( not CHANGED_OBJECT_REF_TAB is initial ).

    call method MAP_GET_ATTRIBUTES
         exporting I_OBJECT_REF_TAB  = CHANGED_OBJECT_REF_TAB
         importing E_OBJECT_DATA_TAB = UPDATE_DATA_TAB.

    call method MAP_MERGE_IDENTIFIER
         exporting I_BUSINESS_KEY_TAB = UPDATE_KEY_TAB
         changing  C_DB_DATA_TAB      = UPDATE_DATA_TAB.

  endif. &quot;( not CHANGED_OBJECT_REF_TAB is initial ).

* * 3. perform or subscribe DB operations

  if ( ( INSERT_DATA_TAB is not initial ) or
       ( UPDATE_DATA_TAB is not initial ) or
       ( DELETE_TAB is not initial ) ).

    UPDATE_MODE = PERSISTENCY_MANAGER-&gt;GET_UPDATE_MODE(  ).
    if ( UPDATE_MODE = DMODE_DIRECT ).

*     * Direct DB operations
      call method MAP_SAVE_TO_DATABASE
           exporting I_INSERTS = INSERT_DATA_TAB
                     I_UPDATES = UPDATE_DATA_TAB
                     I_DELETES = DELETE_TAB.

    else.&quot; ( Update task )

*     * export data to be saved to DB to data buffer
      export
        INSERT_DATA_TAB = INSERT_DATA_TAB
        UPDATE_DATA_TAB = UPDATE_DATA_TAB
        DELETE_TAB      = DELETE_TAB
          to data buffer XCONTAINER.

*     * call update function in update task. this function
*     * calls the method if_os_ca_service~save_in_update_task
*     * of this class agent.
      call function &apos;OS_UPDATE_CLASS&apos; in update task
        exporting
          CLASSNAME = CLASS_INFO-CLASS_AGENT_NAME
          XCONTAINER = XCONTAINER.

    endif.&quot; (Update mode?)

  endif.&quot; (something to post?)

           &quot;IF_OS_CA_SERVICE~SAVE
  endmethod.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCB_NAOCT_QTD_CTRLH" CPDNAME="IF_OS_CA_SERVICE~SAVE_IN_UPDATE_TASK">
   <source>method IF_OS_CA_SERVICE~SAVE_IN_UPDATE_TASK.
***BUILD 090501
     &quot; importing XCONTAINER type XSTRING optional
************************************************************************
* Purpose        : save object data to DB when running in update task
*                  mode.
*
* Version        : 2.0
*
* Precondition   : no object service environment is set, no objects
*                  exist in update task
*
* Postcondition  : data has been saved to DB
*
* OO Exceptions  : propagates MAP_SAVE_TO_DATABASE
*
* Implementation :
*
************************************************************************
* Changelog:
* - 2000-03-02   : (BGR) Initial Version
* - 2000-08-02   : (SB) OO Exceptions
* - 2001-01-06   : (SB) Update with EXPORT TO DATA BUFFER
************************************************************************

  data: INSERT_DATA_TAB       type TYP_DB_DATA_TAB ,
        UPDATE_DATA_TAB       type TYP_DB_DATA_TAB ,
        DELETE_TAB            type TYP_DB_DELETE_TAB .

* * import data to be saved to DB from data buffer
  import
    INSERT_DATA_TAB = INSERT_DATA_TAB
    UPDATE_DATA_TAB = UPDATE_DATA_TAB
    DELETE_TAB      = DELETE_TAB
      from data buffer XCONTAINER.

* * store them to DB
  call method MAP_SAVE_TO_DATABASE
       exporting I_INSERTS = INSERT_DATA_TAB
                 I_UPDATES = UPDATE_DATA_TAB
                 I_DELETES = DELETE_TAB.

           &quot;IF_OS_CA_SERVICE~SAVE_IN_UPDATE_TASK
  endmethod.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCB_NAOCT_QTD_CTRLH" CPDNAME="IF_OS_FACTORY~CREATE_PERSISTENT_BY_KEY">
   <source>method IF_OS_FACTORY~CREATE_PERSISTENT_BY_KEY.
***BUILD 093901
*      importing I_KEY type any
*      returning result type ref to object
************************************************************************
* Purpose        : Create a new persistent object identified by the
*                  given business key
*
* Version        : 2.0
*
* Precondition   : No object exists with the given business key, neither
*                  in memory nor on database.
*
* Postcondition  : The object exists in memory and will result in a
*                  new entry on database when the top transaction is
*                  closed.
*
* OO Exceptions  : propagates CREATE_PERSISTENT
*
* Implementation : call CREATE_PERSISTENT
*
************************************************************************
* Changelog:
* - 2000-03-06   : (BGR) Initial Version 2.0
* - 2000-08-02   : (SB)  OO Exceptions
************************************************************************

  data: BUSINESS_KEY             type TYP_BUSINESS_KEY.

  BUSINESS_KEY = I_KEY.

*&lt; Generated from mapping:
  call method CREATE_PERSISTENT
       exporting I_SPART = BUSINESS_KEY-SPART
                 I_KUNNR = BUSINESS_KEY-KUNNR
                 I_ZZDEAL_CODE = BUSINESS_KEY-ZZDEAL_CODE
                 I_ENDDT = BUSINESS_KEY-ENDDT
       receiving RESULT = RESULT.
*&gt;

           &quot;IF_OS_FACTORY~CREATE_PERSISTENT_BY_KEY
  endmethod.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCB_NAOCT_QTD_CTRLH" CPDNAME="IF_OS_FACTORY~CREATE_TRANSIENT_BY_KEY">
   <source>method IF_OS_FACTORY~CREATE_TRANSIENT_BY_KEY.
***BUILD 093901
*      importing I_KEY type any
*      returning result type ref to object
************************************************************************
* Purpose        : Create a new transient object identified by the
*                  given business key
*
* Version        : 2.0
*
* Precondition   : No object exists with the given business key
*
* Postcondition  : The object exists in memory
*
* OO Exceptions  : propagates CREATE_TRANSIENT
*
* Implementation : call CREATE_TRANSIENT
*
************************************************************************
* Changelog:
* - 2001-01-01   : (SB)  Initial Version 2.0
************************************************************************

  data: BUSINESS_KEY             type TYP_BUSINESS_KEY.

  BUSINESS_KEY = I_KEY.

*&lt; Generated from mapping:
  call method CREATE_TRANSIENT
       exporting I_SPART = BUSINESS_KEY-SPART
                 I_KUNNR = BUSINESS_KEY-KUNNR
                 I_ZZDEAL_CODE = BUSINESS_KEY-ZZDEAL_CODE
                 I_ENDDT = BUSINESS_KEY-ENDDT
       receiving RESULT = RESULT.
*&gt;

           &quot;IF_OS_FACTORY~CREATE_TRANSIENT_BY_KEY
  endmethod.</source>
  </interfaceMethod>
  <method CLSNAME="ZCB_NAOCT_QTD_CTRLH" CMPNAME="CREATE_PERSISTENT" VERSION="1" LANGU="E" DESCRIPT="Generate New Persistent Object with Key" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCB_NAOCT_QTD_CTRLH" CMPNAME="CREATE_PERSISTENT" SCONAME="I_SPART" VERSION="1" LANGU="E" DESCRIPT="Business Key" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SPART"/>
   <parameter CLSNAME="ZCB_NAOCT_QTD_CTRLH" CMPNAME="CREATE_PERSISTENT" SCONAME="I_KUNNR" VERSION="1" LANGU="E" DESCRIPT="Business Key" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="KUNNR"/>
   <parameter CLSNAME="ZCB_NAOCT_QTD_CTRLH" CMPNAME="CREATE_PERSISTENT" SCONAME="I_ZZDEAL_CODE" VERSION="1" LANGU="E" DESCRIPT="Business Key" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZGLOC_DEAL_CODE"/>
   <parameter CLSNAME="ZCB_NAOCT_QTD_CTRLH" CMPNAME="CREATE_PERSISTENT" SCONAME="I_ENDDT" VERSION="1" LANGU="E" DESCRIPT="Business Key" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="VIM_ENDDA"/>
   <parameter CLSNAME="ZCB_NAOCT_QTD_CTRLH" CMPNAME="CREATE_PERSISTENT" SCONAME="RESULT" VERSION="1" LANGU="E" DESCRIPT="Newly Generated Persistent Object" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_NAOCT_QTD_CTRLH"/>
   <exception CLSNAME="ZCB_NAOCT_QTD_CTRLH" CMPNAME="CREATE_PERSISTENT" SCONAME="CX_OS_OBJECT_EXISTING" VERSION="1" LANGU="E" DESCRIPT="Object Services Exception" MTDTYPE="0" EDITORDER="0 "/>
   <source>method CREATE_PERSISTENT.
***BUILD 093901
*      IMPORTING I_SPART TYPE SPART
*      IMPORTING I_KUNNR TYPE KUNNR
*      IMPORTING I_ZZDEAL_CODE TYPE ZGLOC_DEAL_CODE
*      IMPORTING I_ENDDT TYPE VIM_ENDDA
*      RETURNING RESULT TYPE REF TO ZCL_NAOCT_QTD_CTRLH
************************************************************************
* Purpose        : Create a new persistent object identified by the
*                  given business key
*
* Version        : 2.0
*
* Precondition   : No object exists with the given business key, neither
*                  in memory nor on database.
*
* Postcondition  : The object exists in memory and will result in a
*                  new entry on database when the top transaction is
*                  closed.
*
* OO Exceptions  : CX_OS_OBJECT_EXISTING(
*                            PERSISTENT_CREATING_PERSISTENT,
*                            TRANSIENT_CREATING_PERSISTENT)
*                  propagates OS_PM_CREATED_PERSISTENT
*
* Implementation : 1. Check if there is already an object with the
*                     same key
*                  2. If there is one, let OS_PM_HANDLE_CREATE_ON_EXIST
*                     decide if it is allowed to re-use the object
*                  3. If there is none, create a new object
*                  4. Set Attributes
*                  5. Register the object as NEW and initialize it
*                  6. Clean up
*
************************************************************************
* Changelog:
* - 2000-03-06   : (BGR) Initial Version 2.0
* - 2000-08-03   : (SB)  OO Exceptions
* - 2001-01-10   : (SB)  persistent attributes as optional parameters
* - 2001-10-30   : (SB)  type mapping
* - 2002-01-17   : (SB)  private attributes in super classes
* - 2003-04-28   : (SB)  reuse of instances reimplemented
************************************************************************

  data: THE_OBJECT   type        TYP_OBJECT_REF,
        BUSINESS_KEY type        TYP_BUSINESS_KEY,
        BKEY_STRING  type        STRING.

  data: TEMP_CURRENT_OBJECT_IREF type ref to object.

  clear CURRENT_OBJECT_IREF.

*&lt; Generated from mapping:
  BUSINESS_KEY-SPART = I_SPART.
  BUSINESS_KEY-KUNNR = I_KUNNR.
  BUSINESS_KEY-ZZDEAL_CODE = I_ZZDEAL_CODE.
  BUSINESS_KEY-ENDDT = I_ENDDT.
*&gt;

* * 1. Check if there is already an object with this key
  read table SPECIAL_BKEY_TAB into CURRENT_SPECIAL_OBJECT_INFO
       with table key BUSINESS_KEY = BUSINESS_KEY.

  if ( SY-SUBRC = 0 ).

    read table SPECIAL_OBJECT_INFO into CURRENT_SPECIAL_OBJECT_INFO
         with table key
         OBJECT_ID = CURRENT_SPECIAL_OBJECT_INFO-OBJECT_ID.
    call method OS_LOAD_AND_VALIDATE_CURRENT
         exporting I_INDEX = SY-TABIX.

  endif. &quot;( entry found )

  if ( not CURRENT_OBJECT_IREF is initial ).

*   * 2. Found an entry. Check if it is allowed to re-use it
    THE_OBJECT ?= CURRENT_OBJECT_IREF.

    case CURRENT_OBJECT_INFO-PM_STATUS.

    when OSCON_OSTATUS_DELETED or
        OSCON_OSTATUS_NOT_LOADED.

      try.

*&lt;  Generated from mapping:
          THE_OBJECT-&gt;SPART = I_SPART.
          THE_OBJECT-&gt;KUNNR = I_KUNNR.
          THE_OBJECT-&gt;ZZDEAL_CODE = I_ZZDEAL_CODE.
          THE_OBJECT-&gt;ENDDT = I_ENDDT.
*&gt;

          call method OS_PM_HANDLE_CREATE_ON_EXIST
               exporting I_TRANSIENT = OSCON_FALSE.

        cleanup.
          clear CURRENT_SPECIAL_OBJECT_INFO.
          call method OS_CLEAR_CURRENT.
      endtry.

    when OSCON_OSTATUS_TRANSIENT.

      TEMP_CURRENT_OBJECT_IREF = CURRENT_OBJECT_IREF.
      BKEY_STRING  = MAP_SERIALIZE_BKEY( BUSINESS_KEY ).
      call method OS_CLEAR_CURRENT.
      clear CURRENT_SPECIAL_OBJECT_INFO.
      class CX_OS_OBJECT_EXISTING definition load.
      raise exception type CX_OS_OBJECT_EXISTING
        exporting
          OBJECT = TEMP_CURRENT_OBJECT_IREF
          BKEY   = BKEY_STRING
          TEXTID =
            CX_OS_OBJECT_EXISTING=&gt;TRANSIENT_CREATING_PERSISTENT.

    when others.

      TEMP_CURRENT_OBJECT_IREF = CURRENT_OBJECT_IREF.
      BKEY_STRING  = MAP_SERIALIZE_BKEY( BUSINESS_KEY ).
      call method OS_CLEAR_CURRENT.
      clear CURRENT_SPECIAL_OBJECT_INFO.
      class CX_OS_OBJECT_EXISTING definition load.
      raise exception type CX_OS_OBJECT_EXISTING
        exporting
          OBJECT = TEMP_CURRENT_OBJECT_IREF
          BKEY   = BKEY_STRING
          TEXTID =
            CX_OS_OBJECT_EXISTING=&gt;PERSISTENT_CREATING_PERSISTENT.

    endcase.

  else. &quot;( No entry found )

*   * 3. Create a new object
    THE_OBJECT = PM_CREATE_REPRESENTANT(
                   I_BUSINESS_KEY = BUSINESS_KEY ).

*   * 4. Set attributes
*&lt;   Generated from mapping:
*&gt;

*   * 5. register object as &apos;NEW&apos; and initialize it.
    call method OS_PM_CREATED_PERSISTENT.

  endif. &quot;( Eintrag vorhanden )

* * 6. Clean-up
  clear CURRENT_SPECIAL_OBJECT_INFO.
  RESULT = THE_OBJECT.

           &quot;CREATE_PERSISTENT
  endmethod.</source>
  </method>
  <method CLSNAME="ZCB_NAOCT_QTD_CTRLH" CMPNAME="CREATE_TRANSIENT" VERSION="1" LANGU="E" DESCRIPT="Generate Transient Object with Key" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCB_NAOCT_QTD_CTRLH" CMPNAME="CREATE_TRANSIENT" SCONAME="I_SPART" VERSION="1" LANGU="E" DESCRIPT="Business Key" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SPART"/>
   <parameter CLSNAME="ZCB_NAOCT_QTD_CTRLH" CMPNAME="CREATE_TRANSIENT" SCONAME="I_KUNNR" VERSION="1" LANGU="E" DESCRIPT="Business Key" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="KUNNR"/>
   <parameter CLSNAME="ZCB_NAOCT_QTD_CTRLH" CMPNAME="CREATE_TRANSIENT" SCONAME="I_ZZDEAL_CODE" VERSION="1" LANGU="E" DESCRIPT="Business Key" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZGLOC_DEAL_CODE"/>
   <parameter CLSNAME="ZCB_NAOCT_QTD_CTRLH" CMPNAME="CREATE_TRANSIENT" SCONAME="I_ENDDT" VERSION="1" LANGU="E" DESCRIPT="Business Key" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="VIM_ENDDA"/>
   <parameter CLSNAME="ZCB_NAOCT_QTD_CTRLH" CMPNAME="CREATE_TRANSIENT" SCONAME="RESULT" VERSION="1" LANGU="E" DESCRIPT="Newly Generated Transient Object" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_NAOCT_QTD_CTRLH"/>
   <exception CLSNAME="ZCB_NAOCT_QTD_CTRLH" CMPNAME="CREATE_TRANSIENT" SCONAME="CX_OS_OBJECT_EXISTING" VERSION="1" LANGU="E" DESCRIPT="Object Services Exception" MTDTYPE="0" EDITORDER="0 "/>
   <source>method CREATE_TRANSIENT.
***BUILD 093901
*      IMPORTING I_SPART TYPE SPART
*      IMPORTING I_KUNNR TYPE KUNNR
*      IMPORTING I_ZZDEAL_CODE TYPE ZGLOC_DEAL_CODE
*      IMPORTING I_ENDDT TYPE VIM_ENDDA
*      RETURNING RESULT TYPE REF TO ZCL_NAOCT_QTD_CTRLH
************************************************************************
* Purpose        : Create a new transient object identified by the
*                  given business key
*
* Version        : 2.0
*
* Precondition   : No object exists with the given business key, neither
*                  in memory nor on database.
*
* Postcondition  : The object exists in memory until it is RELEASEd
*
* OO Exceptions  : CX_OS_OBJECT_EXISTING(
*                            PERSISTENT_CREATING_TRANSIENT,
*                            TRANSIENT_CREATING_TRANSIENT)
*                  propagates OS_PM_CREATED_TRANSIENT
*
* Implementation : 1. Check if there is already an object with the
*                     same key
*                  2. If there is one, let OS_PM_HANDLE_CREATE_ON_EXIST
*                     decide if it is allowed to re-use the object
*                  3. If there is none, create a new object
*                  4. Set Attributes
*                  5. Register the object as TRANSIENT and initialize it
*                  6. Clean up
*
************************************************************************
* Changelog:
* - 2000-03-06   : (BGR) Initial Version 2.0
* - 2000-08-02   : (SB)  OO Exceptions
* - 2001-01-10   : (SB)  persistent attributes as optional parameters
* - 2001-10-30   : (SB)  type mapping
* - 2002-01-17   : (SB)  private attributes in super classes
* - 2003-04-28   : (SB)  reuse of instances reimplemented
************************************************************************

  data: THE_OBJECT   type        TYP_OBJECT_REF,
        BUSINESS_KEY type        TYP_BUSINESS_KEY,
        BKEY_STRING  type        STRING.

  data: TEMP_CURRENT_OBJECT_IREF type ref to object.

  clear CURRENT_OBJECT_IREF.

*&lt; Generated from mapping:
  BUSINESS_KEY-SPART = I_SPART.
  BUSINESS_KEY-KUNNR = I_KUNNR.
  BUSINESS_KEY-ZZDEAL_CODE = I_ZZDEAL_CODE.
  BUSINESS_KEY-ENDDT = I_ENDDT.
*&gt;

* * 1. Check if there is already an object with the same key

  read table SPECIAL_BKEY_TAB into CURRENT_SPECIAL_OBJECT_INFO
       with table key BUSINESS_KEY = BUSINESS_KEY.

  if ( SY-SUBRC = 0 ).

    read table SPECIAL_OBJECT_INFO into CURRENT_SPECIAL_OBJECT_INFO
         with table key
         OBJECT_ID = CURRENT_SPECIAL_OBJECT_INFO-OBJECT_ID.
    call method OS_LOAD_AND_VALIDATE_CURRENT
         exporting I_INDEX = SY-TABIX.

  endif. &quot;( entry found )

  if ( not CURRENT_OBJECT_IREF is initial ).

*   * 2. Found an entry. Check if it is allowed to re-use it
    THE_OBJECT ?= CURRENT_OBJECT_IREF.

    case CURRENT_OBJECT_INFO-PM_STATUS.

    when OSCON_OSTATUS_DELETED or
        OSCON_OSTATUS_NOT_LOADED.

      try.

*&lt;  Generated from mapping:
          THE_OBJECT-&gt;SPART = I_SPART.
          THE_OBJECT-&gt;KUNNR = I_KUNNR.
          THE_OBJECT-&gt;ZZDEAL_CODE = I_ZZDEAL_CODE.
          THE_OBJECT-&gt;ENDDT = I_ENDDT.
*&gt;

          call method OS_PM_HANDLE_CREATE_ON_EXIST
               exporting I_TRANSIENT = OSCON_TRUE.

        cleanup.
          clear CURRENT_SPECIAL_OBJECT_INFO.
          call method OS_CLEAR_CURRENT.
      endtry.

    when OSCON_OSTATUS_TRANSIENT.

      TEMP_CURRENT_OBJECT_IREF = CURRENT_OBJECT_IREF.
      BKEY_STRING  = MAP_SERIALIZE_BKEY( BUSINESS_KEY ).
      call method OS_CLEAR_CURRENT.
      clear CURRENT_SPECIAL_OBJECT_INFO.
      class CX_OS_OBJECT_EXISTING definition load.
      raise exception type CX_OS_OBJECT_EXISTING
        exporting
          OBJECT = TEMP_CURRENT_OBJECT_IREF
          BKEY   = BKEY_STRING
          TEXTID =
            CX_OS_OBJECT_EXISTING=&gt;TRANSIENT_CREATING_TRANSIENT.

    when others.

      TEMP_CURRENT_OBJECT_IREF = CURRENT_OBJECT_IREF.
      BKEY_STRING  = MAP_SERIALIZE_BKEY( BUSINESS_KEY ).
      call method OS_CLEAR_CURRENT.
      clear CURRENT_SPECIAL_OBJECT_INFO.
      class CX_OS_OBJECT_EXISTING definition load.
      raise exception type CX_OS_OBJECT_EXISTING
        exporting
          OBJECT = TEMP_CURRENT_OBJECT_IREF
          BKEY   = BKEY_STRING
          TEXTID =
            CX_OS_OBJECT_EXISTING=&gt;PERSISTENT_CREATING_TRANSIENT.

    endcase.

  else. &quot;( Noch kein Eintrag )

*   * 3. If there is none, create a new object
    THE_OBJECT = PM_CREATE_REPRESENTANT(
                   I_BUSINESS_KEY = BUSINESS_KEY ).

*   * 4. Set attributes
*&lt;   Generated from mapping:
*&gt;

*   * 5. Register the object as TRANSIENT and initialize it
    call method OS_PM_CREATED_TRANSIENT.

  endif. &quot;( Eintrag vorhanden )

* * 6. Clean up
  clear CURRENT_SPECIAL_OBJECT_INFO.
  RESULT = THE_OBJECT.

           &quot;CREATE_TRANSIENT
  endmethod.</source>
  </method>
  <method CLSNAME="ZCB_NAOCT_QTD_CTRLH" CMPNAME="DELETE_PERSISTENT" VERSION="1" LANGU="E" DESCRIPT="Deletes Persistent Object with Key" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCB_NAOCT_QTD_CTRLH" CMPNAME="DELETE_PERSISTENT" SCONAME="I_SPART" VERSION="1" LANGU="E" DESCRIPT="Business Key" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SPART"/>
   <parameter CLSNAME="ZCB_NAOCT_QTD_CTRLH" CMPNAME="DELETE_PERSISTENT" SCONAME="I_KUNNR" VERSION="1" LANGU="E" DESCRIPT="Business Key" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="KUNNR"/>
   <parameter CLSNAME="ZCB_NAOCT_QTD_CTRLH" CMPNAME="DELETE_PERSISTENT" SCONAME="I_ZZDEAL_CODE" VERSION="1" LANGU="E" DESCRIPT="Business Key" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZGLOC_DEAL_CODE"/>
   <parameter CLSNAME="ZCB_NAOCT_QTD_CTRLH" CMPNAME="DELETE_PERSISTENT" SCONAME="I_ENDDT" VERSION="1" LANGU="E" DESCRIPT="Business Key" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="VIM_ENDDA"/>
   <exception CLSNAME="ZCB_NAOCT_QTD_CTRLH" CMPNAME="DELETE_PERSISTENT" SCONAME="CX_OS_OBJECT_NOT_EXISTING" VERSION="1" LANGU="E" DESCRIPT="Object Services Exception" MTDTYPE="0" EDITORDER="0 "/>
   <source>method DELETE_PERSISTENT.
***BUILD 093901
*      IMPORTING I_SPART TYPE SPART.
*      IMPORTING I_KUNNR TYPE KUNNR.
*      IMPORTING I_ZZDEAL_CODE TYPE ZGLOC_DEAL_CODE.
*      IMPORTING I_ENDDT TYPE VIM_ENDDA.
*      raising   CX_OS_OBJECT_NOT_EXISTING
************************************************************************
* Purpose        : Delete persistent object. It is marked DELETED in
*                  memory and removed from DB when the top transaction
*                  is closed.
*
* Version        : 2.0
*
* Precondition   : The object is persistent (not transient)
*
* Postcondition  : Instance is marked for deletion.
*
* OO Exceptions  : CX_OS_OBJECT_NOT_EXISTING(TRANSIENT_BY_BKEY,
*                  CREATED_AND_DELETED_BY_BKEY,BY_BKEY)
*                  ( propagates PM_LOAD_AND_SET_ATTRIBUTES )
*                  propagates PM_DELETE_PERSISTENT
*
* Implementation : 1. Check if there is already an object with that
*                     business key
*                  2. If not: create representative object and check
*                     if there is an entry on DB (Need to be sure that
*                     no other object exists with the OID that belongs
*                     to the given Business Key)
*                  3. If it already exists: call PM_DELETE_PERSISTENT
*
************************************************************************
* Changelog:
* - 1999-09-21   : (OS)  Initial Version
* - 2000-03-06   : (BGR) Version 2.0
* - 2000-08-03   : (SB)  OO Exceptions
* - 2000-10-30   : (SB)  Type Mapping
************************************************************************

  data: BUSINESS_KEY type TYP_BUSINESS_KEY .
  data: EX_OS_OBJECT_NOT_FOUND type ref to CX_OS_OBJECT_NOT_FOUND.
  data: EX_OS_OBJECT_STATE type ref to CX_OS_OBJECT_STATE.
  data: BKEY_STRING type STRING.

* 1. Check if there is already an object with that business key

  clear: CURRENT_OBJECT_IREF,
         CURRENT_SPECIAL_OBJECT_INFO.

*&lt; Generated from mapping:
  BUSINESS_KEY-SPART = I_SPART.
  BUSINESS_KEY-KUNNR = I_KUNNR.
  BUSINESS_KEY-ZZDEAL_CODE = I_ZZDEAL_CODE.
  BUSINESS_KEY-ENDDT = I_ENDDT.
*&gt;

  read table SPECIAL_BKEY_TAB into CURRENT_SPECIAL_OBJECT_INFO
       with table key BUSINESS_KEY = BUSINESS_KEY.

  if ( SY-SUBRC = 0 ).

    read table SPECIAL_OBJECT_INFO into CURRENT_SPECIAL_OBJECT_INFO
         with table key
         OBJECT_ID = CURRENT_SPECIAL_OBJECT_INFO-OBJECT_ID.
    call method OS_LOAD_AND_VALIDATE_CURRENT
         exporting I_INDEX = SY-TABIX.

  endif.

  if ( CURRENT_OBJECT_IREF is initial ).

*   * 2. If not: create representative object and check
*   *    if there is an entry on DB (Need to be sure that
*   *    no other object exists with the OID that belongs
*   *    to the given Business Key)

    try.

        call method PM_LOAD_AND_SET_ATTRIBUTES
             exporting I_BUSINESS_KEY = BUSINESS_KEY.

      catch CX_OS_OBJECT_NOT_FOUND into EX_OS_OBJECT_NOT_FOUND.
*       * If the object is not found by key - raise object not existing
*       * by key. If a reference has a illegal class GUID (i.e. object
*       * not found by ref error) - ignore.
        if ( EX_OS_OBJECT_NOT_FOUND-&gt;TEXTID =
             CX_OS_OBJECT_NOT_FOUND=&gt;BY_BKEY ).
          call method OS_CLEAR_CURRENT.
          class CX_OS_OBJECT_NOT_EXISTING definition load.
          raise exception type CX_OS_OBJECT_NOT_EXISTING
            exporting
              BKEY   = EX_OS_OBJECT_NOT_FOUND-&gt;BKEY
              TABLE  = EX_OS_OBJECT_NOT_FOUND-&gt;TABLE
              TEXTID = CX_OS_OBJECT_NOT_EXISTING=&gt;BY_BKEY.
        endif.

      cleanup.
        call method OS_CLEAR_CURRENT.

    endtry.



  endif.&quot; ( No Entry in administrative data? )


* * 3. If it already exists: call PM_DELETE_PERSISTENT
  if not ( CURRENT_OBJECT_IREF is initial ).

    try.

        call method PM_DELETE_PERSISTENT.

      catch CX_OS_OBJECT_STATE into EX_OS_OBJECT_STATE.
      if ( EX_OS_OBJECT_STATE-&gt;TEXTID =
           CX_OS_OBJECT_STATE=&gt;TRANSIENT ).
        BKEY_STRING  = MAP_SERIALIZE_BKEY( BUSINESS_KEY ).
        class CX_OS_OBJECT_NOT_EXISTING definition load.
        raise exception type CX_OS_OBJECT_NOT_EXISTING
          exporting
            BKEY   = BKEY_STRING
            TEXTID = CX_OS_OBJECT_NOT_EXISTING=&gt;TRANSIENT_BY_BKEY.
      endif.

      if ( EX_OS_OBJECT_STATE-&gt;TEXTID =
           CX_OS_OBJECT_STATE=&gt;CREATED_AND_DELETED ).
        BKEY_STRING  = MAP_SERIALIZE_BKEY( BUSINESS_KEY ).
        class CX_OS_OBJECT_NOT_EXISTING definition load.
        raise exception type CX_OS_OBJECT_NOT_EXISTING
          exporting
            BKEY   = BKEY_STRING
            TEXTID =
              CX_OS_OBJECT_NOT_EXISTING=&gt;CREATED_AND_DELETED_BY_BKEY.
      endif.

    endtry.

  endif.
           &quot;DELETE_PERSISTENT
  endmethod.</source>
  </method>
  <method CLSNAME="CL_OS_CA_COMMON" CMPNAME="DELETE_SPECIAL_OBJECT_INFO" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method DELETE_SPECIAL_OBJECT_INFO.
***BUILD 090501
************************************************************************
* Purpose        : Delete current entry SPECIAL_OBJECT_INFO
*
* Version        : 2.0
*
* Precondition   : Index is set in CURRENT_OBJECT_INDEX
*
* Postcondition  : entry is deleted
*
* OO Exceptions  : --
*
* Implementation :
*
************************************************************************
* Changelog:
* - 2000-03-02   : (BGR) Initial Version
* - 2001-10-30   : (SB)  Type Mapping
************************************************************************

  read table SPECIAL_OBJECT_INFO into CURRENT_SPECIAL_OBJECT_INFO
       index CURRENT_OBJECT_INDEX.

  delete table SPECIAL_BKEY_TAB
    with table key
      BUSINESS_KEY = CURRENT_SPECIAL_OBJECT_INFO-BUSINESS_KEY.

  delete SPECIAL_OBJECT_INFO index CURRENT_OBJECT_INDEX.
  clear CURRENT_SPECIAL_OBJECT_INFO.

           &quot;DELETE_SPECIAL_OBJECT_INFO
  endmethod.</source>
  </method>
  <method CLSNAME="ZCB_NAOCT_QTD_CTRLH" CMPNAME="GET_PERSISTENT" VERSION="1" LANGU="E" DESCRIPT="Get Persistent Object with Key" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCB_NAOCT_QTD_CTRLH" CMPNAME="GET_PERSISTENT" SCONAME="I_SPART" VERSION="1" LANGU="E" DESCRIPT="Business Key" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SPART"/>
   <parameter CLSNAME="ZCB_NAOCT_QTD_CTRLH" CMPNAME="GET_PERSISTENT" SCONAME="I_KUNNR" VERSION="1" LANGU="E" DESCRIPT="Business Key" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="KUNNR"/>
   <parameter CLSNAME="ZCB_NAOCT_QTD_CTRLH" CMPNAME="GET_PERSISTENT" SCONAME="I_ZZDEAL_CODE" VERSION="1" LANGU="E" DESCRIPT="Business Key" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZGLOC_DEAL_CODE"/>
   <parameter CLSNAME="ZCB_NAOCT_QTD_CTRLH" CMPNAME="GET_PERSISTENT" SCONAME="I_ENDDT" VERSION="1" LANGU="E" DESCRIPT="Business Key" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="VIM_ENDDA"/>
   <parameter CLSNAME="ZCB_NAOCT_QTD_CTRLH" CMPNAME="GET_PERSISTENT" SCONAME="RESULT" VERSION="1" LANGU="E" DESCRIPT="Persistent Object" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_NAOCT_QTD_CTRLH"/>
   <exception CLSNAME="ZCB_NAOCT_QTD_CTRLH" CMPNAME="GET_PERSISTENT" SCONAME="CX_OS_OBJECT_NOT_FOUND" VERSION="1" LANGU="E" DESCRIPT="Object Services Exception" MTDTYPE="0" EDITORDER="0 "/>
   <source>method GET_PERSISTENT.
***BUILD 093901
*      importing I_SPART TYPE SPART.
*      importing I_KUNNR TYPE KUNNR.
*      importing I_ZZDEAL_CODE TYPE ZGLOC_DEAL_CODE.
*      importing I_ENDDT TYPE VIM_ENDDA.
*      returning RESULT TYPE REF TO ZCL_NAOCT_QTD_CTRLH
*       raising   CX_OS_OBJECT_NOT_FOUND
************************************************************************
* Purpose        : Get reference of an persistent object.
*
* Version        : 2.0
*
* Precondition   : --
*
* Postcondition  : Persistent object is active
*
* OO Exceptions  : CX_OS_OBJECT_NOT_FOUND
*                    (IS_TRANSIENT_BY_BKEY,DELETED_BY_BKEY)
*                  propagates PM_LOAD_AND_SET_ATTRIBUTES
*                  propagates OS_PM_LOADED_PERISISTENT
*
* Implementation : 1. Look for object in SPECIAL_OBJECT_INFO. If found,
*                     check if it is still valid
*                  2. Object found: Check PM_STATUS
*                     2a. If Status is TRANSIENT or DELETED, error!
*                     2b. If Status is NOT_LOADED, continue with 3.
*                     2c. If Status is NEW, LOADED or CHANGED, success!
*                  3. Load object data from database and set object
*                  3.a. Completion in super class
*                  4. clean up
*
************************************************************************
* Changelog:
* - 1999-09-21   : (OS)  Initial Version
* - 2000-03-07   : (BGR) Version 2.0 - Common Superclass
* - 2000-08-02   : (SB)  OO Exceptions
* - 2000-10-30   : (SB)  Type Mapping
* - 2004-01-21   : (SB)  Type Mapping Refactoring
************************************************************************

  data: BUSINESS_KEY    type TYP_BUSINESS_KEY,
        FLAG_NOT_LOADED type OS_BOOLEAN,
        BKEY_STRING     type STRING.

  data: TEMP_CURRENT_OBJECT_IREF type ref to OBJECT.

* * 1. Look for object in SPECIAL_OBJECT_INFO. If found, check if it
* * is still valid

  clear:  CURRENT_OBJECT_IREF.

*&lt; Generated from mapping:
  BUSINESS_KEY-SPART = I_SPART.
  BUSINESS_KEY-KUNNR = I_KUNNR.
  BUSINESS_KEY-ZZDEAL_CODE = I_ZZDEAL_CODE.
  BUSINESS_KEY-ENDDT = I_ENDDT.
*&gt;

  read table SPECIAL_BKEY_TAB into CURRENT_SPECIAL_OBJECT_INFO
       with table key BUSINESS_KEY = BUSINESS_KEY.

  if ( SY-SUBRC = 0 ).

    read table SPECIAL_OBJECT_INFO into CURRENT_SPECIAL_OBJECT_INFO
         with table key
         OBJECT_ID = CURRENT_SPECIAL_OBJECT_INFO-OBJECT_ID.
    call method OS_LOAD_AND_VALIDATE_CURRENT
         exporting I_INDEX = SY-TABIX.

  endif.

  if ( not CURRENT_OBJECT_IREF is initial ).

* * 2. Object found: Check PM_STATUS

    case CURRENT_OBJECT_INFO-PM_STATUS.

*   * 2a. If Status is TRANSIENT or DELETED, error!
    when OSCON_OSTATUS_DELETED.

*!!!!! Error: Object activation failed - Object marked for deletion
      TEMP_CURRENT_OBJECT_IREF = CURRENT_OBJECT_IREF.
      BKEY_STRING  = MAP_SERIALIZE_BKEY( BUSINESS_KEY ).
      call method OS_CLEAR_CURRENT.
      clear CURRENT_SPECIAL_OBJECT_INFO.
      class CX_OS_OBJECT_NOT_FOUND definition load.
      raise exception type CX_OS_OBJECT_NOT_FOUND
        exporting
          OBJECT = TEMP_CURRENT_OBJECT_IREF
          BKEY   = BKEY_STRING
          TEXTID = CX_OS_OBJECT_NOT_FOUND=&gt;DELETED_BY_BKEY.

    when OSCON_OSTATUS_TRANSIENT.

*!!!!! Error: Object activation failed - Object is transient
      TEMP_CURRENT_OBJECT_IREF = CURRENT_OBJECT_IREF.
      BKEY_STRING  = MAP_SERIALIZE_BKEY( BUSINESS_KEY ).
      call method OS_CLEAR_CURRENT.
      clear CURRENT_SPECIAL_OBJECT_INFO.
      class CX_OS_OBJECT_NOT_FOUND definition load.
      raise exception type CX_OS_OBJECT_NOT_FOUND
        exporting
          OBJECT = TEMP_CURRENT_OBJECT_IREF
          BKEY   = BKEY_STRING
          TEXTID = CX_OS_OBJECT_NOT_FOUND=&gt;IS_TRANSIENT_BY_BKEY.


*   * 2b. If Status is NOT_LOADED, continue with 3.
    when OSCON_OSTATUS_NOT_LOADED.

      FLAG_NOT_LOADED      = OSCON_TRUE.

*   * 2c. If Status is NEW, LOADED or CHANGED, success!
    when others.

      FLAG_NOT_LOADED      = OSCON_FALSE.

    endcase. &quot;PM_STATUS

  else.&quot; ( CURRENT_OBJECT_IREF is initial ).

    FLAG_NOT_LOADED      = OSCON_TRUE.

  endif.&quot; ( Entry in administrative data? )

* * 3. Load object data from database and set object

  if (  FLAG_NOT_LOADED = OSCON_TRUE ).

*   * internal Undo
    append INTERNAL_NEXT_UNDO_INFO to INTERNAL_TRANSACTION_STACK.
    INTERNAL_CURRENT_TRANSACTION = SY-TABIX.

    try.
        call method PM_LOAD_AND_SET_ATTRIBUTES
             exporting I_BUSINESS_KEY = BUSINESS_KEY.

        result ?= CURRENT_OBJECT_IREF.

*       * 3.a. Completion in super class
        call method OS_PM_LOADED_PERSISTENT.

      cleanup.
        call method OS_INTERNAL_UNDO.
        call method OS_CLEAR_CURRENT.
        clear CURRENT_SPECIAL_OBJECT_INFO.
    endtry.

*   * Clean-up internal Undo
    delete INTERNAL_TRANSACTION_STACK
           index INTERNAL_CURRENT_TRANSACTION.
    add -1 to INTERNAL_CURRENT_TRANSACTION.
    if ( INTERNAL_TRANSACTION_STACK is initial ).
      clear INTERNAL_UNDO_INFO.
      INTERNAL_NEXT_UNDO_INFO = 1.
    endif. &quot;( INTERNAL_TRANSACTION_STACK is initial? )

  else. &quot;( Object already loaded )

    RESULT ?= CURRENT_OBJECT_IREF.
    call method OS_CLEAR_CURRENT.

  endif. &quot;( Loading necessesary? )

* * 4. clean up

  clear  CURRENT_SPECIAL_OBJECT_INFO.


           &quot;GET_PERSISTENT
  endmethod.</source>
  </method>
  <method CLSNAME="ZCB_NAOCT_QTD_CTRLH" CMPNAME="GET_TRANSIENT" VERSION="1" LANGU="E" DESCRIPT="Get Transient Object with Key" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCB_NAOCT_QTD_CTRLH" CMPNAME="GET_TRANSIENT" SCONAME="I_SPART" VERSION="1" LANGU="E" DESCRIPT="Business Key" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SPART"/>
   <parameter CLSNAME="ZCB_NAOCT_QTD_CTRLH" CMPNAME="GET_TRANSIENT" SCONAME="I_KUNNR" VERSION="1" LANGU="E" DESCRIPT="Business Key" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="KUNNR"/>
   <parameter CLSNAME="ZCB_NAOCT_QTD_CTRLH" CMPNAME="GET_TRANSIENT" SCONAME="I_ZZDEAL_CODE" VERSION="1" LANGU="E" DESCRIPT="Business Key" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZGLOC_DEAL_CODE"/>
   <parameter CLSNAME="ZCB_NAOCT_QTD_CTRLH" CMPNAME="GET_TRANSIENT" SCONAME="I_ENDDT" VERSION="1" LANGU="E" DESCRIPT="Business Key" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="VIM_ENDDA"/>
   <parameter CLSNAME="ZCB_NAOCT_QTD_CTRLH" CMPNAME="GET_TRANSIENT" SCONAME="RESULT" VERSION="1" LANGU="E" DESCRIPT="Transient Object" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_NAOCT_QTD_CTRLH"/>
   <exception CLSNAME="ZCB_NAOCT_QTD_CTRLH" CMPNAME="GET_TRANSIENT" SCONAME="CX_OS_OBJECT_NOT_FOUND" VERSION="1" LANGU="E" DESCRIPT="Object Services Exception" MTDTYPE="0" EDITORDER="0 "/>
   <source>method GET_TRANSIENT.
***BUILD 093901
*      IMPORTING I_SPART TYPE SPART.
*      IMPORTING I_KUNNR TYPE KUNNR.
*      IMPORTING I_ZZDEAL_CODE TYPE ZGLOC_DEAL_CODE.
*      IMPORTING I_ENDDT TYPE VIM_ENDDA.
*      RETURNING RESULT TYPE REF TO ZCL_NAOCT_QTD_CTRLH
*       raising   CX_OS_OBJECT_NOT_FOUND
************************************************************************
* Purpose        : Get reference of an transient object.
*
* Version        : 2.0
*
* Precondition   : object has been created transient
*
* Postcondition  : --
*
* OO Exceptions  : CX_OS_OBJECT_NOT_FOUND
*                  (TRANSIENT_BY_BKEY, IS_PERSISTENT_BY_BKEY)
*
* Implementation : 1. look for entry in SPECIAL_OBJECT_INFO and check
*                     if it is still valid
*                  2. If it not valid or no object found: Error
*                  3. If it is valid: Check state
*                    3a. Not Transient: Error!
*                    3b. Transient: Success!
*
************************************************************************
* Changelog:
* - 2000-03-07   : (BGR) Initial Version
* - 2000-08-03   : (SB)  OO Exceptions
* - 2000-10-30   : (SB)  Type Mapping
************************************************************************

  data: BUSINESS_KEY type TYP_BUSINESS_KEY,
        BKEY_STRING  type STRING .

  data: TEMP_CURRENT_OBJECT_IREF type ref to OBJECT.

* * 1. look for entry in SPECIAL_OBJECT_INFO and check if it is
* *    still valid

  clear CURRENT_OBJECT_IREF.

*&lt; Generated from mapping:
  BUSINESS_KEY-SPART = I_SPART.
  BUSINESS_KEY-KUNNR = I_KUNNR.
  BUSINESS_KEY-ZZDEAL_CODE = I_ZZDEAL_CODE.
  BUSINESS_KEY-ENDDT = I_ENDDT.
*&gt;

  read table SPECIAL_BKEY_TAB into CURRENT_SPECIAL_OBJECT_INFO
       with table KEY BUSINESS_KEY = BUSINESS_KEY.

  if ( SY-SUBRC = 0 ).

    read table SPECIAL_OBJECT_INFO into CURRENT_SPECIAL_OBJECT_INFO
         with table key
         OBJECT_ID = CURRENT_SPECIAL_OBJECT_INFO-OBJECT_ID.
    call method OS_LOAD_AND_VALIDATE_CURRENT
         exporting I_INDEX = SY-TABIX.

  endif.

* * 2. If it not valid or no object found: Error
  if ( CURRENT_OBJECT_IREF is initial ).

*!!! Error: Object activation failed - no entry in administrative data
    BKEY_STRING  = MAP_SERIALIZE_BKEY( BUSINESS_KEY ).
    clear CURRENT_SPECIAL_OBJECT_INFO.
    class CX_OS_OBJECT_NOT_FOUND definition load.
    raise exception type CX_OS_OBJECT_NOT_FOUND
      exporting
        BKEY   = BKEY_STRING
        TEXTID = CX_OS_OBJECT_NOT_FOUND=&gt;TRANSIENT_BY_BKEY.

  else. &quot;( Entry exists )

*   * 3. If it is valid: Check state
    if ( CURRENT_OBJECT_INFO-PM_STATUS &lt;&gt; OSCON_OSTATUS_TRANSIENT ).

*     * 3a. Not Transient: Error!
*!!!!! Error: Object is not transient
      TEMP_CURRENT_OBJECT_IREF = CURRENT_OBJECT_IREF.
      BKEY_STRING  = MAP_SERIALIZE_BKEY( BUSINESS_KEY ).
      call method OS_CLEAR_CURRENT.
      clear CURRENT_SPECIAL_OBJECT_INFO.
      class CX_OS_OBJECT_NOT_FOUND definition load.
      raise exception type CX_OS_OBJECT_NOT_FOUND
        exporting
          OBJECT = TEMP_CURRENT_OBJECT_IREF
          BKEY   = BKEY_STRING
          TEXTID = CX_OS_OBJECT_NOT_FOUND=&gt;IS_PERSISTENT_BY_BKEY.

    endif. &quot;( PM_STATUS &lt;&gt; transient )

  endif.&quot; ( Entry in administrative data? )

* * 3b. Transient: Success!
  RESULT ?= CURRENT_OBJECT_IREF.
  call method OS_CLEAR_CURRENT.
  clear CURRENT_SPECIAL_OBJECT_INFO.

           &quot;GET_TRANSIENT
  endmethod.</source>
  </method>
  <method CLSNAME="CL_OS_CA_COMMON" CMPNAME="LOAD_SPECIAL_OBJECT_INFO" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method LOAD_SPECIAL_OBJECT_INFO.
***BUILD 090501
************************************************************************
* Purpose        : Load CURRENT_SPECIAL_OBJECT_INFO from
*                  SPECIAL_OBJECT_INFO
*
* Version        : 2.0
*
* Precondition   : Index is set in CURRENT_OBJECT_INDEX
*
* Postcondition  : entry is loaded
*
* OO Exceptions  : -
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 2000-03-02   : (BGR) Initial Version
************************************************************************

  read table SPECIAL_OBJECT_INFO into CURRENT_SPECIAL_OBJECT_INFO
       index CURRENT_OBJECT_INDEX.

           &quot;LOAD_SPECIAL_OBJECT_INFO
  endmethod.</source>
  </method>
  <method CLSNAME="ZCB_NAOCT_QTD_CTRLH" CMPNAME="MAP_EXTRACT_IDENTIFIER" VERSION="1" LANGU="E" DESCRIPT="Extracts BKey from Database Data" EXPOSURE="1" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCB_NAOCT_QTD_CTRLH" CMPNAME="MAP_EXTRACT_IDENTIFIER" SCONAME="I_DB_DATA" VERSION="1" LANGU="E" DESCRIPT="Object Data Read from DB" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TYP_DB_DATA"/>
   <parameter CLSNAME="ZCB_NAOCT_QTD_CTRLH" CMPNAME="MAP_EXTRACT_IDENTIFIER" SCONAME="E_BUSINESS_KEY" VERSION="1" LANGU="E" DESCRIPT="Business Key Extracted from Database Data" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="0" TYPTYPE="1" TYPE="TYP_BUSINESS_KEY"/>
   <source>method MAP_EXTRACT_IDENTIFIER.
***BUILD 093901
     &quot; importing I_DB_DATA type TYP_DB_DATA
     &quot; exporting E_BUSINESS_KEY type TYP_BUSINESS_KEY
************************************************************************
* Purpose        : Extract Business Key from given DB_DATA
*
* Version        : 2.0
*
* Precondition   : DB_DATA is a structure with object data read from
*                  DB including Keys and GUID
*
* Postcondition  : E_BUSINESS_KEY is the business key extracted from
*                  I_DB_DATA
*
* OO Exceptions  : --
*
* Implementation :
*
************************************************************************
* Changelog:
* - 2000-03-06   : (BGR) Initial Version
* - 2000-08-02   : (SB) OO Exceptions
************************************************************************
* Generated! Do not modify!
************************************************************************

*&lt;Generated from mapping:
  E_BUSINESS_KEY-SPART  = I_DB_DATA-SPART.
  E_BUSINESS_KEY-KUNNR  = I_DB_DATA-KUNNR.
  E_BUSINESS_KEY-ZZDEAL_CODE  = I_DB_DATA-ZZDEAL_CODE.
  E_BUSINESS_KEY-ENDDT  = I_DB_DATA-ENDDT.
*&gt;

           &quot;MAP_EXTRACT_IDENTIFIER
  endmethod.</source>
  </method>
  <method CLSNAME="ZCB_NAOCT_QTD_CTRLH" CMPNAME="MAP_GET_ATTRIBUTES" VERSION="1" LANGU="E" DESCRIPT="Reads Persistent Attributes from Object" EXPOSURE="1" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCB_NAOCT_QTD_CTRLH" CMPNAME="MAP_GET_ATTRIBUTES" SCONAME="I_OBJECT_REF_TAB" VERSION="1" LANGU="E" DESCRIPT="List of Objects Affected" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TYP_OBJECT_REF_TAB"/>
   <parameter CLSNAME="ZCB_NAOCT_QTD_CTRLH" CMPNAME="MAP_GET_ATTRIBUTES" SCONAME="E_OBJECT_DATA_TAB" VERSION="1" LANGU="E" DESCRIPT="Object Data Read" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="0" TYPTYPE="1" TYPE="TYP_DB_DATA_TAB"/>
   <source>method MAP_GET_ATTRIBUTES.
***BUILD 093901
     &quot; importing I_OBJECT_REF_TAB  type TYP_OBJECT_REF_TAB
     &quot; exporting value(E_OBJECT_DATA_TAB) type TYP_DB_DATA_TAB
************************************************************************
* Purpose        : Get object data from objects
*
* Version        : 2.0
*
* Precondition   : I_OBJECT_REF_TAB is a list of objects that have a
*                  valid state (new, changed)
*
* Postcondition  : E_OBJECT_DATA_TAB contains all object data of the
*                  given objects. It is a table of the same size like
*                  I_OBJECT_REF_TAB with corresponding entries.
*                  GUID (and Business Key) will be added later.
*
* OO Exceptions  : CX_OS_OBJECT_REFERENCE collects GET_OID_BY_REF
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 2000-03-06   : (BGR) Initial Version
* - 2000-08-03   : (SB)  OO Exceptions
* - 2002-01-17   : (SB)  private attributes in super classes
************************************************************************
* Generated! Do not modify!
************************************************************************

  data: THE_OBJECT type ref to ZCL_NAOCT_QTD_CTRLH,
        OBJECT_DATA_ITEM type TYP_DB_DATA,
        PM_SERVICE       type ref to IF_OS_PM_SERVICE. &quot;#EC NEEDED

  data: EX     type ref to CX_OS_ERROR, &quot;#EC NEEDED
        EX_SYS type ref to CX_OS_SYSTEM_ERROR, &quot;#EC NEEDED
        EX_TAB type OSTABLEREF.

  PM_SERVICE ?= PERSISTENCY_MANAGER.

  loop at I_OBJECT_REF_TAB into THE_OBJECT.

    clear OBJECT_DATA_ITEM.

*&lt;  Generated from mapping:
    OBJECT_DATA_ITEM-SPART = THE_OBJECT-&gt;SPART.
    OBJECT_DATA_ITEM-KUNNR = THE_OBJECT-&gt;KUNNR.
    OBJECT_DATA_ITEM-ZZDEAL_CODE = THE_OBJECT-&gt;ZZDEAL_CODE.
    OBJECT_DATA_ITEM-ENDDT = THE_OBJECT-&gt;ENDDT.
    OBJECT_DATA_ITEM-BEGDT = THE_OBJECT-&gt;BEGDT.
    OBJECT_DATA_ITEM-UOM = THE_OBJECT-&gt;UOM.
    OBJECT_DATA_ITEM-QTD_ALLOWED = THE_OBJECT-&gt;QTD_ALLOWED.
    OBJECT_DATA_ITEM-CREDAT = THE_OBJECT-&gt;CREDAT.
    OBJECT_DATA_ITEM-CREUSR = THE_OBJECT-&gt;CREUSR.
    OBJECT_DATA_ITEM-CRETIM = THE_OBJECT-&gt;CRETIM.
    OBJECT_DATA_ITEM-AENAM = THE_OBJECT-&gt;AENAM.
    OBJECT_DATA_ITEM-AEDAT = THE_OBJECT-&gt;AEDAT.
    OBJECT_DATA_ITEM-AETIM = THE_OBJECT-&gt;AETIM.
    OBJECT_DATA_ITEM-CHNUSR = THE_OBJECT-&gt;CHNUSR.
*&gt;

    APPEND OBJECT_DATA_ITEM TO E_OBJECT_DATA_TAB.

  endloop.&quot;at I_OBJECT_REF_TAB

  if ( not EX_TAB is initial ).
    raise exception type CX_OS_OBJECT_REFERENCE
          exporting EXCEPTION_TAB = EX_TAB.
  endif.

           &quot;MAP_GET_ATTRIBUTES
endmethod.
&quot;#EC CI_VALPAR</source>
  </method>
  <method CLSNAME="ZCB_NAOCT_QTD_CTRLH" CMPNAME="MAP_INITIALIZE_METADATA" VERSION="1" LANGU="E" DESCRIPT="Initializes Metadata Table for Attributes" EXPOSURE="1" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <source>method MAP_INITIALIZE_METADATA.
***BUILD 093901
************************************************************************
* Purpose        : Initialize the mapping metadata,
*
* Version        : 2.0
*
* Precondition   : -
*
* Postcondition  : The mapping metadata table MAP_ATT_INFO_TAB
*                  contains an entry for all persistent attributes
*                  accessible from a query expression
*
* OO Exceptions  : -
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 2004-03-25   : (SB)  Initial Version
************************************************************************


  data: MAP_ATT_INFO type OSTYP_RT_MAP_ATT_INFO.

  if MAP_ATT_INFO_TAB is initial.

    clear MAP_ATT_INFO.
    MAP_ATT_INFO-NAME = &apos;SPART&apos;.
    MAP_ATT_INFO-EXPOSURE = &apos;2&apos;.
    MAP_ATT_INFO-RECORDNAME = &apos;ZNAOCT_QTD_CTRLH&apos;.
    MAP_ATT_INFO-FIELD_NAME1  = &apos;SPART&apos;.
    insert MAP_ATT_INFO into table MAP_ATT_INFO_TAB.

    clear MAP_ATT_INFO.
    MAP_ATT_INFO-NAME = &apos;KUNNR&apos;.
    MAP_ATT_INFO-EXPOSURE = &apos;2&apos;.
    MAP_ATT_INFO-RECORDNAME = &apos;ZNAOCT_QTD_CTRLH&apos;.
    MAP_ATT_INFO-FIELD_NAME1  = &apos;KUNNR&apos;.
    insert MAP_ATT_INFO into table MAP_ATT_INFO_TAB.

    clear MAP_ATT_INFO.
    MAP_ATT_INFO-NAME = &apos;ZZDEAL_CODE&apos;.
    MAP_ATT_INFO-EXPOSURE = &apos;2&apos;.
    MAP_ATT_INFO-RECORDNAME = &apos;ZNAOCT_QTD_CTRLH&apos;.
    MAP_ATT_INFO-FIELD_NAME1  = &apos;ZZDEAL_CODE&apos;.
    insert MAP_ATT_INFO into table MAP_ATT_INFO_TAB.

    clear MAP_ATT_INFO.
    MAP_ATT_INFO-NAME = &apos;ENDDT&apos;.
    MAP_ATT_INFO-EXPOSURE = &apos;2&apos;.
    MAP_ATT_INFO-RECORDNAME = &apos;ZNAOCT_QTD_CTRLH&apos;.
    MAP_ATT_INFO-FIELD_NAME1  = &apos;ENDDT&apos;.
    insert MAP_ATT_INFO into table MAP_ATT_INFO_TAB.

    clear MAP_ATT_INFO.
    MAP_ATT_INFO-NAME = &apos;BEGDT&apos;.
    MAP_ATT_INFO-EXPOSURE = &apos;2&apos;.
    MAP_ATT_INFO-RECORDNAME = &apos;ZNAOCT_QTD_CTRLH&apos;.
    MAP_ATT_INFO-FIELD_NAME1  = &apos;BEGDT&apos;.
    insert MAP_ATT_INFO into table MAP_ATT_INFO_TAB.

    clear MAP_ATT_INFO.
    MAP_ATT_INFO-NAME = &apos;UOM&apos;.
    MAP_ATT_INFO-EXPOSURE = &apos;2&apos;.
    MAP_ATT_INFO-RECORDNAME = &apos;ZNAOCT_QTD_CTRLH&apos;.
    MAP_ATT_INFO-FIELD_NAME1  = &apos;UOM&apos;.
    insert MAP_ATT_INFO into table MAP_ATT_INFO_TAB.

    clear MAP_ATT_INFO.
    MAP_ATT_INFO-NAME = &apos;QTD_ALLOWED&apos;.
    MAP_ATT_INFO-EXPOSURE = &apos;2&apos;.
    MAP_ATT_INFO-RECORDNAME = &apos;ZNAOCT_QTD_CTRLH&apos;.
    MAP_ATT_INFO-FIELD_NAME1  = &apos;QTD_ALLOWED&apos;.
    insert MAP_ATT_INFO into table MAP_ATT_INFO_TAB.

    clear MAP_ATT_INFO.
    MAP_ATT_INFO-NAME = &apos;CREDAT&apos;.
    MAP_ATT_INFO-EXPOSURE = &apos;2&apos;.
    MAP_ATT_INFO-RECORDNAME = &apos;ZNAOCT_QTD_CTRLH&apos;.
    MAP_ATT_INFO-FIELD_NAME1  = &apos;CREDAT&apos;.
    insert MAP_ATT_INFO into table MAP_ATT_INFO_TAB.

    clear MAP_ATT_INFO.
    MAP_ATT_INFO-NAME = &apos;CREUSR&apos;.
    MAP_ATT_INFO-EXPOSURE = &apos;2&apos;.
    MAP_ATT_INFO-RECORDNAME = &apos;ZNAOCT_QTD_CTRLH&apos;.
    MAP_ATT_INFO-FIELD_NAME1  = &apos;CREUSR&apos;.
    insert MAP_ATT_INFO into table MAP_ATT_INFO_TAB.

    clear MAP_ATT_INFO.
    MAP_ATT_INFO-NAME = &apos;CRETIM&apos;.
    MAP_ATT_INFO-EXPOSURE = &apos;2&apos;.
    MAP_ATT_INFO-RECORDNAME = &apos;ZNAOCT_QTD_CTRLH&apos;.
    MAP_ATT_INFO-FIELD_NAME1  = &apos;CRETIM&apos;.
    insert MAP_ATT_INFO into table MAP_ATT_INFO_TAB.

    clear MAP_ATT_INFO.
    MAP_ATT_INFO-NAME = &apos;AENAM&apos;.
    MAP_ATT_INFO-EXPOSURE = &apos;2&apos;.
    MAP_ATT_INFO-RECORDNAME = &apos;ZNAOCT_QTD_CTRLH&apos;.
    MAP_ATT_INFO-FIELD_NAME1  = &apos;AENAM&apos;.
    insert MAP_ATT_INFO into table MAP_ATT_INFO_TAB.

    clear MAP_ATT_INFO.
    MAP_ATT_INFO-NAME = &apos;AEDAT&apos;.
    MAP_ATT_INFO-EXPOSURE = &apos;2&apos;.
    MAP_ATT_INFO-RECORDNAME = &apos;ZNAOCT_QTD_CTRLH&apos;.
    MAP_ATT_INFO-FIELD_NAME1  = &apos;AEDAT&apos;.
    insert MAP_ATT_INFO into table MAP_ATT_INFO_TAB.

    clear MAP_ATT_INFO.
    MAP_ATT_INFO-NAME = &apos;AETIM&apos;.
    MAP_ATT_INFO-EXPOSURE = &apos;2&apos;.
    MAP_ATT_INFO-RECORDNAME = &apos;ZNAOCT_QTD_CTRLH&apos;.
    MAP_ATT_INFO-FIELD_NAME1  = &apos;AETIM&apos;.
    insert MAP_ATT_INFO into table MAP_ATT_INFO_TAB.

    clear MAP_ATT_INFO.
    MAP_ATT_INFO-NAME = &apos;CHNUSR&apos;.
    MAP_ATT_INFO-EXPOSURE = &apos;2&apos;.
    MAP_ATT_INFO-RECORDNAME = &apos;ZNAOCT_QTD_CTRLH&apos;.
    MAP_ATT_INFO-FIELD_NAME1  = &apos;CHNUSR&apos;.
    insert MAP_ATT_INFO into table MAP_ATT_INFO_TAB.

  endif.

           &quot;MAP_INITIALIZE_METADATA
  endmethod.</source>
  </method>
  <method CLSNAME="CL_OS_CA_COMMON" CMPNAME="MAP_INVALIDATE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method MAP_INVALIDATE.
***BUILD 093901
     &quot; importing I_OBJECT_IREF_TAB type TYP_OBJECT_TAB
************************************************************************
* Purpose        : Invalidate state of all objects in I_OBJECT_IREF_TAB
*
* Version        : 2.0
*
* Precondition   : Objects in I_OBJECT_IREF_TAB exist
*
* Postcondition  : Their state in cleared
*
* OO Exceptions  : -
*
* Implementation : - call method IF_OS_STATE~INVALIDATE
*                  - clear object&apos;s (persistent) attributes
*
************************************************************************
* Changelog:
* - 2000-04-17   : (BGR) Initial Version
* - 2000-08-02   : (SB)  OO Exceptions
* - 2002-01-17   : (SB)  private attributes in super classes
************************************************************************

  data: OBJECT_IREF type TYP_OBJECT_IREF,
        THE_OBJECT  type ref TO ZCL_NAOCT_QTD_CTRLH.

  loop at I_OBJECT_IREF_TAB into OBJECT_IREF.

    if ( not OBJECT_IREF is initial ).

      call method OBJECT_IREF-&gt;INVALIDATE.

      THE_OBJECT ?= OBJECT_IREF.

*&lt;    Generated from Mapping:
      clear: THE_OBJECT-&gt;SPART,
             THE_OBJECT-&gt;KUNNR,
             THE_OBJECT-&gt;ZZDEAL_CODE,
             THE_OBJECT-&gt;ENDDT,
             THE_OBJECT-&gt;BEGDT,
             THE_OBJECT-&gt;UOM,
             THE_OBJECT-&gt;QTD_ALLOWED,
             THE_OBJECT-&gt;CREDAT,
             THE_OBJECT-&gt;CREUSR,
             THE_OBJECT-&gt;CRETIM,
             THE_OBJECT-&gt;AENAM,
             THE_OBJECT-&gt;AEDAT,
             THE_OBJECT-&gt;AETIM,
             THE_OBJECT-&gt;CHNUSR.
*&gt;

    endif. &quot;( not initial )

  endloop. &quot;at I_OBJECT_IREF_TAB

           &quot;MAP_INVALIDATE
  endmethod.</source>
  </method>
  <method CLSNAME="ZCB_NAOCT_QTD_CTRLH" CMPNAME="MAP_LOAD_FROM_DATABASE" VERSION="1" LANGU="E" DESCRIPT="Reads Identified Object Data from the DB Based on a Filter" EXPOSURE="0" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCB_NAOCT_QTD_CTRLH" CMPNAME="MAP_LOAD_FROM_DATABASE" SCONAME="I_ORDER_BY_CLAUSE" VERSION="1" LANGU="E" DESCRIPT="ORDER BY Clause" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCB_NAOCT_QTD_CTRLH" CMPNAME="MAP_LOAD_FROM_DATABASE" SCONAME="I_SUBCLASSES" VERSION="1" LANGU="E" DESCRIPT="Load Subclass Instances" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="OS_BOOLEAN" PARVALUE="OSCON_FALSE"/>
   <parameter CLSNAME="ZCB_NAOCT_QTD_CTRLH" CMPNAME="MAP_LOAD_FROM_DATABASE" SCONAME="I_UPTO" VERSION="1" LANGU="E" DESCRIPT="Max. No. Instances" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="I" PARVALUE="0"/>
   <parameter CLSNAME="ZCB_NAOCT_QTD_CTRLH" CMPNAME="MAP_LOAD_FROM_DATABASE" SCONAME="I_WHERE_CLAUSE" VERSION="1" LANGU="E" DESCRIPT="Where Clause" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCB_NAOCT_QTD_CTRLH" CMPNAME="MAP_LOAD_FROM_DATABASE" SCONAME="PAR1" VERSION="1" LANGU="E" DESCRIPT="First Parameter for Query Execution" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ANY" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCB_NAOCT_QTD_CTRLH" CMPNAME="MAP_LOAD_FROM_DATABASE" SCONAME="PAR2" VERSION="1" LANGU="E" DESCRIPT="Second Parameter for Query Execution" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ANY" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCB_NAOCT_QTD_CTRLH" CMPNAME="MAP_LOAD_FROM_DATABASE" SCONAME="PAR3" VERSION="1" LANGU="E" DESCRIPT="Third Parameter for Query Execution" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ANY" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCB_NAOCT_QTD_CTRLH" CMPNAME="MAP_LOAD_FROM_DATABASE" SCONAME="RESULT" VERSION="1" LANGU="E" DESCRIPT="Object Data Read from the Database" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="TYP_DB_DATA_TAB"/>
   <source>method MAP_LOAD_FROM_DATABASE.
***BUILD 093901
     &quot; importing I_WHERE_CLAUSE type STRING optional
     &quot;           I_ORDER_BY_CLAUSE type STRING optional
     &quot;           I_SUBCLASSES type OS_BOOLEAN default OSCON_FALSE
     &quot;           I_UPTO type I value 0
     &quot;           PAR1 type ANY optional
     &quot;           PAR2 type ANY optional
     &quot;           PAR3 type ANY optional
     &quot; returning value(RESULT) type TYP_DB_DATA_TAB
************************************************************************
* Purpose        : Load object data identified by I_WHERE_CLAUSE with
*                  PAR1, PAR2 and PAR3 from DB to DB_DATA Table
*
* Version        : 2.0
*
* Precondition   : I_WHERE_CLAUSE is valid where clause in Open-SQL
*
* Postcondition  : RESULT is the corresponding table of object
*                  attributes read from DB
*
* OO Exceptions  : CX_OS_DB_SELECT
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 2004-03-25   : (SB)  Initial Version
* - 2005-04-06   : (SB)  Single Table
************************************************************************


  data: DB_DATA           type TYP_DB_DATA.

*&lt; Generated from mapping:
  types: TYP_DB_DATA_LOCAL type ZNAOCT_QTD_CTRLH.
*&gt;

  types:
    TYP_DB_DATA_LOCAL_TAB type standard table of
      TYP_DB_DATA_LOCAL with non-unique default key .

  data: DB_DATA_LOCAL_TAB type TYP_DB_DATA_LOCAL_TAB.

  field-symbols: &lt;FS_DB_DATA_LOCAL&gt; type TYP_DB_DATA_LOCAL.

*&lt; Generated from mapping:
  field-symbols: &lt;FS_DB_ZNAOCT_QTD_CTRLH&gt; type ZNAOCT_QTD_CTRLH.
*&gt;

*&lt; Generated from mapping:
  select * from ZNAOCT_QTD_CTRLH
           up to I_UPTO rows
           into table DB_DATA_LOCAL_TAB
           where (I_WHERE_CLAUSE)
           order by (I_ORDER_BY_CLAUSE).
*&gt;

*   * error handling
  if ( SY-SUBRC &lt;&gt; 0 ).
    class CX_OS_DB_SELECT definition load.
    raise exception type CX_OS_DB_SELECT
         exporting TABLE  = &apos;ZNAOCT_QTD_CTRLH&apos;
                   WHERE_CLAUSE = I_WHERE_CLAUSE
                   TEXTID = CX_OS_DB_SELECT=&gt;BY_QUERY.
  endif. &quot;( Error )

  loop at DB_DATA_LOCAL_TAB assigning &lt;FS_DB_DATA_LOCAL&gt;.

    assign &lt;FS_DB_DATA_LOCAL&gt; to &lt;FS_DB_ZNAOCT_QTD_CTRLH&gt;.

*&lt; Generated from mapping:
    DB_DATA-SPART = &lt;FS_DB_ZNAOCT_QTD_CTRLH&gt;-SPART.
    DB_DATA-KUNNR = &lt;FS_DB_ZNAOCT_QTD_CTRLH&gt;-KUNNR.
    DB_DATA-ZZDEAL_CODE = &lt;FS_DB_ZNAOCT_QTD_CTRLH&gt;-ZZDEAL_CODE.
    DB_DATA-ENDDT = &lt;FS_DB_ZNAOCT_QTD_CTRLH&gt;-ENDDT.
    DB_DATA-BEGDT = &lt;FS_DB_ZNAOCT_QTD_CTRLH&gt;-BEGDT.
    DB_DATA-UOM = &lt;FS_DB_ZNAOCT_QTD_CTRLH&gt;-UOM.
    DB_DATA-QTD_ALLOWED = &lt;FS_DB_ZNAOCT_QTD_CTRLH&gt;-QTD_ALLOWED.
    DB_DATA-CREDAT = &lt;FS_DB_ZNAOCT_QTD_CTRLH&gt;-CREDAT.
    DB_DATA-CREUSR = &lt;FS_DB_ZNAOCT_QTD_CTRLH&gt;-CREUSR.
    DB_DATA-CRETIM = &lt;FS_DB_ZNAOCT_QTD_CTRLH&gt;-CRETIM.
    DB_DATA-AENAM = &lt;FS_DB_ZNAOCT_QTD_CTRLH&gt;-AENAM.
    DB_DATA-AEDAT = &lt;FS_DB_ZNAOCT_QTD_CTRLH&gt;-AEDAT.
    DB_DATA-AETIM = &lt;FS_DB_ZNAOCT_QTD_CTRLH&gt;-AETIM.
    DB_DATA-CHNUSR = &lt;FS_DB_ZNAOCT_QTD_CTRLH&gt;-CHNUSR.
*&gt;

    append DB_DATA to RESULT.

  endloop.&quot; at DB_TAB

           &quot;MAP_LOAD_FROM_DATABASE
endmethod.
&quot;#EC CI_VALPAR</source>
  </method>
  <method CLSNAME="ZCB_NAOCT_QTD_CTRLH" CMPNAME="MAP_LOAD_FROM_DATABASE_KEY" VERSION="1" LANGU="E" DESCRIPT="Reads Object Data Identified Using Bus. Key from Database" EXPOSURE="1" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCB_NAOCT_QTD_CTRLH" CMPNAME="MAP_LOAD_FROM_DATABASE_KEY" SCONAME="I_BUSINESS_KEY_TAB" VERSION="1" LANGU="E" DESCRIPT="Business Key of the Data to Be Loaded" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TYP_BUSINESS_KEY_TAB"/>
   <parameter CLSNAME="ZCB_NAOCT_QTD_CTRLH" CMPNAME="MAP_LOAD_FROM_DATABASE_KEY" SCONAME="RESULT" VERSION="1" LANGU="E" DESCRIPT="Object Data Read from the Database" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="TYP_DB_DATA_TAB"/>
   <source>method MAP_LOAD_FROM_DATABASE_KEY.
***BUILD 093901
     &quot; importing I_BUSINESS_KEY_TAB type TYP_BUSINESS_KEY_TAB
     &quot; returning value(RESULT) type TYP_DB_DATA_TAB
************************************************************************
* Purpose        : Load object data identified by I_BUSINESS_KEY_TAB
*                  from DB to DB_DATA Table
*
* Version        : 2.0
*
* Precondition   : I_BUSINESS_KEY_TAB is a table of valid business keys
*
* Postcondition  : RESULT is the corresponding table of object
*                  attributes read from DB
*
* OO Exceptions  : CX_OS_DB_SELECT
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 1999-09-21   : (OS)  Initial Version
* - 2000-03-06   : (BGR) Version 2.0 - difference between loading 1 and
*                  many entries
* - 2000-06-15   : (BGR) Support for multi-table loading
* - 2000-08-03   : (SB)  OO Exceptions
* - 2001-03-27   : (MWI) Loading several objects (type mapping)
* - 2001-11-26   : (SB)  Refactoring Generation
* - 2002-01-17   : (SB)  Bugfix for tables with namespace
* - 2002-01-17   : (SB)  private attributes in super classes
* - 2004-01-07   : (SB)  Multi Access
* - 2005-02-22   : (SB)  Inner Joins
* - 2005-04-06   : (SB)  Single Table
************************************************************************


  data: DB_DATA           type TYP_DB_DATA.

*&lt; Generated from mapping:
  types: TYP_DB_DATA_LOCAL type ZNAOCT_QTD_CTRLH.
*&gt;

  types:
    TYP_DB_DATA_LOCAL_TAB type standard table of
      TYP_DB_DATA_LOCAL with non-unique default key .

  data: DB_DATA_LOCAL_TAB type TYP_DB_DATA_LOCAL_TAB.

  field-symbols: &lt;FS_DB_DATA_LOCAL&gt; type TYP_DB_DATA_LOCAL.

*&lt; Generated from mapping:
  field-symbols: &lt;FS_DB_ZNAOCT_QTD_CTRLH&gt; type ZNAOCT_QTD_CTRLH.
*&gt;

*&lt; Generated from mapping:
  select * from ZNAOCT_QTD_CTRLH
           into table DB_DATA_LOCAL_TAB
           for all entries in I_BUSINESS_KEY_TAB
           where ZNAOCT_QTD_CTRLH~SPART = I_BUSINESS_KEY_TAB-SPART
             and ZNAOCT_QTD_CTRLH~KUNNR = I_BUSINESS_KEY_TAB-KUNNR
             and ZNAOCT_QTD_CTRLH~ZZDEAL_CODE =
             I_BUSINESS_KEY_TAB-ZZDEAL_CODE
             and ZNAOCT_QTD_CTRLH~ENDDT = I_BUSINESS_KEY_TAB-ENDDT.
*&gt;

* * error handling
  if ( SY-SUBRC &lt;&gt; 0 ).
    class CX_OS_DB_SELECT definition load.
    raise exception type CX_OS_DB_SELECT
         exporting TABLE  = &apos;ZNAOCT_QTD_CTRLH&apos;
                   TEXTID = CX_OS_DB_SELECT=&gt;BY_BKEYTAB.
  endif. &quot;( Error )

  loop at DB_DATA_LOCAL_TAB assigning &lt;FS_DB_DATA_LOCAL&gt;.

    assign &lt;FS_DB_DATA_LOCAL&gt; to &lt;FS_DB_ZNAOCT_QTD_CTRLH&gt;.

*&lt; Generated from mapping:
    DB_DATA-SPART = &lt;FS_DB_ZNAOCT_QTD_CTRLH&gt;-SPART.
    DB_DATA-KUNNR = &lt;FS_DB_ZNAOCT_QTD_CTRLH&gt;-KUNNR.
    DB_DATA-ZZDEAL_CODE = &lt;FS_DB_ZNAOCT_QTD_CTRLH&gt;-ZZDEAL_CODE.
    DB_DATA-ENDDT = &lt;FS_DB_ZNAOCT_QTD_CTRLH&gt;-ENDDT.
    DB_DATA-BEGDT = &lt;FS_DB_ZNAOCT_QTD_CTRLH&gt;-BEGDT.
    DB_DATA-UOM = &lt;FS_DB_ZNAOCT_QTD_CTRLH&gt;-UOM.
    DB_DATA-QTD_ALLOWED = &lt;FS_DB_ZNAOCT_QTD_CTRLH&gt;-QTD_ALLOWED.
    DB_DATA-CREDAT = &lt;FS_DB_ZNAOCT_QTD_CTRLH&gt;-CREDAT.
    DB_DATA-CREUSR = &lt;FS_DB_ZNAOCT_QTD_CTRLH&gt;-CREUSR.
    DB_DATA-CRETIM = &lt;FS_DB_ZNAOCT_QTD_CTRLH&gt;-CRETIM.
    DB_DATA-AENAM = &lt;FS_DB_ZNAOCT_QTD_CTRLH&gt;-AENAM.
    DB_DATA-AEDAT = &lt;FS_DB_ZNAOCT_QTD_CTRLH&gt;-AEDAT.
    DB_DATA-AETIM = &lt;FS_DB_ZNAOCT_QTD_CTRLH&gt;-AETIM.
    DB_DATA-CHNUSR = &lt;FS_DB_ZNAOCT_QTD_CTRLH&gt;-CHNUSR.
*&gt;

    append DB_DATA to RESULT.

  endloop.&quot; at DB_DATA_LOCAL_TAB

           &quot;MAP_LOAD_FROM_DATABASE_KEY
endmethod.
&quot;#EC CI_VALPAR</source>
  </method>
  <method CLSNAME="ZCB_NAOCT_QTD_CTRLH" CMPNAME="MAP_MERGE_IDENTIFIER" VERSION="1" LANGU="E" DESCRIPT="Adds BKey to DB Data" EXPOSURE="1" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCB_NAOCT_QTD_CTRLH" CMPNAME="MAP_MERGE_IDENTIFIER" SCONAME="I_BUSINESS_KEY_TAB" VERSION="1" LANGU="E" DESCRIPT="List of Business Keys" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TYP_BUSINESS_KEY_TAB"/>
   <parameter CLSNAME="ZCB_NAOCT_QTD_CTRLH" CMPNAME="MAP_MERGE_IDENTIFIER" SCONAME="C_DB_DATA_TAB" VERSION="1" LANGU="E" DESCRIPT="Object Data in Which Identifiers Are to Be Mixed" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="TYP_DB_DATA_TAB"/>
   <source>method MAP_MERGE_IDENTIFIER.
***BUILD 093901
     &quot; importing I_BUSINESS_KEY_TAB type TYP_BUSINESS_KEY_TAB
     &quot; changing C_DB_DATA_TAB type TYP_DB_DATA_TAB
************************************************************************
* Purpose        : Merge Table I_BUSINESS_KEY_TAB to C_DB_DATA_TAB.
*                  The result is a complete DB_DATA table to be stored
*                  in DB.
*
* Version        : 2.0
*
* Precondition   : C_DB_DATA is a Table filled with object data
*                  I_BUSINESS_KEY_TAB is a table of the same size with
*                  corresponding entries.
*
* Postcondition  : C_DB_DATA_TAB is complete
*
* OO Exceptions  : --
*
* Implementation :
*
************************************************************************
* Changelog:
* - 2000-03-06   : (BGR) Initial Version
************************************************************************
* Generated! Do not modify!
************************************************************************

  data: BUSINESS_KEY type TYP_BUSINESS_KEY.

  field-symbols &lt;FS_OBJECT_DATA&gt; type TYP_DB_DATA.

  loop at C_DB_DATA_TAB assigning &lt;FS_OBJECT_DATA&gt;.

    read table I_BUSINESS_KEY_TAB into BUSINESS_KEY
         index SY-TABIX.

*&lt;  Generated from mapping:
    &lt;FS_OBJECT_DATA&gt;-SPART = BUSINESS_KEY-SPART.
    &lt;FS_OBJECT_DATA&gt;-KUNNR = BUSINESS_KEY-KUNNR.
    &lt;FS_OBJECT_DATA&gt;-ZZDEAL_CODE = BUSINESS_KEY-ZZDEAL_CODE.
    &lt;FS_OBJECT_DATA&gt;-ENDDT = BUSINESS_KEY-ENDDT.
*&gt;


  endloop.&quot; at C_DB_DATA_TAB

           &quot;MAP_MERGE_IDENTIFIER
  endmethod.</source>
  </method>
  <method CLSNAME="ZCB_NAOCT_QTD_CTRLH" CMPNAME="MAP_SAVE_TO_DATABASE" VERSION="1" LANGU="E" DESCRIPT="Saves Object Data in Database" EXPOSURE="1" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCB_NAOCT_QTD_CTRLH" CMPNAME="MAP_SAVE_TO_DATABASE" SCONAME="I_DELETES" VERSION="1" LANGU="E" DESCRIPT="Key of the Data to Be Deleted" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TYP_DB_DELETE_TAB"/>
   <parameter CLSNAME="ZCB_NAOCT_QTD_CTRLH" CMPNAME="MAP_SAVE_TO_DATABASE" SCONAME="I_INSERTS" VERSION="1" LANGU="E" DESCRIPT="Data to Be Created" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TYP_DB_DATA_TAB"/>
   <parameter CLSNAME="ZCB_NAOCT_QTD_CTRLH" CMPNAME="MAP_SAVE_TO_DATABASE" SCONAME="I_UPDATES" VERSION="1" LANGU="E" DESCRIPT="Data to Be Changed" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TYP_DB_DATA_TAB"/>
   <source>method MAP_SAVE_TO_DATABASE.
***BUILD 093901
     &quot; importing I_DELETES type TYP_DB_DELETE_TAB
     &quot;           I_INSERTS type TYP_DB_DATA_TAB
     &quot;           I_UPDATES type TYP_DB_DATA_TAB
************************************************************************
* Purpose        : Do database operations:
*                  Insert new object data from I_INSERTS,
*                  Update changed object data from I_UPDATES and
*                  Delete entries for deleted objects from I_DELETES
*
* Version        : 2.0
*
* Precondition   : I_DELETES,I_INSERTS and I_UPDATES contain ALL
*                  necessary information (Keys, Data)
*                  If this method is called in update task, there
*                  is NO MORE information, no objects exist anymore.
*
* Postcondition  : All database operations have been performed.
*
* OO Exceptions  : CX_OS_DB_INSERT, CX_OS_DB_UPDATE, CX_OS_DB_DELETE
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 1999-09-21   : (OS)  Initial Version
* - 2000-03-06   : (BGR) Version 2.0
* - 2001-11-26   : (SB)  Refactoring Generation
* - 2002-01-17   : (SB)  private attributes in super classes
************************************************************************

*&lt; Generated from mapping:

* * ZNAOCT_QTD_CTRLH: internal tables for mass operation
  data DB_ITB_ZNAOCT_QTD_CTRLH type STANDARD TABLE OF ZNAOCT_QTD_CTRLH.
  data DB_UTB_ZNAOCT_QTD_CTRLH type STANDARD TABLE OF ZNAOCT_QTD_CTRLH.
  data DB_DTB_ZNAOCT_QTD_CTRLH type STANDARD TABLE OF ZNAOCT_QTD_CTRLH.

* * ZNAOCT_QTD_CTRLH: headlines for tables
  data DB_ILN_ZNAOCT_QTD_CTRLH type ZNAOCT_QTD_CTRLH.
  data DB_ULN_ZNAOCT_QTD_CTRLH type ZNAOCT_QTD_CTRLH.
  data DB_DLN_ZNAOCT_QTD_CTRLH type ZNAOCT_QTD_CTRLH.

*&gt;

  field-symbols &lt;FS_INSERT&gt; type TYP_DB_DATA.
  field-symbols &lt;FS_UPDATE&gt; type TYP_DB_DATA.
  field-symbols &lt;FS_DELETE&gt; type TYP_SPECIAL_OBJECT_INFO.

* * Collect Inserts
  loop at I_INSERTS assigning &lt;FS_INSERT&gt;.

*&lt; Generated from mapping:





   DB_ILN_ZNAOCT_QTD_CTRLH-BEGDT = &lt;FS_INSERT&gt;-BEGDT.
   DB_ILN_ZNAOCT_QTD_CTRLH-UOM = &lt;FS_INSERT&gt;-UOM.
   DB_ILN_ZNAOCT_QTD_CTRLH-QTD_ALLOWED = &lt;FS_INSERT&gt;-QTD_ALLOWED.
   DB_ILN_ZNAOCT_QTD_CTRLH-CREDAT = &lt;FS_INSERT&gt;-CREDAT.
   DB_ILN_ZNAOCT_QTD_CTRLH-CREUSR = &lt;FS_INSERT&gt;-CREUSR.
   DB_ILN_ZNAOCT_QTD_CTRLH-CRETIM = &lt;FS_INSERT&gt;-CRETIM.
   DB_ILN_ZNAOCT_QTD_CTRLH-AENAM = &lt;FS_INSERT&gt;-AENAM.
   DB_ILN_ZNAOCT_QTD_CTRLH-AEDAT = &lt;FS_INSERT&gt;-AEDAT.
   DB_ILN_ZNAOCT_QTD_CTRLH-AETIM = &lt;FS_INSERT&gt;-AETIM.
   DB_ILN_ZNAOCT_QTD_CTRLH-CHNUSR = &lt;FS_INSERT&gt;-CHNUSR.


   DB_ILN_ZNAOCT_QTD_CTRLH-SPART = &lt;FS_INSERT&gt;-SPART.
   DB_ILN_ZNAOCT_QTD_CTRLH-KUNNR = &lt;FS_INSERT&gt;-KUNNR.
   DB_ILN_ZNAOCT_QTD_CTRLH-ZZDEAL_CODE = &lt;FS_INSERT&gt;-ZZDEAL_CODE.
   DB_ILN_ZNAOCT_QTD_CTRLH-ENDDT = &lt;FS_INSERT&gt;-ENDDT.
   append DB_ILN_ZNAOCT_QTD_CTRLH to DB_ITB_ZNAOCT_QTD_CTRLH.
*&gt;

  endloop. &quot;at I_INSERTS

* * Collect Updates
  loop at I_UPDATES assigning &lt;FS_UPDATE&gt;.

*&lt; Generated from mapping:





   DB_ULN_ZNAOCT_QTD_CTRLH-BEGDT = &lt;FS_UPDATE&gt;-BEGDT.
   DB_ULN_ZNAOCT_QTD_CTRLH-UOM = &lt;FS_UPDATE&gt;-UOM.
   DB_ULN_ZNAOCT_QTD_CTRLH-QTD_ALLOWED = &lt;FS_UPDATE&gt;-QTD_ALLOWED.
   DB_ULN_ZNAOCT_QTD_CTRLH-CREDAT = &lt;FS_UPDATE&gt;-CREDAT.
   DB_ULN_ZNAOCT_QTD_CTRLH-CREUSR = &lt;FS_UPDATE&gt;-CREUSR.
   DB_ULN_ZNAOCT_QTD_CTRLH-CRETIM = &lt;FS_UPDATE&gt;-CRETIM.
   DB_ULN_ZNAOCT_QTD_CTRLH-AENAM = &lt;FS_UPDATE&gt;-AENAM.
   DB_ULN_ZNAOCT_QTD_CTRLH-AEDAT = &lt;FS_UPDATE&gt;-AEDAT.
   DB_ULN_ZNAOCT_QTD_CTRLH-AETIM = &lt;FS_UPDATE&gt;-AETIM.
   DB_ULN_ZNAOCT_QTD_CTRLH-CHNUSR = &lt;FS_UPDATE&gt;-CHNUSR.


   DB_ULN_ZNAOCT_QTD_CTRLH-SPART = &lt;FS_UPDATE&gt;-SPART.
   DB_ULN_ZNAOCT_QTD_CTRLH-KUNNR = &lt;FS_UPDATE&gt;-KUNNR.
   DB_ULN_ZNAOCT_QTD_CTRLH-ZZDEAL_CODE = &lt;FS_UPDATE&gt;-ZZDEAL_CODE.
   DB_ULN_ZNAOCT_QTD_CTRLH-ENDDT = &lt;FS_UPDATE&gt;-ENDDT.
   append DB_ULN_ZNAOCT_QTD_CTRLH TO DB_UTB_ZNAOCT_QTD_CTRLH.
*&gt;

  endloop. &quot;at I_UPDATES

* * Collect Deletes
  loop at I_DELETES assigning &lt;FS_DELETE&gt;.

    DB_DLN_ZNAOCT_QTD_CTRLH-SPART = &lt;FS_DELETE&gt;-BUSINESS_KEY-SPART.
    DB_DLN_ZNAOCT_QTD_CTRLH-KUNNR = &lt;FS_DELETE&gt;-BUSINESS_KEY-KUNNR.
    DB_DLN_ZNAOCT_QTD_CTRLH-ZZDEAL_CODE =
    &lt;FS_DELETE&gt;-BUSINESS_KEY-ZZDEAL_CODE.
    DB_DLN_ZNAOCT_QTD_CTRLH-ENDDT = &lt;FS_DELETE&gt;-BUSINESS_KEY-ENDDT.

    append DB_DLN_ZNAOCT_QTD_CTRLH TO DB_DTB_ZNAOCT_QTD_CTRLH.

  endloop. &quot;at I_DELETES

* * Perform DB Operations:

*&lt; Generated from mapping:

* * DB Deletes
  delete ZNAOCT_QTD_CTRLH FROM TABLE DB_DTB_ZNAOCT_QTD_CTRLH.
  if SY-SUBRC &lt;&gt; 0.
    raise exception type CX_OS_DB_DELETE
      exporting
        TABLE = &apos;ZNAOCT_QTD_CTRLH&apos;.
  endif.

* * DB Inserts
  insert ZNAOCT_QTD_CTRLH FROM TABLE DB_ITB_ZNAOCT_QTD_CTRLH
    accepting duplicate keys.
  if SY-SUBRC &lt;&gt; 0.
    raise exception type CX_OS_DB_INSERT
      exporting
        TABLE = &apos;ZNAOCT_QTD_CTRLH&apos;.
  endif.

* * DB Updates
  update ZNAOCT_QTD_CTRLH FROM TABLE DB_UTB_ZNAOCT_QTD_CTRLH.
  if SY-SUBRC &lt;&gt; 0.
    raise exception type CX_OS_DB_UPDATE
      exporting
        TABLE = &apos;ZNAOCT_QTD_CTRLH&apos;.
  endif.

*&gt;
           &quot;MAP_SAVE_TO_DATABASE
  endmethod.</source>
  </method>
  <method CLSNAME="ZCB_NAOCT_QTD_CTRLH" CMPNAME="MAP_SERIALIZE_BKEY" VERSION="1" LANGU="E" DESCRIPT="Serializes Business Key" EXPOSURE="1" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCB_NAOCT_QTD_CTRLH" CMPNAME="MAP_SERIALIZE_BKEY" SCONAME="I_BUSINESS_KEY" VERSION="1" LANGU="E" DESCRIPT="Business Key" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TYP_BUSINESS_KEY"/>
   <parameter CLSNAME="ZCB_NAOCT_QTD_CTRLH" CMPNAME="MAP_SERIALIZE_BKEY" SCONAME="RESULT" VERSION="1" LANGU="E" DESCRIPT="Business Key as String" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="STRING"/>
   <source>method MAP_SERIALIZE_BKEY.
***BUILD 093901
     &quot; importing I_BUSINESS_KEY type TYP_BUSINESS_KEY
     &quot; returning value(RESULT) type STRING
************************************************************************
* Purpose        : Concatenate business keys into string.
*
* Version        : 2.0
*
* Precondition   : -
*
* Postcondition  : -
*
* OO Exceptions  : -
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 2000-11-23   : (SB)  initial versiuon
* - 2009-06-03   : (SB)  correct order if edit order is used
************************************************************************
* Generated! Do not modify!
************************************************************************

  data: COMP_STRING type STRING.

*&lt; Generated from mapping:
  COMP_STRING = I_BUSINESS_KEY-SPART.
  concatenate RESULT COMP_STRING into RESULT.
  COMP_STRING = I_BUSINESS_KEY-KUNNR.
  concatenate RESULT COMP_STRING into RESULT.
  COMP_STRING = I_BUSINESS_KEY-ZZDEAL_CODE.
  concatenate RESULT COMP_STRING into RESULT.
  COMP_STRING = I_BUSINESS_KEY-ENDDT.
  concatenate RESULT COMP_STRING into RESULT.
*&gt;

           &quot; MAP_SERIALIZE_BKEY
  endmethod.</source>
  </method>
  <method CLSNAME="ZCB_NAOCT_QTD_CTRLH" CMPNAME="MAP_SET_ATTRIBUTES" VERSION="1" LANGU="E" DESCRIPT="Sets Persistent Attributes of an Object" EXPOSURE="1" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCB_NAOCT_QTD_CTRLH" CMPNAME="MAP_SET_ATTRIBUTES" SCONAME="I_OBJECT_DATA" VERSION="1" LANGU="E" DESCRIPT="Object Data to Be Set" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TYP_DB_DATA"/>
   <parameter CLSNAME="ZCB_NAOCT_QTD_CTRLH" CMPNAME="MAP_SET_ATTRIBUTES" SCONAME="I_OBJECT_REF" VERSION="1" LANGU="E" DESCRIPT="Object Affected" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TYP_OBJECT_REF"/>
   <exception CLSNAME="ZCB_NAOCT_QTD_CTRLH" CMPNAME="MAP_SET_ATTRIBUTES" SCONAME="CX_OS_OBJECT_NOT_FOUND" VERSION="1" LANGU="E" DESCRIPT="Object Services Exception" MTDTYPE="0" EDITORDER="0 "/>
   <source>method MAP_SET_ATTRIBUTES.
***BUILD 093901
     &quot; importing I_OBJECT_DATA type TYP_DB_DATA
     &quot;           I_OBJECT_REF  type TYP_OBJECT_REF
     &quot; raising   CX_OS_OBJECT_NOT_FOUND
************************************************************************
* Purpose        : Set objects from given object data
*
* Version        : 2.0
*
* Precondition   : I_OBJECT_REF is a reference to the object that will
*                  be set with data from I_OBJECT_DATA
*
* Postcondition  : The object&apos;s attributes are set.
*
* OO Exceptions  : CX_OS_OBJECT_NOT_FOUND
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 2000-03-06   : (BGR) Initial Version
* - 2000-08-03   : (SB)  OO Exceptions
* - 2002-01-17   : (SB)  private attributes in super classes
************************************************************************
* Generated! Do not modify!
************************************************************************

  data: THE_OBJECT type ref to ZCL_NAOCT_QTD_CTRLH,
        AN_OBJECT  type ref to object, &quot;#EC NEEDED
        PM_SERVICE type ref to IF_OS_PM_SERVICE. &quot;#EC NEEDED

  PM_SERVICE ?= PERSISTENCY_MANAGER.
  THE_OBJECT = I_OBJECT_REF.

*&lt;  Generated from mapping:
  THE_OBJECT-&gt;SPART = I_OBJECT_DATA-SPART.
  THE_OBJECT-&gt;KUNNR = I_OBJECT_DATA-KUNNR.
  THE_OBJECT-&gt;ZZDEAL_CODE = I_OBJECT_DATA-ZZDEAL_CODE.
  THE_OBJECT-&gt;ENDDT = I_OBJECT_DATA-ENDDT.
  THE_OBJECT-&gt;BEGDT = I_OBJECT_DATA-BEGDT.
  THE_OBJECT-&gt;UOM = I_OBJECT_DATA-UOM.
  THE_OBJECT-&gt;QTD_ALLOWED = I_OBJECT_DATA-QTD_ALLOWED.
  THE_OBJECT-&gt;CREDAT = I_OBJECT_DATA-CREDAT.
  THE_OBJECT-&gt;CREUSR = I_OBJECT_DATA-CREUSR.
  THE_OBJECT-&gt;CRETIM = I_OBJECT_DATA-CRETIM.
  THE_OBJECT-&gt;AENAM = I_OBJECT_DATA-AENAM.
  THE_OBJECT-&gt;AEDAT = I_OBJECT_DATA-AEDAT.
  THE_OBJECT-&gt;AETIM = I_OBJECT_DATA-AETIM.
  THE_OBJECT-&gt;CHNUSR = I_OBJECT_DATA-CHNUSR.
*&gt;

           &quot;MAP_SET_ATTRIBUTES
  endmethod.</source>
  </method>
  <method CLSNAME="CL_OS_CA_COMMON" CMPNAME="OS_PM_DELETE_PERSISTENT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method OS_PM_DELETE_PERSISTENT.
***BUILD 090501
************************************************************************
* Purpose        : Delete persistent object. It is marked DELETED in
*                  memory and removed from DB when the top transaction
*                  is closed.
*
* Version        : 2.0
*
* Precondition   : The object is persistent (not transient), CURRENT
*                  is set
*
* Postcondition  : Instance is marked for deletion.
*
* OO Exceptions  : propagates PM_DELETE_PERSISTENT
*
* Implementation : load special object info and
*                  call PM_DELETE_PERSISTENT
*
************************************************************************
* Changelog:
* - 2001-12-14   : (SB)  Initial Version
************************************************************************

  call method LOAD_SPECIAL_OBJECT_INFO( ).

  call method PM_DELETE_PERSISTENT( ).

           &quot;OS_PM_DELETE_PERSISTENT .
  endmethod.</source>
  </method>
  <method CLSNAME="ZCB_NAOCT_QTD_CTRLH" CMPNAME="PM_CHECK_AND_SET_ATTRIBUTES" VERSION="1" LANGU="E" DESCRIPT="Checks and Sets Persistent Attributes" EXPOSURE="1" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCB_NAOCT_QTD_CTRLH" CMPNAME="PM_CHECK_AND_SET_ATTRIBUTES" SCONAME="I_BUSINESS_KEY" VERSION="1" LANGU="E" DESCRIPT="Business Key" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TYP_BUSINESS_KEY" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCB_NAOCT_QTD_CTRLH" CMPNAME="PM_CHECK_AND_SET_ATTRIBUTES" SCONAME="I_ID_PROVIDED" VERSION="1" LANGU="E" DESCRIPT="With Which Identifiers Were Loading and Checking Performed" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TYP_ID_STATUS" PARVALUE="0" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCB_NAOCT_QTD_CTRLH" CMPNAME="PM_CHECK_AND_SET_ATTRIBUTES" SCONAME="I_OBJECT_DATA" VERSION="1" LANGU="E" DESCRIPT="Data Loaded from Database" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TYP_DB_DATA"/>
   <exception CLSNAME="ZCB_NAOCT_QTD_CTRLH" CMPNAME="PM_CHECK_AND_SET_ATTRIBUTES" SCONAME="CX_OS_OBJECT_NOT_FOUND" VERSION="1" LANGU="E" DESCRIPT="Object Services Exception" MTDTYPE="0" EDITORDER="0 "/>
   <source>method PM_CHECK_AND_SET_ATTRIBUTES.
***BUILD 090501
     &quot; importing I_OBJECT_DATA  type TYP_DB_DATA
     &quot; importing I_BUSINESS_KEY type TYP_BUSINESS_KEY optional
     &quot;           I_ID_PROVIDED type TYP_ID_STATUS default ID_STATUS_NONE
************************************************************************
* Purpose        : check loaded object data of a persistent object and
*                  set object&apos;s attributes
*                  if CURRENT is clear, create new representant,
*                  if CURRENT is set, use this object to set the loaded
*                  data
*                  If I_ID_PROVIDED is set to ID_STATUS_NONE, Look for
*                  an entry in SPECIAL_OBJECT_INFO with the given
*                  Business Key
*
* Version        : 2.0
*
* Precondition   :
*
* Postcondition  : Persistent object data is checked and object
*                  attributes are set. CURRENT is set.
*
* OO Exception   : CX_OS_OBJECT_STATE(INTERNAL_CHANGED,INTERNAL_DELETED,
*                                     INTERNAL_TRANSIENT, INTERNAL_NEW)
*                  propagates MAP_SET_ATTRIBUTES
*
* Implementation : 1. If CURRENT is clear:
*                   1a. I_ID_PROVIDED = ID_STATUS_NONE?:
*                       Check if another object exists with this
*                       Business Key
*                   1b. I_ID_PROVIDED &lt;&gt; ID_STATUS_NONE or no entry
*                       found:
*                       Create a new Representative object
*                   1c. If an object has been found:
*                       Check if it is allowed to set it
*                  2. set PM_DBSTATUS EXISTING
*                  3. Temporarily save CURRENT_*
*                  4. set object attributes (resolving references)
*                  5. restore CURRENT_*
*
************************************************************************
* Changelog:
* - 2000-05-17   : (BGR) Initial Version 2.0
* - 2000-08-03   : (SB) OO Exceptions
************************************************************************

  data: LOADED_BUSINESS_KEY       type TYP_BUSINESS_KEY.

  data: TEMP_CURRENT_OBJECT_INFO  type TYP_OBJECT_INFO,
        TEMP_CURRENT_OBJECT_INDEX type TYP_INDEX,
        TEMP_CURRENT_SPECIAL_OI   type TYP_SPECIAL_OBJECT_INFO,
        TEMP_CURRENT_OBJECT_IREF  type TYP_OBJECT_IREF,
        INTERNAL_UNDO_INFO_ITEM   type TYP_INTERNAL_UNDO_INFO,
        TEMP_OBJECT_REF           type TYP_OBJECT_REF.

* * Get both Business Key from DB data
  call method MAP_EXTRACT_IDENTIFIER
       exporting I_DB_DATA      = I_OBJECT_DATA
       importing E_BUSINESS_KEY = LOADED_BUSINESS_KEY.

  if ( CURRENT_OBJECT_IREF is initial ).

*   * 1. If CURRENT is clear:

    if ( I_ID_PROVIDED = ID_STATUS_NONE ).

*   * 1a. Check if another object exists with this Business Key

      read table SPECIAL_BKEY_TAB into TEMP_CURRENT_SPECIAL_OI
           with table key BUSINESS_KEY = LOADED_BUSINESS_KEY.
      if ( sy-subrc = 0 ).

        read table SPECIAL_OBJECT_INFO into
             CURRENT_SPECIAL_OBJECT_INFO
             with table key
             OBJECT_ID = TEMP_CURRENT_SPECIAL_OI-OBJECT_ID.
        call method OS_LOAD_AND_VALIDATE_CURRENT
             exporting I_INDEX = sy-tabix.

      endif. &quot; ( Entry found for BKEY? )

    endif. &quot;( no ID Provided )

    if ( CURRENT_OBJECT_IREF is initial ).

*     * 1b. Create a new Representative object and a new entry
      call method PM_CREATE_REPRESENTANT
           exporting I_BUSINESS_KEY = LOADED_BUSINESS_KEY.

    else. &quot;( Found an entry for the business key )

*     * Now we know an entry exists on DB
      CURRENT_OBJECT_INFO-PM_DBSTATUS = OSCON_DBSTATUS_EXISTING.
      modify OBJECT_INFO from CURRENT_OBJECT_INFO
             index CURRENT_OBJECT_INDEX.

*     * 1c. Check if it is allowed to use the found object.
      case CURRENT_OBJECT_INFO-PM_STATUS.

*       * PM_STATUS = NOT_LOADED: re-use entry and object
        when OSCON_OSTATUS_NOT_LOADED.

*       * PM_STATUS = LOADED: re-use entry and object
        when OSCON_OSTATUS_LOADED.

*       *  other PM_STATUS: Error!
        when OSCON_OSTATUS_NEW.

*!!!!!!!!!! Error! Object already exists on DB
*         * This NEW object should be created on DB by the next
*         * COMMIT. Now an entry was found with the same key!
          class CX_OS_OBJECT_STATE definition load.
          raise exception type CX_OS_OBJECT_STATE
               exporting OBJECT = CURRENT_OBJECT_IREF
                         TEXTID = CX_OS_OBJECT_STATE=&gt;INTERNAL_NEW.

        when OSCON_OSTATUS_CHANGED.

*!!!!!!!!!!! Error: Object has a DB relevant status
          class CX_OS_OBJECT_STATE definition load.
          raise exception type CX_OS_OBJECT_STATE
               exporting OBJECT = CURRENT_OBJECT_IREF
                         TEXTID = CX_OS_OBJECT_STATE=&gt;INTERNAL_CHANGED.

        when OSCON_OSTATUS_DELETED.

*!!!!!!!!!!! Error: Object marked for deletion
          class CX_OS_OBJECT_STATE definition load.
          raise exception type CX_OS_OBJECT_STATE
               exporting OBJECT = CURRENT_OBJECT_IREF
                         TEXTID = CX_OS_OBJECT_STATE=&gt;INTERNAL_DELETED.

        when OSCON_OSTATUS_TRANSIENT.

*!!!!!!!!!!! Error: Object is transient
          class CX_OS_OBJECT_STATE definition load.
          raise exception type CX_OS_OBJECT_STATE
               exporting OBJECT = CURRENT_OBJECT_IREF
                        TEXTID = CX_OS_OBJECT_STATE=&gt;INTERNAL_TRANSIENT.

      endcase.

    endif. &quot;( CURRENT initial? )
  endif. &quot;( CURRENT initial? )

* * 2. set PM_DBSTATUS EXISTING
  CURRENT_OBJECT_INFO-PM_DBSTATUS          = OSCON_DBSTATUS_EXISTING.

* * internal Undo entry:
  INTERNAL_UNDO_INFO_ITEM-OBJECT_INDEX = CURRENT_OBJECT_INDEX.
  INTERNAL_UNDO_INFO_ITEM-OBJECT_INFO  = CURRENT_OBJECT_INFO.
  append INTERNAL_UNDO_INFO_ITEM to INTERNAL_UNDO_INFO.
  INTERNAL_NEXT_UNDO_INFO = sy-tabix + 1.

* * To avoid recursive loading of the same object (INIT method)
* * temporarily set status &apos;LOADING&apos;
  CURRENT_OBJECT_INFO-PM_STATUS = OSCON_OSTATUS_LOADING.
  modify OBJECT_INFO from CURRENT_OBJECT_INFO
         index CURRENT_OBJECT_INDEX.

* * 3. Temporarily save CURRENT_*
  TEMP_CURRENT_OBJECT_IREF  = CURRENT_OBJECT_IREF.
  TEMP_CURRENT_OBJECT_INFO  = CURRENT_OBJECT_INFO.
  TEMP_CURRENT_OBJECT_INDEX = CURRENT_OBJECT_INDEX.
  TEMP_CURRENT_SPECIAL_OI   = CURRENT_SPECIAL_OBJECT_INFO.

* * 4. set object attributes (resolving references)
  TEMP_OBJECT_REF ?= CURRENT_OBJECT_IREF .

  call method MAP_SET_ATTRIBUTES
       exporting I_OBJECT_DATA = I_OBJECT_DATA
                 I_OBJECT_REF  = TEMP_OBJECT_REF.

* * 5. restore CURRENT_*
  CURRENT_OBJECT_INFO          = TEMP_CURRENT_OBJECT_INFO.
  CURRENT_OBJECT_INDEX         = TEMP_CURRENT_OBJECT_INDEX.
  CURRENT_SPECIAL_OBJECT_INFO  = TEMP_CURRENT_SPECIAL_OI.
  CURRENT_OBJECT_IREF          = TEMP_CURRENT_OBJECT_IREF.

* * the method call get_ref_by_oid in map_set_attributes
* * eventually creates new entries in the
* * administrative data tables, it is necessary to
* * to recalculate the index
  read table OBJECT_INFO transporting no fields
     with table key OBJECT_ID = CURRENT_OBJECT_INFO-OBJECT_ID.
  CURRENT_OBJECT_INDEX = sy-tabix.

           &quot;PM_CHECK_AND_SET_ATTRIBUTES
  endmethod.</source>
  </method>
  <method CLSNAME="ZCB_NAOCT_QTD_CTRLH" CMPNAME="PM_CREATE_REPRESENTANT" VERSION="1" LANGU="E" DESCRIPT="Generate New Wrapper Object and Administration Entry" EXPOSURE="1" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCB_NAOCT_QTD_CTRLH" CMPNAME="PM_CREATE_REPRESENTANT" SCONAME="I_BUSINESS_KEY" VERSION="1" LANGU="E" DESCRIPT="Business Key" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TYP_BUSINESS_KEY" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCB_NAOCT_QTD_CTRLH" CMPNAME="PM_CREATE_REPRESENTANT" SCONAME="RESULT" VERSION="1" LANGU="E" DESCRIPT="Newly Generated Wrapper Object" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="TYP_OBJECT_REF"/>
   <source>method PM_CREATE_REPRESENTANT.
***BUILD 093901
     &quot; importing I_BUSINESS_KEY type TYP_BUSINESS_KEY
     &quot; returning result         type TYP_OBJECT_REF
************************************************************************
* Purpose        : Create a new representative object including a new
*                  entry in administrative data (OBJECT_INFO and
*                  SPECIAL_OBJECT_INFO)
*
* Version        : 2.0
*
* Precondition   : No object exists with the same Business Key
*
* Postcondition  : A new object exists, corresponding entries in
*                  OBJECT_INFO and SPECIAL_OBJECT_INFO have been
*                  inserted, CURRENT is set
*
* OO Exceptions  : --
*
* Implementation : 1. Create object and set BKey attributes
*                  2. Get internal OID for the new object
*                  3. Create new entry in SPECIAL_OBJECT_INFO
*                  4. Let super class create a new entry in OBJECT_INFO
*
************************************************************************
* Changelog:
* - 2000-03-07   : (BGR) Initial Version 2.0
* - 2000-08-02   : (SB)  OO Exceptions
* - 2001-10-30   : (SB)  Type Mapping
************************************************************************

  data: NEW_OBJECT type ref to ZCL_NAOCT_QTD_CTRLH.

* * 1. Create object and set BKey attributes
  create object NEW_OBJECT.

* &lt; Generated from mapping:
  NEW_OBJECT-&gt;SPART = I_BUSINESS_KEY-SPART.
  NEW_OBJECT-&gt;KUNNR = I_BUSINESS_KEY-KUNNR.
  NEW_OBJECT-&gt;ZZDEAL_CODE = I_BUSINESS_KEY-ZZDEAL_CODE.
  NEW_OBJECT-&gt;ENDDT = I_BUSINESS_KEY-ENDDT.
* &gt;

* * 2. Get internal OID for the new object and set CURRENT_SPECIAL_OI
  clear CURRENT_SPECIAL_OBJECT_INFO.

  CURRENT_SPECIAL_OBJECT_INFO-OBJECT_ID =
      OS_GET_INTERNAL_OID_BY_REF( I_OBJECT = NEW_OBJECT ).
  CURRENT_SPECIAL_OBJECT_INFO-BUSINESS_KEY = I_BUSINESS_KEY.
  CURRENT_SPECIAL_OBJECT_INFO-ID_STATUS = ID_STATUS_COMPLETE.

* * 3. Create new entry in SPECIAL_OBJECT_INFO
  insert CURRENT_SPECIAL_OBJECT_INFO into table SPECIAL_OBJECT_INFO.
  insert CURRENT_SPECIAL_OBJECT_INFO into table SPECIAL_BKEY_TAB.

* * 4. Let super class create a new entry in OBJECT_INFO
  call method OS_CREATE_NEW_ENTRY_FOR_REPR
       exporting I_OBJECT = NEW_OBJECT
                 I_INTERNAL_OID = CURRENT_SPECIAL_OBJECT_INFO-OBJECT_ID.

  RESULT = NEW_OBJECT.

           &quot;PM_CREATE_REPRESENTANT
  endmethod.</source>
  </method>
  <method CLSNAME="ZCB_NAOCT_QTD_CTRLH" CMPNAME="PM_DELETE_PERSISTENT" VERSION="1" LANGU="E" DESCRIPT="Deletes Persistent Object from Database" EXPOSURE="1" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <source>method PM_DELETE_PERSISTENT.
***BUILD 090501
************************************************************************
* Purpose        : Delete persistent object. It is marked DELETED in
*                  memory and removed from DB when the top transaction
*                  is closed.
*
* Version        : 2.0
*
* Precondition   : The object is persistent (not transient), CURRENT
*                  is set
*
* Postcondition  : Instance is marked for deletion.
*
* OO Exception   : CX_OS_OBJECT_STATE(CREATED_AND_DELETED,TRANSIENT)
*                  propagates OS_PM_DELETED_PERSISTENT
*                  ( propagates MAP_LOAD_FROM_DATABASE_KEY )
*
* Implementation : 1. Check the state of the object:
*                    1a. Object is already deleted - done
*                    1b. Object is transient - Error
*                    1c. Object is new, loaded or changed - continue
*                    1d. Object is not_loaded:
*                        Check DBSTATUS:
*                       1d1. DBSTATUS Unknown/Existing - continue
*                       1d2. DBSTATUS Not existing - Error
*                   2. Completion: call OS_PM_DELETED_PERSISTENT
*
************************************************************************
* Changelog:
* - 2000-03-06   : (BGR) Initial Version 2.0
* - 2000-08-03   : (SB) OO Exceptions
************************************************************************

  data: TEMP_CURRENT_OBJECT_IREF type TYP_OBJECT_IREF .

* * 1. Check the state of the object:
  case CURRENT_OBJECT_INFO-PM_STATUS.

  when OSCON_OSTATUS_DELETED.

*   * 1a. Object is already deleted - done
    call method OS_CLEAR_CURRENT.
    clear CURRENT_SPECIAL_OBJECT_INFO.
    exit.


  when OSCON_OSTATUS_TRANSIENT.

*   * 1b. Object is transient - Error
*!! error: object already exists transient
    TEMP_CURRENT_OBJECT_IREF = CURRENT_OBJECT_IREF.
    call method OS_CLEAR_CURRENT.
    clear CURRENT_SPECIAL_OBJECT_INFO.
    class CX_OS_OBJECT_STATE definition load.
    raise exception type CX_OS_OBJECT_STATE
         exporting OBJECT = TEMP_CURRENT_OBJECT_IREF
                   TEXTID = CX_OS_OBJECT_STATE=&gt;TRANSIENT.


  when OSCON_OSTATUS_NEW     or
       OSCON_OSTATUS_CHANGED or
       OSCON_OSTATUS_LOADED.

*   * 1c. Object is new, loaded or changed - continue


  when OSCON_OSTATUS_NOT_LOADED.

*   * 1d. Object is not_loaded: Check DBSTATUS:
    case CURRENT_OBJECT_INFO-PM_DBSTATUS.


    when OSCON_DBSTATUS_EXISTING
      or OSCON_DBSTATUS_UNKNOWN.

*     * 1d1. DBSTATUS Existing/Unknown - continue


    when OSCON_DBSTATUS_NOT_EXISTING.
*     * 1d2. DBSTATUS Not existing - Error
*!!!! error: No DB entry for the object
      TEMP_CURRENT_OBJECT_IREF = CURRENT_OBJECT_IREF.
      call method OS_CLEAR_CURRENT.
      clear CURRENT_SPECIAL_OBJECT_INFO.
      class CX_OS_OBJECT_STATE definition load.
      raise exception type CX_OS_OBJECT_STATE
           exporting OBJECT = TEMP_CURRENT_OBJECT_IREF
                     TEXTID = CX_OS_OBJECT_STATE=&gt;CREATED_AND_DELETED.

    endcase. &quot;PM_DBSTATUS
  endcase. &quot;PM_STATUS

* * 2. Completion: call OS_PM_DELETED_PERSISTENT
  call method OS_PM_DELETED_PERSISTENT.

  clear CURRENT_SPECIAL_OBJECT_INFO.

           &quot;PM_DELETE_PERSISTENT
  endmethod.</source>
  </method>
  <method CLSNAME="CL_OS_CA_COMMON" CMPNAME="PM_LOAD" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method PM_LOAD.
***BUILD 090501
************************************************************************
* Purpose        : Load data from DB into Object specified by CURRENT
*
* Version        : 2.0
*
* Precondition   : CURRENT_* is set
*
* Postcondition  : object is loaded or exceptions is raised
*
* OO Exceptions  : propagates PM_LOAD_AND_SET_ATTRIBUTES
*
* Implementation : call PM_LOAD_AND_SET_ATTRIBUTES
*
************************************************************************
* Changelog:
* - 2000-03-02   : (BGR) Initial Version
* - 2000-08-03   : (SB)  OO Exceptions
* - 2001-11-14   : (SB)  Type mapping
************************************************************************

  call method PM_LOAD_AND_SET_ATTRIBUTES
       exporting I_BUSINESS_KEY =
                         CURRENT_SPECIAL_OBJECT_INFO-BUSINESS_KEY.

           &quot;PM_LOAD
  endmethod.</source>
  </method>
  <method CLSNAME="ZCB_NAOCT_QTD_CTRLH" CMPNAME="PM_LOAD_AND_SET_ATTRIBUTES" VERSION="1" LANGU="E" DESCRIPT="Loads and Sets Persistent Attributes" EXPOSURE="1" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCB_NAOCT_QTD_CTRLH" CMPNAME="PM_LOAD_AND_SET_ATTRIBUTES" SCONAME="I_BUSINESS_KEY" VERSION="1" LANGU="E" DESCRIPT="Business Key" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TYP_BUSINESS_KEY" PAROPTIONL="X"/>
   <exception CLSNAME="ZCB_NAOCT_QTD_CTRLH" CMPNAME="PM_LOAD_AND_SET_ATTRIBUTES" SCONAME="CX_OS_OBJECT_NOT_FOUND" VERSION="1" LANGU="E" DESCRIPT="Object Services Exception" MTDTYPE="0" EDITORDER="0 "/>
   <source>method PM_LOAD_AND_SET_ATTRIBUTES.
***BUILD 090501
     &quot; importing I_BUSINESS_KEY type TYP_BUSINESS_KEY optional

************************************************************************
* Purpose        : Load object data of a persistent object and set
*                  object&apos;s attributes
*                  if CURRENT is clear, load data using I_BUSINESS_KEY.
*                  if CURRENT is set, use the BKEY stored there.
*
* Version        : 2.0
*
* Precondition   : An entry for the given Business Key exists on
*                  database. CURRENT can be set (use this
*                  object to set attributes to) or clear.
*
* Postcondition  : Persistent object data is loaded and object
*                  attributes are set. CURRENT is set.
*
* OO Exceptions  : propagates PM_CHECK_AND_SET_ATTRIBUTES
*                  propagates MAP_LOAD_FROM_DATABASE_KEY/GUID
*
* Implementation : 1. Check Source of DB Keys: Business Key from
*                     CURRENT_SPECIAL_OBJECT_INFO or from I_BUSINESS_KEY
*                  2. Load from Database
*                  2.a. Type Mapping: Set E_TYPE and return if case of
*                       type mismatch
*                  3. Check loaded data and set object&apos;s attributes
*
************************************************************************
* Changelog:
* - 2000-03-07   : (BGR) Initial Version 2.0
* - 2000-05-17   : (BGR) use PM_CHECK_AND_SET_ATTRIBUTES
* - 2000-08-03   : (SB) OO Exceptions
* - 2004-01-21   : (SB) Type Mapping Refactoring
* - 2005-02-22   : (SB) Set Exception parameters
************************************************************************

  data: OBJECT_DATA_TAB     type TYP_DB_DATA_TAB,
        OBJECT_DATA         type TYP_DB_DATA,
        BUSINESS_KEY        type TYP_BUSINESS_KEY,
        BUSINESS_KEY_TAB    type TYP_BUSINESS_KEY_TAB.

  data: SERIALIZED_BUSINESS_KEY  type STRING .

* * 1. Check Source of DB Keys: Business Key from
* *    CURRENT_SPECIAL_OBJECT_INFO or from I_BUSINESS_KEY?
  if ( CURRENT_OBJECT_IREF is initial ).

    BUSINESS_KEY = I_BUSINESS_KEY.

  else. &quot;( CURRENT is set ).

*   * Get BKey from CURRENT_SPECIAL_OBJECT_INFO
    BUSINESS_KEY = CURRENT_SPECIAL_OBJECT_INFO-BUSINESS_KEY.

  endif. &quot;( CURRENT set? ).


* * 2. Load from Database
  try.
      append BUSINESS_KEY to BUSINESS_KEY_TAB.
      call method MAP_LOAD_FROM_DATABASE_KEY
           exporting I_BUSINESS_KEY_TAB = BUSINESS_KEY_TAB
           receiving result = OBJECT_DATA_TAB.
    catch CX_OS_DB_SELECT.
      class CX_OS_OBJECT_NOT_FOUND definition load.
      call method MAP_SERIALIZE_BKEY
           exporting I_BUSINESS_KEY = BUSINESS_KEY
           receiving RESULT = SERIALIZED_BUSINESS_KEY.
      raise exception type CX_OS_OBJECT_NOT_FOUND
        exporting
          BKEY   = SERIALIZED_BUSINESS_KEY
          TEXTID = CX_OS_OBJECT_NOT_FOUND=&gt;BY_BKEY.
  endtry.

  read table OBJECT_DATA_TAB into OBJECT_DATA index 1.


* * 3. Now Check the loaded data and set the Object.
  call method PM_CHECK_AND_SET_ATTRIBUTES
       exporting I_OBJECT_DATA  = OBJECT_DATA
                 I_BUSINESS_KEY = BUSINESS_KEY
                 I_ID_PROVIDED  = ID_STATUS_COMPLETE.

           &quot;PM_LOAD_AND_SET_ATTRIBUTES
  endmethod.</source>
  </method>
  <method CLSNAME="CL_OS_CA_COMMON" CMPNAME="SAVE_SPECIAL_OBJECT_INFO" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method SAVE_SPECIAL_OBJECT_INFO.
***BUILD 090501
************************************************************************
* Purpose        : Save CURRENT_SPECIAL_OBJECT_INFO into
*                  SPECIAL_OBJECT_INFO
*
* Version        : 2.0
*
* Precondition   : Index is set in CURRENT_OBJECT_INDEX
*
* Postcondition  : entry is saved
*
* OO Exceptions  : -
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 2000-03-02   : (BGR) Initial Version
************************************************************************

  modify SPECIAL_OBJECT_INFO from CURRENT_SPECIAL_OBJECT_INFO
         index CURRENT_OBJECT_INDEX.

           &quot;SAVE_SPECIAL_OBJECT_INFO
  endmethod.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZCB_NAOCT_QTD_CTRLD" VERSION="1" LANGU="E" DESCRIPT="Base agent Deal Code consumption - Persistence" CATEGORY="11" EXPOSURE="2" STATE="1" RELEASE="0" CLSABSTRCT="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " REFCLSNAME="CL_OS_CA_COMMON">
  <types CLSNAME="ZCB_NAOCT_QTD_CTRLD" CMPNAME="TYP_OID" VERSION="1" LANGU="E" DESCRIPT="Type of Generic Object Identifier" EXPOSURE="1" STATE="1" EDITORDER="0 " TYPTYPE="1" TYPE="OS_GUID" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <types CLSNAME="ZCB_NAOCT_QTD_CTRLD" CMPNAME="TYP_TYPE" VERSION="1" LANGU="E" DESCRIPT="Type of Type Identifier" EXPOSURE="1" STATE="1" EDITORDER="0 " TYPTYPE="1" TYPE="OS_GUID" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <types CLSNAME="ZCB_NAOCT_QTD_CTRLD" CMPNAME="TYP_OBJECT_REF" VERSION="1" LANGU="E" DESCRIPT="Type of Managed Object" EXPOSURE="1" STATE="1" EDITORDER="1 " TYPTYPE="3" TYPE="ZCL_NAOCT_QTD_CTRLD" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <types CLSNAME="ZCB_NAOCT_QTD_CTRLD" CMPNAME="TYP_BUSINESS_KEY" VERSION="1" LANGU="E" DESCRIPT="Business Key" EXPOSURE="1" STATE="1" EDITORDER="2 " TYPTYPE="4" SRCROW1="7 " SRCCOLUMN1="4 " SRCROW2="14 " SRCCOLUMN2="26 " TYPESRC_LENG="246 " TYPESRC="begin of TYP_BUSINESS_KEY ,
      SPART type SPART ,
      KUNNR type KUNNR ,
      ZZDEAL_CODE type ZGLOC_DEAL_CODE ,
      ENDDT type ZNAOCE_DEAL_END ,
      VBELN type VBELN_VA ,
      POSNR type POSNR_VA ,
    end of TYP_BUSINESS_KEY
"/>
  <types CLSNAME="ZCB_NAOCT_QTD_CTRLD" CMPNAME="TYP_BUSINESS_KEY_TAB" VERSION="1" LANGU="E" DESCRIPT="Table Type Object Reference" EXPOSURE="1" STATE="1" EDITORDER="3 " TYPTYPE="4" TYPE="TYP_BUSINESS_KEY" SRCROW1="16 " SRCCOLUMN1="4 " SRCROW2="17 " SRCCOLUMN2="49 " TYPESRC_LENG="97 " TYPESRC="TYP_BUSINESS_KEY_TAB type standard table of
      TYP_BUSINESS_KEY with non-unique default key
"/>
  <types CLSNAME="ZCB_NAOCT_QTD_CTRLD" CMPNAME="TYP_DB_DATA" VERSION="1" LANGU="E" DESCRIPT="Line-Type Persistent Object Data" EXPOSURE="1" STATE="1" EDITORDER="4 " TYPTYPE="4" SRCROW1="19 " SRCCOLUMN1="4 " SRCROW2="28 " SRCCOLUMN2="21 " TYPESRC_LENG="299 " TYPESRC="begin of TYP_DB_DATA ,
      SPART type SPART ,
      KUNNR type KUNNR ,
      ZZDEAL_CODE type ZGLOC_DEAL_CODE ,
      ENDDT type ZNAOCE_DEAL_END ,
      VBELN type VBELN_VA ,
      POSNR type POSNR_VA ,
      QTD_ORDERED type MENGE_D ,
      REJECTED type XFELD ,
    end of TYP_DB_DATA
"/>
  <types CLSNAME="ZCB_NAOCT_QTD_CTRLD" CMPNAME="TYP_DB_DATA_TAB" VERSION="1" LANGU="E" DESCRIPT="Table-Type Persistent Object Data" EXPOSURE="1" STATE="1" EDITORDER="5 " TYPTYPE="4" TYPE="TYP_DB_DATA" SRCROW1="30 " SRCCOLUMN1="4 " SRCROW2="31 " SRCCOLUMN2="44 " TYPESRC_LENG="87 " TYPESRC="TYP_DB_DATA_TAB type standard table of
      TYP_DB_DATA with non-unique default key
"/>
  <types CLSNAME="ZCB_NAOCT_QTD_CTRLD" CMPNAME="TYP_OID_TAB" VERSION="1" LANGU="E" DESCRIPT="Table Type Object Identifier" EXPOSURE="1" STATE="1" EDITORDER="5 " TYPTYPE="4" TYPE="TYP_OID" SRCROW1="33 " SRCCOLUMN1="4 " SRCROW2="34 " SRCCOLUMN2="40 " TYPESRC_LENG="79 " TYPESRC="TYP_OID_TAB type standard table of
      TYP_OID with non-unique default key
"/>
  <types CLSNAME="ZCB_NAOCT_QTD_CTRLD" CMPNAME="TYP_OBJECT_REF_TAB" VERSION="1" LANGU="E" DESCRIPT="Table Type Object Reference" EXPOSURE="1" STATE="1" EDITORDER="6 " TYPTYPE="4" TYPE="TYP_OBJECT_REF" SRCROW1="36 " SRCCOLUMN1="4 " SRCROW2="37 " SRCCOLUMN2="47 " TYPESRC_LENG="93 " TYPESRC="TYP_OBJECT_REF_TAB type standard table of
      TYP_OBJECT_REF with non-unique default key
"/>
  <types CLSNAME="ZCB_NAOCT_QTD_CTRLD" CMPNAME="TYP_SPECIAL_OBJECT_INFO" VERSION="1" LANGU="E" DESCRIPT="Line Type Class-Specific Object Data" EXPOSURE="1" STATE="1" EDITORDER="7 " TYPTYPE="4" SRCROW1="39 " SRCCOLUMN1="4 " SRCROW2="43 " SRCCOLUMN2="33 " TYPESRC_LENG="195 " TYPESRC="begin of TYP_SPECIAL_OBJECT_INFO ,
      OBJECT_ID type TYP_INTERNAL_OID ,
      ID_STATUS type TYP_ID_STATUS ,
      BUSINESS_KEY type TYP_BUSINESS_KEY ,
    end of TYP_SPECIAL_OBJECT_INFO
"/>
  <types CLSNAME="ZCB_NAOCT_QTD_CTRLD" CMPNAME="TYP_SPECIAL_OBJECT_INFO_TAB" VERSION="1" LANGU="E" DESCRIPT="Table Type Class-Specific Object Data" EXPOSURE="1" STATE="1" EDITORDER="8 " TYPTYPE="4" TYPE="TYP_SPECIAL_OBJECT_INFO" SRCROW1="45 " SRCCOLUMN1="4 " SRCROW2="47 " SRCCOLUMN2="14 " TYPESRC_LENG="114 " TYPESRC="TYP_SPECIAL_OBJECT_INFO_TAB type sorted table of
      TYP_SPECIAL_OBJECT_INFO with unique key
      OBJECT_ID
"/>
  <types CLSNAME="ZCB_NAOCT_QTD_CTRLD" CMPNAME="TYP_SPECIAL_BKEY_TAB" VERSION="1" LANGU="E" DESCRIPT="Table Type Search Table Business Keys" EXPOSURE="1" STATE="1" EDITORDER="9 " TYPTYPE="4" TYPE="TYP_SPECIAL_OBJECT_INFO" SRCROW1="49 " SRCCOLUMN1="4 " SRCROW2="51 " SRCCOLUMN2="17 " TYPESRC_LENG="110 " TYPESRC="TYP_SPECIAL_BKEY_TAB type sorted table of
      TYP_SPECIAL_OBJECT_INFO with unique key
      BUSINESS_KEY
"/>
  <types CLSNAME="ZCB_NAOCT_QTD_CTRLD" CMPNAME="TYP_DB_DELETE_TAB" VERSION="1" LANGU="E" DESCRIPT="Table Type Identifiers to Delete" EXPOSURE="1" STATE="1" EDITORDER="10 " TYPTYPE="4" TYPE="TYP_SPECIAL_OBJECT_INFO" SRCROW1="53 " SRCCOLUMN1="4 " SRCROW2="54 " SRCCOLUMN2="56 " TYPESRC_LENG="101 " TYPESRC="TYP_DB_DELETE_TAB type standard table of
      TYP_SPECIAL_OBJECT_INFO with non-unique default key
"/>
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <attribute CLSNAME="ZCB_NAOCT_QTD_CTRLD" CMPNAME="CURRENT_SPECIAL_OBJECT_INFO" VERSION="1" LANGU="E" DESCRIPT="Current Class-Specific Object Data" EXPOSURE="1" STATE="1" EDITORDER="0 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="TYP_SPECIAL_OBJECT_INFO" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCB_NAOCT_QTD_CTRLD" CMPNAME="MAP_ATT_INFO_TAB" VERSION="1" LANGU="E" DESCRIPT="Query: Mapping Metadata for Attributes" EXPOSURE="1" STATE="1" EDITORDER="0 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="OSTYP_RT_MAP_ATT_INFO_SRT_TAB" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCB_NAOCT_QTD_CTRLD" CMPNAME="SPECIAL_BKEY_TAB" VERSION="1" LANGU="E" DESCRIPT="Class-Specific: Search Table Business Keys" EXPOSURE="1" STATE="1" EDITORDER="0 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="TYP_SPECIAL_BKEY_TAB" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCB_NAOCT_QTD_CTRLD" CMPNAME="SPECIAL_OBJECT_INFO" VERSION="1" LANGU="E" DESCRIPT="Class-Specific Object Data" EXPOSURE="1" STATE="1" EDITORDER="0 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="TYP_SPECIAL_OBJECT_INFO_TAB" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <inheritance CLSNAME="ZCB_NAOCT_QTD_CTRLD" REFCLSNAME="CL_OS_CA_COMMON" VERSION="1" STATE="1">
   <redefinition CLSNAME="ZCB_NAOCT_QTD_CTRLD" REFCLSNAME="CL_OS_CA_COMMON" VERSION="1" MTDNAME="DELETE_SPECIAL_OBJECT_INFO" EXPOSURE="1"/>
   <redefinition CLSNAME="ZCB_NAOCT_QTD_CTRLD" REFCLSNAME="CL_OS_CA_COMMON" VERSION="1" MTDNAME="IF_OS_CA_PERSISTENCY~GET_PERSISTENT_BY_KEY" EXPOSURE="0"/>
   <redefinition CLSNAME="ZCB_NAOCT_QTD_CTRLD" REFCLSNAME="CL_OS_CA_COMMON" VERSION="1" MTDNAME="IF_OS_CA_PERSISTENCY~GET_PERSISTENT_BY_KEY_TAB" EXPOSURE="0"/>
   <redefinition CLSNAME="ZCB_NAOCT_QTD_CTRLD" REFCLSNAME="CL_OS_CA_COMMON" VERSION="1" MTDNAME="IF_OS_CA_PERSISTENCY~GET_PERSISTENT_BY_QUERY" EXPOSURE="0"/>
   <redefinition CLSNAME="ZCB_NAOCT_QTD_CTRLD" REFCLSNAME="CL_OS_CA_COMMON" VERSION="1" MTDNAME="IF_OS_CA_SERVICE~SAVE" EXPOSURE="0"/>
   <redefinition CLSNAME="ZCB_NAOCT_QTD_CTRLD" REFCLSNAME="CL_OS_CA_COMMON" VERSION="1" MTDNAME="IF_OS_CA_SERVICE~SAVE_IN_UPDATE_TASK" EXPOSURE="0"/>
   <redefinition CLSNAME="ZCB_NAOCT_QTD_CTRLD" REFCLSNAME="CL_OS_CA_COMMON" VERSION="1" MTDNAME="IF_OS_FACTORY~CREATE_PERSISTENT_BY_KEY" EXPOSURE="0"/>
   <redefinition CLSNAME="ZCB_NAOCT_QTD_CTRLD" REFCLSNAME="CL_OS_CA_COMMON" VERSION="1" MTDNAME="IF_OS_FACTORY~CREATE_TRANSIENT_BY_KEY" EXPOSURE="0"/>
   <redefinition CLSNAME="ZCB_NAOCT_QTD_CTRLD" REFCLSNAME="CL_OS_CA_COMMON" VERSION="1" MTDNAME="LOAD_SPECIAL_OBJECT_INFO" EXPOSURE="1"/>
   <redefinition CLSNAME="ZCB_NAOCT_QTD_CTRLD" REFCLSNAME="CL_OS_CA_COMMON" VERSION="1" MTDNAME="MAP_INVALIDATE" EXPOSURE="1"/>
   <redefinition CLSNAME="ZCB_NAOCT_QTD_CTRLD" REFCLSNAME="CL_OS_CA_COMMON" VERSION="1" MTDNAME="OS_PM_DELETE_PERSISTENT" EXPOSURE="1"/>
   <redefinition CLSNAME="ZCB_NAOCT_QTD_CTRLD" REFCLSNAME="CL_OS_CA_COMMON" VERSION="1" MTDNAME="PM_LOAD" EXPOSURE="1"/>
   <redefinition CLSNAME="ZCB_NAOCT_QTD_CTRLD" REFCLSNAME="CL_OS_CA_COMMON" VERSION="1" MTDNAME="SAVE_SPECIAL_OBJECT_INFO" EXPOSURE="1"/>
  </inheritance>
  <interfaceMethod CLSNAME="ZCB_NAOCT_QTD_CTRLD" CPDNAME="IF_OS_CA_PERSISTENCY~GET_PERSISTENT_BY_KEY">
   <source>method IF_OS_CA_PERSISTENCY~GET_PERSISTENT_BY_KEY.
***BUILD 093901
*      importing I_KEY type any
*      returning result type ref to object
************************************************************************
* Purpose        : Get a persistent object identified by the
*                  given business key
*
* Version        : 2.0
*
* Precondition   : The object exists with the given business key,
*                  either in memory or on database.
*
* Postcondition  : The object exists in memory, RESULT is the reference
*
* OO Exceptions  : propagates GET_PERSISTENT
*
* Implementation : call GET_PERSISTENT
*
************************************************************************
* Changelog:
* - 2000-03-06   : (BGR) Initial Version 2.0
* - 2000-08-02   : (SB)  OO Exceptions
************************************************************************

  data: BUSINESS_KEY             type TYP_BUSINESS_KEY.

  BUSINESS_KEY = I_KEY.

*&lt; Generated from mapping:
  call method GET_PERSISTENT
       exporting I_SPART = BUSINESS_KEY-SPART
                 I_KUNNR = BUSINESS_KEY-KUNNR
                 I_ZZDEAL_CODE = BUSINESS_KEY-ZZDEAL_CODE
                 I_ENDDT = BUSINESS_KEY-ENDDT
                 I_VBELN = BUSINESS_KEY-VBELN
                 I_POSNR = BUSINESS_KEY-POSNR
       receiving RESULT = RESULT.
*&gt;

           &quot;IF_OS_CA_PERSISTENCY~GET_PERSISTENT_BY_KEY
  endmethod.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCB_NAOCT_QTD_CTRLD" CPDNAME="IF_OS_CA_PERSISTENCY~GET_PERSISTENT_BY_KEY_TAB">
   <source>method IF_OS_CA_PERSISTENCY~GET_PERSISTENT_BY_KEY_TAB.
***BUILD 093901
      &quot;importing I_KEY_TAB type INDEX TABLE
      &quot;returning value(RESULT) type OSREFTAB
      &quot;raising   CX_OS_OBJECT_NOT_FOUND
************************************************************************
* Purpose        : Get persistent objects by Business Key table
*
* Version        : 2.0
*
* Precondition   : -
*
* Postcondition  : For each entry in the KEY table, there is a corres-
*                  ponding entry in the RESULT table. If the object was
*                  found in the cache or the database, then a reference
*                  to this object can be found in the RESULT table,
*                  if not, the reference is initial. The persistent
*                  objects are active.
*
* OO Exceptions  : CX_OS_OBJECT_NOT_FOUND
*                    (IS_TRANSIENT_BY_BKEY,DELETED_BY_BKEY)
*                  propagates PM_LOAD_AND_SET_ATTRIBUTES
*                  propagates OS_PM_LOADED_PERISISTENT
*
* Implementation : 1. Look for object in SPECIAL_OBJECT_INFO. If found,
*                     check if it is still valid
*                  2. Object found: Check PM_STATUS
*                     2a. If Status is TRANSIENT or DELETED, error!
*                     2b. If Status is NOT_LOADED, continue with 3.
*                     2c. If Status is NEW, LOADED or CHANGED, success!
*                  3. Load object data from database and set object
*                     3.a Completion in super class
*                  4. clean up
*
************************************************************************
* Changelog:
* - 2004-01-07   : (SB)  Initial version
************************************************************************

  types: begin of TYP_BUSINESS_KEY_INDEX,
           BUSINESS_KEY     type TYP_BUSINESS_KEY,
           INDEX            type SY-TABIX,
         end of TYP_BUSINESS_KEY_INDEX,
         TYP_BUSINESS_KEY_INDEX_TAB type sorted table
           of TYP_BUSINESS_KEY_INDEX with non-unique key BUSINESS_KEY.

  data: FLAG_NOT_LOADED        type OS_BOOLEAN,
        BKEY_STRING            type STRING,
        TEMP_OBJECT_REF        type TYP_OBJECT_REF,
        BUSINESS_KEY           type TYP_BUSINESS_KEY,
        BUSINESS_KEY_TAB       type TYP_BUSINESS_KEY_TAB,
        OBJECT_DATA_TAB        type TYP_DB_DATA_TAB,
        BUSINESS_KEY_INDEX     type TYP_BUSINESS_KEY_INDEX,
        BUSINESS_KEY_INDEX_TAB type TYP_BUSINESS_KEY_INDEX_TAB,
        NEXT_INDEX             type SY-TABIX.

  data: TEMP_CURRENT_OBJECT_IREF type ref to OBJECT.

  field-symbols: &lt;FS_OBJECT_DATA&gt;  type TYP_DB_DATA,
                 &lt;FS_BUSINESS_KEY&gt; type TYP_BUSINESS_KEY,
                 &lt;FS_BUSINESS_KEY_INDEX&gt; type TYP_BUSINESS_KEY_INDEX.

* * 1. Look for objects in SPECIAL_OBJECT_INFO. If found, check if they
* * are still valid

  loop at I_KEY_TAB assigning &lt;FS_BUSINESS_KEY&gt;. &quot;#EC GEN_OK

    clear CURRENT_OBJECT_IREF.

    read table SPECIAL_BKEY_TAB into CURRENT_SPECIAL_OBJECT_INFO
       with table key BUSINESS_KEY = &lt;FS_BUSINESS_KEY&gt;.

    if ( SY-SUBRC = 0 ).

      read table SPECIAL_OBJECT_INFO into CURRENT_SPECIAL_OBJECT_INFO
           with table key
           OBJECT_ID = CURRENT_SPECIAL_OBJECT_INFO-OBJECT_ID.
      call method OS_LOAD_AND_VALIDATE_CURRENT
           exporting I_INDEX = SY-TABIX.

    endif.

    if ( not CURRENT_OBJECT_IREF is initial ).

*   * 2. Object found: Check PM_STATUS

      case CURRENT_OBJECT_INFO-PM_STATUS.

*     * 2a. If Status is TRANSIENT or DELETED, error!
      when OSCON_OSTATUS_DELETED.

*!!!!!!! Error: Object activation failed - Object marked for deletion
        TEMP_CURRENT_OBJECT_IREF = CURRENT_OBJECT_IREF.
        BKEY_STRING  = MAP_SERIALIZE_BKEY( &lt;FS_BUSINESS_KEY&gt; ).
        call method OS_CLEAR_CURRENT.
        clear CURRENT_SPECIAL_OBJECT_INFO.
        class CX_OS_OBJECT_NOT_FOUND definition load.
        raise exception type CX_OS_OBJECT_NOT_FOUND
          exporting
            OBJECT = TEMP_CURRENT_OBJECT_IREF
            BKEY   = BKEY_STRING
            TEXTID = CX_OS_OBJECT_NOT_FOUND=&gt;DELETED_BY_BKEY.

      when OSCON_OSTATUS_TRANSIENT.

*!!!!!!! Error: Object activation failed - Object is transient
        TEMP_CURRENT_OBJECT_IREF = CURRENT_OBJECT_IREF.
        BKEY_STRING  = MAP_SERIALIZE_BKEY( &lt;FS_BUSINESS_KEY&gt; ).
        call method OS_CLEAR_CURRENT.
        clear CURRENT_SPECIAL_OBJECT_INFO.
        class CX_OS_OBJECT_NOT_FOUND definition load.
        raise exception type CX_OS_OBJECT_NOT_FOUND
          exporting
            OBJECT = TEMP_CURRENT_OBJECT_IREF
            BKEY   = BKEY_STRING
            TEXTID = CX_OS_OBJECT_NOT_FOUND=&gt;IS_TRANSIENT_BY_BKEY.

*     * 2b. If Status is NOT_LOADED, continue with 3.
      when OSCON_OSTATUS_NOT_LOADED.

        FLAG_NOT_LOADED = OSCON_TRUE.

*     * 2c. If Status is NEW, LOADED or CHANGED, success!
      when others.

        FLAG_NOT_LOADED = OSCON_FALSE.

      endcase.

    else.&quot; ( CURRENT_OBJECT_IREF is initial )

      FLAG_NOT_LOADED = OSCON_TRUE.

    endif.

    if ( FLAG_NOT_LOADED = OSCON_TRUE ).

      append &lt;FS_BUSINESS_KEY&gt; to BUSINESS_KEY_TAB.

    endif.

    TEMP_OBJECT_REF ?= CURRENT_OBJECT_IREF.
    append TEMP_OBJECT_REF to RESULT.

    call method OS_CLEAR_CURRENT.

  endloop.

* * 3. Load object data from database and set objects

  if ( BUSINESS_KEY_TAB is not initial ).

*   * internal Undo
    append INTERNAL_NEXT_UNDO_INFO to INTERNAL_TRANSACTION_STACK.
    INTERNAL_CURRENT_TRANSACTION = SY-TABIX.

    try.
        call method MAP_LOAD_FROM_DATABASE_KEY
             exporting I_BUSINESS_KEY_TAB = BUSINESS_KEY_TAB
             receiving result = OBJECT_DATA_TAB.
      catch CX_OS_DB_SELECT.
        clear OBJECT_DATA_TAB.
    endtry.

    loop at I_KEY_TAB assigning &lt;FS_BUSINESS_KEY&gt;. &quot;EC GEN_OK
      BUSINESS_KEY_INDEX-BUSINESS_KEY = &lt;FS_BUSINESS_KEY&gt;.
      BUSINESS_KEY_INDEX-INDEX = SY-TABIX.
      insert BUSINESS_KEY_INDEX into table BUSINESS_KEY_INDEX_TAB.
    endloop.

    try.

        loop at OBJECT_DATA_TAB assigning &lt;FS_OBJECT_DATA&gt;.

          call method MAP_EXTRACT_IDENTIFIER
               exporting I_DB_DATA  = &lt;FS_OBJECT_DATA&gt;
               importing E_BUSINESS_KEY = BUSINESS_KEY.

          clear CURRENT_OBJECT_IREF.

          call method PM_CHECK_AND_SET_ATTRIBUTES
               exporting I_OBJECT_DATA  = &lt;FS_OBJECT_DATA&gt;
                         I_ID_PROVIDED  = ID_STATUS_NONE.

          TEMP_OBJECT_REF ?= CURRENT_OBJECT_IREF.

          read table BUSINESS_KEY_INDEX_TAB
               with key BUSINESS_KEY = BUSINESS_KEY
               assigning &lt;FS_BUSINESS_KEY_INDEX&gt;.

          while ( ( SY-SUBRC = 0 ) and
                  ( &lt;FS_BUSINESS_KEY_INDEX&gt;-BUSINESS_KEY =
                    BUSINESS_KEY ) ).

            NEXT_INDEX = SY-TABIX + 1.

            modify RESULT from TEMP_OBJECT_REF
                          index &lt;FS_BUSINESS_KEY_INDEX&gt;-INDEX.

            read table BUSINESS_KEY_INDEX_TAB
                 index NEXT_INDEX
                 assigning &lt;FS_BUSINESS_KEY_INDEX&gt;.

          endwhile.

*         * 3.a. Completion in super class
          call method OS_PM_LOADED_PERSISTENT.

          clear CURRENT_SPECIAL_OBJECT_INFO.

        endloop.

      cleanup.
        call method OS_INTERNAL_UNDO.
        call method OS_CLEAR_CURRENT.
        clear CURRENT_SPECIAL_OBJECT_INFO.
    endtry.

*   * Clean-up internal Undo
    delete INTERNAL_TRANSACTION_STACK
           index INTERNAL_CURRENT_TRANSACTION.
    add -1 to INTERNAL_CURRENT_TRANSACTION.
    if ( INTERNAL_TRANSACTION_STACK is initial ).
      clear INTERNAL_UNDO_INFO.
      INTERNAL_NEXT_UNDO_INFO = 1.
    endif. &quot;( INTERNAL_TRANSACTION_STACK is initial? )

  endif.

* * 4. clean up

  clear CURRENT_SPECIAL_OBJECT_INFO.


           &quot;IF_OS_CA_PERSISTENCY~GET_PERSISTENT_BY_KEY_TAB
  endmethod.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCB_NAOCT_QTD_CTRLD" CPDNAME="IF_OS_CA_PERSISTENCY~GET_PERSISTENT_BY_QUERY">
   <source>method IF_OS_CA_PERSISTENCY~GET_PERSISTENT_BY_QUERY.
***BUILD 093901
     &quot; importing I_QUERY type ref to IF_OS_QUERY
     &quot;           I_PARAMETER_TAB type OSTYP_DREF_TAB optional
     &quot;           I_PAR1 type ANY optional
     &quot;           I_PAR2 type ANY optional
     &quot;           I_PAR3 type ANY optional
     &quot;           I_SUBCLASSES type OS_BOOLEAN default OSCON_FALSE
     &quot;           I_UPTO type I default 0
     &quot;           I_OPTIONS type IF_OS_QUERY_OPTIONS default
     &quot;             IF_OS_QUERY_OPTIONS=&gt;DEFAULT_OPTIONS
     &quot; returning value(RESULT) type OSREFTAB
     &quot; raising   CX_OS_OBJECT_NOT_FOUND
     &quot;           CX_OS_QUERY_ERROR
************************************************************************
* Purpose        : Get persistent objects by Query
*
* Version        : 2.0
*
* Precondition   : --
*
* Postcondition  : For each instance that satifies the filter
*                  expression, there is a corresponding entry in the
*                  RESULT table. The persistent objects are active.
*
* OO Exceptions  : CX_OS_OBJECT_NOT_FOUND
*                    (DELETED_BY_BKEY,TRANSIENT_BY_BKEY)
*                  propagates PM_CHECK_AND_SET_ATTRIBUTES
*                  propagates OS_PM_LOADED_PERISISTENT
*
* Implementation : 1. Load data by query
*                  2. Set objects from data
*                  2a. Object found: Check PM_STATUS
*                  2b. Object not found, replace
*                  2c. Set attributes
*                  2d. Completion in super class
*                  3. clean up
*
************************************************************************
* Changelog:
* - 2004-03-25   : (SB)  Initial version
************************************************************************

  data: FLAG_NOT_LOADED  type OS_BOOLEAN,
        BKEY_STRING      type STRING,
        TEMP_OBJECT_REF  type TYP_OBJECT_REF,
        BUSINESS_KEY     type TYP_BUSINESS_KEY,
        OBJECT_DATA_TAB  type TYP_DB_DATA_TAB,
        QUERY            type ref to IF_OS_QRY_SERVICE,
        WHERE_CLAUSE     type STRING,
        ORDER_BY_CLAUSE  type STRING.

  data: TEMP_CURRENT_OBJECT_IREF type ref to OBJECT.

  field-symbols: &lt;FS_OBJECT_DATA&gt;  type TYP_DB_DATA.

* * 1. Load data with query

  try.
      call method MAP_INITIALIZE_METADATA.

      QUERY ?= I_QUERY.

      call method QUERY-&gt;MAP
           exporting I_CLASS_AGENT = ME
                     I_MAP_ATT_TAB = MAP_ATT_INFO_TAB.

      call method QUERY-&gt;GET_ORDER_BY_CLAUSE
           receiving RESULT = ORDER_BY_CLAUSE.

      if ( I_PARAMETER_TAB is supplied ).

        if ( ( I_PAR1 is supplied ) or
             ( I_PAR2 is supplied ) or
             ( I_PAR3 is supplied ) ).

          raise exception type CX_OS_QUERY_PARAMETER_ERROR
            exporting TEXTID = CX_OS_QUERY_PARAMETER_ERROR=&gt;CALL_ERROR.

        endif.

        call method QUERY-&gt;GET_WHERE_CLAUSE
             exporting I_PARAMETER_TAB = I_PARAMETER_TAB
             receiving RESULT = WHERE_CLAUSE.

        call method MAP_LOAD_FROM_DATABASE
             exporting I_WHERE_CLAUSE    = WHERE_CLAUSE
                       I_ORDER_BY_CLAUSE = ORDER_BY_CLAUSE
                       I_SUBCLASSES      = I_SUBCLASSES
                       I_UPTO            = I_UPTO
             receiving result = OBJECT_DATA_TAB.

      else.

        call method QUERY-&gt;GET_WHERE_CLAUSE
             receiving RESULT = WHERE_CLAUSE.

        call method MAP_LOAD_FROM_DATABASE
             exporting I_WHERE_CLAUSE    = WHERE_CLAUSE
                       I_ORDER_BY_CLAUSE = ORDER_BY_CLAUSE
                       I_SUBCLASSES      = I_SUBCLASSES
                       I_UPTO            = I_UPTO
                       PAR1              = I_PAR1
                       PAR2              = I_PAR2
                       PAR3              = I_PAR3
             receiving result = OBJECT_DATA_TAB.

      endif.
    catch CX_OS_DB_SELECT.
      clear OBJECT_DATA_TAB.
  endtry.

* * 2. Set objects from data

  try.

*     * internal Undo
      append INTERNAL_NEXT_UNDO_INFO to INTERNAL_TRANSACTION_STACK.
      INTERNAL_CURRENT_TRANSACTION = SY-TABIX.

      loop at OBJECT_DATA_TAB assigning &lt;FS_OBJECT_DATA&gt;.

        call method MAP_EXTRACT_IDENTIFIER
             exporting I_DB_DATA  = &lt;FS_OBJECT_DATA&gt;
             importing E_BUSINESS_KEY = BUSINESS_KEY.

        clear CURRENT_OBJECT_IREF.

        read table SPECIAL_BKEY_TAB into CURRENT_SPECIAL_OBJECT_INFO
           with table key BUSINESS_KEY = BUSINESS_KEY.

        if ( SY-SUBRC = 0 ).

          read table SPECIAL_OBJECT_INFO
               into CURRENT_SPECIAL_OBJECT_INFO
               with table key
               OBJECT_ID = CURRENT_SPECIAL_OBJECT_INFO-OBJECT_ID.
          call method OS_LOAD_AND_VALIDATE_CURRENT
               exporting I_INDEX = SY-TABIX.

        endif.

        if ( not CURRENT_OBJECT_IREF is initial ).

*       * 2a. Object found: Check PM_STATUS

          case CURRENT_OBJECT_INFO-PM_STATUS.

*         * 2a1. If Status is DELETED, ignore or raise exception!
          when OSCON_OSTATUS_DELETED.

            if ( I_OPTIONS-DATABASE_QUERY_OPTIONS O
                 IF_OS_QUERY_OPTIONS=&gt;IGNORE_DELETED ).

              call method OS_CLEAR_CURRENT.
              continue.

            endif.

* !!!!!!!! Error: Object activation failed - Object marked for deletion
            TEMP_CURRENT_OBJECT_IREF = CURRENT_OBJECT_IREF.
            BKEY_STRING  = MAP_SERIALIZE_BKEY( BUSINESS_KEY ).
            call method OS_CLEAR_CURRENT.
            clear CURRENT_SPECIAL_OBJECT_INFO.
            class CX_OS_OBJECT_NOT_FOUND definition load.
            raise exception type CX_OS_OBJECT_NOT_FOUND
              exporting
                OBJECT = TEMP_CURRENT_OBJECT_IREF
                BKEY   = BKEY_STRING
                TEXTID = CX_OS_OBJECT_NOT_FOUND=&gt;DELETED_BY_BKEY.

*         * 2a2. If Status is TRANSIENT, error!
          when OSCON_OSTATUS_TRANSIENT.

* !!!!!!!!!! Error: Object activation failed - Object is transient
            TEMP_CURRENT_OBJECT_IREF = CURRENT_OBJECT_IREF.
            BKEY_STRING  = MAP_SERIALIZE_BKEY( BUSINESS_KEY ).
            call method OS_CLEAR_CURRENT.
            clear CURRENT_SPECIAL_OBJECT_INFO.
            class CX_OS_OBJECT_NOT_FOUND definition load.
            raise exception type CX_OS_OBJECT_NOT_FOUND
              exporting
                OBJECT = TEMP_CURRENT_OBJECT_IREF
                BKEY   = BKEY_STRING
                TEXTID = CX_OS_OBJECT_NOT_FOUND=&gt;IS_TRANSIENT_BY_BKEY.

*         * 2a3. If Status is CHANGED, don&apos;t replace or raise exception!
          when OSCON_OSTATUS_CHANGED.

            if ( I_OPTIONS-DATABASE_QUERY_OPTIONS O
                 IF_OS_QUERY_OPTIONS=&gt;REJECT_CHANGED ).

* !!!!!!!! Error: Object activation failed - Object marked as changed
            TEMP_CURRENT_OBJECT_IREF = CURRENT_OBJECT_IREF.
            BKEY_STRING  = MAP_SERIALIZE_BKEY( BUSINESS_KEY ).
            call method OS_CLEAR_CURRENT.
            clear CURRENT_SPECIAL_OBJECT_INFO.
            class CX_OS_OBJECT_NOT_FOUND definition load.
            raise exception type CX_OS_OBJECT_NOT_FOUND
              exporting
                OBJECT = TEMP_CURRENT_OBJECT_IREF
                BKEY   = BKEY_STRING
                TEXTID = CX_OS_OBJECT_NOT_FOUND=&gt;CHANGED_BY_BKEY.

            endif.

            FLAG_NOT_LOADED = OSCON_FALSE.

*         * 2a4. If Status is NOT_LOADED, replace
          when OSCON_OSTATUS_NOT_LOADED.

            FLAG_NOT_LOADED = OSCON_TRUE.

*         * 2a5. If Status is NEW or LOADED, don&apos;t replace
          when others.

            FLAG_NOT_LOADED = OSCON_FALSE.

          endcase.

        else.&quot; ( CURRENT_OBJECT_IREF is initial )

*       * 2b. Object not found, replace

          FLAG_NOT_LOADED = OSCON_TRUE.

        endif.

        TEMP_OBJECT_REF ?= CURRENT_OBJECT_IREF.

        if ( FLAG_NOT_LOADED = OSCON_TRUE ).

*         * 2c. Set attributes
          call method PM_CHECK_AND_SET_ATTRIBUTES
               exporting I_OBJECT_DATA  = &lt;FS_OBJECT_DATA&gt;
                         I_ID_PROVIDED  = ID_STATUS_NONE.

          TEMP_OBJECT_REF ?= CURRENT_OBJECT_IREF.

*         * 2d. Completion in super class
          call method OS_PM_LOADED_PERSISTENT.

        endif.

        append TEMP_OBJECT_REF to RESULT.

        call method OS_CLEAR_CURRENT.

      endloop.

*     * Clean-up internal Undo
      delete INTERNAL_TRANSACTION_STACK
             index INTERNAL_CURRENT_TRANSACTION.
      add -1 to INTERNAL_CURRENT_TRANSACTION.
      if ( INTERNAL_TRANSACTION_STACK is initial ).
        clear INTERNAL_UNDO_INFO.
        INTERNAL_NEXT_UNDO_INFO = 1.
      endif. &quot;( INTERNAL_TRANSACTION_STACK is initial? )

    cleanup.
      call method OS_INTERNAL_UNDO.
      call method OS_CLEAR_CURRENT.
      clear CURRENT_SPECIAL_OBJECT_INFO.
  endtry.

* * 3. clean up

  clear CURRENT_SPECIAL_OBJECT_INFO.


           &quot;IF_OS_CA_PERSISTENCY~GET_PERSISTENT_BY_QUERY
  endmethod.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCB_NAOCT_QTD_CTRLD" CPDNAME="IF_OS_CA_SERVICE~SAVE">
   <source>method IF_OS_CA_SERVICE~SAVE.
***BUILD 090501
************************************************************************
* Purpose        : Prepare data for database (buffer) transfer
*
* Version        : 2.0
*
* Precondition   : --
*
* Postcondition  : data is prepared for saving
*                  if UPDATE_MODE is direct, it is saved to DB
*                  if UPDATE_MODE is LOCAL or UPDATE_TASK,
*                    the corresponding function call is registered
*
* OO Exceptions  : propagates MAP_SAVE_TO_DATABASE
*                  propagates MAP_GET_ATTRIBUTES.
*
* Implementation :
*
************************************************************************
* Changelog:
* - 2000-03-02   : (BGR) Initial Version
* - 2000-08-02   : (SB) OO Exceptions
* - 2001-01-06   : (SB) Update with EXPORT TO DATA BUFFER
* - 2003-03-20   : (SB) post only if there dirty instances
************************************************************************

  data: NEW_OBJECT_REF_TAB       type TYP_OBJECT_REF_TAB,
        CHANGED_OBJECT_REF_TAB   type TYP_OBJECT_REF_TAB,
        INSERT_DATA_TAB          type TYP_DB_DATA_TAB ,
        INSERT_KEY_TAB           type TYP_BUSINESS_KEY_TAB,
        UPDATE_DATA_TAB          type TYP_DB_DATA_TAB ,
        UPDATE_KEY_TAB           type TYP_BUSINESS_KEY_TAB,
        DELETE_TAB               type TYP_DB_DELETE_TAB ,
        UPDATE_MODE              type OS_DMODE,
        OBJECT_REF               type TYP_OBJECT_REF,
        OBJECT_INDEX             type TYP_INDEX,
        XCONTAINER               type XSTRING.

  field-symbols:
          &lt;FS_OBJECT_INFO_ITEM&gt;         type TYP_OBJECT_INFO,
          &lt;FS_SPECIAL_OBJECT_INFO_ITEM&gt; type TYP_SPECIAL_OBJECT_INFO.

* * 1. get strong reference, BKey for all objects with status
* *    NEW, CHANGED or DELETED

  loop at OBJECT_INFO assigning &lt;FS_OBJECT_INFO_ITEM&gt; &quot;#EC CI_SORTSEQ
       where ( PM_STATUS = OSCON_OSTATUS_NEW or       &quot;#EC CI_SORTSEQ
               PM_STATUS = OSCON_OSTATUS_CHANGED or   &quot;#EC CI_SORTSEQ
               PM_STATUS = OSCON_OSTATUS_DELETED ) and &quot;#EC CI_SORTSEQ
               OM_IGNORE = OSCON_FALSE.               &quot;#EC CI_SORTSEQ

    OBJECT_INDEX = sy-tabix.

    case &lt;FS_OBJECT_INFO_ITEM&gt;-PM_STATUS.

      when OSCON_OSTATUS_NEW.

        read table SPECIAL_OBJECT_INFO
             assigning &lt;FS_SPECIAL_OBJECT_INFO_ITEM&gt;
             index OBJECT_INDEX.

        OBJECT_REF ?= &lt;FS_OBJECT_INFO_ITEM&gt;-OBJECT_IREF.
        append OBJECT_REF
            to NEW_OBJECT_REF_TAB.
        append &lt;FS_SPECIAL_OBJECT_INFO_ITEM&gt;-BUSINESS_KEY
            to INSERT_KEY_TAB.

      when OSCON_OSTATUS_CHANGED.

        read table SPECIAL_OBJECT_INFO
             assigning &lt;FS_SPECIAL_OBJECT_INFO_ITEM&gt;
             index OBJECT_INDEX.

        OBJECT_REF ?= &lt;FS_OBJECT_INFO_ITEM&gt;-OBJECT_IREF.
        append OBJECT_REF
            to CHANGED_OBJECT_REF_TAB.
        append &lt;FS_SPECIAL_OBJECT_INFO_ITEM&gt;-BUSINESS_KEY
            to UPDATE_KEY_TAB.

      when OSCON_OSTATUS_DELETED.

        read table SPECIAL_OBJECT_INFO
             assigning &lt;FS_SPECIAL_OBJECT_INFO_ITEM&gt;
             index OBJECT_INDEX.

        append &lt;FS_SPECIAL_OBJECT_INFO_ITEM&gt; to DELETE_TAB.

    endcase.&quot; Status

  endloop. &quot;at OBJECT_INFO


* * 2. get attributes for new and changed objects

* * New Objects
  if ( not NEW_OBJECT_REF_TAB is initial ).

    call method MAP_GET_ATTRIBUTES
         exporting I_OBJECT_REF_TAB  = NEW_OBJECT_REF_TAB
         importing E_OBJECT_DATA_TAB = INSERT_DATA_TAB.

    call method MAP_MERGE_IDENTIFIER
         exporting I_BUSINESS_KEY_TAB = INSERT_KEY_TAB
         changing  C_DB_DATA_TAB      = INSERT_DATA_TAB.

  endif. &quot;( not NEW_OBJECT_REF_TAB is initial ).

* * Changed Objects
  if ( not CHANGED_OBJECT_REF_TAB is initial ).

    call method MAP_GET_ATTRIBUTES
         exporting I_OBJECT_REF_TAB  = CHANGED_OBJECT_REF_TAB
         importing E_OBJECT_DATA_TAB = UPDATE_DATA_TAB.

    call method MAP_MERGE_IDENTIFIER
         exporting I_BUSINESS_KEY_TAB = UPDATE_KEY_TAB
         changing  C_DB_DATA_TAB      = UPDATE_DATA_TAB.

  endif. &quot;( not CHANGED_OBJECT_REF_TAB is initial ).

* * 3. perform or subscribe DB operations

  if ( ( INSERT_DATA_TAB is not initial ) or
       ( UPDATE_DATA_TAB is not initial ) or
       ( DELETE_TAB is not initial ) ).

    UPDATE_MODE = PERSISTENCY_MANAGER-&gt;GET_UPDATE_MODE(  ).
    if ( UPDATE_MODE = DMODE_DIRECT ).

*     * Direct DB operations
      call method MAP_SAVE_TO_DATABASE
           exporting I_INSERTS = INSERT_DATA_TAB
                     I_UPDATES = UPDATE_DATA_TAB
                     I_DELETES = DELETE_TAB.

    else.&quot; ( Update task )

*     * export data to be saved to DB to data buffer
      export
        INSERT_DATA_TAB = INSERT_DATA_TAB
        UPDATE_DATA_TAB = UPDATE_DATA_TAB
        DELETE_TAB      = DELETE_TAB
          to data buffer XCONTAINER.

*     * call update function in update task. this function
*     * calls the method if_os_ca_service~save_in_update_task
*     * of this class agent.
      call function &apos;OS_UPDATE_CLASS&apos; in update task
        exporting
          CLASSNAME = CLASS_INFO-CLASS_AGENT_NAME
          XCONTAINER = XCONTAINER.

    endif.&quot; (Update mode?)

  endif.&quot; (something to post?)

           &quot;IF_OS_CA_SERVICE~SAVE
  endmethod.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCB_NAOCT_QTD_CTRLD" CPDNAME="IF_OS_CA_SERVICE~SAVE_IN_UPDATE_TASK">
   <source>method IF_OS_CA_SERVICE~SAVE_IN_UPDATE_TASK.
***BUILD 090501
     &quot; importing XCONTAINER type XSTRING optional
************************************************************************
* Purpose        : save object data to DB when running in update task
*                  mode.
*
* Version        : 2.0
*
* Precondition   : no object service environment is set, no objects
*                  exist in update task
*
* Postcondition  : data has been saved to DB
*
* OO Exceptions  : propagates MAP_SAVE_TO_DATABASE
*
* Implementation :
*
************************************************************************
* Changelog:
* - 2000-03-02   : (BGR) Initial Version
* - 2000-08-02   : (SB) OO Exceptions
* - 2001-01-06   : (SB) Update with EXPORT TO DATA BUFFER
************************************************************************

  data: INSERT_DATA_TAB       type TYP_DB_DATA_TAB ,
        UPDATE_DATA_TAB       type TYP_DB_DATA_TAB ,
        DELETE_TAB            type TYP_DB_DELETE_TAB .

* * import data to be saved to DB from data buffer
  import
    INSERT_DATA_TAB = INSERT_DATA_TAB
    UPDATE_DATA_TAB = UPDATE_DATA_TAB
    DELETE_TAB      = DELETE_TAB
      from data buffer XCONTAINER.

* * store them to DB
  call method MAP_SAVE_TO_DATABASE
       exporting I_INSERTS = INSERT_DATA_TAB
                 I_UPDATES = UPDATE_DATA_TAB
                 I_DELETES = DELETE_TAB.

           &quot;IF_OS_CA_SERVICE~SAVE_IN_UPDATE_TASK
  endmethod.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCB_NAOCT_QTD_CTRLD" CPDNAME="IF_OS_FACTORY~CREATE_PERSISTENT_BY_KEY">
   <source>method IF_OS_FACTORY~CREATE_PERSISTENT_BY_KEY.
***BUILD 093901
*      importing I_KEY type any
*      returning result type ref to object
************************************************************************
* Purpose        : Create a new persistent object identified by the
*                  given business key
*
* Version        : 2.0
*
* Precondition   : No object exists with the given business key, neither
*                  in memory nor on database.
*
* Postcondition  : The object exists in memory and will result in a
*                  new entry on database when the top transaction is
*                  closed.
*
* OO Exceptions  : propagates CREATE_PERSISTENT
*
* Implementation : call CREATE_PERSISTENT
*
************************************************************************
* Changelog:
* - 2000-03-06   : (BGR) Initial Version 2.0
* - 2000-08-02   : (SB)  OO Exceptions
************************************************************************

  data: BUSINESS_KEY             type TYP_BUSINESS_KEY.

  BUSINESS_KEY = I_KEY.

*&lt; Generated from mapping:
  call method CREATE_PERSISTENT
       exporting I_SPART = BUSINESS_KEY-SPART
                 I_KUNNR = BUSINESS_KEY-KUNNR
                 I_ZZDEAL_CODE = BUSINESS_KEY-ZZDEAL_CODE
                 I_ENDDT = BUSINESS_KEY-ENDDT
                 I_VBELN = BUSINESS_KEY-VBELN
                 I_POSNR = BUSINESS_KEY-POSNR
       receiving RESULT = RESULT.
*&gt;

           &quot;IF_OS_FACTORY~CREATE_PERSISTENT_BY_KEY
  endmethod.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCB_NAOCT_QTD_CTRLD" CPDNAME="IF_OS_FACTORY~CREATE_TRANSIENT_BY_KEY">
   <source>method IF_OS_FACTORY~CREATE_TRANSIENT_BY_KEY.
***BUILD 093901
*      importing I_KEY type any
*      returning result type ref to object
************************************************************************
* Purpose        : Create a new transient object identified by the
*                  given business key
*
* Version        : 2.0
*
* Precondition   : No object exists with the given business key
*
* Postcondition  : The object exists in memory
*
* OO Exceptions  : propagates CREATE_TRANSIENT
*
* Implementation : call CREATE_TRANSIENT
*
************************************************************************
* Changelog:
* - 2001-01-01   : (SB)  Initial Version 2.0
************************************************************************

  data: BUSINESS_KEY             type TYP_BUSINESS_KEY.

  BUSINESS_KEY = I_KEY.

*&lt; Generated from mapping:
  call method CREATE_TRANSIENT
       exporting I_SPART = BUSINESS_KEY-SPART
                 I_KUNNR = BUSINESS_KEY-KUNNR
                 I_ZZDEAL_CODE = BUSINESS_KEY-ZZDEAL_CODE
                 I_ENDDT = BUSINESS_KEY-ENDDT
                 I_VBELN = BUSINESS_KEY-VBELN
                 I_POSNR = BUSINESS_KEY-POSNR
       receiving RESULT = RESULT.
*&gt;

           &quot;IF_OS_FACTORY~CREATE_TRANSIENT_BY_KEY
  endmethod.</source>
  </interfaceMethod>
  <method CLSNAME="ZCB_NAOCT_QTD_CTRLD" CMPNAME="CREATE_PERSISTENT" VERSION="1" LANGU="E" DESCRIPT="Generate New Persistent Object with Key" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCB_NAOCT_QTD_CTRLD" CMPNAME="CREATE_PERSISTENT" SCONAME="I_SPART" VERSION="1" LANGU="E" DESCRIPT="Business Key" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SPART"/>
   <parameter CLSNAME="ZCB_NAOCT_QTD_CTRLD" CMPNAME="CREATE_PERSISTENT" SCONAME="I_KUNNR" VERSION="1" LANGU="E" DESCRIPT="Business Key" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="KUNNR"/>
   <parameter CLSNAME="ZCB_NAOCT_QTD_CTRLD" CMPNAME="CREATE_PERSISTENT" SCONAME="I_ZZDEAL_CODE" VERSION="1" LANGU="E" DESCRIPT="Business Key" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZGLOC_DEAL_CODE"/>
   <parameter CLSNAME="ZCB_NAOCT_QTD_CTRLD" CMPNAME="CREATE_PERSISTENT" SCONAME="I_ENDDT" VERSION="1" LANGU="E" DESCRIPT="Business Key" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZNAOCE_DEAL_END"/>
   <parameter CLSNAME="ZCB_NAOCT_QTD_CTRLD" CMPNAME="CREATE_PERSISTENT" SCONAME="I_VBELN" VERSION="1" LANGU="E" DESCRIPT="Business Key" CMPTYPE="1" MTDTYPE="0" EDITORDER="5 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="VBELN_VA"/>
   <parameter CLSNAME="ZCB_NAOCT_QTD_CTRLD" CMPNAME="CREATE_PERSISTENT" SCONAME="I_POSNR" VERSION="1" LANGU="E" DESCRIPT="Business Key" CMPTYPE="1" MTDTYPE="0" EDITORDER="6 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="POSNR_VA"/>
   <parameter CLSNAME="ZCB_NAOCT_QTD_CTRLD" CMPNAME="CREATE_PERSISTENT" SCONAME="RESULT" VERSION="1" LANGU="E" DESCRIPT="Newly Generated Persistent Object" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_NAOCT_QTD_CTRLD"/>
   <exception CLSNAME="ZCB_NAOCT_QTD_CTRLD" CMPNAME="CREATE_PERSISTENT" SCONAME="CX_OS_OBJECT_EXISTING" VERSION="1" LANGU="E" DESCRIPT="Object Services Exception" MTDTYPE="0" EDITORDER="0 "/>
   <source>method CREATE_PERSISTENT.
***BUILD 093901
*      IMPORTING I_SPART TYPE SPART
*      IMPORTING I_KUNNR TYPE KUNNR
*      IMPORTING I_ZZDEAL_CODE TYPE ZGLOC_DEAL_CODE
*      IMPORTING I_ENDDT TYPE ZNAOCE_DEAL_END
*      IMPORTING I_VBELN TYPE VBELN_VA
*      IMPORTING I_POSNR TYPE POSNR_VA
*      RETURNING RESULT TYPE REF TO ZCL_NAOCT_QTD_CTRLD
************************************************************************
* Purpose        : Create a new persistent object identified by the
*                  given business key
*
* Version        : 2.0
*
* Precondition   : No object exists with the given business key, neither
*                  in memory nor on database.
*
* Postcondition  : The object exists in memory and will result in a
*                  new entry on database when the top transaction is
*                  closed.
*
* OO Exceptions  : CX_OS_OBJECT_EXISTING(
*                            PERSISTENT_CREATING_PERSISTENT,
*                            TRANSIENT_CREATING_PERSISTENT)
*                  propagates OS_PM_CREATED_PERSISTENT
*
* Implementation : 1. Check if there is already an object with the
*                     same key
*                  2. If there is one, let OS_PM_HANDLE_CREATE_ON_EXIST
*                     decide if it is allowed to re-use the object
*                  3. If there is none, create a new object
*                  4. Set Attributes
*                  5. Register the object as NEW and initialize it
*                  6. Clean up
*
************************************************************************
* Changelog:
* - 2000-03-06   : (BGR) Initial Version 2.0
* - 2000-08-03   : (SB)  OO Exceptions
* - 2001-01-10   : (SB)  persistent attributes as optional parameters
* - 2001-10-30   : (SB)  type mapping
* - 2002-01-17   : (SB)  private attributes in super classes
* - 2003-04-28   : (SB)  reuse of instances reimplemented
************************************************************************

  data: THE_OBJECT   type        TYP_OBJECT_REF,
        BUSINESS_KEY type        TYP_BUSINESS_KEY,
        BKEY_STRING  type        STRING.

  data: TEMP_CURRENT_OBJECT_IREF type ref to object.

  clear CURRENT_OBJECT_IREF.

*&lt; Generated from mapping:
  BUSINESS_KEY-SPART = I_SPART.
  BUSINESS_KEY-KUNNR = I_KUNNR.
  BUSINESS_KEY-ZZDEAL_CODE = I_ZZDEAL_CODE.
  BUSINESS_KEY-ENDDT = I_ENDDT.
  BUSINESS_KEY-VBELN = I_VBELN.
  BUSINESS_KEY-POSNR = I_POSNR.
*&gt;

* * 1. Check if there is already an object with this key
  read table SPECIAL_BKEY_TAB into CURRENT_SPECIAL_OBJECT_INFO
       with table key BUSINESS_KEY = BUSINESS_KEY.

  if ( SY-SUBRC = 0 ).

    read table SPECIAL_OBJECT_INFO into CURRENT_SPECIAL_OBJECT_INFO
         with table key
         OBJECT_ID = CURRENT_SPECIAL_OBJECT_INFO-OBJECT_ID.
    call method OS_LOAD_AND_VALIDATE_CURRENT
         exporting I_INDEX = SY-TABIX.

  endif. &quot;( entry found )

  if ( not CURRENT_OBJECT_IREF is initial ).

*   * 2. Found an entry. Check if it is allowed to re-use it
    THE_OBJECT ?= CURRENT_OBJECT_IREF.

    case CURRENT_OBJECT_INFO-PM_STATUS.

    when OSCON_OSTATUS_DELETED or
        OSCON_OSTATUS_NOT_LOADED.

      try.

*&lt;  Generated from mapping:
          THE_OBJECT-&gt;SPART = I_SPART.
          THE_OBJECT-&gt;KUNNR = I_KUNNR.
          THE_OBJECT-&gt;ZZDEAL_CODE = I_ZZDEAL_CODE.
          THE_OBJECT-&gt;ENDDT = I_ENDDT.
          THE_OBJECT-&gt;VBELN = I_VBELN.
          THE_OBJECT-&gt;POSNR = I_POSNR.
*&gt;

          call method OS_PM_HANDLE_CREATE_ON_EXIST
               exporting I_TRANSIENT = OSCON_FALSE.

        cleanup.
          clear CURRENT_SPECIAL_OBJECT_INFO.
          call method OS_CLEAR_CURRENT.
      endtry.

    when OSCON_OSTATUS_TRANSIENT.

      TEMP_CURRENT_OBJECT_IREF = CURRENT_OBJECT_IREF.
      BKEY_STRING  = MAP_SERIALIZE_BKEY( BUSINESS_KEY ).
      call method OS_CLEAR_CURRENT.
      clear CURRENT_SPECIAL_OBJECT_INFO.
      class CX_OS_OBJECT_EXISTING definition load.
      raise exception type CX_OS_OBJECT_EXISTING
        exporting
          OBJECT = TEMP_CURRENT_OBJECT_IREF
          BKEY   = BKEY_STRING
          TEXTID =
            CX_OS_OBJECT_EXISTING=&gt;TRANSIENT_CREATING_PERSISTENT.

    when others.

      TEMP_CURRENT_OBJECT_IREF = CURRENT_OBJECT_IREF.
      BKEY_STRING  = MAP_SERIALIZE_BKEY( BUSINESS_KEY ).
      call method OS_CLEAR_CURRENT.
      clear CURRENT_SPECIAL_OBJECT_INFO.
      class CX_OS_OBJECT_EXISTING definition load.
      raise exception type CX_OS_OBJECT_EXISTING
        exporting
          OBJECT = TEMP_CURRENT_OBJECT_IREF
          BKEY   = BKEY_STRING
          TEXTID =
            CX_OS_OBJECT_EXISTING=&gt;PERSISTENT_CREATING_PERSISTENT.

    endcase.

  else. &quot;( No entry found )

*   * 3. Create a new object
    THE_OBJECT = PM_CREATE_REPRESENTANT(
                   I_BUSINESS_KEY = BUSINESS_KEY ).

*   * 4. Set attributes
*&lt;   Generated from mapping:
*&gt;

*   * 5. register object as &apos;NEW&apos; and initialize it.
    call method OS_PM_CREATED_PERSISTENT.

  endif. &quot;( Eintrag vorhanden )

* * 6. Clean-up
  clear CURRENT_SPECIAL_OBJECT_INFO.
  RESULT = THE_OBJECT.

           &quot;CREATE_PERSISTENT
  endmethod.</source>
  </method>
  <method CLSNAME="ZCB_NAOCT_QTD_CTRLD" CMPNAME="CREATE_TRANSIENT" VERSION="1" LANGU="E" DESCRIPT="Generate Transient Object with Key" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCB_NAOCT_QTD_CTRLD" CMPNAME="CREATE_TRANSIENT" SCONAME="I_SPART" VERSION="1" LANGU="E" DESCRIPT="Business Key" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SPART"/>
   <parameter CLSNAME="ZCB_NAOCT_QTD_CTRLD" CMPNAME="CREATE_TRANSIENT" SCONAME="I_KUNNR" VERSION="1" LANGU="E" DESCRIPT="Business Key" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="KUNNR"/>
   <parameter CLSNAME="ZCB_NAOCT_QTD_CTRLD" CMPNAME="CREATE_TRANSIENT" SCONAME="I_ZZDEAL_CODE" VERSION="1" LANGU="E" DESCRIPT="Business Key" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZGLOC_DEAL_CODE"/>
   <parameter CLSNAME="ZCB_NAOCT_QTD_CTRLD" CMPNAME="CREATE_TRANSIENT" SCONAME="I_ENDDT" VERSION="1" LANGU="E" DESCRIPT="Business Key" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZNAOCE_DEAL_END"/>
   <parameter CLSNAME="ZCB_NAOCT_QTD_CTRLD" CMPNAME="CREATE_TRANSIENT" SCONAME="I_VBELN" VERSION="1" LANGU="E" DESCRIPT="Business Key" CMPTYPE="1" MTDTYPE="0" EDITORDER="5 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="VBELN_VA"/>
   <parameter CLSNAME="ZCB_NAOCT_QTD_CTRLD" CMPNAME="CREATE_TRANSIENT" SCONAME="I_POSNR" VERSION="1" LANGU="E" DESCRIPT="Business Key" CMPTYPE="1" MTDTYPE="0" EDITORDER="6 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="POSNR_VA"/>
   <parameter CLSNAME="ZCB_NAOCT_QTD_CTRLD" CMPNAME="CREATE_TRANSIENT" SCONAME="RESULT" VERSION="1" LANGU="E" DESCRIPT="Newly Generated Transient Object" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_NAOCT_QTD_CTRLD"/>
   <exception CLSNAME="ZCB_NAOCT_QTD_CTRLD" CMPNAME="CREATE_TRANSIENT" SCONAME="CX_OS_OBJECT_EXISTING" VERSION="1" LANGU="E" DESCRIPT="Object Services Exception" MTDTYPE="0" EDITORDER="0 "/>
   <source>method CREATE_TRANSIENT.
***BUILD 093901
*      IMPORTING I_SPART TYPE SPART
*      IMPORTING I_KUNNR TYPE KUNNR
*      IMPORTING I_ZZDEAL_CODE TYPE ZGLOC_DEAL_CODE
*      IMPORTING I_ENDDT TYPE ZNAOCE_DEAL_END
*      IMPORTING I_VBELN TYPE VBELN_VA
*      IMPORTING I_POSNR TYPE POSNR_VA
*      RETURNING RESULT TYPE REF TO ZCL_NAOCT_QTD_CTRLD
************************************************************************
* Purpose        : Create a new transient object identified by the
*                  given business key
*
* Version        : 2.0
*
* Precondition   : No object exists with the given business key, neither
*                  in memory nor on database.
*
* Postcondition  : The object exists in memory until it is RELEASEd
*
* OO Exceptions  : CX_OS_OBJECT_EXISTING(
*                            PERSISTENT_CREATING_TRANSIENT,
*                            TRANSIENT_CREATING_TRANSIENT)
*                  propagates OS_PM_CREATED_TRANSIENT
*
* Implementation : 1. Check if there is already an object with the
*                     same key
*                  2. If there is one, let OS_PM_HANDLE_CREATE_ON_EXIST
*                     decide if it is allowed to re-use the object
*                  3. If there is none, create a new object
*                  4. Set Attributes
*                  5. Register the object as TRANSIENT and initialize it
*                  6. Clean up
*
************************************************************************
* Changelog:
* - 2000-03-06   : (BGR) Initial Version 2.0
* - 2000-08-02   : (SB)  OO Exceptions
* - 2001-01-10   : (SB)  persistent attributes as optional parameters
* - 2001-10-30   : (SB)  type mapping
* - 2002-01-17   : (SB)  private attributes in super classes
* - 2003-04-28   : (SB)  reuse of instances reimplemented
************************************************************************

  data: THE_OBJECT   type        TYP_OBJECT_REF,
        BUSINESS_KEY type        TYP_BUSINESS_KEY,
        BKEY_STRING  type        STRING.

  data: TEMP_CURRENT_OBJECT_IREF type ref to object.

  clear CURRENT_OBJECT_IREF.

*&lt; Generated from mapping:
  BUSINESS_KEY-SPART = I_SPART.
  BUSINESS_KEY-KUNNR = I_KUNNR.
  BUSINESS_KEY-ZZDEAL_CODE = I_ZZDEAL_CODE.
  BUSINESS_KEY-ENDDT = I_ENDDT.
  BUSINESS_KEY-VBELN = I_VBELN.
  BUSINESS_KEY-POSNR = I_POSNR.
*&gt;

* * 1. Check if there is already an object with the same key

  read table SPECIAL_BKEY_TAB into CURRENT_SPECIAL_OBJECT_INFO
       with table key BUSINESS_KEY = BUSINESS_KEY.

  if ( SY-SUBRC = 0 ).

    read table SPECIAL_OBJECT_INFO into CURRENT_SPECIAL_OBJECT_INFO
         with table key
         OBJECT_ID = CURRENT_SPECIAL_OBJECT_INFO-OBJECT_ID.
    call method OS_LOAD_AND_VALIDATE_CURRENT
         exporting I_INDEX = SY-TABIX.

  endif. &quot;( entry found )

  if ( not CURRENT_OBJECT_IREF is initial ).

*   * 2. Found an entry. Check if it is allowed to re-use it
    THE_OBJECT ?= CURRENT_OBJECT_IREF.

    case CURRENT_OBJECT_INFO-PM_STATUS.

    when OSCON_OSTATUS_DELETED or
        OSCON_OSTATUS_NOT_LOADED.

      try.

*&lt;  Generated from mapping:
          THE_OBJECT-&gt;SPART = I_SPART.
          THE_OBJECT-&gt;KUNNR = I_KUNNR.
          THE_OBJECT-&gt;ZZDEAL_CODE = I_ZZDEAL_CODE.
          THE_OBJECT-&gt;ENDDT = I_ENDDT.
          THE_OBJECT-&gt;VBELN = I_VBELN.
          THE_OBJECT-&gt;POSNR = I_POSNR.
*&gt;

          call method OS_PM_HANDLE_CREATE_ON_EXIST
               exporting I_TRANSIENT = OSCON_TRUE.

        cleanup.
          clear CURRENT_SPECIAL_OBJECT_INFO.
          call method OS_CLEAR_CURRENT.
      endtry.

    when OSCON_OSTATUS_TRANSIENT.

      TEMP_CURRENT_OBJECT_IREF = CURRENT_OBJECT_IREF.
      BKEY_STRING  = MAP_SERIALIZE_BKEY( BUSINESS_KEY ).
      call method OS_CLEAR_CURRENT.
      clear CURRENT_SPECIAL_OBJECT_INFO.
      class CX_OS_OBJECT_EXISTING definition load.
      raise exception type CX_OS_OBJECT_EXISTING
        exporting
          OBJECT = TEMP_CURRENT_OBJECT_IREF
          BKEY   = BKEY_STRING
          TEXTID =
            CX_OS_OBJECT_EXISTING=&gt;TRANSIENT_CREATING_TRANSIENT.

    when others.

      TEMP_CURRENT_OBJECT_IREF = CURRENT_OBJECT_IREF.
      BKEY_STRING  = MAP_SERIALIZE_BKEY( BUSINESS_KEY ).
      call method OS_CLEAR_CURRENT.
      clear CURRENT_SPECIAL_OBJECT_INFO.
      class CX_OS_OBJECT_EXISTING definition load.
      raise exception type CX_OS_OBJECT_EXISTING
        exporting
          OBJECT = TEMP_CURRENT_OBJECT_IREF
          BKEY   = BKEY_STRING
          TEXTID =
            CX_OS_OBJECT_EXISTING=&gt;PERSISTENT_CREATING_TRANSIENT.

    endcase.

  else. &quot;( Noch kein Eintrag )

*   * 3. If there is none, create a new object
    THE_OBJECT = PM_CREATE_REPRESENTANT(
                   I_BUSINESS_KEY = BUSINESS_KEY ).

*   * 4. Set attributes
*&lt;   Generated from mapping:
*&gt;

*   * 5. Register the object as TRANSIENT and initialize it
    call method OS_PM_CREATED_TRANSIENT.

  endif. &quot;( Eintrag vorhanden )

* * 6. Clean up
  clear CURRENT_SPECIAL_OBJECT_INFO.
  RESULT = THE_OBJECT.

           &quot;CREATE_TRANSIENT
  endmethod.</source>
  </method>
  <method CLSNAME="ZCB_NAOCT_QTD_CTRLD" CMPNAME="DELETE_PERSISTENT" VERSION="1" LANGU="E" DESCRIPT="Deletes Persistent Object with Key" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCB_NAOCT_QTD_CTRLD" CMPNAME="DELETE_PERSISTENT" SCONAME="I_SPART" VERSION="1" LANGU="E" DESCRIPT="Business Key" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SPART"/>
   <parameter CLSNAME="ZCB_NAOCT_QTD_CTRLD" CMPNAME="DELETE_PERSISTENT" SCONAME="I_KUNNR" VERSION="1" LANGU="E" DESCRIPT="Business Key" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="KUNNR"/>
   <parameter CLSNAME="ZCB_NAOCT_QTD_CTRLD" CMPNAME="DELETE_PERSISTENT" SCONAME="I_ZZDEAL_CODE" VERSION="1" LANGU="E" DESCRIPT="Business Key" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZGLOC_DEAL_CODE"/>
   <parameter CLSNAME="ZCB_NAOCT_QTD_CTRLD" CMPNAME="DELETE_PERSISTENT" SCONAME="I_ENDDT" VERSION="1" LANGU="E" DESCRIPT="Business Key" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZNAOCE_DEAL_END"/>
   <parameter CLSNAME="ZCB_NAOCT_QTD_CTRLD" CMPNAME="DELETE_PERSISTENT" SCONAME="I_VBELN" VERSION="1" LANGU="E" DESCRIPT="Business Key" CMPTYPE="1" MTDTYPE="0" EDITORDER="5 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="VBELN_VA"/>
   <parameter CLSNAME="ZCB_NAOCT_QTD_CTRLD" CMPNAME="DELETE_PERSISTENT" SCONAME="I_POSNR" VERSION="1" LANGU="E" DESCRIPT="Business Key" CMPTYPE="1" MTDTYPE="0" EDITORDER="6 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="POSNR_VA"/>
   <exception CLSNAME="ZCB_NAOCT_QTD_CTRLD" CMPNAME="DELETE_PERSISTENT" SCONAME="CX_OS_OBJECT_NOT_EXISTING" VERSION="1" LANGU="E" DESCRIPT="Object Services Exception" MTDTYPE="0" EDITORDER="0 "/>
   <source>method DELETE_PERSISTENT.
***BUILD 093901
*      IMPORTING I_SPART TYPE SPART.
*      IMPORTING I_KUNNR TYPE KUNNR.
*      IMPORTING I_ZZDEAL_CODE TYPE ZGLOC_DEAL_CODE.
*      IMPORTING I_ENDDT TYPE ZNAOCE_DEAL_END.
*      IMPORTING I_VBELN TYPE VBELN_VA.
*      IMPORTING I_POSNR TYPE POSNR_VA.
*      raising   CX_OS_OBJECT_NOT_EXISTING
************************************************************************
* Purpose        : Delete persistent object. It is marked DELETED in
*                  memory and removed from DB when the top transaction
*                  is closed.
*
* Version        : 2.0
*
* Precondition   : The object is persistent (not transient)
*
* Postcondition  : Instance is marked for deletion.
*
* OO Exceptions  : CX_OS_OBJECT_NOT_EXISTING(TRANSIENT_BY_BKEY,
*                  CREATED_AND_DELETED_BY_BKEY,BY_BKEY)
*                  ( propagates PM_LOAD_AND_SET_ATTRIBUTES )
*                  propagates PM_DELETE_PERSISTENT
*
* Implementation : 1. Check if there is already an object with that
*                     business key
*                  2. If not: create representative object and check
*                     if there is an entry on DB (Need to be sure that
*                     no other object exists with the OID that belongs
*                     to the given Business Key)
*                  3. If it already exists: call PM_DELETE_PERSISTENT
*
************************************************************************
* Changelog:
* - 1999-09-21   : (OS)  Initial Version
* - 2000-03-06   : (BGR) Version 2.0
* - 2000-08-03   : (SB)  OO Exceptions
* - 2000-10-30   : (SB)  Type Mapping
************************************************************************

  data: BUSINESS_KEY type TYP_BUSINESS_KEY .
  data: EX_OS_OBJECT_NOT_FOUND type ref to CX_OS_OBJECT_NOT_FOUND.
  data: EX_OS_OBJECT_STATE type ref to CX_OS_OBJECT_STATE.
  data: BKEY_STRING type STRING.

* 1. Check if there is already an object with that business key

  clear: CURRENT_OBJECT_IREF,
         CURRENT_SPECIAL_OBJECT_INFO.

*&lt; Generated from mapping:
  BUSINESS_KEY-SPART = I_SPART.
  BUSINESS_KEY-KUNNR = I_KUNNR.
  BUSINESS_KEY-ZZDEAL_CODE = I_ZZDEAL_CODE.
  BUSINESS_KEY-ENDDT = I_ENDDT.
  BUSINESS_KEY-VBELN = I_VBELN.
  BUSINESS_KEY-POSNR = I_POSNR.
*&gt;

  read table SPECIAL_BKEY_TAB into CURRENT_SPECIAL_OBJECT_INFO
       with table key BUSINESS_KEY = BUSINESS_KEY.

  if ( SY-SUBRC = 0 ).

    read table SPECIAL_OBJECT_INFO into CURRENT_SPECIAL_OBJECT_INFO
         with table key
         OBJECT_ID = CURRENT_SPECIAL_OBJECT_INFO-OBJECT_ID.
    call method OS_LOAD_AND_VALIDATE_CURRENT
         exporting I_INDEX = SY-TABIX.

  endif.

  if ( CURRENT_OBJECT_IREF is initial ).

*   * 2. If not: create representative object and check
*   *    if there is an entry on DB (Need to be sure that
*   *    no other object exists with the OID that belongs
*   *    to the given Business Key)

    try.

        call method PM_LOAD_AND_SET_ATTRIBUTES
             exporting I_BUSINESS_KEY = BUSINESS_KEY.

      catch CX_OS_OBJECT_NOT_FOUND into EX_OS_OBJECT_NOT_FOUND.
*       * If the object is not found by key - raise object not existing
*       * by key. If a reference has a illegal class GUID (i.e. object
*       * not found by ref error) - ignore.
        if ( EX_OS_OBJECT_NOT_FOUND-&gt;TEXTID =
             CX_OS_OBJECT_NOT_FOUND=&gt;BY_BKEY ).
          call method OS_CLEAR_CURRENT.
          class CX_OS_OBJECT_NOT_EXISTING definition load.
          raise exception type CX_OS_OBJECT_NOT_EXISTING
            exporting
              BKEY   = EX_OS_OBJECT_NOT_FOUND-&gt;BKEY
              TABLE  = EX_OS_OBJECT_NOT_FOUND-&gt;TABLE
              TEXTID = CX_OS_OBJECT_NOT_EXISTING=&gt;BY_BKEY.
        endif.

      cleanup.
        call method OS_CLEAR_CURRENT.

    endtry.



  endif.&quot; ( No Entry in administrative data? )


* * 3. If it already exists: call PM_DELETE_PERSISTENT
  if not ( CURRENT_OBJECT_IREF is initial ).

    try.

        call method PM_DELETE_PERSISTENT.

      catch CX_OS_OBJECT_STATE into EX_OS_OBJECT_STATE.
      if ( EX_OS_OBJECT_STATE-&gt;TEXTID =
           CX_OS_OBJECT_STATE=&gt;TRANSIENT ).
        BKEY_STRING  = MAP_SERIALIZE_BKEY( BUSINESS_KEY ).
        class CX_OS_OBJECT_NOT_EXISTING definition load.
        raise exception type CX_OS_OBJECT_NOT_EXISTING
          exporting
            BKEY   = BKEY_STRING
            TEXTID = CX_OS_OBJECT_NOT_EXISTING=&gt;TRANSIENT_BY_BKEY.
      endif.

      if ( EX_OS_OBJECT_STATE-&gt;TEXTID =
           CX_OS_OBJECT_STATE=&gt;CREATED_AND_DELETED ).
        BKEY_STRING  = MAP_SERIALIZE_BKEY( BUSINESS_KEY ).
        class CX_OS_OBJECT_NOT_EXISTING definition load.
        raise exception type CX_OS_OBJECT_NOT_EXISTING
          exporting
            BKEY   = BKEY_STRING
            TEXTID =
              CX_OS_OBJECT_NOT_EXISTING=&gt;CREATED_AND_DELETED_BY_BKEY.
      endif.

    endtry.

  endif.
           &quot;DELETE_PERSISTENT
  endmethod.</source>
  </method>
  <method CLSNAME="CL_OS_CA_COMMON" CMPNAME="DELETE_SPECIAL_OBJECT_INFO" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method DELETE_SPECIAL_OBJECT_INFO.
***BUILD 090501
************************************************************************
* Purpose        : Delete current entry SPECIAL_OBJECT_INFO
*
* Version        : 2.0
*
* Precondition   : Index is set in CURRENT_OBJECT_INDEX
*
* Postcondition  : entry is deleted
*
* OO Exceptions  : --
*
* Implementation :
*
************************************************************************
* Changelog:
* - 2000-03-02   : (BGR) Initial Version
* - 2001-10-30   : (SB)  Type Mapping
************************************************************************

  read table SPECIAL_OBJECT_INFO into CURRENT_SPECIAL_OBJECT_INFO
       index CURRENT_OBJECT_INDEX.

  delete table SPECIAL_BKEY_TAB
    with table key
      BUSINESS_KEY = CURRENT_SPECIAL_OBJECT_INFO-BUSINESS_KEY.

  delete SPECIAL_OBJECT_INFO index CURRENT_OBJECT_INDEX.
  clear CURRENT_SPECIAL_OBJECT_INFO.

           &quot;DELETE_SPECIAL_OBJECT_INFO
  endmethod.</source>
  </method>
  <method CLSNAME="ZCB_NAOCT_QTD_CTRLD" CMPNAME="GET_PERSISTENT" VERSION="1" LANGU="E" DESCRIPT="Get Persistent Object with Key" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCB_NAOCT_QTD_CTRLD" CMPNAME="GET_PERSISTENT" SCONAME="I_SPART" VERSION="1" LANGU="E" DESCRIPT="Business Key" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SPART"/>
   <parameter CLSNAME="ZCB_NAOCT_QTD_CTRLD" CMPNAME="GET_PERSISTENT" SCONAME="I_KUNNR" VERSION="1" LANGU="E" DESCRIPT="Business Key" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="KUNNR"/>
   <parameter CLSNAME="ZCB_NAOCT_QTD_CTRLD" CMPNAME="GET_PERSISTENT" SCONAME="I_ZZDEAL_CODE" VERSION="1" LANGU="E" DESCRIPT="Business Key" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZGLOC_DEAL_CODE"/>
   <parameter CLSNAME="ZCB_NAOCT_QTD_CTRLD" CMPNAME="GET_PERSISTENT" SCONAME="I_ENDDT" VERSION="1" LANGU="E" DESCRIPT="Business Key" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZNAOCE_DEAL_END"/>
   <parameter CLSNAME="ZCB_NAOCT_QTD_CTRLD" CMPNAME="GET_PERSISTENT" SCONAME="I_VBELN" VERSION="1" LANGU="E" DESCRIPT="Business Key" CMPTYPE="1" MTDTYPE="0" EDITORDER="5 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="VBELN_VA"/>
   <parameter CLSNAME="ZCB_NAOCT_QTD_CTRLD" CMPNAME="GET_PERSISTENT" SCONAME="I_POSNR" VERSION="1" LANGU="E" DESCRIPT="Business Key" CMPTYPE="1" MTDTYPE="0" EDITORDER="6 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="POSNR_VA"/>
   <parameter CLSNAME="ZCB_NAOCT_QTD_CTRLD" CMPNAME="GET_PERSISTENT" SCONAME="RESULT" VERSION="1" LANGU="E" DESCRIPT="Persistent Object" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_NAOCT_QTD_CTRLD"/>
   <exception CLSNAME="ZCB_NAOCT_QTD_CTRLD" CMPNAME="GET_PERSISTENT" SCONAME="CX_OS_OBJECT_NOT_FOUND" VERSION="1" LANGU="E" DESCRIPT="Object Services Exception" MTDTYPE="0" EDITORDER="0 "/>
   <source>method GET_PERSISTENT.
***BUILD 093901
*      importing I_SPART TYPE SPART.
*      importing I_KUNNR TYPE KUNNR.
*      importing I_ZZDEAL_CODE TYPE ZGLOC_DEAL_CODE.
*      importing I_ENDDT TYPE ZNAOCE_DEAL_END.
*      importing I_VBELN TYPE VBELN_VA.
*      importing I_POSNR TYPE POSNR_VA.
*      returning RESULT TYPE REF TO ZCL_NAOCT_QTD_CTRLD
*       raising   CX_OS_OBJECT_NOT_FOUND
************************************************************************
* Purpose        : Get reference of an persistent object.
*
* Version        : 2.0
*
* Precondition   : --
*
* Postcondition  : Persistent object is active
*
* OO Exceptions  : CX_OS_OBJECT_NOT_FOUND
*                    (IS_TRANSIENT_BY_BKEY,DELETED_BY_BKEY)
*                  propagates PM_LOAD_AND_SET_ATTRIBUTES
*                  propagates OS_PM_LOADED_PERISISTENT
*
* Implementation : 1. Look for object in SPECIAL_OBJECT_INFO. If found,
*                     check if it is still valid
*                  2. Object found: Check PM_STATUS
*                     2a. If Status is TRANSIENT or DELETED, error!
*                     2b. If Status is NOT_LOADED, continue with 3.
*                     2c. If Status is NEW, LOADED or CHANGED, success!
*                  3. Load object data from database and set object
*                  3.a. Completion in super class
*                  4. clean up
*
************************************************************************
* Changelog:
* - 1999-09-21   : (OS)  Initial Version
* - 2000-03-07   : (BGR) Version 2.0 - Common Superclass
* - 2000-08-02   : (SB)  OO Exceptions
* - 2000-10-30   : (SB)  Type Mapping
* - 2004-01-21   : (SB)  Type Mapping Refactoring
************************************************************************

  data: BUSINESS_KEY    type TYP_BUSINESS_KEY,
        FLAG_NOT_LOADED type OS_BOOLEAN,
        BKEY_STRING     type STRING.

  data: TEMP_CURRENT_OBJECT_IREF type ref to OBJECT.

* * 1. Look for object in SPECIAL_OBJECT_INFO. If found, check if it
* * is still valid

  clear:  CURRENT_OBJECT_IREF.

*&lt; Generated from mapping:
  BUSINESS_KEY-SPART = I_SPART.
  BUSINESS_KEY-KUNNR = I_KUNNR.
  BUSINESS_KEY-ZZDEAL_CODE = I_ZZDEAL_CODE.
  BUSINESS_KEY-ENDDT = I_ENDDT.
  BUSINESS_KEY-VBELN = I_VBELN.
  BUSINESS_KEY-POSNR = I_POSNR.
*&gt;

  read table SPECIAL_BKEY_TAB into CURRENT_SPECIAL_OBJECT_INFO
       with table key BUSINESS_KEY = BUSINESS_KEY.

  if ( SY-SUBRC = 0 ).

    read table SPECIAL_OBJECT_INFO into CURRENT_SPECIAL_OBJECT_INFO
         with table key
         OBJECT_ID = CURRENT_SPECIAL_OBJECT_INFO-OBJECT_ID.
    call method OS_LOAD_AND_VALIDATE_CURRENT
         exporting I_INDEX = SY-TABIX.

  endif.

  if ( not CURRENT_OBJECT_IREF is initial ).

* * 2. Object found: Check PM_STATUS

    case CURRENT_OBJECT_INFO-PM_STATUS.

*   * 2a. If Status is TRANSIENT or DELETED, error!
    when OSCON_OSTATUS_DELETED.

*!!!!! Error: Object activation failed - Object marked for deletion
      TEMP_CURRENT_OBJECT_IREF = CURRENT_OBJECT_IREF.
      BKEY_STRING  = MAP_SERIALIZE_BKEY( BUSINESS_KEY ).
      call method OS_CLEAR_CURRENT.
      clear CURRENT_SPECIAL_OBJECT_INFO.
      class CX_OS_OBJECT_NOT_FOUND definition load.
      raise exception type CX_OS_OBJECT_NOT_FOUND
        exporting
          OBJECT = TEMP_CURRENT_OBJECT_IREF
          BKEY   = BKEY_STRING
          TEXTID = CX_OS_OBJECT_NOT_FOUND=&gt;DELETED_BY_BKEY.

    when OSCON_OSTATUS_TRANSIENT.

*!!!!! Error: Object activation failed - Object is transient
      TEMP_CURRENT_OBJECT_IREF = CURRENT_OBJECT_IREF.
      BKEY_STRING  = MAP_SERIALIZE_BKEY( BUSINESS_KEY ).
      call method OS_CLEAR_CURRENT.
      clear CURRENT_SPECIAL_OBJECT_INFO.
      class CX_OS_OBJECT_NOT_FOUND definition load.
      raise exception type CX_OS_OBJECT_NOT_FOUND
        exporting
          OBJECT = TEMP_CURRENT_OBJECT_IREF
          BKEY   = BKEY_STRING
          TEXTID = CX_OS_OBJECT_NOT_FOUND=&gt;IS_TRANSIENT_BY_BKEY.


*   * 2b. If Status is NOT_LOADED, continue with 3.
    when OSCON_OSTATUS_NOT_LOADED.

      FLAG_NOT_LOADED      = OSCON_TRUE.

*   * 2c. If Status is NEW, LOADED or CHANGED, success!
    when others.

      FLAG_NOT_LOADED      = OSCON_FALSE.

    endcase. &quot;PM_STATUS

  else.&quot; ( CURRENT_OBJECT_IREF is initial ).

    FLAG_NOT_LOADED      = OSCON_TRUE.

  endif.&quot; ( Entry in administrative data? )

* * 3. Load object data from database and set object

  if (  FLAG_NOT_LOADED = OSCON_TRUE ).

*   * internal Undo
    append INTERNAL_NEXT_UNDO_INFO to INTERNAL_TRANSACTION_STACK.
    INTERNAL_CURRENT_TRANSACTION = SY-TABIX.

    try.
        call method PM_LOAD_AND_SET_ATTRIBUTES
             exporting I_BUSINESS_KEY = BUSINESS_KEY.

        result ?= CURRENT_OBJECT_IREF.

*       * 3.a. Completion in super class
        call method OS_PM_LOADED_PERSISTENT.

      cleanup.
        call method OS_INTERNAL_UNDO.
        call method OS_CLEAR_CURRENT.
        clear CURRENT_SPECIAL_OBJECT_INFO.
    endtry.

*   * Clean-up internal Undo
    delete INTERNAL_TRANSACTION_STACK
           index INTERNAL_CURRENT_TRANSACTION.
    add -1 to INTERNAL_CURRENT_TRANSACTION.
    if ( INTERNAL_TRANSACTION_STACK is initial ).
      clear INTERNAL_UNDO_INFO.
      INTERNAL_NEXT_UNDO_INFO = 1.
    endif. &quot;( INTERNAL_TRANSACTION_STACK is initial? )

  else. &quot;( Object already loaded )

    RESULT ?= CURRENT_OBJECT_IREF.
    call method OS_CLEAR_CURRENT.

  endif. &quot;( Loading necessesary? )

* * 4. clean up

  clear  CURRENT_SPECIAL_OBJECT_INFO.


           &quot;GET_PERSISTENT
  endmethod.</source>
  </method>
  <method CLSNAME="ZCB_NAOCT_QTD_CTRLD" CMPNAME="GET_TRANSIENT" VERSION="1" LANGU="E" DESCRIPT="Get Transient Object with Key" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCB_NAOCT_QTD_CTRLD" CMPNAME="GET_TRANSIENT" SCONAME="I_SPART" VERSION="1" LANGU="E" DESCRIPT="Business Key" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SPART"/>
   <parameter CLSNAME="ZCB_NAOCT_QTD_CTRLD" CMPNAME="GET_TRANSIENT" SCONAME="I_KUNNR" VERSION="1" LANGU="E" DESCRIPT="Business Key" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="KUNNR"/>
   <parameter CLSNAME="ZCB_NAOCT_QTD_CTRLD" CMPNAME="GET_TRANSIENT" SCONAME="I_ZZDEAL_CODE" VERSION="1" LANGU="E" DESCRIPT="Business Key" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZGLOC_DEAL_CODE"/>
   <parameter CLSNAME="ZCB_NAOCT_QTD_CTRLD" CMPNAME="GET_TRANSIENT" SCONAME="I_ENDDT" VERSION="1" LANGU="E" DESCRIPT="Business Key" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZNAOCE_DEAL_END"/>
   <parameter CLSNAME="ZCB_NAOCT_QTD_CTRLD" CMPNAME="GET_TRANSIENT" SCONAME="I_VBELN" VERSION="1" LANGU="E" DESCRIPT="Business Key" CMPTYPE="1" MTDTYPE="0" EDITORDER="5 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="VBELN_VA"/>
   <parameter CLSNAME="ZCB_NAOCT_QTD_CTRLD" CMPNAME="GET_TRANSIENT" SCONAME="I_POSNR" VERSION="1" LANGU="E" DESCRIPT="Business Key" CMPTYPE="1" MTDTYPE="0" EDITORDER="6 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="POSNR_VA"/>
   <parameter CLSNAME="ZCB_NAOCT_QTD_CTRLD" CMPNAME="GET_TRANSIENT" SCONAME="RESULT" VERSION="1" LANGU="E" DESCRIPT="Transient Object" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_NAOCT_QTD_CTRLD"/>
   <exception CLSNAME="ZCB_NAOCT_QTD_CTRLD" CMPNAME="GET_TRANSIENT" SCONAME="CX_OS_OBJECT_NOT_FOUND" VERSION="1" LANGU="E" DESCRIPT="Object Services Exception" MTDTYPE="0" EDITORDER="0 "/>
   <source>method GET_TRANSIENT.
***BUILD 093901
*      IMPORTING I_SPART TYPE SPART.
*      IMPORTING I_KUNNR TYPE KUNNR.
*      IMPORTING I_ZZDEAL_CODE TYPE ZGLOC_DEAL_CODE.
*      IMPORTING I_ENDDT TYPE ZNAOCE_DEAL_END.
*      IMPORTING I_VBELN TYPE VBELN_VA.
*      IMPORTING I_POSNR TYPE POSNR_VA.
*      RETURNING RESULT TYPE REF TO ZCL_NAOCT_QTD_CTRLD
*       raising   CX_OS_OBJECT_NOT_FOUND
************************************************************************
* Purpose        : Get reference of an transient object.
*
* Version        : 2.0
*
* Precondition   : object has been created transient
*
* Postcondition  : --
*
* OO Exceptions  : CX_OS_OBJECT_NOT_FOUND
*                  (TRANSIENT_BY_BKEY, IS_PERSISTENT_BY_BKEY)
*
* Implementation : 1. look for entry in SPECIAL_OBJECT_INFO and check
*                     if it is still valid
*                  2. If it not valid or no object found: Error
*                  3. If it is valid: Check state
*                    3a. Not Transient: Error!
*                    3b. Transient: Success!
*
************************************************************************
* Changelog:
* - 2000-03-07   : (BGR) Initial Version
* - 2000-08-03   : (SB)  OO Exceptions
* - 2000-10-30   : (SB)  Type Mapping
************************************************************************

  data: BUSINESS_KEY type TYP_BUSINESS_KEY,
        BKEY_STRING  type STRING .

  data: TEMP_CURRENT_OBJECT_IREF type ref to OBJECT.

* * 1. look for entry in SPECIAL_OBJECT_INFO and check if it is
* *    still valid

  clear CURRENT_OBJECT_IREF.

*&lt; Generated from mapping:
  BUSINESS_KEY-SPART = I_SPART.
  BUSINESS_KEY-KUNNR = I_KUNNR.
  BUSINESS_KEY-ZZDEAL_CODE = I_ZZDEAL_CODE.
  BUSINESS_KEY-ENDDT = I_ENDDT.
  BUSINESS_KEY-VBELN = I_VBELN.
  BUSINESS_KEY-POSNR = I_POSNR.
*&gt;

  read table SPECIAL_BKEY_TAB into CURRENT_SPECIAL_OBJECT_INFO
       with table KEY BUSINESS_KEY = BUSINESS_KEY.

  if ( SY-SUBRC = 0 ).

    read table SPECIAL_OBJECT_INFO into CURRENT_SPECIAL_OBJECT_INFO
         with table key
         OBJECT_ID = CURRENT_SPECIAL_OBJECT_INFO-OBJECT_ID.
    call method OS_LOAD_AND_VALIDATE_CURRENT
         exporting I_INDEX = SY-TABIX.

  endif.

* * 2. If it not valid or no object found: Error
  if ( CURRENT_OBJECT_IREF is initial ).

*!!! Error: Object activation failed - no entry in administrative data
    BKEY_STRING  = MAP_SERIALIZE_BKEY( BUSINESS_KEY ).
    clear CURRENT_SPECIAL_OBJECT_INFO.
    class CX_OS_OBJECT_NOT_FOUND definition load.
    raise exception type CX_OS_OBJECT_NOT_FOUND
      exporting
        BKEY   = BKEY_STRING
        TEXTID = CX_OS_OBJECT_NOT_FOUND=&gt;TRANSIENT_BY_BKEY.

  else. &quot;( Entry exists )

*   * 3. If it is valid: Check state
    if ( CURRENT_OBJECT_INFO-PM_STATUS &lt;&gt; OSCON_OSTATUS_TRANSIENT ).

*     * 3a. Not Transient: Error!
*!!!!! Error: Object is not transient
      TEMP_CURRENT_OBJECT_IREF = CURRENT_OBJECT_IREF.
      BKEY_STRING  = MAP_SERIALIZE_BKEY( BUSINESS_KEY ).
      call method OS_CLEAR_CURRENT.
      clear CURRENT_SPECIAL_OBJECT_INFO.
      class CX_OS_OBJECT_NOT_FOUND definition load.
      raise exception type CX_OS_OBJECT_NOT_FOUND
        exporting
          OBJECT = TEMP_CURRENT_OBJECT_IREF
          BKEY   = BKEY_STRING
          TEXTID = CX_OS_OBJECT_NOT_FOUND=&gt;IS_PERSISTENT_BY_BKEY.

    endif. &quot;( PM_STATUS &lt;&gt; transient )

  endif.&quot; ( Entry in administrative data? )

* * 3b. Transient: Success!
  RESULT ?= CURRENT_OBJECT_IREF.
  call method OS_CLEAR_CURRENT.
  clear CURRENT_SPECIAL_OBJECT_INFO.

           &quot;GET_TRANSIENT
  endmethod.</source>
  </method>
  <method CLSNAME="CL_OS_CA_COMMON" CMPNAME="LOAD_SPECIAL_OBJECT_INFO" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method LOAD_SPECIAL_OBJECT_INFO.
***BUILD 090501
************************************************************************
* Purpose        : Load CURRENT_SPECIAL_OBJECT_INFO from
*                  SPECIAL_OBJECT_INFO
*
* Version        : 2.0
*
* Precondition   : Index is set in CURRENT_OBJECT_INDEX
*
* Postcondition  : entry is loaded
*
* OO Exceptions  : -
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 2000-03-02   : (BGR) Initial Version
************************************************************************

  read table SPECIAL_OBJECT_INFO into CURRENT_SPECIAL_OBJECT_INFO
       index CURRENT_OBJECT_INDEX.

           &quot;LOAD_SPECIAL_OBJECT_INFO
  endmethod.</source>
  </method>
  <method CLSNAME="ZCB_NAOCT_QTD_CTRLD" CMPNAME="MAP_EXTRACT_IDENTIFIER" VERSION="1" LANGU="E" DESCRIPT="Extracts BKey from Database Data" EXPOSURE="1" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCB_NAOCT_QTD_CTRLD" CMPNAME="MAP_EXTRACT_IDENTIFIER" SCONAME="I_DB_DATA" VERSION="1" LANGU="E" DESCRIPT="Object Data Read from DB" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TYP_DB_DATA"/>
   <parameter CLSNAME="ZCB_NAOCT_QTD_CTRLD" CMPNAME="MAP_EXTRACT_IDENTIFIER" SCONAME="E_BUSINESS_KEY" VERSION="1" LANGU="E" DESCRIPT="Business Key Extracted from Database Data" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="0" TYPTYPE="1" TYPE="TYP_BUSINESS_KEY"/>
   <source>method MAP_EXTRACT_IDENTIFIER.
***BUILD 093901
     &quot; importing I_DB_DATA type TYP_DB_DATA
     &quot; exporting E_BUSINESS_KEY type TYP_BUSINESS_KEY
************************************************************************
* Purpose        : Extract Business Key from given DB_DATA
*
* Version        : 2.0
*
* Precondition   : DB_DATA is a structure with object data read from
*                  DB including Keys and GUID
*
* Postcondition  : E_BUSINESS_KEY is the business key extracted from
*                  I_DB_DATA
*
* OO Exceptions  : --
*
* Implementation :
*
************************************************************************
* Changelog:
* - 2000-03-06   : (BGR) Initial Version
* - 2000-08-02   : (SB) OO Exceptions
************************************************************************
* Generated! Do not modify!
************************************************************************

*&lt;Generated from mapping:
  E_BUSINESS_KEY-SPART  = I_DB_DATA-SPART.
  E_BUSINESS_KEY-KUNNR  = I_DB_DATA-KUNNR.
  E_BUSINESS_KEY-ZZDEAL_CODE  = I_DB_DATA-ZZDEAL_CODE.
  E_BUSINESS_KEY-ENDDT  = I_DB_DATA-ENDDT.
  E_BUSINESS_KEY-VBELN  = I_DB_DATA-VBELN.
  E_BUSINESS_KEY-POSNR  = I_DB_DATA-POSNR.
*&gt;

           &quot;MAP_EXTRACT_IDENTIFIER
  endmethod.</source>
  </method>
  <method CLSNAME="ZCB_NAOCT_QTD_CTRLD" CMPNAME="MAP_GET_ATTRIBUTES" VERSION="1" LANGU="E" DESCRIPT="Reads Persistent Attributes from Object" EXPOSURE="1" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCB_NAOCT_QTD_CTRLD" CMPNAME="MAP_GET_ATTRIBUTES" SCONAME="I_OBJECT_REF_TAB" VERSION="1" LANGU="E" DESCRIPT="List of Objects Affected" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TYP_OBJECT_REF_TAB"/>
   <parameter CLSNAME="ZCB_NAOCT_QTD_CTRLD" CMPNAME="MAP_GET_ATTRIBUTES" SCONAME="E_OBJECT_DATA_TAB" VERSION="1" LANGU="E" DESCRIPT="Object Data Read" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="0" TYPTYPE="1" TYPE="TYP_DB_DATA_TAB"/>
   <source>method MAP_GET_ATTRIBUTES.
***BUILD 093901
     &quot; importing I_OBJECT_REF_TAB  type TYP_OBJECT_REF_TAB
     &quot; exporting value(E_OBJECT_DATA_TAB) type TYP_DB_DATA_TAB
************************************************************************
* Purpose        : Get object data from objects
*
* Version        : 2.0
*
* Precondition   : I_OBJECT_REF_TAB is a list of objects that have a
*                  valid state (new, changed)
*
* Postcondition  : E_OBJECT_DATA_TAB contains all object data of the
*                  given objects. It is a table of the same size like
*                  I_OBJECT_REF_TAB with corresponding entries.
*                  GUID (and Business Key) will be added later.
*
* OO Exceptions  : CX_OS_OBJECT_REFERENCE collects GET_OID_BY_REF
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 2000-03-06   : (BGR) Initial Version
* - 2000-08-03   : (SB)  OO Exceptions
* - 2002-01-17   : (SB)  private attributes in super classes
************************************************************************
* Generated! Do not modify!
************************************************************************

  data: THE_OBJECT type ref to ZCL_NAOCT_QTD_CTRLD,
        OBJECT_DATA_ITEM type TYP_DB_DATA,
        PM_SERVICE       type ref to IF_OS_PM_SERVICE. &quot;#EC NEEDED

  data: EX     type ref to CX_OS_ERROR, &quot;#EC NEEDED
        EX_SYS type ref to CX_OS_SYSTEM_ERROR, &quot;#EC NEEDED
        EX_TAB type OSTABLEREF.

  PM_SERVICE ?= PERSISTENCY_MANAGER.

  loop at I_OBJECT_REF_TAB into THE_OBJECT.

    clear OBJECT_DATA_ITEM.

*&lt;  Generated from mapping:
    OBJECT_DATA_ITEM-SPART = THE_OBJECT-&gt;SPART.
    OBJECT_DATA_ITEM-KUNNR = THE_OBJECT-&gt;KUNNR.
    OBJECT_DATA_ITEM-ZZDEAL_CODE = THE_OBJECT-&gt;ZZDEAL_CODE.
    OBJECT_DATA_ITEM-ENDDT = THE_OBJECT-&gt;ENDDT.
    OBJECT_DATA_ITEM-VBELN = THE_OBJECT-&gt;VBELN.
    OBJECT_DATA_ITEM-POSNR = THE_OBJECT-&gt;POSNR.
    OBJECT_DATA_ITEM-QTD_ORDERED = THE_OBJECT-&gt;QTD_ORDERED.
    OBJECT_DATA_ITEM-REJECTED = THE_OBJECT-&gt;REJECTED.
*&gt;

    APPEND OBJECT_DATA_ITEM TO E_OBJECT_DATA_TAB.

  endloop.&quot;at I_OBJECT_REF_TAB

  if ( not EX_TAB is initial ).
    raise exception type CX_OS_OBJECT_REFERENCE
          exporting EXCEPTION_TAB = EX_TAB.
  endif.

           &quot;MAP_GET_ATTRIBUTES
endmethod.
&quot;#EC CI_VALPAR</source>
  </method>
  <method CLSNAME="ZCB_NAOCT_QTD_CTRLD" CMPNAME="MAP_INITIALIZE_METADATA" VERSION="1" LANGU="E" DESCRIPT="Initializes Metadata Table for Attributes" EXPOSURE="1" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <source>method MAP_INITIALIZE_METADATA.
***BUILD 093901
************************************************************************
* Purpose        : Initialize the mapping metadata,
*
* Version        : 2.0
*
* Precondition   : -
*
* Postcondition  : The mapping metadata table MAP_ATT_INFO_TAB
*                  contains an entry for all persistent attributes
*                  accessible from a query expression
*
* OO Exceptions  : -
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 2004-03-25   : (SB)  Initial Version
************************************************************************


  data: MAP_ATT_INFO type OSTYP_RT_MAP_ATT_INFO.

  if MAP_ATT_INFO_TAB is initial.

    clear MAP_ATT_INFO.
    MAP_ATT_INFO-NAME = &apos;SPART&apos;.
    MAP_ATT_INFO-EXPOSURE = &apos;2&apos;.
    MAP_ATT_INFO-RECORDNAME = &apos;ZNAOCT_QTD_CTRLD&apos;.
    MAP_ATT_INFO-FIELD_NAME1  = &apos;SPART&apos;.
    insert MAP_ATT_INFO into table MAP_ATT_INFO_TAB.

    clear MAP_ATT_INFO.
    MAP_ATT_INFO-NAME = &apos;KUNNR&apos;.
    MAP_ATT_INFO-EXPOSURE = &apos;2&apos;.
    MAP_ATT_INFO-RECORDNAME = &apos;ZNAOCT_QTD_CTRLD&apos;.
    MAP_ATT_INFO-FIELD_NAME1  = &apos;KUNNR&apos;.
    insert MAP_ATT_INFO into table MAP_ATT_INFO_TAB.

    clear MAP_ATT_INFO.
    MAP_ATT_INFO-NAME = &apos;ZZDEAL_CODE&apos;.
    MAP_ATT_INFO-EXPOSURE = &apos;2&apos;.
    MAP_ATT_INFO-RECORDNAME = &apos;ZNAOCT_QTD_CTRLD&apos;.
    MAP_ATT_INFO-FIELD_NAME1  = &apos;ZZDEAL_CODE&apos;.
    insert MAP_ATT_INFO into table MAP_ATT_INFO_TAB.

    clear MAP_ATT_INFO.
    MAP_ATT_INFO-NAME = &apos;ENDDT&apos;.
    MAP_ATT_INFO-EXPOSURE = &apos;2&apos;.
    MAP_ATT_INFO-RECORDNAME = &apos;ZNAOCT_QTD_CTRLD&apos;.
    MAP_ATT_INFO-FIELD_NAME1  = &apos;ENDDT&apos;.
    insert MAP_ATT_INFO into table MAP_ATT_INFO_TAB.

    clear MAP_ATT_INFO.
    MAP_ATT_INFO-NAME = &apos;VBELN&apos;.
    MAP_ATT_INFO-EXPOSURE = &apos;2&apos;.
    MAP_ATT_INFO-RECORDNAME = &apos;ZNAOCT_QTD_CTRLD&apos;.
    MAP_ATT_INFO-FIELD_NAME1  = &apos;VBELN&apos;.
    insert MAP_ATT_INFO into table MAP_ATT_INFO_TAB.

    clear MAP_ATT_INFO.
    MAP_ATT_INFO-NAME = &apos;POSNR&apos;.
    MAP_ATT_INFO-EXPOSURE = &apos;2&apos;.
    MAP_ATT_INFO-RECORDNAME = &apos;ZNAOCT_QTD_CTRLD&apos;.
    MAP_ATT_INFO-FIELD_NAME1  = &apos;POSNR&apos;.
    insert MAP_ATT_INFO into table MAP_ATT_INFO_TAB.

    clear MAP_ATT_INFO.
    MAP_ATT_INFO-NAME = &apos;QTD_ORDERED&apos;.
    MAP_ATT_INFO-EXPOSURE = &apos;2&apos;.
    MAP_ATT_INFO-RECORDNAME = &apos;ZNAOCT_QTD_CTRLD&apos;.
    MAP_ATT_INFO-FIELD_NAME1  = &apos;QTD_ORDERED&apos;.
    insert MAP_ATT_INFO into table MAP_ATT_INFO_TAB.

    clear MAP_ATT_INFO.
    MAP_ATT_INFO-NAME = &apos;REJECTED&apos;.
    MAP_ATT_INFO-EXPOSURE = &apos;2&apos;.
    MAP_ATT_INFO-RECORDNAME = &apos;ZNAOCT_QTD_CTRLD&apos;.
    MAP_ATT_INFO-FIELD_NAME1  = &apos;REJECTED&apos;.
    insert MAP_ATT_INFO into table MAP_ATT_INFO_TAB.

  endif.

           &quot;MAP_INITIALIZE_METADATA
  endmethod.</source>
  </method>
  <method CLSNAME="CL_OS_CA_COMMON" CMPNAME="MAP_INVALIDATE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method MAP_INVALIDATE.
***BUILD 093901
     &quot; importing I_OBJECT_IREF_TAB type TYP_OBJECT_TAB
************************************************************************
* Purpose        : Invalidate state of all objects in I_OBJECT_IREF_TAB
*
* Version        : 2.0
*
* Precondition   : Objects in I_OBJECT_IREF_TAB exist
*
* Postcondition  : Their state in cleared
*
* OO Exceptions  : -
*
* Implementation : - call method IF_OS_STATE~INVALIDATE
*                  - clear object&apos;s (persistent) attributes
*
************************************************************************
* Changelog:
* - 2000-04-17   : (BGR) Initial Version
* - 2000-08-02   : (SB)  OO Exceptions
* - 2002-01-17   : (SB)  private attributes in super classes
************************************************************************

  data: OBJECT_IREF type TYP_OBJECT_IREF,
        THE_OBJECT  type ref TO ZCL_NAOCT_QTD_CTRLD.

  loop at I_OBJECT_IREF_TAB into OBJECT_IREF.

    if ( not OBJECT_IREF is initial ).

      call method OBJECT_IREF-&gt;INVALIDATE.

      THE_OBJECT ?= OBJECT_IREF.

*&lt;    Generated from Mapping:
      clear: THE_OBJECT-&gt;SPART,
             THE_OBJECT-&gt;KUNNR,
             THE_OBJECT-&gt;ZZDEAL_CODE,
             THE_OBJECT-&gt;ENDDT,
             THE_OBJECT-&gt;VBELN,
             THE_OBJECT-&gt;POSNR,
             THE_OBJECT-&gt;QTD_ORDERED,
             THE_OBJECT-&gt;REJECTED.
*&gt;

    endif. &quot;( not initial )

  endloop. &quot;at I_OBJECT_IREF_TAB

           &quot;MAP_INVALIDATE
  endmethod.</source>
  </method>
  <method CLSNAME="ZCB_NAOCT_QTD_CTRLD" CMPNAME="MAP_LOAD_FROM_DATABASE" VERSION="1" LANGU="E" DESCRIPT="Reads Identified Object Data from the DB Based on a Filter" EXPOSURE="0" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCB_NAOCT_QTD_CTRLD" CMPNAME="MAP_LOAD_FROM_DATABASE" SCONAME="I_ORDER_BY_CLAUSE" VERSION="1" LANGU="E" DESCRIPT="ORDER BY Clause" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCB_NAOCT_QTD_CTRLD" CMPNAME="MAP_LOAD_FROM_DATABASE" SCONAME="I_SUBCLASSES" VERSION="1" LANGU="E" DESCRIPT="Load Subclass Instances" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="OS_BOOLEAN" PARVALUE="OSCON_FALSE"/>
   <parameter CLSNAME="ZCB_NAOCT_QTD_CTRLD" CMPNAME="MAP_LOAD_FROM_DATABASE" SCONAME="I_UPTO" VERSION="1" LANGU="E" DESCRIPT="Max. No. Instances" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="I" PARVALUE="0"/>
   <parameter CLSNAME="ZCB_NAOCT_QTD_CTRLD" CMPNAME="MAP_LOAD_FROM_DATABASE" SCONAME="I_WHERE_CLAUSE" VERSION="1" LANGU="E" DESCRIPT="Where Clause" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCB_NAOCT_QTD_CTRLD" CMPNAME="MAP_LOAD_FROM_DATABASE" SCONAME="PAR1" VERSION="1" LANGU="E" DESCRIPT="First Parameter for Query Execution" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ANY" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCB_NAOCT_QTD_CTRLD" CMPNAME="MAP_LOAD_FROM_DATABASE" SCONAME="PAR2" VERSION="1" LANGU="E" DESCRIPT="Second Parameter for Query Execution" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ANY" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCB_NAOCT_QTD_CTRLD" CMPNAME="MAP_LOAD_FROM_DATABASE" SCONAME="PAR3" VERSION="1" LANGU="E" DESCRIPT="Third Parameter for Query Execution" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ANY" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCB_NAOCT_QTD_CTRLD" CMPNAME="MAP_LOAD_FROM_DATABASE" SCONAME="RESULT" VERSION="1" LANGU="E" DESCRIPT="Object Data Read from the Database" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="TYP_DB_DATA_TAB"/>
   <source>method MAP_LOAD_FROM_DATABASE.
***BUILD 093901
     &quot; importing I_WHERE_CLAUSE type STRING optional
     &quot;           I_ORDER_BY_CLAUSE type STRING optional
     &quot;           I_SUBCLASSES type OS_BOOLEAN default OSCON_FALSE
     &quot;           I_UPTO type I value 0
     &quot;           PAR1 type ANY optional
     &quot;           PAR2 type ANY optional
     &quot;           PAR3 type ANY optional
     &quot; returning value(RESULT) type TYP_DB_DATA_TAB
************************************************************************
* Purpose        : Load object data identified by I_WHERE_CLAUSE with
*                  PAR1, PAR2 and PAR3 from DB to DB_DATA Table
*
* Version        : 2.0
*
* Precondition   : I_WHERE_CLAUSE is valid where clause in Open-SQL
*
* Postcondition  : RESULT is the corresponding table of object
*                  attributes read from DB
*
* OO Exceptions  : CX_OS_DB_SELECT
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 2004-03-25   : (SB)  Initial Version
* - 2005-04-06   : (SB)  Single Table
************************************************************************


  data: DB_DATA           type TYP_DB_DATA.

*&lt; Generated from mapping:
  types: TYP_DB_DATA_LOCAL type ZNAOCT_QTD_CTRLD.
*&gt;

  types:
    TYP_DB_DATA_LOCAL_TAB type standard table of
      TYP_DB_DATA_LOCAL with non-unique default key .

  data: DB_DATA_LOCAL_TAB type TYP_DB_DATA_LOCAL_TAB.

  field-symbols: &lt;FS_DB_DATA_LOCAL&gt; type TYP_DB_DATA_LOCAL.

*&lt; Generated from mapping:
  field-symbols: &lt;FS_DB_ZNAOCT_QTD_CTRLD&gt; type ZNAOCT_QTD_CTRLD.
*&gt;

*&lt; Generated from mapping:
  select * from ZNAOCT_QTD_CTRLD
           up to I_UPTO rows
           into table DB_DATA_LOCAL_TAB
           where (I_WHERE_CLAUSE)
           order by (I_ORDER_BY_CLAUSE).
*&gt;

*   * error handling
  if ( SY-SUBRC &lt;&gt; 0 ).
    class CX_OS_DB_SELECT definition load.
    raise exception type CX_OS_DB_SELECT
         exporting TABLE  = &apos;ZNAOCT_QTD_CTRLD&apos;
                   WHERE_CLAUSE = I_WHERE_CLAUSE
                   TEXTID = CX_OS_DB_SELECT=&gt;BY_QUERY.
  endif. &quot;( Error )

  loop at DB_DATA_LOCAL_TAB assigning &lt;FS_DB_DATA_LOCAL&gt;.

    assign &lt;FS_DB_DATA_LOCAL&gt; to &lt;FS_DB_ZNAOCT_QTD_CTRLD&gt;.

*&lt; Generated from mapping:
    DB_DATA-SPART = &lt;FS_DB_ZNAOCT_QTD_CTRLD&gt;-SPART.
    DB_DATA-KUNNR = &lt;FS_DB_ZNAOCT_QTD_CTRLD&gt;-KUNNR.
    DB_DATA-ZZDEAL_CODE = &lt;FS_DB_ZNAOCT_QTD_CTRLD&gt;-ZZDEAL_CODE.
    DB_DATA-ENDDT = &lt;FS_DB_ZNAOCT_QTD_CTRLD&gt;-ENDDT.
    DB_DATA-VBELN = &lt;FS_DB_ZNAOCT_QTD_CTRLD&gt;-VBELN.
    DB_DATA-POSNR = &lt;FS_DB_ZNAOCT_QTD_CTRLD&gt;-POSNR.
    DB_DATA-QTD_ORDERED = &lt;FS_DB_ZNAOCT_QTD_CTRLD&gt;-QTD_ORDERED.
    DB_DATA-REJECTED = &lt;FS_DB_ZNAOCT_QTD_CTRLD&gt;-REJECTED.
*&gt;

    append DB_DATA to RESULT.

  endloop.&quot; at DB_TAB

           &quot;MAP_LOAD_FROM_DATABASE
endmethod.
&quot;#EC CI_VALPAR</source>
  </method>
  <method CLSNAME="ZCB_NAOCT_QTD_CTRLD" CMPNAME="MAP_LOAD_FROM_DATABASE_KEY" VERSION="1" LANGU="E" DESCRIPT="Reads Object Data Identified Using Bus. Key from Database" EXPOSURE="1" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCB_NAOCT_QTD_CTRLD" CMPNAME="MAP_LOAD_FROM_DATABASE_KEY" SCONAME="I_BUSINESS_KEY_TAB" VERSION="1" LANGU="E" DESCRIPT="Business Key of the Data to Be Loaded" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TYP_BUSINESS_KEY_TAB"/>
   <parameter CLSNAME="ZCB_NAOCT_QTD_CTRLD" CMPNAME="MAP_LOAD_FROM_DATABASE_KEY" SCONAME="RESULT" VERSION="1" LANGU="E" DESCRIPT="Object Data Read from the Database" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="TYP_DB_DATA_TAB"/>
   <source>method MAP_LOAD_FROM_DATABASE_KEY.
***BUILD 093901
     &quot; importing I_BUSINESS_KEY_TAB type TYP_BUSINESS_KEY_TAB
     &quot; returning value(RESULT) type TYP_DB_DATA_TAB
************************************************************************
* Purpose        : Load object data identified by I_BUSINESS_KEY_TAB
*                  from DB to DB_DATA Table
*
* Version        : 2.0
*
* Precondition   : I_BUSINESS_KEY_TAB is a table of valid business keys
*
* Postcondition  : RESULT is the corresponding table of object
*                  attributes read from DB
*
* OO Exceptions  : CX_OS_DB_SELECT
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 1999-09-21   : (OS)  Initial Version
* - 2000-03-06   : (BGR) Version 2.0 - difference between loading 1 and
*                  many entries
* - 2000-06-15   : (BGR) Support for multi-table loading
* - 2000-08-03   : (SB)  OO Exceptions
* - 2001-03-27   : (MWI) Loading several objects (type mapping)
* - 2001-11-26   : (SB)  Refactoring Generation
* - 2002-01-17   : (SB)  Bugfix for tables with namespace
* - 2002-01-17   : (SB)  private attributes in super classes
* - 2004-01-07   : (SB)  Multi Access
* - 2005-02-22   : (SB)  Inner Joins
* - 2005-04-06   : (SB)  Single Table
************************************************************************


  data: DB_DATA           type TYP_DB_DATA.

*&lt; Generated from mapping:
  types: TYP_DB_DATA_LOCAL type ZNAOCT_QTD_CTRLD.
*&gt;

  types:
    TYP_DB_DATA_LOCAL_TAB type standard table of
      TYP_DB_DATA_LOCAL with non-unique default key .

  data: DB_DATA_LOCAL_TAB type TYP_DB_DATA_LOCAL_TAB.

  field-symbols: &lt;FS_DB_DATA_LOCAL&gt; type TYP_DB_DATA_LOCAL.

*&lt; Generated from mapping:
  field-symbols: &lt;FS_DB_ZNAOCT_QTD_CTRLD&gt; type ZNAOCT_QTD_CTRLD.
*&gt;

*&lt; Generated from mapping:
  select * from ZNAOCT_QTD_CTRLD
           into table DB_DATA_LOCAL_TAB
           for all entries in I_BUSINESS_KEY_TAB
           where ZNAOCT_QTD_CTRLD~SPART = I_BUSINESS_KEY_TAB-SPART
             and ZNAOCT_QTD_CTRLD~KUNNR = I_BUSINESS_KEY_TAB-KUNNR
             and ZNAOCT_QTD_CTRLD~ZZDEAL_CODE =
             I_BUSINESS_KEY_TAB-ZZDEAL_CODE
             and ZNAOCT_QTD_CTRLD~ENDDT = I_BUSINESS_KEY_TAB-ENDDT
             and ZNAOCT_QTD_CTRLD~VBELN = I_BUSINESS_KEY_TAB-VBELN
             and ZNAOCT_QTD_CTRLD~POSNR = I_BUSINESS_KEY_TAB-POSNR.
*&gt;

* * error handling
  if ( SY-SUBRC &lt;&gt; 0 ).
    class CX_OS_DB_SELECT definition load.
    raise exception type CX_OS_DB_SELECT
         exporting TABLE  = &apos;ZNAOCT_QTD_CTRLD&apos;
                   TEXTID = CX_OS_DB_SELECT=&gt;BY_BKEYTAB.
  endif. &quot;( Error )

  loop at DB_DATA_LOCAL_TAB assigning &lt;FS_DB_DATA_LOCAL&gt;.

    assign &lt;FS_DB_DATA_LOCAL&gt; to &lt;FS_DB_ZNAOCT_QTD_CTRLD&gt;.

*&lt; Generated from mapping:
    DB_DATA-SPART = &lt;FS_DB_ZNAOCT_QTD_CTRLD&gt;-SPART.
    DB_DATA-KUNNR = &lt;FS_DB_ZNAOCT_QTD_CTRLD&gt;-KUNNR.
    DB_DATA-ZZDEAL_CODE = &lt;FS_DB_ZNAOCT_QTD_CTRLD&gt;-ZZDEAL_CODE.
    DB_DATA-ENDDT = &lt;FS_DB_ZNAOCT_QTD_CTRLD&gt;-ENDDT.
    DB_DATA-VBELN = &lt;FS_DB_ZNAOCT_QTD_CTRLD&gt;-VBELN.
    DB_DATA-POSNR = &lt;FS_DB_ZNAOCT_QTD_CTRLD&gt;-POSNR.
    DB_DATA-QTD_ORDERED = &lt;FS_DB_ZNAOCT_QTD_CTRLD&gt;-QTD_ORDERED.
    DB_DATA-REJECTED = &lt;FS_DB_ZNAOCT_QTD_CTRLD&gt;-REJECTED.
*&gt;

    append DB_DATA to RESULT.

  endloop.&quot; at DB_DATA_LOCAL_TAB

           &quot;MAP_LOAD_FROM_DATABASE_KEY
endmethod.
&quot;#EC CI_VALPAR</source>
  </method>
  <method CLSNAME="ZCB_NAOCT_QTD_CTRLD" CMPNAME="MAP_MERGE_IDENTIFIER" VERSION="1" LANGU="E" DESCRIPT="Adds BKey to DB Data" EXPOSURE="1" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCB_NAOCT_QTD_CTRLD" CMPNAME="MAP_MERGE_IDENTIFIER" SCONAME="I_BUSINESS_KEY_TAB" VERSION="1" LANGU="E" DESCRIPT="List of Business Keys" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TYP_BUSINESS_KEY_TAB"/>
   <parameter CLSNAME="ZCB_NAOCT_QTD_CTRLD" CMPNAME="MAP_MERGE_IDENTIFIER" SCONAME="C_DB_DATA_TAB" VERSION="1" LANGU="E" DESCRIPT="Object Data in Which Identifiers Are to Be Mixed" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="TYP_DB_DATA_TAB"/>
   <source>method MAP_MERGE_IDENTIFIER.
***BUILD 093901
     &quot; importing I_BUSINESS_KEY_TAB type TYP_BUSINESS_KEY_TAB
     &quot; changing C_DB_DATA_TAB type TYP_DB_DATA_TAB
************************************************************************
* Purpose        : Merge Table I_BUSINESS_KEY_TAB to C_DB_DATA_TAB.
*                  The result is a complete DB_DATA table to be stored
*                  in DB.
*
* Version        : 2.0
*
* Precondition   : C_DB_DATA is a Table filled with object data
*                  I_BUSINESS_KEY_TAB is a table of the same size with
*                  corresponding entries.
*
* Postcondition  : C_DB_DATA_TAB is complete
*
* OO Exceptions  : --
*
* Implementation :
*
************************************************************************
* Changelog:
* - 2000-03-06   : (BGR) Initial Version
************************************************************************
* Generated! Do not modify!
************************************************************************

  data: BUSINESS_KEY type TYP_BUSINESS_KEY.

  field-symbols &lt;FS_OBJECT_DATA&gt; type TYP_DB_DATA.

  loop at C_DB_DATA_TAB assigning &lt;FS_OBJECT_DATA&gt;.

    read table I_BUSINESS_KEY_TAB into BUSINESS_KEY
         index SY-TABIX.

*&lt;  Generated from mapping:
    &lt;FS_OBJECT_DATA&gt;-SPART = BUSINESS_KEY-SPART.
    &lt;FS_OBJECT_DATA&gt;-KUNNR = BUSINESS_KEY-KUNNR.
    &lt;FS_OBJECT_DATA&gt;-ZZDEAL_CODE = BUSINESS_KEY-ZZDEAL_CODE.
    &lt;FS_OBJECT_DATA&gt;-ENDDT = BUSINESS_KEY-ENDDT.
    &lt;FS_OBJECT_DATA&gt;-VBELN = BUSINESS_KEY-VBELN.
    &lt;FS_OBJECT_DATA&gt;-POSNR = BUSINESS_KEY-POSNR.
*&gt;


  endloop.&quot; at C_DB_DATA_TAB

           &quot;MAP_MERGE_IDENTIFIER
  endmethod.</source>
  </method>
  <method CLSNAME="ZCB_NAOCT_QTD_CTRLD" CMPNAME="MAP_SAVE_TO_DATABASE" VERSION="1" LANGU="E" DESCRIPT="Saves Object Data in Database" EXPOSURE="1" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCB_NAOCT_QTD_CTRLD" CMPNAME="MAP_SAVE_TO_DATABASE" SCONAME="I_DELETES" VERSION="1" LANGU="E" DESCRIPT="Key of the Data to Be Deleted" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TYP_DB_DELETE_TAB"/>
   <parameter CLSNAME="ZCB_NAOCT_QTD_CTRLD" CMPNAME="MAP_SAVE_TO_DATABASE" SCONAME="I_INSERTS" VERSION="1" LANGU="E" DESCRIPT="Data to Be Created" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TYP_DB_DATA_TAB"/>
   <parameter CLSNAME="ZCB_NAOCT_QTD_CTRLD" CMPNAME="MAP_SAVE_TO_DATABASE" SCONAME="I_UPDATES" VERSION="1" LANGU="E" DESCRIPT="Data to Be Changed" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TYP_DB_DATA_TAB"/>
   <source>method MAP_SAVE_TO_DATABASE.
***BUILD 093901
     &quot; importing I_DELETES type TYP_DB_DELETE_TAB
     &quot;           I_INSERTS type TYP_DB_DATA_TAB
     &quot;           I_UPDATES type TYP_DB_DATA_TAB
************************************************************************
* Purpose        : Do database operations:
*                  Insert new object data from I_INSERTS,
*                  Update changed object data from I_UPDATES and
*                  Delete entries for deleted objects from I_DELETES
*
* Version        : 2.0
*
* Precondition   : I_DELETES,I_INSERTS and I_UPDATES contain ALL
*                  necessary information (Keys, Data)
*                  If this method is called in update task, there
*                  is NO MORE information, no objects exist anymore.
*
* Postcondition  : All database operations have been performed.
*
* OO Exceptions  : CX_OS_DB_INSERT, CX_OS_DB_UPDATE, CX_OS_DB_DELETE
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 1999-09-21   : (OS)  Initial Version
* - 2000-03-06   : (BGR) Version 2.0
* - 2001-11-26   : (SB)  Refactoring Generation
* - 2002-01-17   : (SB)  private attributes in super classes
************************************************************************

*&lt; Generated from mapping:

* * ZNAOCT_QTD_CTRLD: internal tables for mass operation
  data DB_ITB_ZNAOCT_QTD_CTRLD type STANDARD TABLE OF ZNAOCT_QTD_CTRLD.
  data DB_UTB_ZNAOCT_QTD_CTRLD type STANDARD TABLE OF ZNAOCT_QTD_CTRLD.
  data DB_DTB_ZNAOCT_QTD_CTRLD type STANDARD TABLE OF ZNAOCT_QTD_CTRLD.

* * ZNAOCT_QTD_CTRLD: headlines for tables
  data DB_ILN_ZNAOCT_QTD_CTRLD type ZNAOCT_QTD_CTRLD.
  data DB_ULN_ZNAOCT_QTD_CTRLD type ZNAOCT_QTD_CTRLD.
  data DB_DLN_ZNAOCT_QTD_CTRLD type ZNAOCT_QTD_CTRLD.

*&gt;

  field-symbols &lt;FS_INSERT&gt; type TYP_DB_DATA.
  field-symbols &lt;FS_UPDATE&gt; type TYP_DB_DATA.
  field-symbols &lt;FS_DELETE&gt; type TYP_SPECIAL_OBJECT_INFO.

* * Collect Inserts
  loop at I_INSERTS assigning &lt;FS_INSERT&gt;.

*&lt; Generated from mapping:







   DB_ILN_ZNAOCT_QTD_CTRLD-QTD_ORDERED = &lt;FS_INSERT&gt;-QTD_ORDERED.
   DB_ILN_ZNAOCT_QTD_CTRLD-REJECTED = &lt;FS_INSERT&gt;-REJECTED.


   DB_ILN_ZNAOCT_QTD_CTRLD-SPART = &lt;FS_INSERT&gt;-SPART.
   DB_ILN_ZNAOCT_QTD_CTRLD-KUNNR = &lt;FS_INSERT&gt;-KUNNR.
   DB_ILN_ZNAOCT_QTD_CTRLD-ZZDEAL_CODE = &lt;FS_INSERT&gt;-ZZDEAL_CODE.
   DB_ILN_ZNAOCT_QTD_CTRLD-ENDDT = &lt;FS_INSERT&gt;-ENDDT.
   DB_ILN_ZNAOCT_QTD_CTRLD-VBELN = &lt;FS_INSERT&gt;-VBELN.
   DB_ILN_ZNAOCT_QTD_CTRLD-POSNR = &lt;FS_INSERT&gt;-POSNR.
   append DB_ILN_ZNAOCT_QTD_CTRLD to DB_ITB_ZNAOCT_QTD_CTRLD.
*&gt;

  endloop. &quot;at I_INSERTS

* * Collect Updates
  loop at I_UPDATES assigning &lt;FS_UPDATE&gt;.

*&lt; Generated from mapping:







   DB_ULN_ZNAOCT_QTD_CTRLD-QTD_ORDERED = &lt;FS_UPDATE&gt;-QTD_ORDERED.
   DB_ULN_ZNAOCT_QTD_CTRLD-REJECTED = &lt;FS_UPDATE&gt;-REJECTED.


   DB_ULN_ZNAOCT_QTD_CTRLD-SPART = &lt;FS_UPDATE&gt;-SPART.
   DB_ULN_ZNAOCT_QTD_CTRLD-KUNNR = &lt;FS_UPDATE&gt;-KUNNR.
   DB_ULN_ZNAOCT_QTD_CTRLD-ZZDEAL_CODE = &lt;FS_UPDATE&gt;-ZZDEAL_CODE.
   DB_ULN_ZNAOCT_QTD_CTRLD-ENDDT = &lt;FS_UPDATE&gt;-ENDDT.
   DB_ULN_ZNAOCT_QTD_CTRLD-VBELN = &lt;FS_UPDATE&gt;-VBELN.
   DB_ULN_ZNAOCT_QTD_CTRLD-POSNR = &lt;FS_UPDATE&gt;-POSNR.
   append DB_ULN_ZNAOCT_QTD_CTRLD TO DB_UTB_ZNAOCT_QTD_CTRLD.
*&gt;

  endloop. &quot;at I_UPDATES

* * Collect Deletes
  loop at I_DELETES assigning &lt;FS_DELETE&gt;.

    DB_DLN_ZNAOCT_QTD_CTRLD-SPART = &lt;FS_DELETE&gt;-BUSINESS_KEY-SPART.
    DB_DLN_ZNAOCT_QTD_CTRLD-KUNNR = &lt;FS_DELETE&gt;-BUSINESS_KEY-KUNNR.
    DB_DLN_ZNAOCT_QTD_CTRLD-ZZDEAL_CODE =
    &lt;FS_DELETE&gt;-BUSINESS_KEY-ZZDEAL_CODE.
    DB_DLN_ZNAOCT_QTD_CTRLD-ENDDT = &lt;FS_DELETE&gt;-BUSINESS_KEY-ENDDT.
    DB_DLN_ZNAOCT_QTD_CTRLD-VBELN = &lt;FS_DELETE&gt;-BUSINESS_KEY-VBELN.
    DB_DLN_ZNAOCT_QTD_CTRLD-POSNR = &lt;FS_DELETE&gt;-BUSINESS_KEY-POSNR.

    append DB_DLN_ZNAOCT_QTD_CTRLD TO DB_DTB_ZNAOCT_QTD_CTRLD.

  endloop. &quot;at I_DELETES

* * Perform DB Operations:

*&lt; Generated from mapping:

* * DB Deletes
  delete ZNAOCT_QTD_CTRLD FROM TABLE DB_DTB_ZNAOCT_QTD_CTRLD.
  if SY-SUBRC &lt;&gt; 0.
    raise exception type CX_OS_DB_DELETE
      exporting
        TABLE = &apos;ZNAOCT_QTD_CTRLD&apos;.
  endif.

* * DB Inserts
  insert ZNAOCT_QTD_CTRLD FROM TABLE DB_ITB_ZNAOCT_QTD_CTRLD
    accepting duplicate keys.
  if SY-SUBRC &lt;&gt; 0.
    raise exception type CX_OS_DB_INSERT
      exporting
        TABLE = &apos;ZNAOCT_QTD_CTRLD&apos;.
  endif.

* * DB Updates
  update ZNAOCT_QTD_CTRLD FROM TABLE DB_UTB_ZNAOCT_QTD_CTRLD.
  if SY-SUBRC &lt;&gt; 0.
    raise exception type CX_OS_DB_UPDATE
      exporting
        TABLE = &apos;ZNAOCT_QTD_CTRLD&apos;.
  endif.

*&gt;
           &quot;MAP_SAVE_TO_DATABASE
  endmethod.</source>
  </method>
  <method CLSNAME="ZCB_NAOCT_QTD_CTRLD" CMPNAME="MAP_SERIALIZE_BKEY" VERSION="1" LANGU="E" DESCRIPT="Serializes Business Key" EXPOSURE="1" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCB_NAOCT_QTD_CTRLD" CMPNAME="MAP_SERIALIZE_BKEY" SCONAME="I_BUSINESS_KEY" VERSION="1" LANGU="E" DESCRIPT="Business Key" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TYP_BUSINESS_KEY"/>
   <parameter CLSNAME="ZCB_NAOCT_QTD_CTRLD" CMPNAME="MAP_SERIALIZE_BKEY" SCONAME="RESULT" VERSION="1" LANGU="E" DESCRIPT="Business Key as String" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="STRING"/>
   <source>method MAP_SERIALIZE_BKEY.
***BUILD 093901
     &quot; importing I_BUSINESS_KEY type TYP_BUSINESS_KEY
     &quot; returning value(RESULT) type STRING
************************************************************************
* Purpose        : Concatenate business keys into string.
*
* Version        : 2.0
*
* Precondition   : -
*
* Postcondition  : -
*
* OO Exceptions  : -
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 2000-11-23   : (SB)  initial versiuon
* - 2009-06-03   : (SB)  correct order if edit order is used
************************************************************************
* Generated! Do not modify!
************************************************************************

  data: COMP_STRING type STRING.

*&lt; Generated from mapping:
  COMP_STRING = I_BUSINESS_KEY-SPART.
  concatenate RESULT COMP_STRING into RESULT.
  COMP_STRING = I_BUSINESS_KEY-KUNNR.
  concatenate RESULT COMP_STRING into RESULT.
  COMP_STRING = I_BUSINESS_KEY-ZZDEAL_CODE.
  concatenate RESULT COMP_STRING into RESULT.
  COMP_STRING = I_BUSINESS_KEY-ENDDT.
  concatenate RESULT COMP_STRING into RESULT.
  COMP_STRING = I_BUSINESS_KEY-VBELN.
  concatenate RESULT COMP_STRING into RESULT.
  COMP_STRING = I_BUSINESS_KEY-POSNR.
  concatenate RESULT COMP_STRING into RESULT.
*&gt;

           &quot; MAP_SERIALIZE_BKEY
  endmethod.</source>
  </method>
  <method CLSNAME="ZCB_NAOCT_QTD_CTRLD" CMPNAME="MAP_SET_ATTRIBUTES" VERSION="1" LANGU="E" DESCRIPT="Sets Persistent Attributes of an Object" EXPOSURE="1" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCB_NAOCT_QTD_CTRLD" CMPNAME="MAP_SET_ATTRIBUTES" SCONAME="I_OBJECT_DATA" VERSION="1" LANGU="E" DESCRIPT="Object Data to Be Set" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TYP_DB_DATA"/>
   <parameter CLSNAME="ZCB_NAOCT_QTD_CTRLD" CMPNAME="MAP_SET_ATTRIBUTES" SCONAME="I_OBJECT_REF" VERSION="1" LANGU="E" DESCRIPT="Object Affected" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TYP_OBJECT_REF"/>
   <exception CLSNAME="ZCB_NAOCT_QTD_CTRLD" CMPNAME="MAP_SET_ATTRIBUTES" SCONAME="CX_OS_OBJECT_NOT_FOUND" VERSION="1" LANGU="E" DESCRIPT="Object Services Exception" MTDTYPE="0" EDITORDER="0 "/>
   <source>method MAP_SET_ATTRIBUTES.
***BUILD 093901
     &quot; importing I_OBJECT_DATA type TYP_DB_DATA
     &quot;           I_OBJECT_REF  type TYP_OBJECT_REF
     &quot; raising   CX_OS_OBJECT_NOT_FOUND
************************************************************************
* Purpose        : Set objects from given object data
*
* Version        : 2.0
*
* Precondition   : I_OBJECT_REF is a reference to the object that will
*                  be set with data from I_OBJECT_DATA
*
* Postcondition  : The object&apos;s attributes are set.
*
* OO Exceptions  : CX_OS_OBJECT_NOT_FOUND
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 2000-03-06   : (BGR) Initial Version
* - 2000-08-03   : (SB)  OO Exceptions
* - 2002-01-17   : (SB)  private attributes in super classes
************************************************************************
* Generated! Do not modify!
************************************************************************

  data: THE_OBJECT type ref to ZCL_NAOCT_QTD_CTRLD,
        AN_OBJECT  type ref to object, &quot;#EC NEEDED
        PM_SERVICE type ref to IF_OS_PM_SERVICE. &quot;#EC NEEDED

  PM_SERVICE ?= PERSISTENCY_MANAGER.
  THE_OBJECT = I_OBJECT_REF.

*&lt;  Generated from mapping:
  THE_OBJECT-&gt;SPART = I_OBJECT_DATA-SPART.
  THE_OBJECT-&gt;KUNNR = I_OBJECT_DATA-KUNNR.
  THE_OBJECT-&gt;ZZDEAL_CODE = I_OBJECT_DATA-ZZDEAL_CODE.
  THE_OBJECT-&gt;ENDDT = I_OBJECT_DATA-ENDDT.
  THE_OBJECT-&gt;VBELN = I_OBJECT_DATA-VBELN.
  THE_OBJECT-&gt;POSNR = I_OBJECT_DATA-POSNR.
  THE_OBJECT-&gt;QTD_ORDERED = I_OBJECT_DATA-QTD_ORDERED.
  THE_OBJECT-&gt;REJECTED = I_OBJECT_DATA-REJECTED.
*&gt;

           &quot;MAP_SET_ATTRIBUTES
  endmethod.</source>
  </method>
  <method CLSNAME="CL_OS_CA_COMMON" CMPNAME="OS_PM_DELETE_PERSISTENT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method OS_PM_DELETE_PERSISTENT.
***BUILD 090501
************************************************************************
* Purpose        : Delete persistent object. It is marked DELETED in
*                  memory and removed from DB when the top transaction
*                  is closed.
*
* Version        : 2.0
*
* Precondition   : The object is persistent (not transient), CURRENT
*                  is set
*
* Postcondition  : Instance is marked for deletion.
*
* OO Exceptions  : propagates PM_DELETE_PERSISTENT
*
* Implementation : load special object info and
*                  call PM_DELETE_PERSISTENT
*
************************************************************************
* Changelog:
* - 2001-12-14   : (SB)  Initial Version
************************************************************************

  call method LOAD_SPECIAL_OBJECT_INFO( ).

  call method PM_DELETE_PERSISTENT( ).

           &quot;OS_PM_DELETE_PERSISTENT .
  endmethod.</source>
  </method>
  <method CLSNAME="ZCB_NAOCT_QTD_CTRLD" CMPNAME="PM_CHECK_AND_SET_ATTRIBUTES" VERSION="1" LANGU="E" DESCRIPT="Checks and Sets Persistent Attributes" EXPOSURE="1" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCB_NAOCT_QTD_CTRLD" CMPNAME="PM_CHECK_AND_SET_ATTRIBUTES" SCONAME="I_BUSINESS_KEY" VERSION="1" LANGU="E" DESCRIPT="Business Key" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TYP_BUSINESS_KEY" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCB_NAOCT_QTD_CTRLD" CMPNAME="PM_CHECK_AND_SET_ATTRIBUTES" SCONAME="I_ID_PROVIDED" VERSION="1" LANGU="E" DESCRIPT="With Which Identifiers Were Loading and Checking Performed" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TYP_ID_STATUS" PARVALUE="0" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCB_NAOCT_QTD_CTRLD" CMPNAME="PM_CHECK_AND_SET_ATTRIBUTES" SCONAME="I_OBJECT_DATA" VERSION="1" LANGU="E" DESCRIPT="Data Loaded from Database" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TYP_DB_DATA"/>
   <exception CLSNAME="ZCB_NAOCT_QTD_CTRLD" CMPNAME="PM_CHECK_AND_SET_ATTRIBUTES" SCONAME="CX_OS_OBJECT_NOT_FOUND" VERSION="1" LANGU="E" DESCRIPT="Object Services Exception" MTDTYPE="0" EDITORDER="0 "/>
   <source>method PM_CHECK_AND_SET_ATTRIBUTES.
***BUILD 090501
     &quot; importing I_OBJECT_DATA  type TYP_DB_DATA
     &quot; importing I_BUSINESS_KEY type TYP_BUSINESS_KEY optional
     &quot;           I_ID_PROVIDED type TYP_ID_STATUS default ID_STATUS_NONE
************************************************************************
* Purpose        : check loaded object data of a persistent object and
*                  set object&apos;s attributes
*                  if CURRENT is clear, create new representant,
*                  if CURRENT is set, use this object to set the loaded
*                  data
*                  If I_ID_PROVIDED is set to ID_STATUS_NONE, Look for
*                  an entry in SPECIAL_OBJECT_INFO with the given
*                  Business Key
*
* Version        : 2.0
*
* Precondition   :
*
* Postcondition  : Persistent object data is checked and object
*                  attributes are set. CURRENT is set.
*
* OO Exception   : CX_OS_OBJECT_STATE(INTERNAL_CHANGED,INTERNAL_DELETED,
*                                     INTERNAL_TRANSIENT, INTERNAL_NEW)
*                  propagates MAP_SET_ATTRIBUTES
*
* Implementation : 1. If CURRENT is clear:
*                   1a. I_ID_PROVIDED = ID_STATUS_NONE?:
*                       Check if another object exists with this
*                       Business Key
*                   1b. I_ID_PROVIDED &lt;&gt; ID_STATUS_NONE or no entry
*                       found:
*                       Create a new Representative object
*                   1c. If an object has been found:
*                       Check if it is allowed to set it
*                  2. set PM_DBSTATUS EXISTING
*                  3. Temporarily save CURRENT_*
*                  4. set object attributes (resolving references)
*                  5. restore CURRENT_*
*
************************************************************************
* Changelog:
* - 2000-05-17   : (BGR) Initial Version 2.0
* - 2000-08-03   : (SB) OO Exceptions
************************************************************************

  data: LOADED_BUSINESS_KEY       type TYP_BUSINESS_KEY.

  data: TEMP_CURRENT_OBJECT_INFO  type TYP_OBJECT_INFO,
        TEMP_CURRENT_OBJECT_INDEX type TYP_INDEX,
        TEMP_CURRENT_SPECIAL_OI   type TYP_SPECIAL_OBJECT_INFO,
        TEMP_CURRENT_OBJECT_IREF  type TYP_OBJECT_IREF,
        INTERNAL_UNDO_INFO_ITEM   type TYP_INTERNAL_UNDO_INFO,
        TEMP_OBJECT_REF           type TYP_OBJECT_REF.

* * Get both Business Key from DB data
  call method MAP_EXTRACT_IDENTIFIER
       exporting I_DB_DATA      = I_OBJECT_DATA
       importing E_BUSINESS_KEY = LOADED_BUSINESS_KEY.

  if ( CURRENT_OBJECT_IREF is initial ).

*   * 1. If CURRENT is clear:

    if ( I_ID_PROVIDED = ID_STATUS_NONE ).

*   * 1a. Check if another object exists with this Business Key

      read table SPECIAL_BKEY_TAB into TEMP_CURRENT_SPECIAL_OI
           with table key BUSINESS_KEY = LOADED_BUSINESS_KEY.
      if ( sy-subrc = 0 ).

        read table SPECIAL_OBJECT_INFO into
             CURRENT_SPECIAL_OBJECT_INFO
             with table key
             OBJECT_ID = TEMP_CURRENT_SPECIAL_OI-OBJECT_ID.
        call method OS_LOAD_AND_VALIDATE_CURRENT
             exporting I_INDEX = sy-tabix.

      endif. &quot; ( Entry found for BKEY? )

    endif. &quot;( no ID Provided )

    if ( CURRENT_OBJECT_IREF is initial ).

*     * 1b. Create a new Representative object and a new entry
      call method PM_CREATE_REPRESENTANT
           exporting I_BUSINESS_KEY = LOADED_BUSINESS_KEY.

    else. &quot;( Found an entry for the business key )

*     * Now we know an entry exists on DB
      CURRENT_OBJECT_INFO-PM_DBSTATUS = OSCON_DBSTATUS_EXISTING.
      modify OBJECT_INFO from CURRENT_OBJECT_INFO
             index CURRENT_OBJECT_INDEX.

*     * 1c. Check if it is allowed to use the found object.
      case CURRENT_OBJECT_INFO-PM_STATUS.

*       * PM_STATUS = NOT_LOADED: re-use entry and object
        when OSCON_OSTATUS_NOT_LOADED.

*       * PM_STATUS = LOADED: re-use entry and object
        when OSCON_OSTATUS_LOADED.

*       *  other PM_STATUS: Error!
        when OSCON_OSTATUS_NEW.

*!!!!!!!!!! Error! Object already exists on DB
*         * This NEW object should be created on DB by the next
*         * COMMIT. Now an entry was found with the same key!
          class CX_OS_OBJECT_STATE definition load.
          raise exception type CX_OS_OBJECT_STATE
               exporting OBJECT = CURRENT_OBJECT_IREF
                         TEXTID = CX_OS_OBJECT_STATE=&gt;INTERNAL_NEW.

        when OSCON_OSTATUS_CHANGED.

*!!!!!!!!!!! Error: Object has a DB relevant status
          class CX_OS_OBJECT_STATE definition load.
          raise exception type CX_OS_OBJECT_STATE
               exporting OBJECT = CURRENT_OBJECT_IREF
                         TEXTID = CX_OS_OBJECT_STATE=&gt;INTERNAL_CHANGED.

        when OSCON_OSTATUS_DELETED.

*!!!!!!!!!!! Error: Object marked for deletion
          class CX_OS_OBJECT_STATE definition load.
          raise exception type CX_OS_OBJECT_STATE
               exporting OBJECT = CURRENT_OBJECT_IREF
                         TEXTID = CX_OS_OBJECT_STATE=&gt;INTERNAL_DELETED.

        when OSCON_OSTATUS_TRANSIENT.

*!!!!!!!!!!! Error: Object is transient
          class CX_OS_OBJECT_STATE definition load.
          raise exception type CX_OS_OBJECT_STATE
               exporting OBJECT = CURRENT_OBJECT_IREF
                        TEXTID = CX_OS_OBJECT_STATE=&gt;INTERNAL_TRANSIENT.

      endcase.

    endif. &quot;( CURRENT initial? )
  endif. &quot;( CURRENT initial? )

* * 2. set PM_DBSTATUS EXISTING
  CURRENT_OBJECT_INFO-PM_DBSTATUS          = OSCON_DBSTATUS_EXISTING.

* * internal Undo entry:
  INTERNAL_UNDO_INFO_ITEM-OBJECT_INDEX = CURRENT_OBJECT_INDEX.
  INTERNAL_UNDO_INFO_ITEM-OBJECT_INFO  = CURRENT_OBJECT_INFO.
  append INTERNAL_UNDO_INFO_ITEM to INTERNAL_UNDO_INFO.
  INTERNAL_NEXT_UNDO_INFO = sy-tabix + 1.

* * To avoid recursive loading of the same object (INIT method)
* * temporarily set status &apos;LOADING&apos;
  CURRENT_OBJECT_INFO-PM_STATUS = OSCON_OSTATUS_LOADING.
  modify OBJECT_INFO from CURRENT_OBJECT_INFO
         index CURRENT_OBJECT_INDEX.

* * 3. Temporarily save CURRENT_*
  TEMP_CURRENT_OBJECT_IREF  = CURRENT_OBJECT_IREF.
  TEMP_CURRENT_OBJECT_INFO  = CURRENT_OBJECT_INFO.
  TEMP_CURRENT_OBJECT_INDEX = CURRENT_OBJECT_INDEX.
  TEMP_CURRENT_SPECIAL_OI   = CURRENT_SPECIAL_OBJECT_INFO.

* * 4. set object attributes (resolving references)
  TEMP_OBJECT_REF ?= CURRENT_OBJECT_IREF .

  call method MAP_SET_ATTRIBUTES
       exporting I_OBJECT_DATA = I_OBJECT_DATA
                 I_OBJECT_REF  = TEMP_OBJECT_REF.

* * 5. restore CURRENT_*
  CURRENT_OBJECT_INFO          = TEMP_CURRENT_OBJECT_INFO.
  CURRENT_OBJECT_INDEX         = TEMP_CURRENT_OBJECT_INDEX.
  CURRENT_SPECIAL_OBJECT_INFO  = TEMP_CURRENT_SPECIAL_OI.
  CURRENT_OBJECT_IREF          = TEMP_CURRENT_OBJECT_IREF.

* * the method call get_ref_by_oid in map_set_attributes
* * eventually creates new entries in the
* * administrative data tables, it is necessary to
* * to recalculate the index
  read table OBJECT_INFO transporting no fields
     with table key OBJECT_ID = CURRENT_OBJECT_INFO-OBJECT_ID.
  CURRENT_OBJECT_INDEX = sy-tabix.

           &quot;PM_CHECK_AND_SET_ATTRIBUTES
  endmethod.</source>
  </method>
  <method CLSNAME="ZCB_NAOCT_QTD_CTRLD" CMPNAME="PM_CREATE_REPRESENTANT" VERSION="1" LANGU="E" DESCRIPT="Generate New Wrapper Object and Administration Entry" EXPOSURE="1" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCB_NAOCT_QTD_CTRLD" CMPNAME="PM_CREATE_REPRESENTANT" SCONAME="I_BUSINESS_KEY" VERSION="1" LANGU="E" DESCRIPT="Business Key" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TYP_BUSINESS_KEY" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCB_NAOCT_QTD_CTRLD" CMPNAME="PM_CREATE_REPRESENTANT" SCONAME="RESULT" VERSION="1" LANGU="E" DESCRIPT="Newly Generated Wrapper Object" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="TYP_OBJECT_REF"/>
   <source>method PM_CREATE_REPRESENTANT.
***BUILD 093901
     &quot; importing I_BUSINESS_KEY type TYP_BUSINESS_KEY
     &quot; returning result         type TYP_OBJECT_REF
************************************************************************
* Purpose        : Create a new representative object including a new
*                  entry in administrative data (OBJECT_INFO and
*                  SPECIAL_OBJECT_INFO)
*
* Version        : 2.0
*
* Precondition   : No object exists with the same Business Key
*
* Postcondition  : A new object exists, corresponding entries in
*                  OBJECT_INFO and SPECIAL_OBJECT_INFO have been
*                  inserted, CURRENT is set
*
* OO Exceptions  : --
*
* Implementation : 1. Create object and set BKey attributes
*                  2. Get internal OID for the new object
*                  3. Create new entry in SPECIAL_OBJECT_INFO
*                  4. Let super class create a new entry in OBJECT_INFO
*
************************************************************************
* Changelog:
* - 2000-03-07   : (BGR) Initial Version 2.0
* - 2000-08-02   : (SB)  OO Exceptions
* - 2001-10-30   : (SB)  Type Mapping
************************************************************************

  data: NEW_OBJECT type ref to ZCL_NAOCT_QTD_CTRLD.

* * 1. Create object and set BKey attributes
  create object NEW_OBJECT.

* &lt; Generated from mapping:
  NEW_OBJECT-&gt;SPART = I_BUSINESS_KEY-SPART.
  NEW_OBJECT-&gt;KUNNR = I_BUSINESS_KEY-KUNNR.
  NEW_OBJECT-&gt;ZZDEAL_CODE = I_BUSINESS_KEY-ZZDEAL_CODE.
  NEW_OBJECT-&gt;ENDDT = I_BUSINESS_KEY-ENDDT.
  NEW_OBJECT-&gt;VBELN = I_BUSINESS_KEY-VBELN.
  NEW_OBJECT-&gt;POSNR = I_BUSINESS_KEY-POSNR.
* &gt;

* * 2. Get internal OID for the new object and set CURRENT_SPECIAL_OI
  clear CURRENT_SPECIAL_OBJECT_INFO.

  CURRENT_SPECIAL_OBJECT_INFO-OBJECT_ID =
      OS_GET_INTERNAL_OID_BY_REF( I_OBJECT = NEW_OBJECT ).
  CURRENT_SPECIAL_OBJECT_INFO-BUSINESS_KEY = I_BUSINESS_KEY.
  CURRENT_SPECIAL_OBJECT_INFO-ID_STATUS = ID_STATUS_COMPLETE.

* * 3. Create new entry in SPECIAL_OBJECT_INFO
  insert CURRENT_SPECIAL_OBJECT_INFO into table SPECIAL_OBJECT_INFO.
  insert CURRENT_SPECIAL_OBJECT_INFO into table SPECIAL_BKEY_TAB.

* * 4. Let super class create a new entry in OBJECT_INFO
  call method OS_CREATE_NEW_ENTRY_FOR_REPR
       exporting I_OBJECT = NEW_OBJECT
                 I_INTERNAL_OID = CURRENT_SPECIAL_OBJECT_INFO-OBJECT_ID.

  RESULT = NEW_OBJECT.

           &quot;PM_CREATE_REPRESENTANT
  endmethod.</source>
  </method>
  <method CLSNAME="ZCB_NAOCT_QTD_CTRLD" CMPNAME="PM_DELETE_PERSISTENT" VERSION="1" LANGU="E" DESCRIPT="Deletes Persistent Object from Database" EXPOSURE="1" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <source>method PM_DELETE_PERSISTENT.
***BUILD 090501
************************************************************************
* Purpose        : Delete persistent object. It is marked DELETED in
*                  memory and removed from DB when the top transaction
*                  is closed.
*
* Version        : 2.0
*
* Precondition   : The object is persistent (not transient), CURRENT
*                  is set
*
* Postcondition  : Instance is marked for deletion.
*
* OO Exception   : CX_OS_OBJECT_STATE(CREATED_AND_DELETED,TRANSIENT)
*                  propagates OS_PM_DELETED_PERSISTENT
*                  ( propagates MAP_LOAD_FROM_DATABASE_KEY )
*
* Implementation : 1. Check the state of the object:
*                    1a. Object is already deleted - done
*                    1b. Object is transient - Error
*                    1c. Object is new, loaded or changed - continue
*                    1d. Object is not_loaded:
*                        Check DBSTATUS:
*                       1d1. DBSTATUS Unknown/Existing - continue
*                       1d2. DBSTATUS Not existing - Error
*                   2. Completion: call OS_PM_DELETED_PERSISTENT
*
************************************************************************
* Changelog:
* - 2000-03-06   : (BGR) Initial Version 2.0
* - 2000-08-03   : (SB) OO Exceptions
************************************************************************

  data: TEMP_CURRENT_OBJECT_IREF type TYP_OBJECT_IREF .

* * 1. Check the state of the object:
  case CURRENT_OBJECT_INFO-PM_STATUS.

  when OSCON_OSTATUS_DELETED.

*   * 1a. Object is already deleted - done
    call method OS_CLEAR_CURRENT.
    clear CURRENT_SPECIAL_OBJECT_INFO.
    exit.


  when OSCON_OSTATUS_TRANSIENT.

*   * 1b. Object is transient - Error
*!! error: object already exists transient
    TEMP_CURRENT_OBJECT_IREF = CURRENT_OBJECT_IREF.
    call method OS_CLEAR_CURRENT.
    clear CURRENT_SPECIAL_OBJECT_INFO.
    class CX_OS_OBJECT_STATE definition load.
    raise exception type CX_OS_OBJECT_STATE
         exporting OBJECT = TEMP_CURRENT_OBJECT_IREF
                   TEXTID = CX_OS_OBJECT_STATE=&gt;TRANSIENT.


  when OSCON_OSTATUS_NEW     or
       OSCON_OSTATUS_CHANGED or
       OSCON_OSTATUS_LOADED.

*   * 1c. Object is new, loaded or changed - continue


  when OSCON_OSTATUS_NOT_LOADED.

*   * 1d. Object is not_loaded: Check DBSTATUS:
    case CURRENT_OBJECT_INFO-PM_DBSTATUS.


    when OSCON_DBSTATUS_EXISTING
      or OSCON_DBSTATUS_UNKNOWN.

*     * 1d1. DBSTATUS Existing/Unknown - continue


    when OSCON_DBSTATUS_NOT_EXISTING.
*     * 1d2. DBSTATUS Not existing - Error
*!!!! error: No DB entry for the object
      TEMP_CURRENT_OBJECT_IREF = CURRENT_OBJECT_IREF.
      call method OS_CLEAR_CURRENT.
      clear CURRENT_SPECIAL_OBJECT_INFO.
      class CX_OS_OBJECT_STATE definition load.
      raise exception type CX_OS_OBJECT_STATE
           exporting OBJECT = TEMP_CURRENT_OBJECT_IREF
                     TEXTID = CX_OS_OBJECT_STATE=&gt;CREATED_AND_DELETED.

    endcase. &quot;PM_DBSTATUS
  endcase. &quot;PM_STATUS

* * 2. Completion: call OS_PM_DELETED_PERSISTENT
  call method OS_PM_DELETED_PERSISTENT.

  clear CURRENT_SPECIAL_OBJECT_INFO.

           &quot;PM_DELETE_PERSISTENT
  endmethod.</source>
  </method>
  <method CLSNAME="CL_OS_CA_COMMON" CMPNAME="PM_LOAD" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method PM_LOAD.
***BUILD 090501
************************************************************************
* Purpose        : Load data from DB into Object specified by CURRENT
*
* Version        : 2.0
*
* Precondition   : CURRENT_* is set
*
* Postcondition  : object is loaded or exceptions is raised
*
* OO Exceptions  : propagates PM_LOAD_AND_SET_ATTRIBUTES
*
* Implementation : call PM_LOAD_AND_SET_ATTRIBUTES
*
************************************************************************
* Changelog:
* - 2000-03-02   : (BGR) Initial Version
* - 2000-08-03   : (SB)  OO Exceptions
* - 2001-11-14   : (SB)  Type mapping
************************************************************************

  call method PM_LOAD_AND_SET_ATTRIBUTES
       exporting I_BUSINESS_KEY =
                         CURRENT_SPECIAL_OBJECT_INFO-BUSINESS_KEY.

           &quot;PM_LOAD
  endmethod.</source>
  </method>
  <method CLSNAME="ZCB_NAOCT_QTD_CTRLD" CMPNAME="PM_LOAD_AND_SET_ATTRIBUTES" VERSION="1" LANGU="E" DESCRIPT="Loads and Sets Persistent Attributes" EXPOSURE="1" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCB_NAOCT_QTD_CTRLD" CMPNAME="PM_LOAD_AND_SET_ATTRIBUTES" SCONAME="I_BUSINESS_KEY" VERSION="1" LANGU="E" DESCRIPT="Business Key" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TYP_BUSINESS_KEY" PAROPTIONL="X"/>
   <exception CLSNAME="ZCB_NAOCT_QTD_CTRLD" CMPNAME="PM_LOAD_AND_SET_ATTRIBUTES" SCONAME="CX_OS_OBJECT_NOT_FOUND" VERSION="1" LANGU="E" DESCRIPT="Object Services Exception" MTDTYPE="0" EDITORDER="0 "/>
   <source>method PM_LOAD_AND_SET_ATTRIBUTES.
***BUILD 090501
     &quot; importing I_BUSINESS_KEY type TYP_BUSINESS_KEY optional

************************************************************************
* Purpose        : Load object data of a persistent object and set
*                  object&apos;s attributes
*                  if CURRENT is clear, load data using I_BUSINESS_KEY.
*                  if CURRENT is set, use the BKEY stored there.
*
* Version        : 2.0
*
* Precondition   : An entry for the given Business Key exists on
*                  database. CURRENT can be set (use this
*                  object to set attributes to) or clear.
*
* Postcondition  : Persistent object data is loaded and object
*                  attributes are set. CURRENT is set.
*
* OO Exceptions  : propagates PM_CHECK_AND_SET_ATTRIBUTES
*                  propagates MAP_LOAD_FROM_DATABASE_KEY/GUID
*
* Implementation : 1. Check Source of DB Keys: Business Key from
*                     CURRENT_SPECIAL_OBJECT_INFO or from I_BUSINESS_KEY
*                  2. Load from Database
*                  2.a. Type Mapping: Set E_TYPE and return if case of
*                       type mismatch
*                  3. Check loaded data and set object&apos;s attributes
*
************************************************************************
* Changelog:
* - 2000-03-07   : (BGR) Initial Version 2.0
* - 2000-05-17   : (BGR) use PM_CHECK_AND_SET_ATTRIBUTES
* - 2000-08-03   : (SB) OO Exceptions
* - 2004-01-21   : (SB) Type Mapping Refactoring
* - 2005-02-22   : (SB) Set Exception parameters
************************************************************************

  data: OBJECT_DATA_TAB     type TYP_DB_DATA_TAB,
        OBJECT_DATA         type TYP_DB_DATA,
        BUSINESS_KEY        type TYP_BUSINESS_KEY,
        BUSINESS_KEY_TAB    type TYP_BUSINESS_KEY_TAB.

  data: SERIALIZED_BUSINESS_KEY  type STRING .

* * 1. Check Source of DB Keys: Business Key from
* *    CURRENT_SPECIAL_OBJECT_INFO or from I_BUSINESS_KEY?
  if ( CURRENT_OBJECT_IREF is initial ).

    BUSINESS_KEY = I_BUSINESS_KEY.

  else. &quot;( CURRENT is set ).

*   * Get BKey from CURRENT_SPECIAL_OBJECT_INFO
    BUSINESS_KEY = CURRENT_SPECIAL_OBJECT_INFO-BUSINESS_KEY.

  endif. &quot;( CURRENT set? ).


* * 2. Load from Database
  try.
      append BUSINESS_KEY to BUSINESS_KEY_TAB.
      call method MAP_LOAD_FROM_DATABASE_KEY
           exporting I_BUSINESS_KEY_TAB = BUSINESS_KEY_TAB
           receiving result = OBJECT_DATA_TAB.
    catch CX_OS_DB_SELECT.
      class CX_OS_OBJECT_NOT_FOUND definition load.
      call method MAP_SERIALIZE_BKEY
           exporting I_BUSINESS_KEY = BUSINESS_KEY
           receiving RESULT = SERIALIZED_BUSINESS_KEY.
      raise exception type CX_OS_OBJECT_NOT_FOUND
        exporting
          BKEY   = SERIALIZED_BUSINESS_KEY
          TEXTID = CX_OS_OBJECT_NOT_FOUND=&gt;BY_BKEY.
  endtry.

  read table OBJECT_DATA_TAB into OBJECT_DATA index 1.


* * 3. Now Check the loaded data and set the Object.
  call method PM_CHECK_AND_SET_ATTRIBUTES
       exporting I_OBJECT_DATA  = OBJECT_DATA
                 I_BUSINESS_KEY = BUSINESS_KEY
                 I_ID_PROVIDED  = ID_STATUS_COMPLETE.

           &quot;PM_LOAD_AND_SET_ATTRIBUTES
  endmethod.</source>
  </method>
  <method CLSNAME="CL_OS_CA_COMMON" CMPNAME="SAVE_SPECIAL_OBJECT_INFO" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method SAVE_SPECIAL_OBJECT_INFO.
***BUILD 090501
************************************************************************
* Purpose        : Save CURRENT_SPECIAL_OBJECT_INFO into
*                  SPECIAL_OBJECT_INFO
*
* Version        : 2.0
*
* Precondition   : Index is set in CURRENT_OBJECT_INDEX
*
* Postcondition  : entry is saved
*
* OO Exceptions  : -
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 2000-03-02   : (BGR) Initial Version
************************************************************************

  modify SPECIAL_OBJECT_INFO from CURRENT_SPECIAL_OBJECT_INFO
         index CURRENT_OBJECT_INDEX.

           &quot;SAVE_SPECIAL_OBJECT_INFO
  endmethod.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZCA_NAOCT_QTD_CTRLH" VERSION="1" LANGU="E" DESCRIPT="Agent Allowed quantity per Deal Code - Persistence" CATEGORY="00" EXPOSURE="0" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " REFCLSNAME="ZCB_NAOCT_QTD_CTRLH">
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <attribute CLSNAME="ZCA_NAOCT_QTD_CTRLH" CMPNAME="AGENT" VERSION="1" LANGU="E" DESCRIPT="Class Agent - Singleton" EXPOSURE="2" STATE="1" EDITORDER="0 " ATTDECLTYP="1" ATTRDONLY="X" ATTEXPVIRT="0" TYPTYPE="3" TYPE="ZCA_NAOCT_QTD_CTRLH" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <inheritance CLSNAME="ZCA_NAOCT_QTD_CTRLH" REFCLSNAME="ZCB_NAOCT_QTD_CTRLH" VERSION="1" STATE="1"/>
  <method CLSNAME="ZCA_NAOCT_QTD_CTRLH" CMPNAME="CLASS_CONSTRUCTOR" VERSION="1" LANGU="E" DESCRIPT="Class Constructor" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="2" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CLASS_CONSTRUCTOR.
***BUILD 090501
************************************************************************
* Purpose        : Initialize the &apos;class&apos;.
*
* Version        : 2.0
*
* Precondition   : -
*
* Postcondition  : Singleton is created.
*
* OO Exceptions  : -
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 1999-09-20   : (OS) Initial Version
* - 2000-03-06   : (BGR) 2.0 modified REGISTER_CLASS_AGENT
************************************************************************
* GENERATED: Do not modify
************************************************************************

  create object AGENT.

  call method AGENT-&gt;REGISTER_CLASS_AGENT
    exporting
      I_CLASS_NAME          = &apos;ZCL_NAOCT_QTD_CTRLH&apos;
      I_CLASS_AGENT_NAME    = &apos;ZCA_NAOCT_QTD_CTRLH&apos;
      I_CLASS_GUID          = &apos;DE665AF82D051EE6ABEFD826BEC20476&apos;
      I_CLASS_AGENT_GUID    = &apos;DE665AF82D051EE6ABEFD836DB11C476&apos;
      I_AGENT               = AGENT
      I_STORAGE_LOCATION    = &apos;ZNAOCT_QTD_CTRLH&apos;
      I_CLASS_AGENT_VERSION = &apos;2.0&apos;.

           &quot;CLASS_CONSTRUCTOR
  endmethod.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZCA_NAOCT_QTD_CTRLD" VERSION="1" LANGU="E" DESCRIPT="Agent Deal Code consumption - Persistence" CATEGORY="00" EXPOSURE="0" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " REFCLSNAME="ZCB_NAOCT_QTD_CTRLD">
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <attribute CLSNAME="ZCA_NAOCT_QTD_CTRLD" CMPNAME="AGENT" VERSION="1" LANGU="E" DESCRIPT="Class Agent - Singleton" EXPOSURE="2" STATE="1" EDITORDER="0 " ATTDECLTYP="1" ATTRDONLY="X" ATTEXPVIRT="0" TYPTYPE="3" TYPE="ZCA_NAOCT_QTD_CTRLD" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <inheritance CLSNAME="ZCA_NAOCT_QTD_CTRLD" REFCLSNAME="ZCB_NAOCT_QTD_CTRLD" VERSION="1" STATE="1"/>
  <method CLSNAME="ZCA_NAOCT_QTD_CTRLD" CMPNAME="CLASS_CONSTRUCTOR" VERSION="1" LANGU="E" DESCRIPT="Class Constructor" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="2" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CLASS_CONSTRUCTOR.
***BUILD 090501
************************************************************************
* Purpose        : Initialize the &apos;class&apos;.
*
* Version        : 2.0
*
* Precondition   : -
*
* Postcondition  : Singleton is created.
*
* OO Exceptions  : -
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 1999-09-20   : (OS) Initial Version
* - 2000-03-06   : (BGR) 2.0 modified REGISTER_CLASS_AGENT
************************************************************************
* GENERATED: Do not modify
************************************************************************

  create object AGENT.

  call method AGENT-&gt;REGISTER_CLASS_AGENT
    exporting
      I_CLASS_NAME          = &apos;ZCL_NAOCT_QTD_CTRLD&apos;
      I_CLASS_AGENT_NAME    = &apos;ZCA_NAOCT_QTD_CTRLD&apos;
      I_CLASS_GUID          = &apos;DE665AF82D051ED6ABEFC657730319BC&apos;
      I_CLASS_AGENT_GUID    = &apos;DE665AF82D051ED6ABEFC665CDAA59BC&apos;
      I_AGENT               = AGENT
      I_STORAGE_LOCATION    = &apos;ZNAOCT_QTD_CTRLD&apos;
      I_CLASS_AGENT_VERSION = &apos;2.0&apos;.

           &quot;CLASS_CONSTRUCTOR
  endmethod.</source>
  </method>
 </CLAS>
 <ENQU VIEWNAME="EZNAOCL_QTD_CTRL" AS4LOCAL="A" AS4VERS="0000" DDLANGUAGE="E" AGGTYPE="E" AUTHCLASS="00" ROOTTAB="ZNAOCT_QTD_CTRLH" DDTEXT="Lock on deal quantity tables">
  <dd26e VIEWNAME="EZNAOCL_QTD_CTRL" TABNAME="ZNAOCT_QTD_CTRLH" TABPOS="0001" FORTABNAME="ZNAOCT_QTD_CTRLH" ENQMODE="X"/>
  <dd26e VIEWNAME="EZNAOCL_QTD_CTRL" TABNAME="ZNAOCT_QTD_CTRLD" TABPOS="0002" FORTABNAME="ZNAOCT_QTD_CTRLH" FORFIELD="ENDDT" FORDIR="I" ENQMODE="X"/>
  <dd27p VIEWNAME="EZNAOCL_QTD_CTRL" OBJPOS="0001" DDLANGUAGE="E" VIEWFIELD="MANDT" TABNAME="ZNAOCT_QTD_CTRLH" FIELDNAME="MANDT" KEYFLAG="X" ROLLNAME="MANDT" ROLLNAMEVI="MANDT" ENQMODE="X" DOMNAME="MANDT" DATATYPE="CLNT" FLENGTH="000003" CHECKTABLE="T000" SHLPORIGIN="P" ENTITYTAB="T000" INTTYPE="C" INTLEN="000006" HEADLEN="03" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" OUTPUTLEN="000003" DECIMALS="000000" DDTEXT="Client" REPTEXT="Cl." SCRTEXT_S="Client" SCRTEXT_M="Client" SCRTEXT_L="Client" OUTPUTSTYLE="00" EXVFLENGTH="000000" EXVDECIMALS="000000"/>
  <dd27p VIEWNAME="EZNAOCL_QTD_CTRL" OBJPOS="0002" DDLANGUAGE="E" VIEWFIELD="SPART" TABNAME="ZNAOCT_QTD_CTRLH" FIELDNAME="SPART" KEYFLAG="X" ROLLNAME="SPART" ROLLNAMEVI="SPART" ENQMODE="X" MEMORYID="SPA" DOMNAME="SPART" DATATYPE="CHAR" FLENGTH="000002" CHECKTABLE="TSPA" SHLPORIGIN="P" SHLPNAME="C_SPART" SHLPFIELD="SPART" ENTITYTAB="TSPA" INTTYPE="C" INTLEN="000004" LOGFLAG="X" HEADLEN="02" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" OUTPUTLEN="000002" DECIMALS="000000" DDTEXT="Division" REPTEXT="Dv" SCRTEXT_S="Division" SCRTEXT_M="Division" SCRTEXT_L="Division" OUTPUTSTYLE="00" EXVFLENGTH="000000" EXVDECIMALS="000000"/>
  <dd27p VIEWNAME="EZNAOCL_QTD_CTRL" OBJPOS="0003" DDLANGUAGE="E" VIEWFIELD="KUNNR" TABNAME="ZNAOCT_QTD_CTRLH" FIELDNAME="KUNNR" KEYFLAG="X" ROLLNAME="KUNNR" ROLLNAMEVI="KUNNR" ENQMODE="X" MEMORYID="KUN" DOMNAME="KUNNR" DATATYPE="CHAR" FLENGTH="000010" CHECKTABLE="KNA1" SHLPORIGIN="P" SHLPNAME="C_KUNNR" SHLPFIELD="KUNNR" ENTITYTAB="KNA1" INTTYPE="C" INTLEN="000020" LOGFLAG="X" HEADLEN="10" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" OUTPUTLEN="000010" DECIMALS="000000" CONVEXIT="ALPHA" DDTEXT="Customer Number" REPTEXT="Customer" SCRTEXT_S="Customer" SCRTEXT_M="Customer" SCRTEXT_L="Customer" OUTPUTSTYLE="00" EXVFLENGTH="000000" EXVDECIMALS="000000"/>
  <dd27p VIEWNAME="EZNAOCL_QTD_CTRL" OBJPOS="0004" DDLANGUAGE="E" VIEWFIELD="ZZDEAL_CODE" TABNAME="ZNAOCT_QTD_CTRLH" FIELDNAME="ZZDEAL_CODE" KEYFLAG="X" ROLLNAME="ZGLOC_DEAL_CODE" ROLLNAMEVI="ZGLOC_DEAL_CODE" ENQMODE="X" DOMNAME="CHAR005" DATATYPE="CHAR" FLENGTH="000005" INTTYPE="C" INTLEN="000010" HEADLEN="17" SCRLEN1="10" SCRLEN2="17" SCRLEN3="20" OUTPUTLEN="000005" DECIMALS="000000" DDTEXT="Deal code - JBOSS" REPTEXT="Deal code - JBOSS" SCRTEXT_S="Deal code" SCRTEXT_M="Deal code - JBOSS" SCRTEXT_L="Deal code - JBOSS" OUTPUTSTYLE="00" EXVFLENGTH="000000" EXVDECIMALS="000000"/>
  <dd27p VIEWNAME="EZNAOCL_QTD_CTRL" OBJPOS="0005" DDLANGUAGE="E" VIEWFIELD="ENDDT" TABNAME="ZNAOCT_QTD_CTRLH" FIELDNAME="ENDDT" KEYFLAG="X" ROLLNAME="ZNAOCE_DEAL_END" ROLLNAMEVI="VIM_ENDDA" ENQMODE="X" DOMNAME="DATUM" DATATYPE="DATS" FLENGTH="000008" SHLPORIGIN="T" INTTYPE="D" INTLEN="000016" HEADLEN="15" SCRLEN1="10" SCRLEN2="15" SCRLEN3="15" OUTPUTLEN="000010" DECIMALS="000000" DDTEXT="Expiration date" REPTEXT="Expiration date" SCRTEXT_S="Expiration" SCRTEXT_M="Expiration date" SCRTEXT_L="Expiration date" OUTPUTSTYLE="00" EXVFLENGTH="000000" EXVDECIMALS="000000"/>
  <dd27p VIEWNAME="EZNAOCL_QTD_CTRL" OBJPOS="0006" DDLANGUAGE="E" VIEWFIELD="VBELN" TABNAME="ZNAOCT_QTD_CTRLD" FIELDNAME="VBELN" KEYFLAG="X" ROLLNAME="VBELN_VA" ROLLNAMEVI="VBELN_VA" ENQMODE="X" MEMORYID="AUN" DOMNAME="VBELN" DATATYPE="CHAR" FLENGTH="000010" CHECKTABLE="VBUK" SHLPORIGIN="P" ENTITYTAB="VBUK" INTTYPE="C" INTLEN="000020" HEADLEN="10" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" OUTPUTLEN="000010" DECIMALS="000000" CONVEXIT="ALPHA" DDTEXT="Sales Document" REPTEXT="Sales Doc." SCRTEXT_S="Sales Doc." SCRTEXT_M="Sales Document" SCRTEXT_L="Sales Document" OUTPUTSTYLE="00" EXVFLENGTH="000000" EXVDECIMALS="000000"/>
  <dd27p VIEWNAME="EZNAOCL_QTD_CTRL" OBJPOS="0007" DDLANGUAGE="E" VIEWFIELD="POSNR" TABNAME="ZNAOCT_QTD_CTRLD" FIELDNAME="POSNR" KEYFLAG="X" ROLLNAME="POSNR_VA" ROLLNAMEVI="POSNR_VA" ENQMODE="X" MEMORYID="APO" DOMNAME="POSNR" DATATYPE="NUMC" FLENGTH="000006" CHECKTABLE="VBUP" SHLPORIGIN="P" ENTITYTAB="VBUP" INTTYPE="N" INTLEN="000012" HEADLEN="06" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" OUTPUTLEN="000006" DECIMALS="000000" DDTEXT="Sales Document Item" REPTEXT="Item" SCRTEXT_S="Item" SCRTEXT_M="Item" SCRTEXT_L="Sales Document Item" OUTPUTSTYLE="00" EXVFLENGTH="000000" EXVDECIMALS="000000"/>
  <ddena VIEWNAME="EZNAOCL_QTD_CTRL" TABNAME="ZNAOCT_QTD_CTRLH" FIELDNAME="MANDT" VIEWFIELD="MANDT"/>
  <ddena VIEWNAME="EZNAOCL_QTD_CTRL" TABNAME="ZNAOCT_QTD_CTRLH" FIELDNAME="SPART" VIEWFIELD="SPART"/>
  <ddena VIEWNAME="EZNAOCL_QTD_CTRL" TABNAME="ZNAOCT_QTD_CTRLH" FIELDNAME="KUNNR" VIEWFIELD="KUNNR"/>
  <ddena VIEWNAME="EZNAOCL_QTD_CTRL" TABNAME="ZNAOCT_QTD_CTRLH" FIELDNAME="ZZDEAL_CODE" VIEWFIELD="ZZDEAL_CODE"/>
  <ddena VIEWNAME="EZNAOCL_QTD_CTRL" TABNAME="ZNAOCT_QTD_CTRLH" FIELDNAME="ENDDT" VIEWFIELD="ENDDT"/>
  <ddena VIEWNAME="EZNAOCL_QTD_CTRL" TABNAME="ZNAOCT_QTD_CTRLD" FIELDNAME="MANDT" VIEWFIELD="MANDT"/>
  <ddena VIEWNAME="EZNAOCL_QTD_CTRL" TABNAME="ZNAOCT_QTD_CTRLD" FIELDNAME="SPART" VIEWFIELD="SPART"/>
  <ddena VIEWNAME="EZNAOCL_QTD_CTRL" TABNAME="ZNAOCT_QTD_CTRLD" FIELDNAME="KUNNR" VIEWFIELD="KUNNR"/>
  <ddena VIEWNAME="EZNAOCL_QTD_CTRL" TABNAME="ZNAOCT_QTD_CTRLD" FIELDNAME="ZZDEAL_CODE" VIEWFIELD="ZZDEAL_CODE"/>
  <ddena VIEWNAME="EZNAOCL_QTD_CTRL" TABNAME="ZNAOCT_QTD_CTRLD" FIELDNAME="ENDDT" VIEWFIELD="ENDDT"/>
  <ddena VIEWNAME="EZNAOCL_QTD_CTRL" TABNAME="ZNAOCT_QTD_CTRLD" FIELDNAME="VBELN" VIEWFIELD="VBELN"/>
  <ddena VIEWNAME="EZNAOCL_QTD_CTRL" TABNAME="ZNAOCT_QTD_CTRLD" FIELDNAME="POSNR" VIEWFIELD="POSNR"/>
 </ENQU>
 <FUGR AREA="ZNAOCV_QTD_CTRLH" SPRAS="E" AREAT="Extended Table Maintenance (Generated)">
  <functionGroupDocumentation/>
  <mainprogram NAME="SAPLZNAOCV_QTD_CTRLH" SQLX="X" VARCL="X" DBAPL="S" DBNA="D$" SUBC="F" APPL="S" RMAND="200" RLOAD="E" FIXPT="X" LDBNAME="D$S" UCCHECK="X">
   <textPool/>
   <dynpros>
    <dynpro PROG="SAPLZNAOCV_QTD_CTRLH" DNUM="0001" FNUM="0001" BZMX="61 " BZBR="69 " MILI="192 " MICO="37 " MALI="0 " MACO="0 " NOLI="61 " NOCO="150 " VALP="0 " CUAN="G" SPRA="E" DTEXT="View maint: Overview screen ZNAOCV_QTD_CTRLH">
     <dynprofield FNAM="TCTRL_ZNAOCV_QTD_CTRLH" DIDX="003B" FLG1="F8" FLG2="FC" FLG3="00" FILL="T" FMB1="00" FMB2="00" LENG="96" LINE="01" COLN="02" LTYP="E" LANF="65" LBLK="01" LREP="01" AGLT="00" ADEZ="00"/>
     <dynprofield FNAM="VIM_FRAME_FIELD" DIDX="003C" FLG1="80" FLG2="02" FLG3="88" FMB1="30" FMB2="40" LENG="3C" LINE="01" COLN="00" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="____________________________________________________________"/>
     <dynprofield FNAM="*ZNAOCV_QTD_CTRLH-SPART" DIDX="0002" FLG1="30" FLG2="00" FLG3="00" FMB1="30" FMB2="A0" LENG="28" LINE="01" COLN="01" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" ITYP="4" AGLT="00" ADEZ="00" STXT="Dv" RES1="X"/>
     <dynprofield FNAM="*ZNAOCV_QTD_CTRLH-KUNNR" DIDX="000F" FLG1="30" FLG2="00" FLG3="00" FMB1="30" FMB2="A0" LENG="28" LINE="01" COLN="02" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="Customer" RES1="X"/>
     <dynprofield FNAM="*ZNAOCV_QTD_CTRLH-NAME1" DIDX="0023" FLG1="20" FLG2="00" FLG3="00" FMB1="30" FMB2="A0" LENG="28" LINE="01" COLN="03" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" ITYP="3" AGLT="00" ADEZ="00" STXT="Name"/>
     <dynprofield FNAM="*ZNAOCV_QTD_CTRLH-ZZDEAL_CODE" DIDX="000A" FLG1="30" FLG2="00" FLG3="00" FMB1="30" FMB2="A0" LENG="28" LINE="01" COLN="04" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" ITYP="1" AGLT="00" ADEZ="00" STXT="Deal code"/>
     <dynprofield FNAM="*ZNAOCV_QTD_CTRLH-BEGDT" DIDX="000A" FLG1="30" FLG2="00" FLG3="00" FMB1="30" FMB2="80" LENG="28" LINE="01" COLN="05" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" ITYP="1" AGLT="00" ADEZ="00" STXT="Effective" RES1="X"/>
     <dynprofield FNAM="*ZNAOCV_QTD_CTRLH-ENDDT" DIDX="000A" FLG1="30" FLG2="00" FLG3="00" FMB1="30" FMB2="80" LENG="28" LINE="01" COLN="06" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" ITYP="1" AGLT="00" ADEZ="00" STXT="Expiration" RES1="X"/>
     <dynprofield FNAM="*ZNAOCV_QTD_CTRLH-UOM" DIDX="0003" FLG1="30" FLG2="00" FLG3="00" FMB1="30" FMB2="80" LENG="28" LINE="01" COLN="07" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" ITYP="4" AGLT="00" ADEZ="00" STXT="UoM" RES1="X"/>
     <dynprofield FNAM="*ZNAOCV_QTD_CTRLH-QTD_ALLOWED" DIDX="0013" FLG1="20" FLG2="00" FLG3="00" FMB1="30" FMB2="80" LENG="28" LINE="01" COLN="08" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" ITYP="3" AGLT="00" ADEZ="00" STXT="Allowed quantity"/>
     <dynprofield FNAM="VIM_MARKED" DIDX="0001" FLG1="80" FLG2="00" FLG3="88" FILL="C" FMB1="00" FMB2="20" LENG="01" LINE="01" COLN="00" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" AUTH="102" AGLT="00" ADEZ="00"/>
     <dynprofield FNAM="ZNAOCV_QTD_CTRLH-SPART" DIDX="0002" FLG1="B0" FLG2="00" FLG3="84" FMB1="30" FMB2="28" LENG="02" LINE="01" COLN="01" LTYP="T" LANF="65" LBLK="01" LREP="01" PAID="SPA" TYPE="CHAR" GRP1="KEY" ITYP="C" AGLT="04" ADEZ="00" STXT="__" RES1="X                                      00"/>
     <dynprofield FNAM="ZNAOCV_QTD_CTRLH-KUNNR" DIDX="000F" FLG1="B0" FLG2="00" FLG3="84" FMB1="30" FMB2="28" LENG="0A" LINE="01" COLN="02" LTYP="T" LANF="65" LBLK="01" LREP="01" PAID="KUN" UCNV="ALPHA" TYPE="CHAR" GRP1="KEY" ITYP="C" AGLT="14" ADEZ="00" STXT="__________" RES1="X                                      00"/>
     <dynprofield FNAM="ZNAOCV_QTD_CTRLH-NAME1" DIDX="0023" FLG1="B0" FLG2="02" FLG3="80" FMB1="31" FMB2="20" LENG="23" LINE="01" COLN="03" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" ITYP="C" AGLT="46" ADEZ="00" STXT="___________________________________" RES1="                                       00"/>
     <dynprofield FNAM="ZNAOCV_QTD_CTRLH-ZZDEAL_CODE" DIDX="000A" FLG1="B0" FLG2="00" FLG3="80" FMB1="30" FMB2="20" LENG="05" LINE="01" COLN="04" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" GRP1="KEY" ITYP="C" AGLT="0A" ADEZ="00" STXT="_____" RES1="                                       00"/>
     <dynprofield FNAM="ZNAOCV_QTD_CTRLH-BEGDT" DIDX="000A" FLG1="B0" FLG2="00" FLG3="80" FMB1="00" FMB2="28" LENG="0A" LINE="01" COLN="05" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="DATS" ITYP="D" AGLT="10" ADEZ="00" STXT="__________" RES1="X                                      00"/>
     <dynprofield FNAM="ZNAOCV_QTD_CTRLH-ENDDT" DIDX="000A" FLG1="B0" FLG2="00" FLG3="80" FMB1="30" FMB2="08" LENG="0A" LINE="01" COLN="06" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="DATS" GRP1="KEY" ITYP="D" AGLT="10" ADEZ="00" STXT="__________" RES1="X                                      00"/>
     <dynprofield FNAM="ZNAOCV_QTD_CTRLH-UOM" DIDX="0003" FLG1="B0" FLG2="02" FLG3="84" FMB1="00" FMB2="08" LENG="03" LINE="01" COLN="07" LTYP="T" LANF="65" LBLK="01" LREP="01" UCNV="CUNIT" TYPE="UNIT" ITYP="C" AGLT="06" ADEZ="00" STXT="___" RES1="X                                      00"/>
     <dynprofield FNAM="ZNAOCV_QTD_CTRLH-QTD_ALLOWED" DIDX="0013" FLG1="B0" FLG2="00" FLG3="80" FMB1="00" FMB2="00" LENG="13" LINE="01" COLN="08" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="QUAN" WNAM="ZNAOCV_QTD_CTRLH-UOM" ITYP="P" AGLT="0F" ADEZ="03" STXT="___________________" RES1="                                       00"/>
     <dynprofield FNAM="VIM_POSI_PUSH" DIDX="0000" FLG1="80" FLG2="00" FLG3="88" FILL="P" FMB1="30" FMB2="00" LENG="14" LINE="3D" COLN="14" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="103" AGLT="00" ADEZ="00" STXT="____________________" RES1="                                                                                                                                                                        POSI"/>
     <dynprofield FNAM="VIM_POSITION_INFO" DIDX="0000" FLG1="80" FLG2="02" FLG3="88" FMB1="33" FMB2="00" LENG="1E" LINE="3D" COLN="29" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="______________________________"/>
     <dynprofield FNAM="OK_CODE" DIDX="0000" FLG1="80" FLG2="10" FLG3="08" FMB1="00" FMB2="00" LENG="14" LINE="FF" COLN="01" LTYP="O" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="____________________"/>
     <dynproflowsource>PROCESS BEFORE OUTPUT.
 MODULE LISTE_INITIALISIEREN.
 LOOP AT EXTRACT WITH CONTROL
  TCTRL_ZNAOCV_QTD_CTRLH CURSOR NEXTLINE.
   MODULE LISTE_SHOW_LISTE.
 ENDLOOP.
*
PROCESS AFTER INPUT.
 MODULE LISTE_EXIT_COMMAND AT EXIT-COMMAND.
 MODULE LISTE_BEFORE_LOOP.
 LOOP AT EXTRACT.
   MODULE LISTE_INIT_WORKAREA.
   CHAIN.
    FIELD ZNAOCV_QTD_CTRLH-SPART .
    FIELD ZNAOCV_QTD_CTRLH-KUNNR .
    FIELD ZNAOCV_QTD_CTRLH-NAME1 .
    FIELD ZNAOCV_QTD_CTRLH-ZZDEAL_CODE .
    FIELD ZNAOCV_QTD_CTRLH-ENDDT .
    FIELD ZNAOCV_QTD_CTRLH-BEGDT .
    FIELD ZNAOCV_QTD_CTRLH-UOM .
    FIELD ZNAOCV_QTD_CTRLH-QTD_ALLOWED .
    MODULE SET_UPDATE_FLAG ON CHAIN-REQUEST.
    MODULE COMPLETE_ZNAOCV_QTD_CTRLH ON CHAIN-REQUEST.
   ENDCHAIN.
   FIELD VIM_MARKED MODULE LISTE_MARK_CHECKBOX.
   CHAIN.
    FIELD ZNAOCV_QTD_CTRLH-SPART .
    FIELD ZNAOCV_QTD_CTRLH-KUNNR .
    FIELD ZNAOCV_QTD_CTRLH-ZZDEAL_CODE .
    FIELD ZNAOCV_QTD_CTRLH-ENDDT .
    MODULE LISTE_UPDATE_LISTE.
   ENDCHAIN.
 ENDLOOP.
 MODULE LISTE_AFTER_LOOP.
 MODULE z_change_end_date.</dynproflowsource>
    </dynpro>
   </dynpros>
   <pfstatus ACTCODE="000005" MENCODE="000018" PFKCODE="000007" MOD_LANGU="D">
    <pfstatus_sta CODE="EALX" MODAL="D" ACTCODE="MAIN" PFKCODE="LIST" BUTCODE="LSU" INT_NOTE="One-Level Maintenance: Add"/>
    <pfstatus_sta CODE="EALXM" MODAL="D" ACTCODE="MAIN" PFKCODE="LIST" BUTCODE="LSU" INT_NOTE="One-Level Maintenance: Add, Selected Exist"/>
    <pfstatus_sta CODE="ECLG" MODAL="D" ACTCODE="MAIN" PFKCODE="LIST" BUTCODE="LSU" INT_NOTE="One-Level Maintenance: Change All Imported Data"/>
    <pfstatus_sta CODE="ECLGM" MODAL="D" ACTCODE="MAIN" PFKCODE="LIST" BUTCODE="LSU" INT_NOTE="One-Level Maintenance: Change All Data, Selected Exist"/>
    <pfstatus_sta CODE="ECLX" MODAL="D" ACTCODE="MAIN" PFKCODE="COPY" BUTCODE="COPY" INT_NOTE="One-Level Maintenance: Copy"/>
    <pfstatus_sta CODE="ERROR" MODAL="D" ACTCODE="MAIN" PFKCODE="ERRO" BUTCODE="ERRO" INT_NOTE='Error Dialog with &quot;Skip&quot; Function'/>
    <pfstatus_sta CODE="ERRORLIS" MODAL="D" ACTCODE="MAIN" PFKCODE="ERRO" BUTCODE="ERRO" INT_NOTE='Error Dialog Without &quot;Skip&quot; Function'/>
    <pfstatus_sta CODE="ESLG" MODAL="D" ACTCODE="MAIN" PFKCODE="LIST" BUTCODE="LSS" INT_NOTE="One-Level Maintenance: Display All Imported Data"/>
    <pfstatus_sta CODE="ESLGM" MODAL="D" ACTCODE="MAIN" PFKCODE="LIST" BUTCODE="LSS" INT_NOTE="One-Level Maintenance: Display All Data, Selected Exist"/>
    <pfstatus_sta CODE="ESLX" MODAL="D" ACTCODE="MAIN" PFKCODE="LIST" BUTCODE="LSS" INT_NOTE="One-Level Maintenance: Display Selected Entries"/>
    <pfstatus_sta CODE="ESLXM" MODAL="D" ACTCODE="MAIN" PFKCODE="LIST" BUTCODE="LSS" INT_NOTE="One-Level Maintenance: Display Subset, Selected Exist"/>
    <pfstatus_sta CODE="ETLG" MODAL="D" ACTCODE="MAIN" PFKCODE="TRLI" BUTCODE="TRLI" INT_NOTE="One-Level Maintenance: Transport Mode, All Data"/>
    <pfstatus_sta CODE="ETLGM" MODAL="D" ACTCODE="MAIN" PFKCODE="TRLI" BUTCODE="TRLI" INT_NOTE="One-Level Maintenance: Transport Mode, All Data, Sel.Exist"/>
    <pfstatus_sta CODE="ETLX" MODAL="D" ACTCODE="MAIN" PFKCODE="TRLI" BUTCODE="TRLI" INT_NOTE="One-Level Maintenance: Transport Mode, Selected Entries"/>
    <pfstatus_sta CODE="ETLXM" MODAL="D" ACTCODE="MAIN" PFKCODE="TRLI" BUTCODE="TRLI" INT_NOTE="One-Level Maintenance: Transp. Mode, Subset, Selected Exist"/>
    <pfstatus_sta CODE="EULG" MODAL="D" ACTCODE="MAIN" PFKCODE="LIST" BUTCODE="LSU" INT_NOTE="One-level maintenance: Change all imported data"/>
    <pfstatus_sta CODE="EULGM" MODAL="D" ACTCODE="MAIN" PFKCODE="LIST" BUTCODE="LSU" INT_NOTE="One-Level Maintenance: Change All Data, Selected Exist"/>
    <pfstatus_sta CODE="EULX" MODAL="D" ACTCODE="MAIN" PFKCODE="LIST" BUTCODE="LSU" INT_NOTE="One-Level Maintenance: Change Selected Entries"/>
    <pfstatus_sta CODE="EULX D" MODAL="D" ACTCODE="MAIN" PFKCODE="LIST" BUTCODE="DELL" INT_NOTE="One-Level Maintenance: Display Deleted Entries"/>
    <pfstatus_sta CODE="EULXM" MODAL="D" ACTCODE="MAIN" PFKCODE="LIST" BUTCODE="LSU" INT_NOTE="One-Level Maintenance: Change Subset, Selected Exist"/>
    <pfstatus_sta CODE="EULXMD" MODAL="D" ACTCODE="MAIN" PFKCODE="LIST" BUTCODE="DELL" INT_NOTE="One-Level Maintenance: Display Deleted Entries"/>
    <pfstatus_sta CODE="MARK_BLK" MODAL="D" ACTCODE="MAIN" PFKCODE="0005" BUTCODE="0005" INT_NOTE="Select End of Block"/>
    <pfstatus_sta CODE="REPLACE" MODAL="D" ACTCODE="MAIN" PFKCODE="ERRO" BUTCODE="ERRO" INT_NOTE='Error Dialog for &quot;Change Field Contents&quot;'/>
    <pfstatus_sta CODE="TXTMAINT" MODAL="P" PFKCODE="0006" BUTCODE="0006" INT_NOTE="Maintain Texts in Other Languages"/>
    <pfstatus_sta CODE="ZADX" MODAL="D" ACTCODE="0004" PFKCODE="DETA" BUTCODE="DETA" INT_NOTE="Two-Level Maintenance, Detail Screen: Add"/>
    <pfstatus_sta CODE="ZADXM" MODAL="D" ACTCODE="0004" PFKCODE="DETA" BUTCODE="DETA" INT_NOTE="Two-Level Maintenance, Detail Screen: Add, Entry Selected"/>
    <pfstatus_sta CODE="ZALX" MODAL="D" ACTCODE="MAIN" PFKCODE="LIST" BUTCODE="LSU" INT_NOTE="Two-Level Maintenance, List Screen: Add"/>
    <pfstatus_sta CODE="ZALXM" MODAL="D" ACTCODE="MAIN" PFKCODE="LIST" BUTCODE="LSU" INT_NOTE="Two-Level Maintenance, List Screen: Add, Selected Exist"/>
    <pfstatus_sta CODE="ZCDX" MODAL="D" ACTCODE="0004" PFKCODE="COPY" BUTCODE="COPY" INT_NOTE="Two-Level Maintenance, Detail Screen: Copy"/>
    <pfstatus_sta CODE="ZCDXM" MODAL="D" ACTCODE="0004" PFKCODE="COPY" BUTCODE="COPY" INT_NOTE="Two-Level Maintenance, Detail Screen: Copy, Entry Selected"/>
    <pfstatus_sta CODE="ZCLX" MODAL="D" ACTCODE="MAIN" PFKCODE="COPY" BUTCODE="COPY" INT_NOTE="Two-Level Maintenance, List Screen: Copy"/>
    <pfstatus_sta CODE="ZSDG" MODAL="D" ACTCODE="0004" PFKCODE="DETA" BUTCODE="DETA" INT_NOTE="Two-Level Maintenance, Detail Screen: Display"/>
    <pfstatus_sta CODE="ZSDGM" MODAL="D" ACTCODE="0004" PFKCODE="DETA" BUTCODE="DETA" INT_NOTE="Two-Level Maintenance, Detail Screen:Display, Entry Selected"/>
    <pfstatus_sta CODE="ZSDX" MODAL="D" ACTCODE="0004" PFKCODE="DETA" BUTCODE="DETA" INT_NOTE="Two-Level Maintenance, Detail Screen: Display Entries"/>
    <pfstatus_sta CODE="ZSDXM" MODAL="D" ACTCODE="0004" PFKCODE="DETA" BUTCODE="DETA" INT_NOTE="Two-Level Maintenance,Detail Screen:Display Entries,Selected"/>
    <pfstatus_sta CODE="ZSLG" MODAL="D" ACTCODE="MAIN" PFKCODE="LIST" BUTCODE="LSS" INT_NOTE="Two-Level Maintenance, List Screen: Display All Data"/>
    <pfstatus_sta CODE="ZSLGM" MODAL="D" ACTCODE="MAIN" PFKCODE="LIST" BUTCODE="LSS" INT_NOTE="Two-Level Maintenance,List Screen:Display All Data,Sel.Exist"/>
    <pfstatus_sta CODE="ZSLX" MODAL="D" ACTCODE="MAIN" PFKCODE="LIST" BUTCODE="LSS" INT_NOTE="Two-Level Maintenance, List Screen: Display Subset"/>
    <pfstatus_sta CODE="ZSLXM" MODAL="D" ACTCODE="MAIN" PFKCODE="LIST" BUTCODE="LSS" INT_NOTE="Two-Level Maintenance, List Screen:Display Subset,Sel.Exist"/>
    <pfstatus_sta CODE="ZTDG" MODAL="D" ACTCODE="0004" PFKCODE="TRDT" BUTCODE="TRDT" INT_NOTE="Two-Level Maintenance, Detail Screen: Transport Mode"/>
    <pfstatus_sta CODE="ZTDGM" MODAL="D" ACTCODE="0004" PFKCODE="TRDT" BUTCODE="TRDT" INT_NOTE="Two-Level Maintenance, Detail Screen: Transport Mode, Sel."/>
    <pfstatus_sta CODE="ZTDX" MODAL="D" ACTCODE="0004" PFKCODE="TRDT" BUTCODE="TRDT" INT_NOTE="Two-Level Maintenance, Detail Screen: Transport Mode, Subset"/>
    <pfstatus_sta CODE="ZTDXM" MODAL="D" ACTCODE="0004" PFKCODE="TRDT" BUTCODE="TRDT" INT_NOTE="Two-Level Maintenance,Detail Screen:Transport Subset,Sel.Ex."/>
    <pfstatus_sta CODE="ZTLG" MODAL="D" ACTCODE="MAIN" PFKCODE="TRLI" BUTCODE="TRLI" INT_NOTE="Two-Level Maintenance, List Screen: Transport Mode"/>
    <pfstatus_sta CODE="ZTLGM" MODAL="D" ACTCODE="MAIN" PFKCODE="TRLI" BUTCODE="TRLI" INT_NOTE="Two-Level Maintenance,List Screen:Transport Mode,Sel.Exist"/>
    <pfstatus_sta CODE="ZTLX" MODAL="D" ACTCODE="MAIN" PFKCODE="TRLI" BUTCODE="TRLI" INT_NOTE="Two-Level Maintenance, List Screen: Transport Mode, Subset"/>
    <pfstatus_sta CODE="ZTLXM" MODAL="D" ACTCODE="MAIN" PFKCODE="TRLI" BUTCODE="TRLI" INT_NOTE="Two-Level Maintenance,List Screen:Transport Subset,Sel.Exist"/>
    <pfstatus_sta CODE="ZUDG" MODAL="D" ACTCODE="0004" PFKCODE="DETA" BUTCODE="DETA" INT_NOTE="Two-Level Maintenance, Detail Screen: Change"/>
    <pfstatus_sta CODE="ZUDGM" MODAL="D" ACTCODE="0004" PFKCODE="DETA" BUTCODE="DETA" INT_NOTE="Two-Level Maintenance, Detail Screen: Change, Entry Selected"/>
    <pfstatus_sta CODE="ZUDX" MODAL="D" ACTCODE="0004" PFKCODE="DETA" BUTCODE="DETA" INT_NOTE="Two-Level Maintenance, Detail Screen: Change Subset"/>
    <pfstatus_sta CODE="ZUDX D" MODAL="D" ACTCODE="0004" PFKCODE="DETA" BUTCODE="DELD" INT_NOTE="Two-Level Maintenance, Detail Screen: Display Deleted Entry"/>
    <pfstatus_sta CODE="ZUDXM" MODAL="D" ACTCODE="0004" PFKCODE="DETA" BUTCODE="DETA" INT_NOTE="Two-Level Maintenance,Detail Screen:Change Subset,Sel.Exist"/>
    <pfstatus_sta CODE="ZUDXMD" MODAL="D" ACTCODE="0004" PFKCODE="DETA" BUTCODE="DELD" INT_NOTE="Two-Level Maintenance,Detail Screen:Display Sel.Del.Entries"/>
    <pfstatus_sta CODE="ZULG" MODAL="D" ACTCODE="MAIN" PFKCODE="LIST" BUTCODE="LSU" INT_NOTE="Two-Level Maintenance, List Screen: Change"/>
    <pfstatus_sta CODE="ZULGM" MODAL="D" ACTCODE="MAIN" PFKCODE="LIST" BUTCODE="LSU" INT_NOTE="Two-Level Maintenance, List Screen: Change, Selected Exist"/>
    <pfstatus_sta CODE="ZULX" MODAL="D" ACTCODE="MAIN" PFKCODE="LIST" BUTCODE="LSU" INT_NOTE="Two-Level Maintenance, List Screen: Change Subset"/>
    <pfstatus_sta CODE="ZULX D" MODAL="D" ACTCODE="MAIN" PFKCODE="LIST" BUTCODE="DELL" INT_NOTE="Two-Level Maintenance, List Screen: Display Deleted Entries"/>
    <pfstatus_sta CODE="ZULXM" MODAL="D" ACTCODE="MAIN" PFKCODE="LIST" BUTCODE="LSU" INT_NOTE="Two-Level Maintenance, List Screen: Change Subset, Sel.Exist"/>
    <pfstatus_sta CODE="ZULXMD" MODAL="D" ACTCODE="MAIN" PFKCODE="LIST" BUTCODE="DELL" INT_NOTE="Two-Level Maintenance, List Screen:Display Deleted,Sel.Exist"/>
    <pfstatus_fun CODE="ADDR" TEXTNO="01" TEXT_TYPE="S" TEXT_NAME="ICON_ADDRESS" ICON_ID="@0T@" FUN_TEXT="Address" PATH="D"/>
    <pfstatus_fun CODE="AEND" TEXTNO="01" TEXT_TYPE="S" TEXT_NAME="ICON_TOGGLE_DISPLAY_CHANGE" ICON_ID="@3I@" FUN_TEXT="Display -&gt; Change" PATH="N"/>
    <pfstatus_fun CODE="ALCO" TEXTNO="01" TEXT_TYPE="S" FUN_TEXT="All Entries in Request" PATH="A"/>
    <pfstatus_fun CODE="ALMK" TEXTNO="01" TEXT_TYPE="S" FUN_TEXT="All Selected Entries" PATH="S"/>
    <pfstatus_fun CODE="ALNC" TEXTNO="01" TEXT_TYPE="S" FUN_TEXT="All Entries Not in Request" PATH="N"/>
    <pfstatus_fun CODE="ALNW" TEXTNO="01" TEXT_TYPE="S" FUN_TEXT="All New Entries" PATH="W"/>
    <pfstatus_fun CODE="ALOE" TEXTNO="01" TEXT_TYPE="S" FUN_TEXT="Display Deleted Entries" PATH="L"/>
    <pfstatus_fun CODE="ANZG" TEXTNO="01" TEXT_TYPE="S" TEXT_NAME="ICON_TOGGLE_DISPLAY_CHANGE" ICON_ID="@3I@" FUN_TEXT="Change -&gt; Display" PATH="C"/>
    <pfstatus_fun CODE="ATAB" TEXTNO="01" TEXT_TYPE="S" TEXT_NAME="ICON_OTHER_OBJECT" ICON_ID="@2Q@" FUN_TEXT="Other View" PATH="O"/>
    <pfstatus_fun CODE="BACK" TEXTNO="01" TEXT_TYPE="S" FUN_TEXT="Back" PATH="B"/>
    <pfstatus_fun CODE="BCCH" TEXTNO="001" TEXT_TYPE="D" TEXT_NAME="VIM_PR_STAT_TXT_ME"/>
    <pfstatus_fun CODE="BCCH" TEXTNO="002" TEXT_TYPE="D" TEXT_NAME="VIM_PR_STAT_TXT_ME"/>
    <pfstatus_fun CODE="BCON" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="Everything in BC Set" PATH="E"/>
    <pfstatus_fun CODE="BCSH" TEXTNO="001" TEXT_TYPE="D" TEXT_NAME="VIM_PR_STAT_TXT_OR"/>
    <pfstatus_fun CODE="CENDT" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_DATE" ICON_ID="@1U@" FUN_TEXT="Change End Date" INFO_TEXT="Changes the end date of the selected record"/>
    <pfstatus_fun CODE="CMPR" TEXTNO="01" TEXT_TYPE="D" TEXT_NAME="VIM_COMP_MENUE_TEXT"/>
    <pfstatus_fun CODE="DELE" TEXTNO="01" TEXT_TYPE="S" TEXT_NAME="ICON_DELETE_ROW" ICON_ID="@18@" FUN_TEXT="Delete" PATH="D"/>
    <pfstatus_fun CODE="DELM" TEXTNO="801" TEXT_TYPE="S" FUN_TEXT="Define Validity" PATH="I"/>
    <pfstatus_fun CODE="DELM" TEXTNO="901" TEXT_TYPE="S" FUN_TEXT="Delimit" PATH="G"/>
    <pfstatus_fun CODE="DETA" TEXTNO="01" TEXT_TYPE="S" FUN_TEXT="Details" PATH="D"/>
    <pfstatus_fun CODE="DETM" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_SELECT_DETAIL" ICON_ID="@16@" FUN_TEXT="Details" PATH="E"/>
    <pfstatus_fun CODE="EABR" TEXTNO="01" TYPE="S" TEXT_TYPE="S" TEXT_NAME="ICON_CANCEL" ICON_ID="@0W@" FUN_TEXT="Cancel" PATH="A"/>
    <pfstatus_fun CODE="EIGN" TEXTNO="01" TYPE="S" TEXT_TYPE="S" TEXT_NAME="ICON_SKIP" ICON_ID="@43@" FUN_TEXT="Skip"/>
    <pfstatus_fun CODE="ENDE" TEXTNO="01" TEXT_TYPE="S" FUN_TEXT="Exit" PATH="X"/>
    <pfstatus_fun CODE="EXPA" TEXTNO="01" TEXT_TYPE="S" FUN_TEXT="Expand &lt;-&gt; Collapse" PATH="X"/>
    <pfstatus_fun CODE="FDOC" TEXTNO="01" TEXT_TYPE="S" FUN_TEXT="User Instructions" PATH="U"/>
    <pfstatus_fun CODE="GPRF" TEXTNO="001" TYPE="E" TEXT_TYPE="D" TEXT_NAME="VIM_PR_STAT_TXT_CH"/>
    <pfstatus_fun CODE="KOPE" TEXTNO="01" TEXT_TYPE="S" TEXT_NAME="ICON_SYSTEM_COPY" ICON_ID="@2U@" FUN_TEXT="Copy As..." PATH="P"/>
    <pfstatus_fun CODE="KOPF" TEXTNO="01" TEXT_TYPE="S" TEXT_NAME="ICON_OKAY" ICON_ID="@0V@" FUN_TEXT="Copy" ICON_TEXT="Copy"/>
    <pfstatus_fun CODE="LANG" TEXTNO="01" TEXT_TYPE="S" FUN_TEXT="Choose Languages" PATH="S"/>
    <pfstatus_fun CODE="MKAL" TEXTNO="01" TEXT_TYPE="S" TEXT_NAME="ICON_SELECT_ALL" ICON_ID="@4B@" FUN_TEXT="Select All" PATH="S"/>
    <pfstatus_fun CODE="MKBL" TEXTNO="01" TEXT_TYPE="S" TEXT_NAME="ICON_SELECT_BLOCK" ICON_ID="@4C@" FUN_TEXT="Select Block" PATH="B"/>
    <pfstatus_fun CODE="MKBL" TEXTNO="02" TEXT_TYPE="S" TEXT_NAME="ICON_SELECT_BLOCK" ICON_ID="@4C@" FUN_TEXT="Select End of Block" ICON_TEXT="End of Block"/>
    <pfstatus_fun CODE="MKEZ" TEXTNO="01" TEXT_TYPE="S" TEXT_NAME="ICON_SYSTEM_MARK" ICON_ID="@2X@" FUN_TEXT="Select Entry"/>
    <pfstatus_fun CODE="MKLO" TEXTNO="01" TEXT_TYPE="S" TEXT_NAME="ICON_DESELECT_ALL" ICON_ID="@4D@" FUN_TEXT="Deselect All" PATH="L"/>
    <pfstatus_fun CODE="NEWL" TEXTNO="01" TEXT_TYPE="S" FUN_TEXT="New Entries" PATH="N"/>
    <pfstatus_fun CODE="NEXT" TEXTNO="01" TEXT_TYPE="S" TEXT_NAME="ICON_NEXT_OBJECT" ICON_ID="@2S@" FUN_TEXT="Next Entry" PATH="N"/>
    <pfstatus_fun CODE="OKAY" TEXTNO="01" TEXT_TYPE="S" TEXT_NAME="ICON_OKAY" ICON_ID="@0V@" FUN_TEXT="Continue"/>
    <pfstatus_fun CODE="ORDR" TEXTNO="01" TEXT_TYPE="S" FUN_TEXT="Change Requests (Organizer)" PATH="A"/>
    <pfstatus_fun CODE="ORGI" TEXTNO="01" TEXT_TYPE="S" TEXT_NAME="ICON_SYSTEM_UNDO" ICON_ID="@2W@" FUN_TEXT="Undo Change" PATH="E"/>
    <pfstatus_fun CODE="P+" TEXTNO="01" TEXT_TYPE="S" TEXT_NAME="ICON_NEXT_PAGE" ICON_ID="@30@" FUN_TEXT="Next Page"/>
    <pfstatus_fun CODE="P++" TEXTNO="01" TEXT_TYPE="S" TEXT_NAME="ICON_LAST_PAGE" ICON_ID="@31@" FUN_TEXT="Last Page"/>
    <pfstatus_fun CODE="P-" TEXTNO="01" TEXT_TYPE="S" TEXT_NAME="ICON_PREVIOUS_PAGE" ICON_ID="@2Z@" FUN_TEXT="Previous Page"/>
    <pfstatus_fun CODE="P--" TEXTNO="01" TEXT_TYPE="S" TEXT_NAME="ICON_FIRST_PAGE" ICON_ID="@2Y@" FUN_TEXT="First Page"/>
    <pfstatus_fun CODE="POSI" TEXTNO="002" TEXT_TYPE="S" TEXT_NAME="ICON_POSITION" ICON_ID="@3Y@" FUN_TEXT="Position Cursor..." PATH="P"/>
    <pfstatus_fun CODE="POSI" TEXTNO="01" TEXT_TYPE="S" TEXT_NAME="ICON_POSITION" ICON_ID="@3Y@" FUN_TEXT="Other Entry..." PATH="H"/>
    <pfstatus_fun CODE="PREV" TEXTNO="01" TEXT_TYPE="S" TEXT_NAME="ICON_PREVIOUS_OBJECT" ICON_ID="@2R@" FUN_TEXT="Previous Entry" PATH="V"/>
    <pfstatus_fun CODE="PROT" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="Change Logs" PATH="C"/>
    <pfstatus_fun CODE="PRST" TEXTNO="01" TEXT_TYPE="S" TEXT_NAME="ICON_PRINT" ICON_ID="@0X@" FUN_TEXT="Print" PATH="P"/>
    <pfstatus_fun CODE="REPL" TEXTNO="01" TEXT_TYPE="S" TEXT_NAME="ICON_REPLACE" ICON_ID="@37@" FUN_TEXT="Change Field Contents..." PATH="L"/>
    <pfstatus_fun CODE="SAVE" TEXTNO="01" TEXT_TYPE="S" FUN_TEXT="Save" PATH="S"/>
    <pfstatus_fun CODE="SCRF" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="Form" PATH="O"/>
    <pfstatus_fun CODE="SEAR" TEXTNO="01" TEXT_TYPE="S" FUN_TEXT="By Contents..." PATH="B"/>
    <pfstatus_fun CODE="SELU" TEXTNO="01" TEXT_TYPE="S" FUN_TEXT="All Changed Entries" PATH="G"/>
    <pfstatus_fun CODE="SLCT" TEXTNO="01" TEXT_TYPE="D" TEXT_NAME="VIM_SLCT_FUNCTIONTEXT"/>
    <pfstatus_fun CODE="TEXT" TEXTNO="01" TEXT_TYPE="S" FUN_TEXT="Translation" PATH="T"/>
    <pfstatus_fun CODE="TREX" TEXTNO="01" TEXT_TYPE="S" FUN_TEXT="Delete from Request" PATH="L"/>
    <pfstatus_fun CODE="TRIN" TEXTNO="01" TEXT_TYPE="S" FUN_TEXT="Include in Request" PATH="U"/>
    <pfstatus_fun CODE="TRSP" TEXTNO="01" TEXT_TYPE="S" FUN_TEXT="Transport" PATH="T"/>
    <pfstatus_fun CODE="UEBE" TEXTNO="01" TEXT_TYPE="S" FUN_TEXT="Back" PATH="B"/>
    <pfstatus_fun CODE="UNDO" TEXTNO="01" TEXT_TYPE="S" TEXT_NAME="ICON_SYSTEM_UNDO" ICON_ID="@2W@" FUN_TEXT="Retrieve" PATH="Z"/>
    <pfstatus_men CODE="000015" NO="01" REF_TYPE="F" REF_CODE="CMPR" REF_NO="01"/>
    <pfstatus_men CODE="000015" NO="02" REF_TYPE="F" REF_CODE="GPRF" REF_NO="001"/>
    <pfstatus_men CODE="000015" NO="03" REF_TYPE="F" REF_CODE="PROT" REF_NO="001"/>
    <pfstatus_men CODE="000015" NO="04" REF_TYPE="S"/>
    <pfstatus_men CODE="000015" NO="05" REF_TYPE="F" REF_CODE="ORDR" REF_NO="01"/>
    <pfstatus_men CODE="000015" NO="06" REF_TYPE="S"/>
    <pfstatus_men CODE="000015" NO="07" REF_TYPE="F" REF_CODE="LANG" REF_NO="01"/>
    <pfstatus_men CODE="000015" NO="08" REF_TYPE="F" REF_CODE="FDOC" REF_NO="01"/>
    <pfstatus_men CODE="000018" NO="01" REF_TYPE="F" REF_CODE="BCCH" REF_NO="002"/>
    <pfstatus_men CODE="000018" NO="02" REF_TYPE="F" REF_CODE="BCSH" REF_NO="001"/>
    <pfstatus_men CODE="0011" NO="01" REF_TYPE="F" REF_CODE="NEXT" REF_NO="01"/>
    <pfstatus_men CODE="0011" NO="02" REF_TYPE="F" REF_CODE="PREV" REF_NO="01"/>
    <pfstatus_men CODE="0011" NO="03" REF_TYPE="F" REF_CODE="POSI" REF_NO="01"/>
    <pfstatus_men CODE="0011" NO="04" REF_TYPE="S"/>
    <pfstatus_men CODE="0011" NO="05" REF_TYPE="F" REF_CODE="TEXT" REF_NO="01"/>
    <pfstatus_men CODE="0011" NO="06" REF_TYPE="F" REF_CODE="ADDR" REF_NO="01"/>
    <pfstatus_men CODE="0011" NO="07" REF_TYPE="F" REF_CODE="SCRF" REF_NO="001"/>
    <pfstatus_men CODE="0011" NO="08" REF_TYPE="S"/>
    <pfstatus_men CODE="0011" NO="09" REF_TYPE="F" REF_CODE="UEBE" REF_NO="01"/>
    <pfstatus_men CODE="0013" NO="01" REF_TYPE="F" REF_CODE="TRIN" REF_NO="01"/>
    <pfstatus_men CODE="0013" NO="02" REF_TYPE="F" REF_CODE="TREX" REF_NO="01"/>
    <pfstatus_men CODE="AUSW" NO="01" REF_TYPE="F" REF_CODE="SEAR" REF_NO="01"/>
    <pfstatus_men CODE="AUSW" NO="02" REF_TYPE="S"/>
    <pfstatus_men CODE="AUSW" NO="03" REF_TYPE="F" REF_CODE="ALMK" REF_NO="01"/>
    <pfstatus_men CODE="AUSW" NO="04" REF_TYPE="S"/>
    <pfstatus_men CODE="AUSW" NO="05" REF_TYPE="F" REF_CODE="SELU" REF_NO="01"/>
    <pfstatus_men CODE="AUSW" NO="06" REF_TYPE="F" REF_CODE="ALNW" REF_NO="01"/>
    <pfstatus_men CODE="AUSW" NO="07" REF_TYPE="F" REF_CODE="ALOE" REF_NO="01"/>
    <pfstatus_men CODE="AUSW" NO="08" REF_TYPE="S"/>
    <pfstatus_men CODE="AUSW" NO="09" REF_TYPE="F" REF_CODE="ALCO" REF_NO="01"/>
    <pfstatus_men CODE="AUSW" NO="10" REF_TYPE="F" REF_CODE="ALNC" REF_NO="01"/>
    <pfstatus_men CODE="AUSW" NO="11" REF_TYPE="F" REF_CODE="BCON" REF_NO="001"/>
    <pfstatus_men CODE="MARK" NO="01" REF_TYPE="F" REF_CODE="MKAL" REF_NO="01"/>
    <pfstatus_men CODE="MARK" NO="02" REF_TYPE="F" REF_CODE="MKLO" REF_NO="01"/>
    <pfstatus_men CODE="MARK" NO="03" REF_TYPE="F" REF_CODE="MKBL" REF_NO="01"/>
    <pfstatus_men CODE="SPRI" NO="01" REF_TYPE="F" REF_CODE="DETM" REF_NO="001"/>
    <pfstatus_men CODE="SPRI" NO="02" REF_TYPE="S"/>
    <pfstatus_men CODE="SPRI" NO="03" REF_TYPE="F" REF_CODE="NEXT" REF_NO="01"/>
    <pfstatus_men CODE="SPRI" NO="04" REF_TYPE="F" REF_CODE="PREV" REF_NO="01"/>
    <pfstatus_men CODE="SPRI" NO="05" REF_TYPE="F" REF_CODE="POSI" REF_NO="002"/>
    <pfstatus_men CODE="SPRI" NO="06" REF_TYPE="S"/>
    <pfstatus_men CODE="SPRI" NO="07" REF_TYPE="F" REF_CODE="TEXT" REF_NO="01"/>
    <pfstatus_men CODE="SPRI" NO="08" REF_TYPE="F" REF_CODE="ADDR" REF_NO="01"/>
    <pfstatus_men CODE="SPRI" NO="09" REF_TYPE="F" REF_CODE="SCRF" REF_NO="001"/>
    <pfstatus_men CODE="SPRI" NO="10" REF_TYPE="S"/>
    <pfstatus_men CODE="SPRI" NO="11" REF_TYPE="F" REF_CODE="BACK" REF_NO="01"/>
    <pfstatus_men CODE="TABL" NO="01" REF_TYPE="F" REF_CODE="ATAB" REF_NO="01"/>
    <pfstatus_men CODE="TABL" NO="02" REF_TYPE="F" REF_CODE="AEND" REF_NO="01"/>
    <pfstatus_men CODE="TABL" NO="03" REF_TYPE="F" REF_CODE="ANZG" REF_NO="01"/>
    <pfstatus_men CODE="TABL" NO="04" REF_TYPE="S"/>
    <pfstatus_men CODE="TABL" NO="05" REF_TYPE="F" REF_CODE="SAVE" REF_NO="01"/>
    <pfstatus_men CODE="TABL" NO="06" REF_TYPE="F" REF_CODE="TRSP" REF_NO="01"/>
    <pfstatus_men CODE="TABL" NO="07" REF_TYPE="S"/>
    <pfstatus_men CODE="TABL" NO="08" REF_TYPE="F" REF_CODE="PRST" REF_NO="01"/>
    <pfstatus_men CODE="TABL" NO="09" REF_TYPE="S"/>
    <pfstatus_men CODE="TABL" NO="10" REF_TYPE="F" REF_CODE="ENDE" REF_NO="01"/>
    <pfstatus_men CODE="ZEIL" NO="01" REF_TYPE="F" REF_CODE="NEWL" REF_NO="01"/>
    <pfstatus_men CODE="ZEIL" NO="02" REF_TYPE="M" REF_CODE="MARK" REF_NO="01"/>
    <pfstatus_men CODE="ZEIL" NO="03" REF_TYPE="F" REF_CODE="DELE" REF_NO="01"/>
    <pfstatus_men CODE="ZEIL" NO="04" REF_TYPE="F" REF_CODE="KOPE" REF_NO="01"/>
    <pfstatus_men CODE="ZEIL" NO="05" REF_TYPE="S"/>
    <pfstatus_men CODE="ZEIL" NO="06" REF_TYPE="F" REF_CODE="REPL" REF_NO="01"/>
    <pfstatus_men CODE="ZEIL" NO="07" REF_TYPE="M" REF_CODE="000018"/>
    <pfstatus_men CODE="ZEIL" NO="08" REF_TYPE="F" REF_CODE="ORGI" REF_NO="01"/>
    <pfstatus_men CODE="ZEIL" NO="09" REF_TYPE="F" REF_CODE="DELM" REF_NO="801"/>
    <pfstatus_men CODE="ZEIL" NO="10" REF_TYPE="F" REF_CODE="EXPA" REF_NO="01"/>
    <pfstatus_men CODE="ZEIL" NO="11" REF_TYPE="M" REF_CODE="0013"/>
    <pfstatus_men CODE="ZEIL" NO="12" REF_TYPE="S"/>
    <pfstatus_men CODE="ZEIL" NO="13" REF_TYPE="F" REF_CODE="EABR" REF_NO="01"/>
    <pfstatus_mtx CODE="000015" TEXT_TYPE="S" TEXT="Utilities" PATH="U"/>
    <pfstatus_mtx CODE="000018" TEXT_TYPE="S" TEXT="BC Set" PATH="B" INT_NOTE="BC Set Functionality"/>
    <pfstatus_mtx CODE="0011" TEXT_TYPE="S" TEXT="Goto" PATH="G" INT_NOTE="Detail Screen"/>
    <pfstatus_mtx CODE="0013" TEXT_TYPE="S" TEXT="Transport" PATH="R"/>
    <pfstatus_mtx CODE="AUSW" TEXT_TYPE="S" TEXT="Selection" PATH="S"/>
    <pfstatus_mtx CODE="MARK" TEXT_TYPE="S" TEXT="Selections" PATH="S"/>
    <pfstatus_mtx CODE="PRNT" TEXT_TYPE="S" TEXT="Print" PATH="D"/>
    <pfstatus_mtx CODE="SPRI" TEXT_TYPE="S" TEXT="Goto" PATH="G" INT_NOTE="List Screen"/>
    <pfstatus_mtx CODE="TABL" TEXT_TYPE="S" TEXT="Table View" PATH="T"/>
    <pfstatus_mtx CODE="ZEIL" TEXT_TYPE="S" TEXT="Edit" PATH="E"/>
    <pfstatus_act CODE="0004" NO="01" MENUCODE="TABL"/>
    <pfstatus_act CODE="0004" NO="02" MENUCODE="ZEIL"/>
    <pfstatus_act CODE="0004" NO="03" MENUCODE="0011"/>
    <pfstatus_act CODE="0004" NO="04" MENUCODE="AUSW"/>
    <pfstatus_act CODE="0004" NO="05" MENUCODE="000015"/>
    <pfstatus_act CODE="MAIN" NO="01" MENUCODE="TABL"/>
    <pfstatus_act CODE="MAIN" NO="02" MENUCODE="ZEIL"/>
    <pfstatus_act CODE="MAIN" NO="03" MENUCODE="SPRI"/>
    <pfstatus_act CODE="MAIN" NO="04" MENUCODE="AUSW"/>
    <pfstatus_act CODE="MAIN" NO="05" MENUCODE="000015"/>
    <pfstatus_but PFK_CODE="0005" CODE="0005" NO="01" PFNO="08"/>
    <pfstatus_but PFK_CODE="0006" CODE="0006" NO="01" PFNO="00"/>
    <pfstatus_but PFK_CODE="0006" CODE="0006" NO="02" PFNO="12"/>
    <pfstatus_but PFK_CODE="DETA" CODE="DELD" NO="01" PFNO="28"/>
    <pfstatus_but PFK_CODE="DETA" CODE="DELD" NO="02" PFNO="18"/>
    <pfstatus_but PFK_CODE="DETA" CODE="DELD" NO="03" PFNO="07"/>
    <pfstatus_but PFK_CODE="DETA" CODE="DELD" NO="04" PFNO="08"/>
    <pfstatus_but PFK_CODE="DETA" CODE="DELD" NO="05" PFNO="19"/>
    <pfstatus_but PFK_CODE="DETA" CODE="DELD" NO="06" PFNO="17"/>
    <pfstatus_but PFK_CODE="DETA" CODE="DELD" NO="07" PFNO="29"/>
    <pfstatus_but PFK_CODE="DETA" CODE="DETA" NO="01" PFNO="25"/>
    <pfstatus_but PFK_CODE="DETA" CODE="DETA" NO="02" PFNO="28"/>
    <pfstatus_but PFK_CODE="DETA" CODE="DETA" NO="03" PFNO="05"/>
    <pfstatus_but PFK_CODE="DETA" CODE="DETA" NO="04" PFNO="06"/>
    <pfstatus_but PFK_CODE="DETA" CODE="DETA" NO="05" PFNO="14"/>
    <pfstatus_but PFK_CODE="DETA" CODE="DETA" NO="06" PFNO="26"/>
    <pfstatus_but PFK_CODE="DETA" CODE="DETA" NO="07" PFNO="07"/>
    <pfstatus_but PFK_CODE="DETA" CODE="DETA" NO="08" PFNO="08"/>
    <pfstatus_but PFK_CODE="DETA" CODE="DETA" NO="09" PFNO="19"/>
    <pfstatus_but PFK_CODE="DETA" CODE="DETA" NO="10" PFNO="17"/>
    <pfstatus_but PFK_CODE="DETA" CODE="DETA" NO="11" PFNO="20"/>
    <pfstatus_but PFK_CODE="DETA" CODE="DETA" NO="12" PFNO="29"/>
    <pfstatus_but PFK_CODE="DETA" CODE="DETA" NO="13" PFNO="30"/>
    <pfstatus_but PFK_CODE="DETA" CODE="DETA" NO="14" PFNO="33"/>
    <pfstatus_but PFK_CODE="ERRO" CODE="ERRO" NO="01" PFNO="20"/>
    <pfstatus_but PFK_CODE="LIST" CODE="DELL" NO="01" PFNO="28"/>
    <pfstatus_but PFK_CODE="LIST" CODE="DELL" NO="02" PFNO="38"/>
    <pfstatus_but PFK_CODE="LIST" CODE="DELL" NO="03" PFNO="32"/>
    <pfstatus_but PFK_CODE="LIST" CODE="DELL" NO="04" PFNO="18"/>
    <pfstatus_but PFK_CODE="LIST" CODE="DELL" NO="05" PFNO="07"/>
    <pfstatus_but PFK_CODE="LIST" CODE="DELL" NO="06" PFNO="08"/>
    <pfstatus_but PFK_CODE="LIST" CODE="DELL" NO="07" PFNO="16"/>
    <pfstatus_but PFK_CODE="LIST" CODE="DELL" NO="08" PFNO="17"/>
    <pfstatus_but PFK_CODE="LIST" CODE="DELL" NO="09" PFNO="29"/>
    <pfstatus_but PFK_CODE="LIST" CODE="LSS" NO="01" PFNO="25"/>
    <pfstatus_but PFK_CODE="LIST" CODE="LSS" NO="02" PFNO="38"/>
    <pfstatus_but PFK_CODE="LIST" CODE="LSS" NO="03" PFNO="32"/>
    <pfstatus_but PFK_CODE="LIST" CODE="LSS" NO="04" PFNO="07"/>
    <pfstatus_but PFK_CODE="LIST" CODE="LSS" NO="05" PFNO="08"/>
    <pfstatus_but PFK_CODE="LIST" CODE="LSS" NO="06" PFNO="16"/>
    <pfstatus_but PFK_CODE="LIST" CODE="LSS" NO="07" PFNO="17"/>
    <pfstatus_but PFK_CODE="LIST" CODE="LSS" NO="08" PFNO="29"/>
    <pfstatus_but PFK_CODE="LIST" CODE="LSS" NO="09" PFNO="30"/>
    <pfstatus_but PFK_CODE="LIST" CODE="LSU" NO="01" PFNO="28"/>
    <pfstatus_but PFK_CODE="LIST" CODE="LSU" NO="02" PFNO="38"/>
    <pfstatus_but PFK_CODE="LIST" CODE="LSU" NO="03" PFNO="32"/>
    <pfstatus_but PFK_CODE="LIST" CODE="LSU" NO="04" PFNO="05"/>
    <pfstatus_but PFK_CODE="LIST" CODE="LSU" NO="05" PFNO="06"/>
    <pfstatus_but PFK_CODE="LIST" CODE="LSU" NO="06" PFNO="14"/>
    <pfstatus_but PFK_CODE="LIST" CODE="LSU" NO="07" PFNO="20"/>
    <pfstatus_but PFK_CODE="LIST" CODE="LSU" NO="08" PFNO="26"/>
    <pfstatus_but PFK_CODE="LIST" CODE="LSU" NO="09" PFNO="07"/>
    <pfstatus_but PFK_CODE="LIST" CODE="LSU" NO="10" PFNO="08"/>
    <pfstatus_but PFK_CODE="LIST" CODE="LSU" NO="11" PFNO="16"/>
    <pfstatus_but PFK_CODE="LIST" CODE="LSU" NO="12" PFNO="17"/>
    <pfstatus_but PFK_CODE="LIST" CODE="LSU" NO="13" PFNO="29"/>
    <pfstatus_but PFK_CODE="LIST" CODE="LSU" NO="14" PFNO="30"/>
    <pfstatus_but PFK_CODE="LIST" CODE="LSU" NO="15" PFNO="33"/>
    <pfstatus_but PFK_CODE="LIST" CODE="LSU" NO="16" PFNO="S"/>
    <pfstatus_but PFK_CODE="LIST" CODE="LSU" NO="17" PFNO="27"/>
    <pfstatus_but PFK_CODE="TRDT" CODE="TRDT" NO="01" PFNO="25"/>
    <pfstatus_but PFK_CODE="TRDT" CODE="TRDT" NO="02" PFNO="16"/>
    <pfstatus_but PFK_CODE="TRDT" CODE="TRDT" NO="03" PFNO="14"/>
    <pfstatus_but PFK_CODE="TRDT" CODE="TRDT" NO="04" PFNO="07"/>
    <pfstatus_but PFK_CODE="TRDT" CODE="TRDT" NO="05" PFNO="08"/>
    <pfstatus_but PFK_CODE="TRDT" CODE="TRDT" NO="06" PFNO="19"/>
    <pfstatus_but PFK_CODE="TRDT" CODE="TRDT" NO="07" PFNO="17"/>
    <pfstatus_but PFK_CODE="TRDT" CODE="TRDT" NO="08" PFNO="29"/>
    <pfstatus_but PFK_CODE="TRLI" CODE="TRLI" NO="01" PFNO="25"/>
    <pfstatus_but PFK_CODE="TRLI" CODE="TRLI" NO="02" PFNO="38"/>
    <pfstatus_but PFK_CODE="TRLI" CODE="TRLI" NO="03" PFNO="32"/>
    <pfstatus_but PFK_CODE="TRLI" CODE="TRLI" NO="04" PFNO="18"/>
    <pfstatus_but PFK_CODE="TRLI" CODE="TRLI" NO="05" PFNO="14"/>
    <pfstatus_but PFK_CODE="TRLI" CODE="TRLI" NO="06" PFNO="07"/>
    <pfstatus_but PFK_CODE="TRLI" CODE="TRLI" NO="07" PFNO="08"/>
    <pfstatus_but PFK_CODE="TRLI" CODE="TRLI" NO="08" PFNO="16"/>
    <pfstatus_but PFK_CODE="TRLI" CODE="TRLI" NO="09" PFNO="17"/>
    <pfstatus_but PFK_CODE="TRLI" CODE="TRLI" NO="10" PFNO="29"/>
    <pfstatus_pfk CODE="0005" PFNO="08" FUNCODE="MKBL" FUNNO="02"/>
    <pfstatus_pfk CODE="0005" PFNO="12" FUNCODE="EABR" FUNNO="01"/>
    <pfstatus_pfk CODE="0006" PFNO="00" FUNCODE="OKAY" FUNNO="01"/>
    <pfstatus_pfk CODE="0006" PFNO="12" FUNCODE="EABR" FUNNO="01"/>
    <pfstatus_pfk CODE="COPY" PFNO="00" FUNCODE="KOPF" FUNNO="01"/>
    <pfstatus_pfk CODE="COPY" PFNO="12" FUNCODE="EABR" FUNNO="01"/>
    <pfstatus_pfk CODE="COPY" PFNO="21" FUNCODE="P--" FUNNO="01"/>
    <pfstatus_pfk CODE="COPY" PFNO="22" FUNCODE="P-" FUNNO="01"/>
    <pfstatus_pfk CODE="COPY" PFNO="23" FUNCODE="P+" FUNNO="01"/>
    <pfstatus_pfk CODE="COPY" PFNO="24" FUNCODE="P++" FUNNO="01"/>
    <pfstatus_pfk CODE="COPY" PFNO="80" FUNCODE="P--" FUNNO="01"/>
    <pfstatus_pfk CODE="COPY" PFNO="81" FUNCODE="P-" FUNNO="01"/>
    <pfstatus_pfk CODE="COPY" PFNO="82" FUNCODE="P+" FUNNO="01"/>
    <pfstatus_pfk CODE="COPY" PFNO="83" FUNCODE="P++" FUNNO="01"/>
    <pfstatus_pfk CODE="DETA" PFNO="02" FUNCODE="SLCT" FUNNO="01"/>
    <pfstatus_pfk CODE="DETA" PFNO="03" FUNCODE="UEBE" FUNNO="01"/>
    <pfstatus_pfk CODE="DETA" PFNO="05" FUNCODE="NEWL" FUNNO="01"/>
    <pfstatus_pfk CODE="DETA" PFNO="06" FUNCODE="KOPE" FUNNO="01"/>
    <pfstatus_pfk CODE="DETA" PFNO="07" FUNCODE="PREV" FUNNO="01"/>
    <pfstatus_pfk CODE="DETA" PFNO="08" FUNCODE="NEXT" FUNNO="01"/>
    <pfstatus_pfk CODE="DETA" PFNO="09" FUNCODE="MKEZ" FUNNO="01"/>
    <pfstatus_pfk CODE="DETA" PFNO="11" FUNCODE="SAVE" FUNNO="01"/>
    <pfstatus_pfk CODE="DETA" PFNO="12" FUNCODE="EABR" FUNNO="01"/>
    <pfstatus_pfk CODE="DETA" PFNO="13" FUNCODE="PRST" FUNNO="01"/>
    <pfstatus_pfk CODE="DETA" PFNO="14" FUNCODE="DELE" FUNNO="01"/>
    <pfstatus_pfk CODE="DETA" PFNO="15" FUNCODE="ENDE" FUNNO="01"/>
    <pfstatus_pfk CODE="DETA" PFNO="17" FUNCODE="ADDR" FUNNO="01"/>
    <pfstatus_pfk CODE="DETA" PFNO="18" FUNCODE="UNDO" FUNNO="01"/>
    <pfstatus_pfk CODE="DETA" PFNO="19" FUNCODE="POSI" FUNNO="01"/>
    <pfstatus_pfk CODE="DETA" PFNO="20" FUNCODE="DELM" FUNNO="901"/>
    <pfstatus_pfk CODE="DETA" PFNO="25" FUNCODE="AEND" FUNNO="01"/>
    <pfstatus_pfk CODE="DETA" PFNO="26" FUNCODE="ORGI" FUNNO="01"/>
    <pfstatus_pfk CODE="DETA" PFNO="28" FUNCODE="ANZG" FUNNO="01"/>
    <pfstatus_pfk CODE="DETA" PFNO="29" FUNCODE="SCRF" FUNNO="001"/>
    <pfstatus_pfk CODE="DETA" PFNO="30" FUNCODE="GPRF" FUNNO="001"/>
    <pfstatus_pfk CODE="DETA" PFNO="33" FUNCODE="BCCH" FUNNO="001"/>
    <pfstatus_pfk CODE="DETA" PFNO="34" FUNCODE="BCSH" FUNNO="001"/>
    <pfstatus_pfk CODE="DETA" PFNO="86" FUNCODE="PRST" FUNNO="01"/>
    <pfstatus_pfk CODE="ERRO" PFNO="12" FUNCODE="EABR" FUNNO="01"/>
    <pfstatus_pfk CODE="ERRO" PFNO="20" FUNCODE="EIGN" FUNNO="01"/>
    <pfstatus_pfk CODE="LIST" PFNO="02" FUNCODE="DETA" FUNNO="01"/>
    <pfstatus_pfk CODE="LIST" PFNO="03" FUNCODE="BACK" FUNNO="01"/>
    <pfstatus_pfk CODE="LIST" PFNO="05" FUNCODE="NEWL" FUNNO="01"/>
    <pfstatus_pfk CODE="LIST" PFNO="06" FUNCODE="KOPE" FUNNO="01"/>
    <pfstatus_pfk CODE="LIST" PFNO="07" FUNCODE="MKAL" FUNNO="01"/>
    <pfstatus_pfk CODE="LIST" PFNO="08" FUNCODE="MKBL" FUNNO="01"/>
    <pfstatus_pfk CODE="LIST" PFNO="09" FUNCODE="MKEZ" FUNNO="01"/>
    <pfstatus_pfk CODE="LIST" PFNO="11" FUNCODE="SAVE" FUNNO="01"/>
    <pfstatus_pfk CODE="LIST" PFNO="12" FUNCODE="EABR" FUNNO="01"/>
    <pfstatus_pfk CODE="LIST" PFNO="13" FUNCODE="PRST" FUNNO="01"/>
    <pfstatus_pfk CODE="LIST" PFNO="14" FUNCODE="DELE" FUNNO="01"/>
    <pfstatus_pfk CODE="LIST" PFNO="15" FUNCODE="ENDE" FUNNO="01"/>
    <pfstatus_pfk CODE="LIST" PFNO="16" FUNCODE="MKLO" FUNNO="01"/>
    <pfstatus_pfk CODE="LIST" PFNO="17" FUNCODE="ADDR" FUNNO="01"/>
    <pfstatus_pfk CODE="LIST" PFNO="18" FUNCODE="UNDO" FUNNO="01"/>
    <pfstatus_pfk CODE="LIST" PFNO="19" FUNCODE="POSI" FUNNO="002"/>
    <pfstatus_pfk CODE="LIST" PFNO="20" FUNCODE="DELM" FUNNO="901"/>
    <pfstatus_pfk CODE="LIST" PFNO="21" FUNCODE="P--" FUNNO="01"/>
    <pfstatus_pfk CODE="LIST" PFNO="22" FUNCODE="P-" FUNNO="01"/>
    <pfstatus_pfk CODE="LIST" PFNO="23" FUNCODE="P+" FUNNO="01"/>
    <pfstatus_pfk CODE="LIST" PFNO="24" FUNCODE="P++" FUNNO="01"/>
    <pfstatus_pfk CODE="LIST" PFNO="25" FUNCODE="AEND" FUNNO="01"/>
    <pfstatus_pfk CODE="LIST" PFNO="26" FUNCODE="ORGI" FUNNO="01"/>
    <pfstatus_pfk CODE="LIST" PFNO="27" FUNCODE="CENDT" FUNNO="001"/>
    <pfstatus_pfk CODE="LIST" PFNO="28" FUNCODE="ANZG" FUNNO="01"/>
    <pfstatus_pfk CODE="LIST" PFNO="29" FUNCODE="SCRF" FUNNO="001"/>
    <pfstatus_pfk CODE="LIST" PFNO="30" FUNCODE="GPRF" FUNNO="001"/>
    <pfstatus_pfk CODE="LIST" PFNO="32" FUNCODE="EXPA" FUNNO="01"/>
    <pfstatus_pfk CODE="LIST" PFNO="33" FUNCODE="BCCH" FUNNO="002"/>
    <pfstatus_pfk CODE="LIST" PFNO="34" FUNCODE="BCSH" FUNNO="001"/>
    <pfstatus_pfk CODE="LIST" PFNO="38" FUNCODE="DETM" FUNNO="001"/>
    <pfstatus_pfk CODE="LIST" PFNO="80" FUNCODE="P--" FUNNO="01"/>
    <pfstatus_pfk CODE="LIST" PFNO="81" FUNCODE="P-" FUNNO="01"/>
    <pfstatus_pfk CODE="LIST" PFNO="82" FUNCODE="P+" FUNNO="01"/>
    <pfstatus_pfk CODE="LIST" PFNO="83" FUNCODE="P++" FUNNO="01"/>
    <pfstatus_pfk CODE="LIST" PFNO="86" FUNCODE="PRST" FUNNO="01"/>
    <pfstatus_pfk CODE="TRDT" PFNO="02" FUNCODE="SLCT" FUNNO="01"/>
    <pfstatus_pfk CODE="TRDT" PFNO="03" FUNCODE="UEBE" FUNNO="01"/>
    <pfstatus_pfk CODE="TRDT" PFNO="07" FUNCODE="PREV" FUNNO="01"/>
    <pfstatus_pfk CODE="TRDT" PFNO="08" FUNCODE="NEXT" FUNNO="01"/>
    <pfstatus_pfk CODE="TRDT" PFNO="09" FUNCODE="MKEZ" FUNNO="01"/>
    <pfstatus_pfk CODE="TRDT" PFNO="11" FUNCODE="SAVE" FUNNO="01"/>
    <pfstatus_pfk CODE="TRDT" PFNO="12" FUNCODE="EABR" FUNNO="01"/>
    <pfstatus_pfk CODE="TRDT" PFNO="13" FUNCODE="PRST" FUNNO="01"/>
    <pfstatus_pfk CODE="TRDT" PFNO="14" FUNCODE="TREX" FUNNO="01"/>
    <pfstatus_pfk CODE="TRDT" PFNO="15" FUNCODE="ENDE" FUNNO="01"/>
    <pfstatus_pfk CODE="TRDT" PFNO="16" FUNCODE="TRIN" FUNNO="01"/>
    <pfstatus_pfk CODE="TRDT" PFNO="17" FUNCODE="ADDR" FUNNO="01"/>
    <pfstatus_pfk CODE="TRDT" PFNO="19" FUNCODE="POSI" FUNNO="01"/>
    <pfstatus_pfk CODE="TRDT" PFNO="25" FUNCODE="AEND" FUNNO="01"/>
    <pfstatus_pfk CODE="TRDT" PFNO="29" FUNCODE="SCRF" FUNNO="001"/>
    <pfstatus_pfk CODE="TRDT" PFNO="86" FUNCODE="PRST" FUNNO="01"/>
    <pfstatus_pfk CODE="TRLI" PFNO="02" FUNCODE="DETA" FUNNO="01"/>
    <pfstatus_pfk CODE="TRLI" PFNO="03" FUNCODE="BACK" FUNNO="01"/>
    <pfstatus_pfk CODE="TRLI" PFNO="07" FUNCODE="MKAL" FUNNO="01"/>
    <pfstatus_pfk CODE="TRLI" PFNO="08" FUNCODE="MKBL" FUNNO="01"/>
    <pfstatus_pfk CODE="TRLI" PFNO="09" FUNCODE="MKEZ" FUNNO="01"/>
    <pfstatus_pfk CODE="TRLI" PFNO="11" FUNCODE="SAVE" FUNNO="01"/>
    <pfstatus_pfk CODE="TRLI" PFNO="12" FUNCODE="EABR" FUNNO="01"/>
    <pfstatus_pfk CODE="TRLI" PFNO="13" FUNCODE="PRST" FUNNO="01"/>
    <pfstatus_pfk CODE="TRLI" PFNO="14" FUNCODE="TREX" FUNNO="01"/>
    <pfstatus_pfk CODE="TRLI" PFNO="15" FUNCODE="ENDE" FUNNO="01"/>
    <pfstatus_pfk CODE="TRLI" PFNO="16" FUNCODE="MKLO" FUNNO="01"/>
    <pfstatus_pfk CODE="TRLI" PFNO="17" FUNCODE="ADDR" FUNNO="01"/>
    <pfstatus_pfk CODE="TRLI" PFNO="18" FUNCODE="TRIN" FUNNO="01"/>
    <pfstatus_pfk CODE="TRLI" PFNO="19" FUNCODE="POSI" FUNNO="002"/>
    <pfstatus_pfk CODE="TRLI" PFNO="21" FUNCODE="P--" FUNNO="01"/>
    <pfstatus_pfk CODE="TRLI" PFNO="22" FUNCODE="P-" FUNNO="01"/>
    <pfstatus_pfk CODE="TRLI" PFNO="23" FUNCODE="P+" FUNNO="01"/>
    <pfstatus_pfk CODE="TRLI" PFNO="24" FUNCODE="P++" FUNNO="01"/>
    <pfstatus_pfk CODE="TRLI" PFNO="25" FUNCODE="AEND" FUNNO="01"/>
    <pfstatus_pfk CODE="TRLI" PFNO="29" FUNCODE="SCRF" FUNNO="001"/>
    <pfstatus_pfk CODE="TRLI" PFNO="32" FUNCODE="EXPA" FUNNO="01"/>
    <pfstatus_pfk CODE="TRLI" PFNO="34" FUNCODE="BCSH" FUNNO="001"/>
    <pfstatus_pfk CODE="TRLI" PFNO="38" FUNCODE="DETM" FUNNO="001"/>
    <pfstatus_pfk CODE="TRLI" PFNO="80" FUNCODE="P--" FUNNO="01"/>
    <pfstatus_pfk CODE="TRLI" PFNO="81" FUNCODE="P-" FUNNO="01"/>
    <pfstatus_pfk CODE="TRLI" PFNO="82" FUNCODE="P+" FUNNO="01"/>
    <pfstatus_pfk CODE="TRLI" PFNO="83" FUNCODE="P++" FUNNO="01"/>
    <pfstatus_pfk CODE="TRLI" PFNO="86" FUNCODE="PRST" FUNNO="01"/>
    <pfstatus_set STATUS="EALX" FUNCTION="ADDR"/>
    <pfstatus_set STATUS="EALX" FUNCTION="ALMK"/>
    <pfstatus_set STATUS="EALX" FUNCTION="ANZG"/>
    <pfstatus_set STATUS="EALX" FUNCTION="ATAB"/>
    <pfstatus_set STATUS="EALX" FUNCTION="BACK"/>
    <pfstatus_set STATUS="EALX" FUNCTION="DELE"/>
    <pfstatus_set STATUS="EALX" FUNCTION="DELM"/>
    <pfstatus_set STATUS="EALX" FUNCTION="EABR"/>
    <pfstatus_set STATUS="EALX" FUNCTION="ENDE"/>
    <pfstatus_set STATUS="EALX" FUNCTION="FDOC"/>
    <pfstatus_set STATUS="EALX" FUNCTION="GPRF"/>
    <pfstatus_set STATUS="EALX" FUNCTION="MKAL"/>
    <pfstatus_set STATUS="EALX" FUNCTION="MKBL"/>
    <pfstatus_set STATUS="EALX" FUNCTION="MKEZ"/>
    <pfstatus_set STATUS="EALX" FUNCTION="MKLO"/>
    <pfstatus_set STATUS="EALX" FUNCTION="NEXT"/>
    <pfstatus_set STATUS="EALX" FUNCTION="ORDR"/>
    <pfstatus_set STATUS="EALX" FUNCTION="P+"/>
    <pfstatus_set STATUS="EALX" FUNCTION="P++"/>
    <pfstatus_set STATUS="EALX" FUNCTION="P-"/>
    <pfstatus_set STATUS="EALX" FUNCTION="P--"/>
    <pfstatus_set STATUS="EALX" FUNCTION="POSI"/>
    <pfstatus_set STATUS="EALX" FUNCTION="PREV"/>
    <pfstatus_set STATUS="EALX" FUNCTION="PROT"/>
    <pfstatus_set STATUS="EALX" FUNCTION="PRST"/>
    <pfstatus_set STATUS="EALX" FUNCTION="REPL"/>
    <pfstatus_set STATUS="EALX" FUNCTION="SAVE"/>
    <pfstatus_set STATUS="EALX" FUNCTION="SCRF"/>
    <pfstatus_set STATUS="EALXM" FUNCTION="ADDR"/>
    <pfstatus_set STATUS="EALXM" FUNCTION="ALMK"/>
    <pfstatus_set STATUS="EALXM" FUNCTION="ANZG"/>
    <pfstatus_set STATUS="EALXM" FUNCTION="ATAB"/>
    <pfstatus_set STATUS="EALXM" FUNCTION="BACK"/>
    <pfstatus_set STATUS="EALXM" FUNCTION="DELE"/>
    <pfstatus_set STATUS="EALXM" FUNCTION="DELM"/>
    <pfstatus_set STATUS="EALXM" FUNCTION="EABR"/>
    <pfstatus_set STATUS="EALXM" FUNCTION="ENDE"/>
    <pfstatus_set STATUS="EALXM" FUNCTION="FDOC"/>
    <pfstatus_set STATUS="EALXM" FUNCTION="GPRF"/>
    <pfstatus_set STATUS="EALXM" FUNCTION="MKAL"/>
    <pfstatus_set STATUS="EALXM" FUNCTION="MKBL"/>
    <pfstatus_set STATUS="EALXM" FUNCTION="MKEZ"/>
    <pfstatus_set STATUS="EALXM" FUNCTION="MKLO"/>
    <pfstatus_set STATUS="EALXM" FUNCTION="NEXT"/>
    <pfstatus_set STATUS="EALXM" FUNCTION="ORDR"/>
    <pfstatus_set STATUS="EALXM" FUNCTION="P+"/>
    <pfstatus_set STATUS="EALXM" FUNCTION="P++"/>
    <pfstatus_set STATUS="EALXM" FUNCTION="P-"/>
    <pfstatus_set STATUS="EALXM" FUNCTION="P--"/>
    <pfstatus_set STATUS="EALXM" FUNCTION="POSI"/>
    <pfstatus_set STATUS="EALXM" FUNCTION="PREV"/>
    <pfstatus_set STATUS="EALXM" FUNCTION="PROT"/>
    <pfstatus_set STATUS="EALXM" FUNCTION="PRST"/>
    <pfstatus_set STATUS="EALXM" FUNCTION="REPL"/>
    <pfstatus_set STATUS="EALXM" FUNCTION="SAVE"/>
    <pfstatus_set STATUS="EALXM" FUNCTION="SCRF"/>
    <pfstatus_set STATUS="ECLG" FUNCTION="ADDR"/>
    <pfstatus_set STATUS="ECLG" FUNCTION="ALMK"/>
    <pfstatus_set STATUS="ECLG" FUNCTION="ALNW"/>
    <pfstatus_set STATUS="ECLG" FUNCTION="ALOE"/>
    <pfstatus_set STATUS="ECLG" FUNCTION="ANZG"/>
    <pfstatus_set STATUS="ECLG" FUNCTION="ATAB"/>
    <pfstatus_set STATUS="ECLG" FUNCTION="BACK"/>
    <pfstatus_set STATUS="ECLG" FUNCTION="BCCH"/>
    <pfstatus_set STATUS="ECLG" FUNCTION="BCSH"/>
    <pfstatus_set STATUS="ECLG" FUNCTION="CMPO"/>
    <pfstatus_set STATUS="ECLG" FUNCTION="CMPR"/>
    <pfstatus_set STATUS="ECLG" FUNCTION="COMP"/>
    <pfstatus_set STATUS="ECLG" FUNCTION="DELE"/>
    <pfstatus_set STATUS="ECLG" FUNCTION="DELM"/>
    <pfstatus_set STATUS="ECLG" FUNCTION="DETA_PCK"/>
    <pfstatus_set STATUS="ECLG" FUNCTION="EABR"/>
    <pfstatus_set STATUS="ECLG" FUNCTION="ENDE"/>
    <pfstatus_set STATUS="ECLG" FUNCTION="EXPA"/>
    <pfstatus_set STATUS="ECLG" FUNCTION="FDOC"/>
    <pfstatus_set STATUS="ECLG" FUNCTION="GPRF"/>
    <pfstatus_set STATUS="ECLG" FUNCTION="KOPE"/>
    <pfstatus_set STATUS="ECLG" FUNCTION="LANG"/>
    <pfstatus_set STATUS="ECLG" FUNCTION="MKAL"/>
    <pfstatus_set STATUS="ECLG" FUNCTION="MKBL"/>
    <pfstatus_set STATUS="ECLG" FUNCTION="MKEZ"/>
    <pfstatus_set STATUS="ECLG" FUNCTION="MKLO"/>
    <pfstatus_set STATUS="ECLG" FUNCTION="NEWL"/>
    <pfstatus_set STATUS="ECLG" FUNCTION="NEXT"/>
    <pfstatus_set STATUS="ECLG" FUNCTION="ORDR"/>
    <pfstatus_set STATUS="ECLG" FUNCTION="ORGI"/>
    <pfstatus_set STATUS="ECLG" FUNCTION="P+"/>
    <pfstatus_set STATUS="ECLG" FUNCTION="P++"/>
    <pfstatus_set STATUS="ECLG" FUNCTION="P-"/>
    <pfstatus_set STATUS="ECLG" FUNCTION="P--"/>
    <pfstatus_set STATUS="ECLG" FUNCTION="POSI"/>
    <pfstatus_set STATUS="ECLG" FUNCTION="PREV"/>
    <pfstatus_set STATUS="ECLG" FUNCTION="PROT"/>
    <pfstatus_set STATUS="ECLG" FUNCTION="PRST"/>
    <pfstatus_set STATUS="ECLG" FUNCTION="REPL"/>
    <pfstatus_set STATUS="ECLG" FUNCTION="SAVE"/>
    <pfstatus_set STATUS="ECLG" FUNCTION="SCRF"/>
    <pfstatus_set STATUS="ECLG" FUNCTION="SEAR"/>
    <pfstatus_set STATUS="ECLG" FUNCTION="SELU"/>
    <pfstatus_set STATUS="ECLG" FUNCTION="TEXT"/>
    <pfstatus_set STATUS="ECLG" FUNCTION="TRSP"/>
    <pfstatus_set STATUS="ECLGM" FUNCTION="ADDR"/>
    <pfstatus_set STATUS="ECLGM" FUNCTION="ALMK"/>
    <pfstatus_set STATUS="ECLGM" FUNCTION="ALNW"/>
    <pfstatus_set STATUS="ECLGM" FUNCTION="ALOE"/>
    <pfstatus_set STATUS="ECLGM" FUNCTION="ANZG"/>
    <pfstatus_set STATUS="ECLGM" FUNCTION="ATAB"/>
    <pfstatus_set STATUS="ECLGM" FUNCTION="BACK"/>
    <pfstatus_set STATUS="ECLGM" FUNCTION="BCCH"/>
    <pfstatus_set STATUS="ECLGM" FUNCTION="BCSH"/>
    <pfstatus_set STATUS="ECLGM" FUNCTION="CMPO"/>
    <pfstatus_set STATUS="ECLGM" FUNCTION="CMPR"/>
    <pfstatus_set STATUS="ECLGM" FUNCTION="COMP"/>
    <pfstatus_set STATUS="ECLGM" FUNCTION="DELE"/>
    <pfstatus_set STATUS="ECLGM" FUNCTION="DELM"/>
    <pfstatus_set STATUS="ECLGM" FUNCTION="EABR"/>
    <pfstatus_set STATUS="ECLGM" FUNCTION="ENDE"/>
    <pfstatus_set STATUS="ECLGM" FUNCTION="EXPA"/>
    <pfstatus_set STATUS="ECLGM" FUNCTION="FDOC"/>
    <pfstatus_set STATUS="ECLGM" FUNCTION="GPRF"/>
    <pfstatus_set STATUS="ECLGM" FUNCTION="KOPE"/>
    <pfstatus_set STATUS="ECLGM" FUNCTION="LANG"/>
    <pfstatus_set STATUS="ECLGM" FUNCTION="MKAL"/>
    <pfstatus_set STATUS="ECLGM" FUNCTION="MKBL"/>
    <pfstatus_set STATUS="ECLGM" FUNCTION="MKEZ"/>
    <pfstatus_set STATUS="ECLGM" FUNCTION="MKLO"/>
    <pfstatus_set STATUS="ECLGM" FUNCTION="NEWL"/>
    <pfstatus_set STATUS="ECLGM" FUNCTION="NEXT"/>
    <pfstatus_set STATUS="ECLGM" FUNCTION="ORDR"/>
    <pfstatus_set STATUS="ECLGM" FUNCTION="ORGI"/>
    <pfstatus_set STATUS="ECLGM" FUNCTION="P+"/>
    <pfstatus_set STATUS="ECLGM" FUNCTION="P++"/>
    <pfstatus_set STATUS="ECLGM" FUNCTION="P-"/>
    <pfstatus_set STATUS="ECLGM" FUNCTION="P--"/>
    <pfstatus_set STATUS="ECLGM" FUNCTION="POSI"/>
    <pfstatus_set STATUS="ECLGM" FUNCTION="PREV"/>
    <pfstatus_set STATUS="ECLGM" FUNCTION="PROT"/>
    <pfstatus_set STATUS="ECLGM" FUNCTION="PRST"/>
    <pfstatus_set STATUS="ECLGM" FUNCTION="REPL"/>
    <pfstatus_set STATUS="ECLGM" FUNCTION="SAVE"/>
    <pfstatus_set STATUS="ECLGM" FUNCTION="SCRF"/>
    <pfstatus_set STATUS="ECLGM" FUNCTION="SEAR"/>
    <pfstatus_set STATUS="ECLGM" FUNCTION="SELU"/>
    <pfstatus_set STATUS="ECLGM" FUNCTION="TEXT"/>
    <pfstatus_set STATUS="ECLGM" FUNCTION="TRSP"/>
    <pfstatus_set STATUS="ECLX" FUNCTION="EABR"/>
    <pfstatus_set STATUS="ECLX" FUNCTION="FDOC"/>
    <pfstatus_set STATUS="ECLX" FUNCTION="GPRF"/>
    <pfstatus_set STATUS="ECLX" FUNCTION="KOPF"/>
    <pfstatus_set STATUS="ECLX" FUNCTION="ORDR"/>
    <pfstatus_set STATUS="ECLX" FUNCTION="P+"/>
    <pfstatus_set STATUS="ECLX" FUNCTION="P++"/>
    <pfstatus_set STATUS="ECLX" FUNCTION="P-"/>
    <pfstatus_set STATUS="ECLX" FUNCTION="P--"/>
    <pfstatus_set STATUS="ERROR" FUNCTION="EABR"/>
    <pfstatus_set STATUS="ERROR" FUNCTION="EIGN"/>
    <pfstatus_set STATUS="ERROR" FUNCTION="FDOC"/>
    <pfstatus_set STATUS="ERRORLIS" FUNCTION="EABR"/>
    <pfstatus_set STATUS="ERRORLIS" FUNCTION="FDOC"/>
    <pfstatus_set STATUS="ESLG" FUNCTION="ADDR"/>
    <pfstatus_set STATUS="ESLG" FUNCTION="AEND"/>
    <pfstatus_set STATUS="ESLG" FUNCTION="ALMK"/>
    <pfstatus_set STATUS="ESLG" FUNCTION="ATAB"/>
    <pfstatus_set STATUS="ESLG" FUNCTION="BACK"/>
    <pfstatus_set STATUS="ESLG" FUNCTION="BCON"/>
    <pfstatus_set STATUS="ESLG" FUNCTION="BCSH"/>
    <pfstatus_set STATUS="ESLG" FUNCTION="CMPO"/>
    <pfstatus_set STATUS="ESLG" FUNCTION="CMPR"/>
    <pfstatus_set STATUS="ESLG" FUNCTION="COMP"/>
    <pfstatus_set STATUS="ESLG" FUNCTION="EABR"/>
    <pfstatus_set STATUS="ESLG" FUNCTION="ENDE"/>
    <pfstatus_set STATUS="ESLG" FUNCTION="EXPA"/>
    <pfstatus_set STATUS="ESLG" FUNCTION="FDOC"/>
    <pfstatus_set STATUS="ESLG" FUNCTION="GPRF"/>
    <pfstatus_set STATUS="ESLG" FUNCTION="LANG"/>
    <pfstatus_set STATUS="ESLG" FUNCTION="MKAL"/>
    <pfstatus_set STATUS="ESLG" FUNCTION="MKBL"/>
    <pfstatus_set STATUS="ESLG" FUNCTION="MKEZ"/>
    <pfstatus_set STATUS="ESLG" FUNCTION="MKLO"/>
    <pfstatus_set STATUS="ESLG" FUNCTION="NEXT"/>
    <pfstatus_set STATUS="ESLG" FUNCTION="ORDR"/>
    <pfstatus_set STATUS="ESLG" FUNCTION="P+"/>
    <pfstatus_set STATUS="ESLG" FUNCTION="P++"/>
    <pfstatus_set STATUS="ESLG" FUNCTION="P-"/>
    <pfstatus_set STATUS="ESLG" FUNCTION="P--"/>
    <pfstatus_set STATUS="ESLG" FUNCTION="POSI"/>
    <pfstatus_set STATUS="ESLG" FUNCTION="PREV"/>
    <pfstatus_set STATUS="ESLG" FUNCTION="PROT"/>
    <pfstatus_set STATUS="ESLG" FUNCTION="PRST"/>
    <pfstatus_set STATUS="ESLG" FUNCTION="SCRF"/>
    <pfstatus_set STATUS="ESLG" FUNCTION="SEAR"/>
    <pfstatus_set STATUS="ESLG" FUNCTION="TEXT"/>
    <pfstatus_set STATUS="ESLGM" FUNCTION="ADDR"/>
    <pfstatus_set STATUS="ESLGM" FUNCTION="AEND"/>
    <pfstatus_set STATUS="ESLGM" FUNCTION="ALMK"/>
    <pfstatus_set STATUS="ESLGM" FUNCTION="ATAB"/>
    <pfstatus_set STATUS="ESLGM" FUNCTION="BACK"/>
    <pfstatus_set STATUS="ESLGM" FUNCTION="BCSH"/>
    <pfstatus_set STATUS="ESLGM" FUNCTION="CMPO"/>
    <pfstatus_set STATUS="ESLGM" FUNCTION="CMPR"/>
    <pfstatus_set STATUS="ESLGM" FUNCTION="COMP"/>
    <pfstatus_set STATUS="ESLGM" FUNCTION="EABR"/>
    <pfstatus_set STATUS="ESLGM" FUNCTION="ENDE"/>
    <pfstatus_set STATUS="ESLGM" FUNCTION="EXPA"/>
    <pfstatus_set STATUS="ESLGM" FUNCTION="FDOC"/>
    <pfstatus_set STATUS="ESLGM" FUNCTION="GPRF"/>
    <pfstatus_set STATUS="ESLGM" FUNCTION="LANG"/>
    <pfstatus_set STATUS="ESLGM" FUNCTION="MKAL"/>
    <pfstatus_set STATUS="ESLGM" FUNCTION="MKBL"/>
    <pfstatus_set STATUS="ESLGM" FUNCTION="MKEZ"/>
    <pfstatus_set STATUS="ESLGM" FUNCTION="MKLO"/>
    <pfstatus_set STATUS="ESLGM" FUNCTION="NEXT"/>
    <pfstatus_set STATUS="ESLGM" FUNCTION="ORDR"/>
    <pfstatus_set STATUS="ESLGM" FUNCTION="P+"/>
    <pfstatus_set STATUS="ESLGM" FUNCTION="P++"/>
    <pfstatus_set STATUS="ESLGM" FUNCTION="P-"/>
    <pfstatus_set STATUS="ESLGM" FUNCTION="P--"/>
    <pfstatus_set STATUS="ESLGM" FUNCTION="POSI"/>
    <pfstatus_set STATUS="ESLGM" FUNCTION="PREV"/>
    <pfstatus_set STATUS="ESLGM" FUNCTION="PROT"/>
    <pfstatus_set STATUS="ESLGM" FUNCTION="PRST"/>
    <pfstatus_set STATUS="ESLGM" FUNCTION="SCRF"/>
    <pfstatus_set STATUS="ESLGM" FUNCTION="SEAR"/>
    <pfstatus_set STATUS="ESLGM" FUNCTION="TEXT"/>
    <pfstatus_set STATUS="ESLX" FUNCTION="ADDR"/>
    <pfstatus_set STATUS="ESLX" FUNCTION="AEND"/>
    <pfstatus_set STATUS="ESLX" FUNCTION="ALMK"/>
    <pfstatus_set STATUS="ESLX" FUNCTION="ATAB"/>
    <pfstatus_set STATUS="ESLX" FUNCTION="BACK"/>
    <pfstatus_set STATUS="ESLX" FUNCTION="BCSH"/>
    <pfstatus_set STATUS="ESLX" FUNCTION="EABR"/>
    <pfstatus_set STATUS="ESLX" FUNCTION="ENDE"/>
    <pfstatus_set STATUS="ESLX" FUNCTION="EXPA"/>
    <pfstatus_set STATUS="ESLX" FUNCTION="FDOC"/>
    <pfstatus_set STATUS="ESLX" FUNCTION="GPRF"/>
    <pfstatus_set STATUS="ESLX" FUNCTION="LANG"/>
    <pfstatus_set STATUS="ESLX" FUNCTION="MKAL"/>
    <pfstatus_set STATUS="ESLX" FUNCTION="MKBL"/>
    <pfstatus_set STATUS="ESLX" FUNCTION="MKEZ"/>
    <pfstatus_set STATUS="ESLX" FUNCTION="MKLO"/>
    <pfstatus_set STATUS="ESLX" FUNCTION="NEXT"/>
    <pfstatus_set STATUS="ESLX" FUNCTION="ORDR"/>
    <pfstatus_set STATUS="ESLX" FUNCTION="P+"/>
    <pfstatus_set STATUS="ESLX" FUNCTION="P++"/>
    <pfstatus_set STATUS="ESLX" FUNCTION="P-"/>
    <pfstatus_set STATUS="ESLX" FUNCTION="P--"/>
    <pfstatus_set STATUS="ESLX" FUNCTION="POSI"/>
    <pfstatus_set STATUS="ESLX" FUNCTION="PREV"/>
    <pfstatus_set STATUS="ESLX" FUNCTION="PROT"/>
    <pfstatus_set STATUS="ESLX" FUNCTION="PRST"/>
    <pfstatus_set STATUS="ESLX" FUNCTION="SCRF"/>
    <pfstatus_set STATUS="ESLX" FUNCTION="SEAR"/>
    <pfstatus_set STATUS="ESLX" FUNCTION="TEXT"/>
    <pfstatus_set STATUS="ESLXM" FUNCTION="ADDR"/>
    <pfstatus_set STATUS="ESLXM" FUNCTION="AEND"/>
    <pfstatus_set STATUS="ESLXM" FUNCTION="ALMK"/>
    <pfstatus_set STATUS="ESLXM" FUNCTION="ATAB"/>
    <pfstatus_set STATUS="ESLXM" FUNCTION="BACK"/>
    <pfstatus_set STATUS="ESLXM" FUNCTION="EABR"/>
    <pfstatus_set STATUS="ESLXM" FUNCTION="ENDE"/>
    <pfstatus_set STATUS="ESLXM" FUNCTION="EXPA"/>
    <pfstatus_set STATUS="ESLXM" FUNCTION="FDOC"/>
    <pfstatus_set STATUS="ESLXM" FUNCTION="GPRF"/>
    <pfstatus_set STATUS="ESLXM" FUNCTION="LANG"/>
    <pfstatus_set STATUS="ESLXM" FUNCTION="MKAL"/>
    <pfstatus_set STATUS="ESLXM" FUNCTION="MKBL"/>
    <pfstatus_set STATUS="ESLXM" FUNCTION="MKEZ"/>
    <pfstatus_set STATUS="ESLXM" FUNCTION="MKLO"/>
    <pfstatus_set STATUS="ESLXM" FUNCTION="NEXT"/>
    <pfstatus_set STATUS="ESLXM" FUNCTION="ORDR"/>
    <pfstatus_set STATUS="ESLXM" FUNCTION="P+"/>
    <pfstatus_set STATUS="ESLXM" FUNCTION="P++"/>
    <pfstatus_set STATUS="ESLXM" FUNCTION="P-"/>
    <pfstatus_set STATUS="ESLXM" FUNCTION="P--"/>
    <pfstatus_set STATUS="ESLXM" FUNCTION="POSI"/>
    <pfstatus_set STATUS="ESLXM" FUNCTION="PREV"/>
    <pfstatus_set STATUS="ESLXM" FUNCTION="PROT"/>
    <pfstatus_set STATUS="ESLXM" FUNCTION="PRST"/>
    <pfstatus_set STATUS="ESLXM" FUNCTION="SCRF"/>
    <pfstatus_set STATUS="ESLXM" FUNCTION="SEAR"/>
    <pfstatus_set STATUS="ESLXM" FUNCTION="TEXT"/>
    <pfstatus_set STATUS="ETLG" FUNCTION="ADDR"/>
    <pfstatus_set STATUS="ETLG" FUNCTION="AEND"/>
    <pfstatus_set STATUS="ETLG" FUNCTION="ALCO"/>
    <pfstatus_set STATUS="ETLG" FUNCTION="ALMK"/>
    <pfstatus_set STATUS="ETLG" FUNCTION="ALNC"/>
    <pfstatus_set STATUS="ETLG" FUNCTION="ATAB"/>
    <pfstatus_set STATUS="ETLG" FUNCTION="BACK"/>
    <pfstatus_set STATUS="ETLG" FUNCTION="BCON"/>
    <pfstatus_set STATUS="ETLG" FUNCTION="BCSH"/>
    <pfstatus_set STATUS="ETLG" FUNCTION="EABR"/>
    <pfstatus_set STATUS="ETLG" FUNCTION="ENDE"/>
    <pfstatus_set STATUS="ETLG" FUNCTION="EXPA"/>
    <pfstatus_set STATUS="ETLG" FUNCTION="FDOC"/>
    <pfstatus_set STATUS="ETLG" FUNCTION="LANG"/>
    <pfstatus_set STATUS="ETLG" FUNCTION="MKAL"/>
    <pfstatus_set STATUS="ETLG" FUNCTION="MKBL"/>
    <pfstatus_set STATUS="ETLG" FUNCTION="MKEZ"/>
    <pfstatus_set STATUS="ETLG" FUNCTION="MKLO"/>
    <pfstatus_set STATUS="ETLG" FUNCTION="NEXT"/>
    <pfstatus_set STATUS="ETLG" FUNCTION="ORDR"/>
    <pfstatus_set STATUS="ETLG" FUNCTION="P+"/>
    <pfstatus_set STATUS="ETLG" FUNCTION="P++"/>
    <pfstatus_set STATUS="ETLG" FUNCTION="P-"/>
    <pfstatus_set STATUS="ETLG" FUNCTION="P--"/>
    <pfstatus_set STATUS="ETLG" FUNCTION="POSI"/>
    <pfstatus_set STATUS="ETLG" FUNCTION="PREV"/>
    <pfstatus_set STATUS="ETLG" FUNCTION="PRST"/>
    <pfstatus_set STATUS="ETLG" FUNCTION="SAVE"/>
    <pfstatus_set STATUS="ETLG" FUNCTION="SCRF"/>
    <pfstatus_set STATUS="ETLG" FUNCTION="SEAR"/>
    <pfstatus_set STATUS="ETLG" FUNCTION="TEXT"/>
    <pfstatus_set STATUS="ETLG" FUNCTION="TREX"/>
    <pfstatus_set STATUS="ETLG" FUNCTION="TRIN"/>
    <pfstatus_set STATUS="ETLGM" FUNCTION="ADDR"/>
    <pfstatus_set STATUS="ETLGM" FUNCTION="AEND"/>
    <pfstatus_set STATUS="ETLGM" FUNCTION="ALCO"/>
    <pfstatus_set STATUS="ETLGM" FUNCTION="ALMK"/>
    <pfstatus_set STATUS="ETLGM" FUNCTION="ALNC"/>
    <pfstatus_set STATUS="ETLGM" FUNCTION="ATAB"/>
    <pfstatus_set STATUS="ETLGM" FUNCTION="BACK"/>
    <pfstatus_set STATUS="ETLGM" FUNCTION="EABR"/>
    <pfstatus_set STATUS="ETLGM" FUNCTION="ENDE"/>
    <pfstatus_set STATUS="ETLGM" FUNCTION="EXPA"/>
    <pfstatus_set STATUS="ETLGM" FUNCTION="FDOC"/>
    <pfstatus_set STATUS="ETLGM" FUNCTION="LANG"/>
    <pfstatus_set STATUS="ETLGM" FUNCTION="MKAL"/>
    <pfstatus_set STATUS="ETLGM" FUNCTION="MKBL"/>
    <pfstatus_set STATUS="ETLGM" FUNCTION="MKEZ"/>
    <pfstatus_set STATUS="ETLGM" FUNCTION="MKLO"/>
    <pfstatus_set STATUS="ETLGM" FUNCTION="NEXT"/>
    <pfstatus_set STATUS="ETLGM" FUNCTION="ORDR"/>
    <pfstatus_set STATUS="ETLGM" FUNCTION="P+"/>
    <pfstatus_set STATUS="ETLGM" FUNCTION="P++"/>
    <pfstatus_set STATUS="ETLGM" FUNCTION="P-"/>
    <pfstatus_set STATUS="ETLGM" FUNCTION="P--"/>
    <pfstatus_set STATUS="ETLGM" FUNCTION="POSI"/>
    <pfstatus_set STATUS="ETLGM" FUNCTION="PREV"/>
    <pfstatus_set STATUS="ETLGM" FUNCTION="PRST"/>
    <pfstatus_set STATUS="ETLGM" FUNCTION="SAVE"/>
    <pfstatus_set STATUS="ETLGM" FUNCTION="SCRF"/>
    <pfstatus_set STATUS="ETLGM" FUNCTION="SEAR"/>
    <pfstatus_set STATUS="ETLGM" FUNCTION="TEXT"/>
    <pfstatus_set STATUS="ETLGM" FUNCTION="TREX"/>
    <pfstatus_set STATUS="ETLGM" FUNCTION="TRIN"/>
    <pfstatus_set STATUS="ETLX" FUNCTION="ADDR"/>
    <pfstatus_set STATUS="ETLX" FUNCTION="AEND"/>
    <pfstatus_set STATUS="ETLX" FUNCTION="ALCO"/>
    <pfstatus_set STATUS="ETLX" FUNCTION="ALMK"/>
    <pfstatus_set STATUS="ETLX" FUNCTION="ALNC"/>
    <pfstatus_set STATUS="ETLX" FUNCTION="ATAB"/>
    <pfstatus_set STATUS="ETLX" FUNCTION="BACK"/>
    <pfstatus_set STATUS="ETLX" FUNCTION="EABR"/>
    <pfstatus_set STATUS="ETLX" FUNCTION="ENDE"/>
    <pfstatus_set STATUS="ETLX" FUNCTION="EXPA"/>
    <pfstatus_set STATUS="ETLX" FUNCTION="FDOC"/>
    <pfstatus_set STATUS="ETLX" FUNCTION="LANG"/>
    <pfstatus_set STATUS="ETLX" FUNCTION="MKAL"/>
    <pfstatus_set STATUS="ETLX" FUNCTION="MKBL"/>
    <pfstatus_set STATUS="ETLX" FUNCTION="MKEZ"/>
    <pfstatus_set STATUS="ETLX" FUNCTION="MKLO"/>
    <pfstatus_set STATUS="ETLX" FUNCTION="NEXT"/>
    <pfstatus_set STATUS="ETLX" FUNCTION="ORDR"/>
    <pfstatus_set STATUS="ETLX" FUNCTION="P+"/>
    <pfstatus_set STATUS="ETLX" FUNCTION="P++"/>
    <pfstatus_set STATUS="ETLX" FUNCTION="P-"/>
    <pfstatus_set STATUS="ETLX" FUNCTION="P--"/>
    <pfstatus_set STATUS="ETLX" FUNCTION="POSI"/>
    <pfstatus_set STATUS="ETLX" FUNCTION="PREV"/>
    <pfstatus_set STATUS="ETLX" FUNCTION="PRST"/>
    <pfstatus_set STATUS="ETLX" FUNCTION="SAVE"/>
    <pfstatus_set STATUS="ETLX" FUNCTION="SCRF"/>
    <pfstatus_set STATUS="ETLX" FUNCTION="SEAR"/>
    <pfstatus_set STATUS="ETLX" FUNCTION="TEXT"/>
    <pfstatus_set STATUS="ETLX" FUNCTION="TREX"/>
    <pfstatus_set STATUS="ETLX" FUNCTION="TRIN"/>
    <pfstatus_set STATUS="ETLXM" FUNCTION="ADDR"/>
    <pfstatus_set STATUS="ETLXM" FUNCTION="AEND"/>
    <pfstatus_set STATUS="ETLXM" FUNCTION="ALCO"/>
    <pfstatus_set STATUS="ETLXM" FUNCTION="ALMK"/>
    <pfstatus_set STATUS="ETLXM" FUNCTION="ALNC"/>
    <pfstatus_set STATUS="ETLXM" FUNCTION="ATAB"/>
    <pfstatus_set STATUS="ETLXM" FUNCTION="BACK"/>
    <pfstatus_set STATUS="ETLXM" FUNCTION="EABR"/>
    <pfstatus_set STATUS="ETLXM" FUNCTION="ENDE"/>
    <pfstatus_set STATUS="ETLXM" FUNCTION="EXPA"/>
    <pfstatus_set STATUS="ETLXM" FUNCTION="FDOC"/>
    <pfstatus_set STATUS="ETLXM" FUNCTION="LANG"/>
    <pfstatus_set STATUS="ETLXM" FUNCTION="MKAL"/>
    <pfstatus_set STATUS="ETLXM" FUNCTION="MKBL"/>
    <pfstatus_set STATUS="ETLXM" FUNCTION="MKEZ"/>
    <pfstatus_set STATUS="ETLXM" FUNCTION="MKLO"/>
    <pfstatus_set STATUS="ETLXM" FUNCTION="NEXT"/>
    <pfstatus_set STATUS="ETLXM" FUNCTION="ORDR"/>
    <pfstatus_set STATUS="ETLXM" FUNCTION="P+"/>
    <pfstatus_set STATUS="ETLXM" FUNCTION="P++"/>
    <pfstatus_set STATUS="ETLXM" FUNCTION="P-"/>
    <pfstatus_set STATUS="ETLXM" FUNCTION="P--"/>
    <pfstatus_set STATUS="ETLXM" FUNCTION="POSI"/>
    <pfstatus_set STATUS="ETLXM" FUNCTION="PREV"/>
    <pfstatus_set STATUS="ETLXM" FUNCTION="PRST"/>
    <pfstatus_set STATUS="ETLXM" FUNCTION="SAVE"/>
    <pfstatus_set STATUS="ETLXM" FUNCTION="SCRF"/>
    <pfstatus_set STATUS="ETLXM" FUNCTION="SEAR"/>
    <pfstatus_set STATUS="ETLXM" FUNCTION="TEXT"/>
    <pfstatus_set STATUS="ETLXM" FUNCTION="TREX"/>
    <pfstatus_set STATUS="ETLXM" FUNCTION="TRIN"/>
    <pfstatus_set STATUS="EULG" FUNCTION="ADDR"/>
    <pfstatus_set STATUS="EULG" FUNCTION="ALMK"/>
    <pfstatus_set STATUS="EULG" FUNCTION="ALNW"/>
    <pfstatus_set STATUS="EULG" FUNCTION="ALOE"/>
    <pfstatus_set STATUS="EULG" FUNCTION="ANZG"/>
    <pfstatus_set STATUS="EULG" FUNCTION="ATAB"/>
    <pfstatus_set STATUS="EULG" FUNCTION="BACK"/>
    <pfstatus_set STATUS="EULG" FUNCTION="BCCH"/>
    <pfstatus_set STATUS="EULG" FUNCTION="BCON"/>
    <pfstatus_set STATUS="EULG" FUNCTION="BCSH"/>
    <pfstatus_set STATUS="EULG" FUNCTION="CENDT"/>
    <pfstatus_set STATUS="EULG" FUNCTION="CMPO"/>
    <pfstatus_set STATUS="EULG" FUNCTION="CMPR"/>
    <pfstatus_set STATUS="EULG" FUNCTION="COMP"/>
    <pfstatus_set STATUS="EULG" FUNCTION="DELE"/>
    <pfstatus_set STATUS="EULG" FUNCTION="DELM"/>
    <pfstatus_set STATUS="EULG" FUNCTION="DETA_PCK"/>
    <pfstatus_set STATUS="EULG" FUNCTION="EABR"/>
    <pfstatus_set STATUS="EULG" FUNCTION="ENDE"/>
    <pfstatus_set STATUS="EULG" FUNCTION="EXPA"/>
    <pfstatus_set STATUS="EULG" FUNCTION="FDOC"/>
    <pfstatus_set STATUS="EULG" FUNCTION="GPRF"/>
    <pfstatus_set STATUS="EULG" FUNCTION="KOPE"/>
    <pfstatus_set STATUS="EULG" FUNCTION="LANG"/>
    <pfstatus_set STATUS="EULG" FUNCTION="MKAL"/>
    <pfstatus_set STATUS="EULG" FUNCTION="MKBL"/>
    <pfstatus_set STATUS="EULG" FUNCTION="MKEZ"/>
    <pfstatus_set STATUS="EULG" FUNCTION="MKLO"/>
    <pfstatus_set STATUS="EULG" FUNCTION="NEWL"/>
    <pfstatus_set STATUS="EULG" FUNCTION="NEXT"/>
    <pfstatus_set STATUS="EULG" FUNCTION="ORDR"/>
    <pfstatus_set STATUS="EULG" FUNCTION="ORGI"/>
    <pfstatus_set STATUS="EULG" FUNCTION="P+"/>
    <pfstatus_set STATUS="EULG" FUNCTION="P++"/>
    <pfstatus_set STATUS="EULG" FUNCTION="P-"/>
    <pfstatus_set STATUS="EULG" FUNCTION="P--"/>
    <pfstatus_set STATUS="EULG" FUNCTION="POSI"/>
    <pfstatus_set STATUS="EULG" FUNCTION="PREV"/>
    <pfstatus_set STATUS="EULG" FUNCTION="PROT"/>
    <pfstatus_set STATUS="EULG" FUNCTION="PRST"/>
    <pfstatus_set STATUS="EULG" FUNCTION="REPL"/>
    <pfstatus_set STATUS="EULG" FUNCTION="SAVE"/>
    <pfstatus_set STATUS="EULG" FUNCTION="SCRF"/>
    <pfstatus_set STATUS="EULG" FUNCTION="SEAR"/>
    <pfstatus_set STATUS="EULG" FUNCTION="SELU"/>
    <pfstatus_set STATUS="EULG" FUNCTION="TEXT"/>
    <pfstatus_set STATUS="EULG" FUNCTION="TRSP"/>
    <pfstatus_set STATUS="EULGM" FUNCTION="ADDR"/>
    <pfstatus_set STATUS="EULGM" FUNCTION="ALMK"/>
    <pfstatus_set STATUS="EULGM" FUNCTION="ALNW"/>
    <pfstatus_set STATUS="EULGM" FUNCTION="ALOE"/>
    <pfstatus_set STATUS="EULGM" FUNCTION="ANZG"/>
    <pfstatus_set STATUS="EULGM" FUNCTION="ATAB"/>
    <pfstatus_set STATUS="EULGM" FUNCTION="BACK"/>
    <pfstatus_set STATUS="EULGM" FUNCTION="BCCH"/>
    <pfstatus_set STATUS="EULGM" FUNCTION="BCON"/>
    <pfstatus_set STATUS="EULGM" FUNCTION="BCSH"/>
    <pfstatus_set STATUS="EULGM" FUNCTION="CENDT"/>
    <pfstatus_set STATUS="EULGM" FUNCTION="CMPO"/>
    <pfstatus_set STATUS="EULGM" FUNCTION="CMPR"/>
    <pfstatus_set STATUS="EULGM" FUNCTION="COMP"/>
    <pfstatus_set STATUS="EULGM" FUNCTION="DELE"/>
    <pfstatus_set STATUS="EULGM" FUNCTION="DELM"/>
    <pfstatus_set STATUS="EULGM" FUNCTION="EABR"/>
    <pfstatus_set STATUS="EULGM" FUNCTION="ENDE"/>
    <pfstatus_set STATUS="EULGM" FUNCTION="EXPA"/>
    <pfstatus_set STATUS="EULGM" FUNCTION="FDOC"/>
    <pfstatus_set STATUS="EULGM" FUNCTION="GPRF"/>
    <pfstatus_set STATUS="EULGM" FUNCTION="KOPE"/>
    <pfstatus_set STATUS="EULGM" FUNCTION="LANG"/>
    <pfstatus_set STATUS="EULGM" FUNCTION="MKAL"/>
    <pfstatus_set STATUS="EULGM" FUNCTION="MKBL"/>
    <pfstatus_set STATUS="EULGM" FUNCTION="MKEZ"/>
    <pfstatus_set STATUS="EULGM" FUNCTION="MKLO"/>
    <pfstatus_set STATUS="EULGM" FUNCTION="NEWL"/>
    <pfstatus_set STATUS="EULGM" FUNCTION="NEXT"/>
    <pfstatus_set STATUS="EULGM" FUNCTION="ORDR"/>
    <pfstatus_set STATUS="EULGM" FUNCTION="ORGI"/>
    <pfstatus_set STATUS="EULGM" FUNCTION="P+"/>
    <pfstatus_set STATUS="EULGM" FUNCTION="P++"/>
    <pfstatus_set STATUS="EULGM" FUNCTION="P-"/>
    <pfstatus_set STATUS="EULGM" FUNCTION="P--"/>
    <pfstatus_set STATUS="EULGM" FUNCTION="POSI"/>
    <pfstatus_set STATUS="EULGM" FUNCTION="PREV"/>
    <pfstatus_set STATUS="EULGM" FUNCTION="PROT"/>
    <pfstatus_set STATUS="EULGM" FUNCTION="PRST"/>
    <pfstatus_set STATUS="EULGM" FUNCTION="REPL"/>
    <pfstatus_set STATUS="EULGM" FUNCTION="SAVE"/>
    <pfstatus_set STATUS="EULGM" FUNCTION="SCRF"/>
    <pfstatus_set STATUS="EULGM" FUNCTION="SEAR"/>
    <pfstatus_set STATUS="EULGM" FUNCTION="SELU"/>
    <pfstatus_set STATUS="EULGM" FUNCTION="TEXT"/>
    <pfstatus_set STATUS="EULGM" FUNCTION="TRSP"/>
    <pfstatus_set STATUS="EULX" FUNCTION="ADDR"/>
    <pfstatus_set STATUS="EULX" FUNCTION="ALMK"/>
    <pfstatus_set STATUS="EULX" FUNCTION="ALNW"/>
    <pfstatus_set STATUS="EULX" FUNCTION="ALOE"/>
    <pfstatus_set STATUS="EULX" FUNCTION="ANZG"/>
    <pfstatus_set STATUS="EULX" FUNCTION="ATAB"/>
    <pfstatus_set STATUS="EULX" FUNCTION="BACK"/>
    <pfstatus_set STATUS="EULX" FUNCTION="BCCH"/>
    <pfstatus_set STATUS="EULX" FUNCTION="BCSH"/>
    <pfstatus_set STATUS="EULX" FUNCTION="DELE"/>
    <pfstatus_set STATUS="EULX" FUNCTION="DELM"/>
    <pfstatus_set STATUS="EULX" FUNCTION="EABR"/>
    <pfstatus_set STATUS="EULX" FUNCTION="ENDE"/>
    <pfstatus_set STATUS="EULX" FUNCTION="EXPA"/>
    <pfstatus_set STATUS="EULX" FUNCTION="FDOC"/>
    <pfstatus_set STATUS="EULX" FUNCTION="GPRF"/>
    <pfstatus_set STATUS="EULX" FUNCTION="KOPE"/>
    <pfstatus_set STATUS="EULX" FUNCTION="LANG"/>
    <pfstatus_set STATUS="EULX" FUNCTION="MKAL"/>
    <pfstatus_set STATUS="EULX" FUNCTION="MKBL"/>
    <pfstatus_set STATUS="EULX" FUNCTION="MKEZ"/>
    <pfstatus_set STATUS="EULX" FUNCTION="MKLO"/>
    <pfstatus_set STATUS="EULX" FUNCTION="NEWL"/>
    <pfstatus_set STATUS="EULX" FUNCTION="NEXT"/>
    <pfstatus_set STATUS="EULX" FUNCTION="ORDR"/>
    <pfstatus_set STATUS="EULX" FUNCTION="ORGI"/>
    <pfstatus_set STATUS="EULX" FUNCTION="P+"/>
    <pfstatus_set STATUS="EULX" FUNCTION="P++"/>
    <pfstatus_set STATUS="EULX" FUNCTION="P-"/>
    <pfstatus_set STATUS="EULX" FUNCTION="P--"/>
    <pfstatus_set STATUS="EULX" FUNCTION="POSI"/>
    <pfstatus_set STATUS="EULX" FUNCTION="PREV"/>
    <pfstatus_set STATUS="EULX" FUNCTION="PROT"/>
    <pfstatus_set STATUS="EULX" FUNCTION="PRST"/>
    <pfstatus_set STATUS="EULX" FUNCTION="REPL"/>
    <pfstatus_set STATUS="EULX" FUNCTION="SAVE"/>
    <pfstatus_set STATUS="EULX" FUNCTION="SCRF"/>
    <pfstatus_set STATUS="EULX" FUNCTION="SEAR"/>
    <pfstatus_set STATUS="EULX" FUNCTION="SELU"/>
    <pfstatus_set STATUS="EULX" FUNCTION="TEXT"/>
    <pfstatus_set STATUS="EULX" FUNCTION="TRSP"/>
    <pfstatus_set STATUS="EULX" FUNCTION="UEBE"/>
    <pfstatus_set STATUS="EULX D" FUNCTION="ADDR"/>
    <pfstatus_set STATUS="EULX D" FUNCTION="ALMK"/>
    <pfstatus_set STATUS="EULX D" FUNCTION="ANZG"/>
    <pfstatus_set STATUS="EULX D" FUNCTION="ATAB"/>
    <pfstatus_set STATUS="EULX D" FUNCTION="BACK"/>
    <pfstatus_set STATUS="EULX D" FUNCTION="EABR"/>
    <pfstatus_set STATUS="EULX D" FUNCTION="ENDE"/>
    <pfstatus_set STATUS="EULX D" FUNCTION="EXPA"/>
    <pfstatus_set STATUS="EULX D" FUNCTION="FDOC"/>
    <pfstatus_set STATUS="EULX D" FUNCTION="GPRF"/>
    <pfstatus_set STATUS="EULX D" FUNCTION="MKAL"/>
    <pfstatus_set STATUS="EULX D" FUNCTION="MKBL"/>
    <pfstatus_set STATUS="EULX D" FUNCTION="MKEZ"/>
    <pfstatus_set STATUS="EULX D" FUNCTION="MKLO"/>
    <pfstatus_set STATUS="EULX D" FUNCTION="NEXT"/>
    <pfstatus_set STATUS="EULX D" FUNCTION="ORDR"/>
    <pfstatus_set STATUS="EULX D" FUNCTION="P+"/>
    <pfstatus_set STATUS="EULX D" FUNCTION="P++"/>
    <pfstatus_set STATUS="EULX D" FUNCTION="P-"/>
    <pfstatus_set STATUS="EULX D" FUNCTION="P--"/>
    <pfstatus_set STATUS="EULX D" FUNCTION="POSI"/>
    <pfstatus_set STATUS="EULX D" FUNCTION="PREV"/>
    <pfstatus_set STATUS="EULX D" FUNCTION="PROT"/>
    <pfstatus_set STATUS="EULX D" FUNCTION="PRST"/>
    <pfstatus_set STATUS="EULX D" FUNCTION="SAVE"/>
    <pfstatus_set STATUS="EULX D" FUNCTION="SCRF"/>
    <pfstatus_set STATUS="EULX D" FUNCTION="UNDO"/>
    <pfstatus_set STATUS="EULXM" FUNCTION="ADDR"/>
    <pfstatus_set STATUS="EULXM" FUNCTION="ALMK"/>
    <pfstatus_set STATUS="EULXM" FUNCTION="ALNW"/>
    <pfstatus_set STATUS="EULXM" FUNCTION="ALOE"/>
    <pfstatus_set STATUS="EULXM" FUNCTION="ANZG"/>
    <pfstatus_set STATUS="EULXM" FUNCTION="ATAB"/>
    <pfstatus_set STATUS="EULXM" FUNCTION="BACK"/>
    <pfstatus_set STATUS="EULXM" FUNCTION="BCSH"/>
    <pfstatus_set STATUS="EULXM" FUNCTION="DELE"/>
    <pfstatus_set STATUS="EULXM" FUNCTION="DELM"/>
    <pfstatus_set STATUS="EULXM" FUNCTION="EABR"/>
    <pfstatus_set STATUS="EULXM" FUNCTION="ENDE"/>
    <pfstatus_set STATUS="EULXM" FUNCTION="EXPA"/>
    <pfstatus_set STATUS="EULXM" FUNCTION="FDOC"/>
    <pfstatus_set STATUS="EULXM" FUNCTION="GPRF"/>
    <pfstatus_set STATUS="EULXM" FUNCTION="KOPE"/>
    <pfstatus_set STATUS="EULXM" FUNCTION="LANG"/>
    <pfstatus_set STATUS="EULXM" FUNCTION="MKAL"/>
    <pfstatus_set STATUS="EULXM" FUNCTION="MKBL"/>
    <pfstatus_set STATUS="EULXM" FUNCTION="MKEZ"/>
    <pfstatus_set STATUS="EULXM" FUNCTION="MKLO"/>
    <pfstatus_set STATUS="EULXM" FUNCTION="NEWL"/>
    <pfstatus_set STATUS="EULXM" FUNCTION="NEXT"/>
    <pfstatus_set STATUS="EULXM" FUNCTION="ORDR"/>
    <pfstatus_set STATUS="EULXM" FUNCTION="ORGI"/>
    <pfstatus_set STATUS="EULXM" FUNCTION="P+"/>
    <pfstatus_set STATUS="EULXM" FUNCTION="P++"/>
    <pfstatus_set STATUS="EULXM" FUNCTION="P-"/>
    <pfstatus_set STATUS="EULXM" FUNCTION="P--"/>
    <pfstatus_set STATUS="EULXM" FUNCTION="POSI"/>
    <pfstatus_set STATUS="EULXM" FUNCTION="PREV"/>
    <pfstatus_set STATUS="EULXM" FUNCTION="PROT"/>
    <pfstatus_set STATUS="EULXM" FUNCTION="PRST"/>
    <pfstatus_set STATUS="EULXM" FUNCTION="REPL"/>
    <pfstatus_set STATUS="EULXM" FUNCTION="SAVE"/>
    <pfstatus_set STATUS="EULXM" FUNCTION="SCRF"/>
    <pfstatus_set STATUS="EULXM" FUNCTION="SEAR"/>
    <pfstatus_set STATUS="EULXM" FUNCTION="SELU"/>
    <pfstatus_set STATUS="EULXM" FUNCTION="TEXT"/>
    <pfstatus_set STATUS="EULXM" FUNCTION="TRSP"/>
    <pfstatus_set STATUS="EULXMD" FUNCTION="ADDR"/>
    <pfstatus_set STATUS="EULXMD" FUNCTION="ALMK"/>
    <pfstatus_set STATUS="EULXMD" FUNCTION="ANZG"/>
    <pfstatus_set STATUS="EULXMD" FUNCTION="ATAB"/>
    <pfstatus_set STATUS="EULXMD" FUNCTION="BACK"/>
    <pfstatus_set STATUS="EULXMD" FUNCTION="EABR"/>
    <pfstatus_set STATUS="EULXMD" FUNCTION="ENDE"/>
    <pfstatus_set STATUS="EULXMD" FUNCTION="EXPA"/>
    <pfstatus_set STATUS="EULXMD" FUNCTION="FDOC"/>
    <pfstatus_set STATUS="EULXMD" FUNCTION="GPRF"/>
    <pfstatus_set STATUS="EULXMD" FUNCTION="MKAL"/>
    <pfstatus_set STATUS="EULXMD" FUNCTION="MKBL"/>
    <pfstatus_set STATUS="EULXMD" FUNCTION="MKEZ"/>
    <pfstatus_set STATUS="EULXMD" FUNCTION="MKLO"/>
    <pfstatus_set STATUS="EULXMD" FUNCTION="NEXT"/>
    <pfstatus_set STATUS="EULXMD" FUNCTION="ORDR"/>
    <pfstatus_set STATUS="EULXMD" FUNCTION="P+"/>
    <pfstatus_set STATUS="EULXMD" FUNCTION="P++"/>
    <pfstatus_set STATUS="EULXMD" FUNCTION="P-"/>
    <pfstatus_set STATUS="EULXMD" FUNCTION="P--"/>
    <pfstatus_set STATUS="EULXMD" FUNCTION="POSI"/>
    <pfstatus_set STATUS="EULXMD" FUNCTION="PREV"/>
    <pfstatus_set STATUS="EULXMD" FUNCTION="PROT"/>
    <pfstatus_set STATUS="EULXMD" FUNCTION="PRST"/>
    <pfstatus_set STATUS="EULXMD" FUNCTION="SAVE"/>
    <pfstatus_set STATUS="EULXMD" FUNCTION="SCRF"/>
    <pfstatus_set STATUS="EULXMD" FUNCTION="UNDO"/>
    <pfstatus_set STATUS="MARK_BLK" FUNCTION="EABR"/>
    <pfstatus_set STATUS="MARK_BLK" FUNCTION="FDOC"/>
    <pfstatus_set STATUS="MARK_BLK" FUNCTION="MKBL"/>
    <pfstatus_set STATUS="REPLACE" FUNCTION="EABR"/>
    <pfstatus_set STATUS="REPLACE" FUNCTION="EIGN"/>
    <pfstatus_set STATUS="REPLACE" FUNCTION="FDOC"/>
    <pfstatus_set STATUS="TXTMAINT" FUNCTION="EABR"/>
    <pfstatus_set STATUS="TXTMAINT" FUNCTION="OKAY"/>
    <pfstatus_set STATUS="ZADX" FUNCTION="ADDR"/>
    <pfstatus_set STATUS="ZADX" FUNCTION="ALMK"/>
    <pfstatus_set STATUS="ZADX" FUNCTION="ANZG"/>
    <pfstatus_set STATUS="ZADX" FUNCTION="ATAB"/>
    <pfstatus_set STATUS="ZADX" FUNCTION="DELE"/>
    <pfstatus_set STATUS="ZADX" FUNCTION="EABR"/>
    <pfstatus_set STATUS="ZADX" FUNCTION="ENDE"/>
    <pfstatus_set STATUS="ZADX" FUNCTION="FDOC"/>
    <pfstatus_set STATUS="ZADX" FUNCTION="GPRF"/>
    <pfstatus_set STATUS="ZADX" FUNCTION="MKEZ"/>
    <pfstatus_set STATUS="ZADX" FUNCTION="NEXT"/>
    <pfstatus_set STATUS="ZADX" FUNCTION="ORDR"/>
    <pfstatus_set STATUS="ZADX" FUNCTION="PREV"/>
    <pfstatus_set STATUS="ZADX" FUNCTION="PROT"/>
    <pfstatus_set STATUS="ZADX" FUNCTION="PRST"/>
    <pfstatus_set STATUS="ZADX" FUNCTION="SAVE"/>
    <pfstatus_set STATUS="ZADX" FUNCTION="SCRF"/>
    <pfstatus_set STATUS="ZADX" FUNCTION="SLCT"/>
    <pfstatus_set STATUS="ZADX" FUNCTION="UEBE"/>
    <pfstatus_set STATUS="ZADXM" FUNCTION="ADDR"/>
    <pfstatus_set STATUS="ZADXM" FUNCTION="ALMK"/>
    <pfstatus_set STATUS="ZADXM" FUNCTION="ANZG"/>
    <pfstatus_set STATUS="ZADXM" FUNCTION="ATAB"/>
    <pfstatus_set STATUS="ZADXM" FUNCTION="DELE"/>
    <pfstatus_set STATUS="ZADXM" FUNCTION="EABR"/>
    <pfstatus_set STATUS="ZADXM" FUNCTION="ENDE"/>
    <pfstatus_set STATUS="ZADXM" FUNCTION="FDOC"/>
    <pfstatus_set STATUS="ZADXM" FUNCTION="GPRF"/>
    <pfstatus_set STATUS="ZADXM" FUNCTION="MKEZ"/>
    <pfstatus_set STATUS="ZADXM" FUNCTION="NEXT"/>
    <pfstatus_set STATUS="ZADXM" FUNCTION="ORDR"/>
    <pfstatus_set STATUS="ZADXM" FUNCTION="PREV"/>
    <pfstatus_set STATUS="ZADXM" FUNCTION="PROT"/>
    <pfstatus_set STATUS="ZADXM" FUNCTION="PRST"/>
    <pfstatus_set STATUS="ZADXM" FUNCTION="SAVE"/>
    <pfstatus_set STATUS="ZADXM" FUNCTION="SCRF"/>
    <pfstatus_set STATUS="ZADXM" FUNCTION="SLCT"/>
    <pfstatus_set STATUS="ZADXM" FUNCTION="UEBE"/>
    <pfstatus_set STATUS="ZALX" FUNCTION="ADDR"/>
    <pfstatus_set STATUS="ZALX" FUNCTION="ALMK"/>
    <pfstatus_set STATUS="ZALX" FUNCTION="ANZG"/>
    <pfstatus_set STATUS="ZALX" FUNCTION="ATAB"/>
    <pfstatus_set STATUS="ZALX" FUNCTION="BACK"/>
    <pfstatus_set STATUS="ZALX" FUNCTION="DELE"/>
    <pfstatus_set STATUS="ZALX" FUNCTION="DELM"/>
    <pfstatus_set STATUS="ZALX" FUNCTION="DETA"/>
    <pfstatus_set STATUS="ZALX" FUNCTION="DETM"/>
    <pfstatus_set STATUS="ZALX" FUNCTION="EABR"/>
    <pfstatus_set STATUS="ZALX" FUNCTION="ENDE"/>
    <pfstatus_set STATUS="ZALX" FUNCTION="FDOC"/>
    <pfstatus_set STATUS="ZALX" FUNCTION="GPRF"/>
    <pfstatus_set STATUS="ZALX" FUNCTION="MKAL"/>
    <pfstatus_set STATUS="ZALX" FUNCTION="MKBL"/>
    <pfstatus_set STATUS="ZALX" FUNCTION="MKEZ"/>
    <pfstatus_set STATUS="ZALX" FUNCTION="MKLO"/>
    <pfstatus_set STATUS="ZALX" FUNCTION="NEXT"/>
    <pfstatus_set STATUS="ZALX" FUNCTION="ORDR"/>
    <pfstatus_set STATUS="ZALX" FUNCTION="P+"/>
    <pfstatus_set STATUS="ZALX" FUNCTION="P++"/>
    <pfstatus_set STATUS="ZALX" FUNCTION="P-"/>
    <pfstatus_set STATUS="ZALX" FUNCTION="P--"/>
    <pfstatus_set STATUS="ZALX" FUNCTION="POSI"/>
    <pfstatus_set STATUS="ZALX" FUNCTION="PREV"/>
    <pfstatus_set STATUS="ZALX" FUNCTION="PROT"/>
    <pfstatus_set STATUS="ZALX" FUNCTION="PRST"/>
    <pfstatus_set STATUS="ZALX" FUNCTION="REPL"/>
    <pfstatus_set STATUS="ZALX" FUNCTION="SAVE"/>
    <pfstatus_set STATUS="ZALX" FUNCTION="SCRF"/>
    <pfstatus_set STATUS="ZALXM" FUNCTION="ADDR"/>
    <pfstatus_set STATUS="ZALXM" FUNCTION="ALMK"/>
    <pfstatus_set STATUS="ZALXM" FUNCTION="ANZG"/>
    <pfstatus_set STATUS="ZALXM" FUNCTION="ATAB"/>
    <pfstatus_set STATUS="ZALXM" FUNCTION="BACK"/>
    <pfstatus_set STATUS="ZALXM" FUNCTION="DELE"/>
    <pfstatus_set STATUS="ZALXM" FUNCTION="DELM"/>
    <pfstatus_set STATUS="ZALXM" FUNCTION="DETA"/>
    <pfstatus_set STATUS="ZALXM" FUNCTION="DETM"/>
    <pfstatus_set STATUS="ZALXM" FUNCTION="EABR"/>
    <pfstatus_set STATUS="ZALXM" FUNCTION="ENDE"/>
    <pfstatus_set STATUS="ZALXM" FUNCTION="FDOC"/>
    <pfstatus_set STATUS="ZALXM" FUNCTION="GPRF"/>
    <pfstatus_set STATUS="ZALXM" FUNCTION="MKAL"/>
    <pfstatus_set STATUS="ZALXM" FUNCTION="MKBL"/>
    <pfstatus_set STATUS="ZALXM" FUNCTION="MKEZ"/>
    <pfstatus_set STATUS="ZALXM" FUNCTION="MKLO"/>
    <pfstatus_set STATUS="ZALXM" FUNCTION="NEXT"/>
    <pfstatus_set STATUS="ZALXM" FUNCTION="ORDR"/>
    <pfstatus_set STATUS="ZALXM" FUNCTION="P+"/>
    <pfstatus_set STATUS="ZALXM" FUNCTION="P++"/>
    <pfstatus_set STATUS="ZALXM" FUNCTION="P-"/>
    <pfstatus_set STATUS="ZALXM" FUNCTION="P--"/>
    <pfstatus_set STATUS="ZALXM" FUNCTION="POSI"/>
    <pfstatus_set STATUS="ZALXM" FUNCTION="PREV"/>
    <pfstatus_set STATUS="ZALXM" FUNCTION="PROT"/>
    <pfstatus_set STATUS="ZALXM" FUNCTION="PRST"/>
    <pfstatus_set STATUS="ZALXM" FUNCTION="REPL"/>
    <pfstatus_set STATUS="ZALXM" FUNCTION="SAVE"/>
    <pfstatus_set STATUS="ZALXM" FUNCTION="SCRF"/>
    <pfstatus_set STATUS="ZCDX" FUNCTION="EABR"/>
    <pfstatus_set STATUS="ZCDX" FUNCTION="FDOC"/>
    <pfstatus_set STATUS="ZCDX" FUNCTION="KOPF"/>
    <pfstatus_set STATUS="ZCDX" FUNCTION="ORDR"/>
    <pfstatus_set STATUS="ZCDXM" FUNCTION="EABR"/>
    <pfstatus_set STATUS="ZCDXM" FUNCTION="FDOC"/>
    <pfstatus_set STATUS="ZCDXM" FUNCTION="KOPF"/>
    <pfstatus_set STATUS="ZCDXM" FUNCTION="ORDR"/>
    <pfstatus_set STATUS="ZCLX" FUNCTION="EABR"/>
    <pfstatus_set STATUS="ZCLX" FUNCTION="FDOC"/>
    <pfstatus_set STATUS="ZCLX" FUNCTION="KOPF"/>
    <pfstatus_set STATUS="ZCLX" FUNCTION="ORDR"/>
    <pfstatus_set STATUS="ZSDG" FUNCTION="ADDR"/>
    <pfstatus_set STATUS="ZSDG" FUNCTION="AEND"/>
    <pfstatus_set STATUS="ZSDG" FUNCTION="ALMK"/>
    <pfstatus_set STATUS="ZSDG" FUNCTION="ATAB"/>
    <pfstatus_set STATUS="ZSDG" FUNCTION="BCSH"/>
    <pfstatus_set STATUS="ZSDG" FUNCTION="EABR"/>
    <pfstatus_set STATUS="ZSDG" FUNCTION="ENDE"/>
    <pfstatus_set STATUS="ZSDG" FUNCTION="FDOC"/>
    <pfstatus_set STATUS="ZSDG" FUNCTION="GPRF"/>
    <pfstatus_set STATUS="ZSDG" FUNCTION="LANG"/>
    <pfstatus_set STATUS="ZSDG" FUNCTION="MKEZ"/>
    <pfstatus_set STATUS="ZSDG" FUNCTION="NEXT"/>
    <pfstatus_set STATUS="ZSDG" FUNCTION="ORDR"/>
    <pfstatus_set STATUS="ZSDG" FUNCTION="POSI"/>
    <pfstatus_set STATUS="ZSDG" FUNCTION="PREV"/>
    <pfstatus_set STATUS="ZSDG" FUNCTION="PROT"/>
    <pfstatus_set STATUS="ZSDG" FUNCTION="PRST"/>
    <pfstatus_set STATUS="ZSDG" FUNCTION="SCRF"/>
    <pfstatus_set STATUS="ZSDG" FUNCTION="SEAR"/>
    <pfstatus_set STATUS="ZSDG" FUNCTION="SLCT"/>
    <pfstatus_set STATUS="ZSDG" FUNCTION="TEXT"/>
    <pfstatus_set STATUS="ZSDG" FUNCTION="UEBE"/>
    <pfstatus_set STATUS="ZSDGM" FUNCTION="ADDR"/>
    <pfstatus_set STATUS="ZSDGM" FUNCTION="AEND"/>
    <pfstatus_set STATUS="ZSDGM" FUNCTION="ALMK"/>
    <pfstatus_set STATUS="ZSDGM" FUNCTION="ATAB"/>
    <pfstatus_set STATUS="ZSDGM" FUNCTION="BCSH"/>
    <pfstatus_set STATUS="ZSDGM" FUNCTION="EABR"/>
    <pfstatus_set STATUS="ZSDGM" FUNCTION="ENDE"/>
    <pfstatus_set STATUS="ZSDGM" FUNCTION="FDOC"/>
    <pfstatus_set STATUS="ZSDGM" FUNCTION="GPRF"/>
    <pfstatus_set STATUS="ZSDGM" FUNCTION="LANG"/>
    <pfstatus_set STATUS="ZSDGM" FUNCTION="MKEZ"/>
    <pfstatus_set STATUS="ZSDGM" FUNCTION="NEXT"/>
    <pfstatus_set STATUS="ZSDGM" FUNCTION="ORDR"/>
    <pfstatus_set STATUS="ZSDGM" FUNCTION="POSI"/>
    <pfstatus_set STATUS="ZSDGM" FUNCTION="PREV"/>
    <pfstatus_set STATUS="ZSDGM" FUNCTION="PROT"/>
    <pfstatus_set STATUS="ZSDGM" FUNCTION="PRST"/>
    <pfstatus_set STATUS="ZSDGM" FUNCTION="SCRF"/>
    <pfstatus_set STATUS="ZSDGM" FUNCTION="SEAR"/>
    <pfstatus_set STATUS="ZSDGM" FUNCTION="SLCT"/>
    <pfstatus_set STATUS="ZSDGM" FUNCTION="TEXT"/>
    <pfstatus_set STATUS="ZSDGM" FUNCTION="UEBE"/>
    <pfstatus_set STATUS="ZSDX" FUNCTION="ADDR"/>
    <pfstatus_set STATUS="ZSDX" FUNCTION="AEND"/>
    <pfstatus_set STATUS="ZSDX" FUNCTION="ALMK"/>
    <pfstatus_set STATUS="ZSDX" FUNCTION="ATAB"/>
    <pfstatus_set STATUS="ZSDX" FUNCTION="BCSH"/>
    <pfstatus_set STATUS="ZSDX" FUNCTION="EABR"/>
    <pfstatus_set STATUS="ZSDX" FUNCTION="ENDE"/>
    <pfstatus_set STATUS="ZSDX" FUNCTION="FDOC"/>
    <pfstatus_set STATUS="ZSDX" FUNCTION="GPRF"/>
    <pfstatus_set STATUS="ZSDX" FUNCTION="LANG"/>
    <pfstatus_set STATUS="ZSDX" FUNCTION="MKEZ"/>
    <pfstatus_set STATUS="ZSDX" FUNCTION="NEXT"/>
    <pfstatus_set STATUS="ZSDX" FUNCTION="ORDR"/>
    <pfstatus_set STATUS="ZSDX" FUNCTION="POSI"/>
    <pfstatus_set STATUS="ZSDX" FUNCTION="PREV"/>
    <pfstatus_set STATUS="ZSDX" FUNCTION="PROT"/>
    <pfstatus_set STATUS="ZSDX" FUNCTION="PRST"/>
    <pfstatus_set STATUS="ZSDX" FUNCTION="SCRF"/>
    <pfstatus_set STATUS="ZSDX" FUNCTION="SEAR"/>
    <pfstatus_set STATUS="ZSDX" FUNCTION="SLCT"/>
    <pfstatus_set STATUS="ZSDX" FUNCTION="TEXT"/>
    <pfstatus_set STATUS="ZSDX" FUNCTION="UEBE"/>
    <pfstatus_set STATUS="ZSDXM" FUNCTION="ADDR"/>
    <pfstatus_set STATUS="ZSDXM" FUNCTION="AEND"/>
    <pfstatus_set STATUS="ZSDXM" FUNCTION="ALMK"/>
    <pfstatus_set STATUS="ZSDXM" FUNCTION="ATAB"/>
    <pfstatus_set STATUS="ZSDXM" FUNCTION="BCSH"/>
    <pfstatus_set STATUS="ZSDXM" FUNCTION="EABR"/>
    <pfstatus_set STATUS="ZSDXM" FUNCTION="ENDE"/>
    <pfstatus_set STATUS="ZSDXM" FUNCTION="FDOC"/>
    <pfstatus_set STATUS="ZSDXM" FUNCTION="GPRF"/>
    <pfstatus_set STATUS="ZSDXM" FUNCTION="LANG"/>
    <pfstatus_set STATUS="ZSDXM" FUNCTION="MKEZ"/>
    <pfstatus_set STATUS="ZSDXM" FUNCTION="NEXT"/>
    <pfstatus_set STATUS="ZSDXM" FUNCTION="ORDR"/>
    <pfstatus_set STATUS="ZSDXM" FUNCTION="POSI"/>
    <pfstatus_set STATUS="ZSDXM" FUNCTION="PREV"/>
    <pfstatus_set STATUS="ZSDXM" FUNCTION="PROT"/>
    <pfstatus_set STATUS="ZSDXM" FUNCTION="PRST"/>
    <pfstatus_set STATUS="ZSDXM" FUNCTION="SCRF"/>
    <pfstatus_set STATUS="ZSDXM" FUNCTION="SEAR"/>
    <pfstatus_set STATUS="ZSDXM" FUNCTION="SLCT"/>
    <pfstatus_set STATUS="ZSDXM" FUNCTION="TEXT"/>
    <pfstatus_set STATUS="ZSDXM" FUNCTION="UEBE"/>
    <pfstatus_set STATUS="ZSLG" FUNCTION="ADDR"/>
    <pfstatus_set STATUS="ZSLG" FUNCTION="AEND"/>
    <pfstatus_set STATUS="ZSLG" FUNCTION="ALMK"/>
    <pfstatus_set STATUS="ZSLG" FUNCTION="ATAB"/>
    <pfstatus_set STATUS="ZSLG" FUNCTION="BACK"/>
    <pfstatus_set STATUS="ZSLG" FUNCTION="BCON"/>
    <pfstatus_set STATUS="ZSLG" FUNCTION="BCSH"/>
    <pfstatus_set STATUS="ZSLG" FUNCTION="CMPO"/>
    <pfstatus_set STATUS="ZSLG" FUNCTION="CMPR"/>
    <pfstatus_set STATUS="ZSLG" FUNCTION="COMP"/>
    <pfstatus_set STATUS="ZSLG" FUNCTION="DETA"/>
    <pfstatus_set STATUS="ZSLG" FUNCTION="DETM"/>
    <pfstatus_set STATUS="ZSLG" FUNCTION="EABR"/>
    <pfstatus_set STATUS="ZSLG" FUNCTION="ENDE"/>
    <pfstatus_set STATUS="ZSLG" FUNCTION="EXPA"/>
    <pfstatus_set STATUS="ZSLG" FUNCTION="FDOC"/>
    <pfstatus_set STATUS="ZSLG" FUNCTION="GPRF"/>
    <pfstatus_set STATUS="ZSLG" FUNCTION="LANG"/>
    <pfstatus_set STATUS="ZSLG" FUNCTION="MKAL"/>
    <pfstatus_set STATUS="ZSLG" FUNCTION="MKBL"/>
    <pfstatus_set STATUS="ZSLG" FUNCTION="MKEZ"/>
    <pfstatus_set STATUS="ZSLG" FUNCTION="MKLO"/>
    <pfstatus_set STATUS="ZSLG" FUNCTION="NEXT"/>
    <pfstatus_set STATUS="ZSLG" FUNCTION="ORDR"/>
    <pfstatus_set STATUS="ZSLG" FUNCTION="P+"/>
    <pfstatus_set STATUS="ZSLG" FUNCTION="P++"/>
    <pfstatus_set STATUS="ZSLG" FUNCTION="P-"/>
    <pfstatus_set STATUS="ZSLG" FUNCTION="P--"/>
    <pfstatus_set STATUS="ZSLG" FUNCTION="POSI"/>
    <pfstatus_set STATUS="ZSLG" FUNCTION="PREV"/>
    <pfstatus_set STATUS="ZSLG" FUNCTION="PROT"/>
    <pfstatus_set STATUS="ZSLG" FUNCTION="PRST"/>
    <pfstatus_set STATUS="ZSLG" FUNCTION="SCRF"/>
    <pfstatus_set STATUS="ZSLG" FUNCTION="SEAR"/>
    <pfstatus_set STATUS="ZSLG" FUNCTION="TEXT"/>
    <pfstatus_set STATUS="ZSLGM" FUNCTION="ADDR"/>
    <pfstatus_set STATUS="ZSLGM" FUNCTION="AEND"/>
    <pfstatus_set STATUS="ZSLGM" FUNCTION="ALMK"/>
    <pfstatus_set STATUS="ZSLGM" FUNCTION="ATAB"/>
    <pfstatus_set STATUS="ZSLGM" FUNCTION="BACK"/>
    <pfstatus_set STATUS="ZSLGM" FUNCTION="BCON"/>
    <pfstatus_set STATUS="ZSLGM" FUNCTION="BCSH"/>
    <pfstatus_set STATUS="ZSLGM" FUNCTION="CMPO"/>
    <pfstatus_set STATUS="ZSLGM" FUNCTION="CMPR"/>
    <pfstatus_set STATUS="ZSLGM" FUNCTION="COMP"/>
    <pfstatus_set STATUS="ZSLGM" FUNCTION="DETA"/>
    <pfstatus_set STATUS="ZSLGM" FUNCTION="DETM"/>
    <pfstatus_set STATUS="ZSLGM" FUNCTION="EABR"/>
    <pfstatus_set STATUS="ZSLGM" FUNCTION="ENDE"/>
    <pfstatus_set STATUS="ZSLGM" FUNCTION="EXPA"/>
    <pfstatus_set STATUS="ZSLGM" FUNCTION="FDOC"/>
    <pfstatus_set STATUS="ZSLGM" FUNCTION="GPRF"/>
    <pfstatus_set STATUS="ZSLGM" FUNCTION="LANG"/>
    <pfstatus_set STATUS="ZSLGM" FUNCTION="MKAL"/>
    <pfstatus_set STATUS="ZSLGM" FUNCTION="MKBL"/>
    <pfstatus_set STATUS="ZSLGM" FUNCTION="MKEZ"/>
    <pfstatus_set STATUS="ZSLGM" FUNCTION="MKLO"/>
    <pfstatus_set STATUS="ZSLGM" FUNCTION="NEXT"/>
    <pfstatus_set STATUS="ZSLGM" FUNCTION="ORDR"/>
    <pfstatus_set STATUS="ZSLGM" FUNCTION="P+"/>
    <pfstatus_set STATUS="ZSLGM" FUNCTION="P++"/>
    <pfstatus_set STATUS="ZSLGM" FUNCTION="P-"/>
    <pfstatus_set STATUS="ZSLGM" FUNCTION="P--"/>
    <pfstatus_set STATUS="ZSLGM" FUNCTION="POSI"/>
    <pfstatus_set STATUS="ZSLGM" FUNCTION="PREV"/>
    <pfstatus_set STATUS="ZSLGM" FUNCTION="PROT"/>
    <pfstatus_set STATUS="ZSLGM" FUNCTION="PRST"/>
    <pfstatus_set STATUS="ZSLGM" FUNCTION="SCRF"/>
    <pfstatus_set STATUS="ZSLGM" FUNCTION="SEAR"/>
    <pfstatus_set STATUS="ZSLGM" FUNCTION="TEXT"/>
    <pfstatus_set STATUS="ZSLX" FUNCTION="ADDR"/>
    <pfstatus_set STATUS="ZSLX" FUNCTION="AEND"/>
    <pfstatus_set STATUS="ZSLX" FUNCTION="ALMK"/>
    <pfstatus_set STATUS="ZSLX" FUNCTION="ATAB"/>
    <pfstatus_set STATUS="ZSLX" FUNCTION="BACK"/>
    <pfstatus_set STATUS="ZSLX" FUNCTION="BCSH"/>
    <pfstatus_set STATUS="ZSLX" FUNCTION="DETA"/>
    <pfstatus_set STATUS="ZSLX" FUNCTION="DETM"/>
    <pfstatus_set STATUS="ZSLX" FUNCTION="EABR"/>
    <pfstatus_set STATUS="ZSLX" FUNCTION="ENDE"/>
    <pfstatus_set STATUS="ZSLX" FUNCTION="EXPA"/>
    <pfstatus_set STATUS="ZSLX" FUNCTION="FDOC"/>
    <pfstatus_set STATUS="ZSLX" FUNCTION="GPRF"/>
    <pfstatus_set STATUS="ZSLX" FUNCTION="LANG"/>
    <pfstatus_set STATUS="ZSLX" FUNCTION="MKAL"/>
    <pfstatus_set STATUS="ZSLX" FUNCTION="MKBL"/>
    <pfstatus_set STATUS="ZSLX" FUNCTION="MKEZ"/>
    <pfstatus_set STATUS="ZSLX" FUNCTION="MKLO"/>
    <pfstatus_set STATUS="ZSLX" FUNCTION="NEXT"/>
    <pfstatus_set STATUS="ZSLX" FUNCTION="ORDR"/>
    <pfstatus_set STATUS="ZSLX" FUNCTION="P+"/>
    <pfstatus_set STATUS="ZSLX" FUNCTION="P++"/>
    <pfstatus_set STATUS="ZSLX" FUNCTION="P-"/>
    <pfstatus_set STATUS="ZSLX" FUNCTION="P--"/>
    <pfstatus_set STATUS="ZSLX" FUNCTION="POSI"/>
    <pfstatus_set STATUS="ZSLX" FUNCTION="PREV"/>
    <pfstatus_set STATUS="ZSLX" FUNCTION="PROT"/>
    <pfstatus_set STATUS="ZSLX" FUNCTION="PRST"/>
    <pfstatus_set STATUS="ZSLX" FUNCTION="SCRF"/>
    <pfstatus_set STATUS="ZSLX" FUNCTION="SEAR"/>
    <pfstatus_set STATUS="ZSLX" FUNCTION="TEXT"/>
    <pfstatus_set STATUS="ZSLXM" FUNCTION="ADDR"/>
    <pfstatus_set STATUS="ZSLXM" FUNCTION="AEND"/>
    <pfstatus_set STATUS="ZSLXM" FUNCTION="ALMK"/>
    <pfstatus_set STATUS="ZSLXM" FUNCTION="ATAB"/>
    <pfstatus_set STATUS="ZSLXM" FUNCTION="BACK"/>
    <pfstatus_set STATUS="ZSLXM" FUNCTION="BCSH"/>
    <pfstatus_set STATUS="ZSLXM" FUNCTION="DETA"/>
    <pfstatus_set STATUS="ZSLXM" FUNCTION="DETM"/>
    <pfstatus_set STATUS="ZSLXM" FUNCTION="EABR"/>
    <pfstatus_set STATUS="ZSLXM" FUNCTION="ENDE"/>
    <pfstatus_set STATUS="ZSLXM" FUNCTION="EXPA"/>
    <pfstatus_set STATUS="ZSLXM" FUNCTION="FDOC"/>
    <pfstatus_set STATUS="ZSLXM" FUNCTION="GPRF"/>
    <pfstatus_set STATUS="ZSLXM" FUNCTION="LANG"/>
    <pfstatus_set STATUS="ZSLXM" FUNCTION="MKAL"/>
    <pfstatus_set STATUS="ZSLXM" FUNCTION="MKBL"/>
    <pfstatus_set STATUS="ZSLXM" FUNCTION="MKEZ"/>
    <pfstatus_set STATUS="ZSLXM" FUNCTION="MKLO"/>
    <pfstatus_set STATUS="ZSLXM" FUNCTION="NEXT"/>
    <pfstatus_set STATUS="ZSLXM" FUNCTION="ORDR"/>
    <pfstatus_set STATUS="ZSLXM" FUNCTION="P+"/>
    <pfstatus_set STATUS="ZSLXM" FUNCTION="P++"/>
    <pfstatus_set STATUS="ZSLXM" FUNCTION="P-"/>
    <pfstatus_set STATUS="ZSLXM" FUNCTION="P--"/>
    <pfstatus_set STATUS="ZSLXM" FUNCTION="POSI"/>
    <pfstatus_set STATUS="ZSLXM" FUNCTION="PREV"/>
    <pfstatus_set STATUS="ZSLXM" FUNCTION="PROT"/>
    <pfstatus_set STATUS="ZSLXM" FUNCTION="PRST"/>
    <pfstatus_set STATUS="ZSLXM" FUNCTION="SCRF"/>
    <pfstatus_set STATUS="ZSLXM" FUNCTION="SEAR"/>
    <pfstatus_set STATUS="ZSLXM" FUNCTION="TEXT"/>
    <pfstatus_set STATUS="ZTDG" FUNCTION="ADDR"/>
    <pfstatus_set STATUS="ZTDG" FUNCTION="AEND"/>
    <pfstatus_set STATUS="ZTDG" FUNCTION="ALCO"/>
    <pfstatus_set STATUS="ZTDG" FUNCTION="ALMK"/>
    <pfstatus_set STATUS="ZTDG" FUNCTION="ALNC"/>
    <pfstatus_set STATUS="ZTDG" FUNCTION="ATAB"/>
    <pfstatus_set STATUS="ZTDG" FUNCTION="EABR"/>
    <pfstatus_set STATUS="ZTDG" FUNCTION="ENDE"/>
    <pfstatus_set STATUS="ZTDG" FUNCTION="FDOC"/>
    <pfstatus_set STATUS="ZTDG" FUNCTION="LANG"/>
    <pfstatus_set STATUS="ZTDG" FUNCTION="MKEZ"/>
    <pfstatus_set STATUS="ZTDG" FUNCTION="NEXT"/>
    <pfstatus_set STATUS="ZTDG" FUNCTION="ORDR"/>
    <pfstatus_set STATUS="ZTDG" FUNCTION="POSI"/>
    <pfstatus_set STATUS="ZTDG" FUNCTION="PREV"/>
    <pfstatus_set STATUS="ZTDG" FUNCTION="PRST"/>
    <pfstatus_set STATUS="ZTDG" FUNCTION="SAVE"/>
    <pfstatus_set STATUS="ZTDG" FUNCTION="SCRF"/>
    <pfstatus_set STATUS="ZTDG" FUNCTION="SEAR"/>
    <pfstatus_set STATUS="ZTDG" FUNCTION="SLCT"/>
    <pfstatus_set STATUS="ZTDG" FUNCTION="TEXT"/>
    <pfstatus_set STATUS="ZTDG" FUNCTION="TREX"/>
    <pfstatus_set STATUS="ZTDG" FUNCTION="TRIN"/>
    <pfstatus_set STATUS="ZTDG" FUNCTION="UEBE"/>
    <pfstatus_set STATUS="ZTDGM" FUNCTION="ADDR"/>
    <pfstatus_set STATUS="ZTDGM" FUNCTION="AEND"/>
    <pfstatus_set STATUS="ZTDGM" FUNCTION="ALCO"/>
    <pfstatus_set STATUS="ZTDGM" FUNCTION="ALMK"/>
    <pfstatus_set STATUS="ZTDGM" FUNCTION="ALNC"/>
    <pfstatus_set STATUS="ZTDGM" FUNCTION="ATAB"/>
    <pfstatus_set STATUS="ZTDGM" FUNCTION="EABR"/>
    <pfstatus_set STATUS="ZTDGM" FUNCTION="ENDE"/>
    <pfstatus_set STATUS="ZTDGM" FUNCTION="FDOC"/>
    <pfstatus_set STATUS="ZTDGM" FUNCTION="LANG"/>
    <pfstatus_set STATUS="ZTDGM" FUNCTION="MKEZ"/>
    <pfstatus_set STATUS="ZTDGM" FUNCTION="NEXT"/>
    <pfstatus_set STATUS="ZTDGM" FUNCTION="ORDR"/>
    <pfstatus_set STATUS="ZTDGM" FUNCTION="POSI"/>
    <pfstatus_set STATUS="ZTDGM" FUNCTION="PREV"/>
    <pfstatus_set STATUS="ZTDGM" FUNCTION="PRST"/>
    <pfstatus_set STATUS="ZTDGM" FUNCTION="SAVE"/>
    <pfstatus_set STATUS="ZTDGM" FUNCTION="SCRF"/>
    <pfstatus_set STATUS="ZTDGM" FUNCTION="SEAR"/>
    <pfstatus_set STATUS="ZTDGM" FUNCTION="SLCT"/>
    <pfstatus_set STATUS="ZTDGM" FUNCTION="TEXT"/>
    <pfstatus_set STATUS="ZTDGM" FUNCTION="TREX"/>
    <pfstatus_set STATUS="ZTDGM" FUNCTION="TRIN"/>
    <pfstatus_set STATUS="ZTDGM" FUNCTION="UEBE"/>
    <pfstatus_set STATUS="ZTDX" FUNCTION="ADDR"/>
    <pfstatus_set STATUS="ZTDX" FUNCTION="AEND"/>
    <pfstatus_set STATUS="ZTDX" FUNCTION="ALCO"/>
    <pfstatus_set STATUS="ZTDX" FUNCTION="ALMK"/>
    <pfstatus_set STATUS="ZTDX" FUNCTION="ALNC"/>
    <pfstatus_set STATUS="ZTDX" FUNCTION="ATAB"/>
    <pfstatus_set STATUS="ZTDX" FUNCTION="EABR"/>
    <pfstatus_set STATUS="ZTDX" FUNCTION="ENDE"/>
    <pfstatus_set STATUS="ZTDX" FUNCTION="FDOC"/>
    <pfstatus_set STATUS="ZTDX" FUNCTION="LANG"/>
    <pfstatus_set STATUS="ZTDX" FUNCTION="MKEZ"/>
    <pfstatus_set STATUS="ZTDX" FUNCTION="NEXT"/>
    <pfstatus_set STATUS="ZTDX" FUNCTION="ORDR"/>
    <pfstatus_set STATUS="ZTDX" FUNCTION="POSI"/>
    <pfstatus_set STATUS="ZTDX" FUNCTION="PREV"/>
    <pfstatus_set STATUS="ZTDX" FUNCTION="PRST"/>
    <pfstatus_set STATUS="ZTDX" FUNCTION="SAVE"/>
    <pfstatus_set STATUS="ZTDX" FUNCTION="SCRF"/>
    <pfstatus_set STATUS="ZTDX" FUNCTION="SEAR"/>
    <pfstatus_set STATUS="ZTDX" FUNCTION="SLCT"/>
    <pfstatus_set STATUS="ZTDX" FUNCTION="TEXT"/>
    <pfstatus_set STATUS="ZTDX" FUNCTION="TREX"/>
    <pfstatus_set STATUS="ZTDX" FUNCTION="TRIN"/>
    <pfstatus_set STATUS="ZTDX" FUNCTION="UEBE"/>
    <pfstatus_set STATUS="ZTDXM" FUNCTION="ADDR"/>
    <pfstatus_set STATUS="ZTDXM" FUNCTION="AEND"/>
    <pfstatus_set STATUS="ZTDXM" FUNCTION="ALCO"/>
    <pfstatus_set STATUS="ZTDXM" FUNCTION="ALMK"/>
    <pfstatus_set STATUS="ZTDXM" FUNCTION="ALNC"/>
    <pfstatus_set STATUS="ZTDXM" FUNCTION="ATAB"/>
    <pfstatus_set STATUS="ZTDXM" FUNCTION="EABR"/>
    <pfstatus_set STATUS="ZTDXM" FUNCTION="ENDE"/>
    <pfstatus_set STATUS="ZTDXM" FUNCTION="FDOC"/>
    <pfstatus_set STATUS="ZTDXM" FUNCTION="LANG"/>
    <pfstatus_set STATUS="ZTDXM" FUNCTION="MKEZ"/>
    <pfstatus_set STATUS="ZTDXM" FUNCTION="NEXT"/>
    <pfstatus_set STATUS="ZTDXM" FUNCTION="ORDR"/>
    <pfstatus_set STATUS="ZTDXM" FUNCTION="POSI"/>
    <pfstatus_set STATUS="ZTDXM" FUNCTION="PREV"/>
    <pfstatus_set STATUS="ZTDXM" FUNCTION="PRST"/>
    <pfstatus_set STATUS="ZTDXM" FUNCTION="SAVE"/>
    <pfstatus_set STATUS="ZTDXM" FUNCTION="SCRF"/>
    <pfstatus_set STATUS="ZTDXM" FUNCTION="SEAR"/>
    <pfstatus_set STATUS="ZTDXM" FUNCTION="SLCT"/>
    <pfstatus_set STATUS="ZTDXM" FUNCTION="TEXT"/>
    <pfstatus_set STATUS="ZTDXM" FUNCTION="TREX"/>
    <pfstatus_set STATUS="ZTDXM" FUNCTION="TRIN"/>
    <pfstatus_set STATUS="ZTDXM" FUNCTION="UEBE"/>
    <pfstatus_set STATUS="ZTLG" FUNCTION="ADDR"/>
    <pfstatus_set STATUS="ZTLG" FUNCTION="AEND"/>
    <pfstatus_set STATUS="ZTLG" FUNCTION="ALCO"/>
    <pfstatus_set STATUS="ZTLG" FUNCTION="ALMK"/>
    <pfstatus_set STATUS="ZTLG" FUNCTION="ALNC"/>
    <pfstatus_set STATUS="ZTLG" FUNCTION="ATAB"/>
    <pfstatus_set STATUS="ZTLG" FUNCTION="BACK"/>
    <pfstatus_set STATUS="ZTLG" FUNCTION="BCSH"/>
    <pfstatus_set STATUS="ZTLG" FUNCTION="DETA"/>
    <pfstatus_set STATUS="ZTLG" FUNCTION="DETM"/>
    <pfstatus_set STATUS="ZTLG" FUNCTION="EABR"/>
    <pfstatus_set STATUS="ZTLG" FUNCTION="ENDE"/>
    <pfstatus_set STATUS="ZTLG" FUNCTION="EXPA"/>
    <pfstatus_set STATUS="ZTLG" FUNCTION="FDOC"/>
    <pfstatus_set STATUS="ZTLG" FUNCTION="LANG"/>
    <pfstatus_set STATUS="ZTLG" FUNCTION="MKAL"/>
    <pfstatus_set STATUS="ZTLG" FUNCTION="MKBL"/>
    <pfstatus_set STATUS="ZTLG" FUNCTION="MKEZ"/>
    <pfstatus_set STATUS="ZTLG" FUNCTION="MKLO"/>
    <pfstatus_set STATUS="ZTLG" FUNCTION="NEXT"/>
    <pfstatus_set STATUS="ZTLG" FUNCTION="ORDR"/>
    <pfstatus_set STATUS="ZTLG" FUNCTION="P+"/>
    <pfstatus_set STATUS="ZTLG" FUNCTION="P++"/>
    <pfstatus_set STATUS="ZTLG" FUNCTION="P-"/>
    <pfstatus_set STATUS="ZTLG" FUNCTION="P--"/>
    <pfstatus_set STATUS="ZTLG" FUNCTION="POSI"/>
    <pfstatus_set STATUS="ZTLG" FUNCTION="PREV"/>
    <pfstatus_set STATUS="ZTLG" FUNCTION="PRST"/>
    <pfstatus_set STATUS="ZTLG" FUNCTION="SAVE"/>
    <pfstatus_set STATUS="ZTLG" FUNCTION="SCRF"/>
    <pfstatus_set STATUS="ZTLG" FUNCTION="SEAR"/>
    <pfstatus_set STATUS="ZTLG" FUNCTION="TEXT"/>
    <pfstatus_set STATUS="ZTLG" FUNCTION="TREX"/>
    <pfstatus_set STATUS="ZTLG" FUNCTION="TRIN"/>
    <pfstatus_set STATUS="ZTLGM" FUNCTION="ADDR"/>
    <pfstatus_set STATUS="ZTLGM" FUNCTION="AEND"/>
    <pfstatus_set STATUS="ZTLGM" FUNCTION="ALCO"/>
    <pfstatus_set STATUS="ZTLGM" FUNCTION="ALMK"/>
    <pfstatus_set STATUS="ZTLGM" FUNCTION="ALNC"/>
    <pfstatus_set STATUS="ZTLGM" FUNCTION="ATAB"/>
    <pfstatus_set STATUS="ZTLGM" FUNCTION="BACK"/>
    <pfstatus_set STATUS="ZTLGM" FUNCTION="BCSH"/>
    <pfstatus_set STATUS="ZTLGM" FUNCTION="DETA"/>
    <pfstatus_set STATUS="ZTLGM" FUNCTION="DETM"/>
    <pfstatus_set STATUS="ZTLGM" FUNCTION="EABR"/>
    <pfstatus_set STATUS="ZTLGM" FUNCTION="ENDE"/>
    <pfstatus_set STATUS="ZTLGM" FUNCTION="EXPA"/>
    <pfstatus_set STATUS="ZTLGM" FUNCTION="FDOC"/>
    <pfstatus_set STATUS="ZTLGM" FUNCTION="LANG"/>
    <pfstatus_set STATUS="ZTLGM" FUNCTION="MKAL"/>
    <pfstatus_set STATUS="ZTLGM" FUNCTION="MKBL"/>
    <pfstatus_set STATUS="ZTLGM" FUNCTION="MKEZ"/>
    <pfstatus_set STATUS="ZTLGM" FUNCTION="MKLO"/>
    <pfstatus_set STATUS="ZTLGM" FUNCTION="NEXT"/>
    <pfstatus_set STATUS="ZTLGM" FUNCTION="ORDR"/>
    <pfstatus_set STATUS="ZTLGM" FUNCTION="P+"/>
    <pfstatus_set STATUS="ZTLGM" FUNCTION="P++"/>
    <pfstatus_set STATUS="ZTLGM" FUNCTION="P-"/>
    <pfstatus_set STATUS="ZTLGM" FUNCTION="P--"/>
    <pfstatus_set STATUS="ZTLGM" FUNCTION="POSI"/>
    <pfstatus_set STATUS="ZTLGM" FUNCTION="PREV"/>
    <pfstatus_set STATUS="ZTLGM" FUNCTION="PRST"/>
    <pfstatus_set STATUS="ZTLGM" FUNCTION="SAVE"/>
    <pfstatus_set STATUS="ZTLGM" FUNCTION="SCRF"/>
    <pfstatus_set STATUS="ZTLGM" FUNCTION="SEAR"/>
    <pfstatus_set STATUS="ZTLGM" FUNCTION="TEXT"/>
    <pfstatus_set STATUS="ZTLGM" FUNCTION="TREX"/>
    <pfstatus_set STATUS="ZTLGM" FUNCTION="TRIN"/>
    <pfstatus_set STATUS="ZTLX" FUNCTION="ADDR"/>
    <pfstatus_set STATUS="ZTLX" FUNCTION="AEND"/>
    <pfstatus_set STATUS="ZTLX" FUNCTION="ALCO"/>
    <pfstatus_set STATUS="ZTLX" FUNCTION="ALMK"/>
    <pfstatus_set STATUS="ZTLX" FUNCTION="ALNC"/>
    <pfstatus_set STATUS="ZTLX" FUNCTION="ATAB"/>
    <pfstatus_set STATUS="ZTLX" FUNCTION="BACK"/>
    <pfstatus_set STATUS="ZTLX" FUNCTION="BCSH"/>
    <pfstatus_set STATUS="ZTLX" FUNCTION="DETA"/>
    <pfstatus_set STATUS="ZTLX" FUNCTION="DETM"/>
    <pfstatus_set STATUS="ZTLX" FUNCTION="EABR"/>
    <pfstatus_set STATUS="ZTLX" FUNCTION="ENDE"/>
    <pfstatus_set STATUS="ZTLX" FUNCTION="EXPA"/>
    <pfstatus_set STATUS="ZTLX" FUNCTION="FDOC"/>
    <pfstatus_set STATUS="ZTLX" FUNCTION="LANG"/>
    <pfstatus_set STATUS="ZTLX" FUNCTION="MKAL"/>
    <pfstatus_set STATUS="ZTLX" FUNCTION="MKBL"/>
    <pfstatus_set STATUS="ZTLX" FUNCTION="MKEZ"/>
    <pfstatus_set STATUS="ZTLX" FUNCTION="MKLO"/>
    <pfstatus_set STATUS="ZTLX" FUNCTION="NEXT"/>
    <pfstatus_set STATUS="ZTLX" FUNCTION="ORDR"/>
    <pfstatus_set STATUS="ZTLX" FUNCTION="P+"/>
    <pfstatus_set STATUS="ZTLX" FUNCTION="P++"/>
    <pfstatus_set STATUS="ZTLX" FUNCTION="P-"/>
    <pfstatus_set STATUS="ZTLX" FUNCTION="P--"/>
    <pfstatus_set STATUS="ZTLX" FUNCTION="POSI"/>
    <pfstatus_set STATUS="ZTLX" FUNCTION="PREV"/>
    <pfstatus_set STATUS="ZTLX" FUNCTION="PRST"/>
    <pfstatus_set STATUS="ZTLX" FUNCTION="SAVE"/>
    <pfstatus_set STATUS="ZTLX" FUNCTION="SCRF"/>
    <pfstatus_set STATUS="ZTLX" FUNCTION="SEAR"/>
    <pfstatus_set STATUS="ZTLX" FUNCTION="TEXT"/>
    <pfstatus_set STATUS="ZTLX" FUNCTION="TREX"/>
    <pfstatus_set STATUS="ZTLX" FUNCTION="TRIN"/>
    <pfstatus_set STATUS="ZTLXM" FUNCTION="ADDR"/>
    <pfstatus_set STATUS="ZTLXM" FUNCTION="AEND"/>
    <pfstatus_set STATUS="ZTLXM" FUNCTION="ALCO"/>
    <pfstatus_set STATUS="ZTLXM" FUNCTION="ALMK"/>
    <pfstatus_set STATUS="ZTLXM" FUNCTION="ALNC"/>
    <pfstatus_set STATUS="ZTLXM" FUNCTION="ATAB"/>
    <pfstatus_set STATUS="ZTLXM" FUNCTION="BACK"/>
    <pfstatus_set STATUS="ZTLXM" FUNCTION="BCSH"/>
    <pfstatus_set STATUS="ZTLXM" FUNCTION="DETA"/>
    <pfstatus_set STATUS="ZTLXM" FUNCTION="DETM"/>
    <pfstatus_set STATUS="ZTLXM" FUNCTION="EABR"/>
    <pfstatus_set STATUS="ZTLXM" FUNCTION="ENDE"/>
    <pfstatus_set STATUS="ZTLXM" FUNCTION="EXPA"/>
    <pfstatus_set STATUS="ZTLXM" FUNCTION="FDOC"/>
    <pfstatus_set STATUS="ZTLXM" FUNCTION="LANG"/>
    <pfstatus_set STATUS="ZTLXM" FUNCTION="MKAL"/>
    <pfstatus_set STATUS="ZTLXM" FUNCTION="MKBL"/>
    <pfstatus_set STATUS="ZTLXM" FUNCTION="MKEZ"/>
    <pfstatus_set STATUS="ZTLXM" FUNCTION="MKLO"/>
    <pfstatus_set STATUS="ZTLXM" FUNCTION="NEXT"/>
    <pfstatus_set STATUS="ZTLXM" FUNCTION="ORDR"/>
    <pfstatus_set STATUS="ZTLXM" FUNCTION="P+"/>
    <pfstatus_set STATUS="ZTLXM" FUNCTION="P++"/>
    <pfstatus_set STATUS="ZTLXM" FUNCTION="P-"/>
    <pfstatus_set STATUS="ZTLXM" FUNCTION="P--"/>
    <pfstatus_set STATUS="ZTLXM" FUNCTION="POSI"/>
    <pfstatus_set STATUS="ZTLXM" FUNCTION="PREV"/>
    <pfstatus_set STATUS="ZTLXM" FUNCTION="PRST"/>
    <pfstatus_set STATUS="ZTLXM" FUNCTION="SAVE"/>
    <pfstatus_set STATUS="ZTLXM" FUNCTION="SCRF"/>
    <pfstatus_set STATUS="ZTLXM" FUNCTION="SEAR"/>
    <pfstatus_set STATUS="ZTLXM" FUNCTION="TEXT"/>
    <pfstatus_set STATUS="ZTLXM" FUNCTION="TREX"/>
    <pfstatus_set STATUS="ZTLXM" FUNCTION="TRIN"/>
    <pfstatus_set STATUS="ZUDG" FUNCTION="ADDR"/>
    <pfstatus_set STATUS="ZUDG" FUNCTION="ALMK"/>
    <pfstatus_set STATUS="ZUDG" FUNCTION="ALNW"/>
    <pfstatus_set STATUS="ZUDG" FUNCTION="ALOE"/>
    <pfstatus_set STATUS="ZUDG" FUNCTION="ANZG"/>
    <pfstatus_set STATUS="ZUDG" FUNCTION="ATAB"/>
    <pfstatus_set STATUS="ZUDG" FUNCTION="BCCH"/>
    <pfstatus_set STATUS="ZUDG" FUNCTION="BCSH"/>
    <pfstatus_set STATUS="ZUDG" FUNCTION="DELE"/>
    <pfstatus_set STATUS="ZUDG" FUNCTION="DELM"/>
    <pfstatus_set STATUS="ZUDG" FUNCTION="EABR"/>
    <pfstatus_set STATUS="ZUDG" FUNCTION="ENDE"/>
    <pfstatus_set STATUS="ZUDG" FUNCTION="FDOC"/>
    <pfstatus_set STATUS="ZUDG" FUNCTION="GPRF"/>
    <pfstatus_set STATUS="ZUDG" FUNCTION="KOPE"/>
    <pfstatus_set STATUS="ZUDG" FUNCTION="LANG"/>
    <pfstatus_set STATUS="ZUDG" FUNCTION="MKEZ"/>
    <pfstatus_set STATUS="ZUDG" FUNCTION="NEWL"/>
    <pfstatus_set STATUS="ZUDG" FUNCTION="NEXT"/>
    <pfstatus_set STATUS="ZUDG" FUNCTION="ORDR"/>
    <pfstatus_set STATUS="ZUDG" FUNCTION="ORGI"/>
    <pfstatus_set STATUS="ZUDG" FUNCTION="POSI"/>
    <pfstatus_set STATUS="ZUDG" FUNCTION="PREV"/>
    <pfstatus_set STATUS="ZUDG" FUNCTION="PROT"/>
    <pfstatus_set STATUS="ZUDG" FUNCTION="PRST"/>
    <pfstatus_set STATUS="ZUDG" FUNCTION="SAVE"/>
    <pfstatus_set STATUS="ZUDG" FUNCTION="SCRF"/>
    <pfstatus_set STATUS="ZUDG" FUNCTION="SEAR"/>
    <pfstatus_set STATUS="ZUDG" FUNCTION="SELU"/>
    <pfstatus_set STATUS="ZUDG" FUNCTION="SLCT"/>
    <pfstatus_set STATUS="ZUDG" FUNCTION="TEXT"/>
    <pfstatus_set STATUS="ZUDG" FUNCTION="TRSP"/>
    <pfstatus_set STATUS="ZUDG" FUNCTION="UEBE"/>
    <pfstatus_set STATUS="ZUDGM" FUNCTION="ADDR"/>
    <pfstatus_set STATUS="ZUDGM" FUNCTION="ALMK"/>
    <pfstatus_set STATUS="ZUDGM" FUNCTION="ALNW"/>
    <pfstatus_set STATUS="ZUDGM" FUNCTION="ALOE"/>
    <pfstatus_set STATUS="ZUDGM" FUNCTION="ANZG"/>
    <pfstatus_set STATUS="ZUDGM" FUNCTION="ATAB"/>
    <pfstatus_set STATUS="ZUDGM" FUNCTION="BCCH"/>
    <pfstatus_set STATUS="ZUDGM" FUNCTION="BCSH"/>
    <pfstatus_set STATUS="ZUDGM" FUNCTION="DELE"/>
    <pfstatus_set STATUS="ZUDGM" FUNCTION="DELM"/>
    <pfstatus_set STATUS="ZUDGM" FUNCTION="EABR"/>
    <pfstatus_set STATUS="ZUDGM" FUNCTION="ENDE"/>
    <pfstatus_set STATUS="ZUDGM" FUNCTION="FDOC"/>
    <pfstatus_set STATUS="ZUDGM" FUNCTION="GPRF"/>
    <pfstatus_set STATUS="ZUDGM" FUNCTION="KOPE"/>
    <pfstatus_set STATUS="ZUDGM" FUNCTION="LANG"/>
    <pfstatus_set STATUS="ZUDGM" FUNCTION="MKEZ"/>
    <pfstatus_set STATUS="ZUDGM" FUNCTION="NEWL"/>
    <pfstatus_set STATUS="ZUDGM" FUNCTION="NEXT"/>
    <pfstatus_set STATUS="ZUDGM" FUNCTION="ORDR"/>
    <pfstatus_set STATUS="ZUDGM" FUNCTION="ORGI"/>
    <pfstatus_set STATUS="ZUDGM" FUNCTION="POSI"/>
    <pfstatus_set STATUS="ZUDGM" FUNCTION="PREV"/>
    <pfstatus_set STATUS="ZUDGM" FUNCTION="PROT"/>
    <pfstatus_set STATUS="ZUDGM" FUNCTION="PRST"/>
    <pfstatus_set STATUS="ZUDGM" FUNCTION="SAVE"/>
    <pfstatus_set STATUS="ZUDGM" FUNCTION="SCRF"/>
    <pfstatus_set STATUS="ZUDGM" FUNCTION="SEAR"/>
    <pfstatus_set STATUS="ZUDGM" FUNCTION="SELU"/>
    <pfstatus_set STATUS="ZUDGM" FUNCTION="SLCT"/>
    <pfstatus_set STATUS="ZUDGM" FUNCTION="TEXT"/>
    <pfstatus_set STATUS="ZUDGM" FUNCTION="TRSP"/>
    <pfstatus_set STATUS="ZUDGM" FUNCTION="UEBE"/>
    <pfstatus_set STATUS="ZUDX" FUNCTION="ADDR"/>
    <pfstatus_set STATUS="ZUDX" FUNCTION="ALMK"/>
    <pfstatus_set STATUS="ZUDX" FUNCTION="ALNW"/>
    <pfstatus_set STATUS="ZUDX" FUNCTION="ALOE"/>
    <pfstatus_set STATUS="ZUDX" FUNCTION="ANZG"/>
    <pfstatus_set STATUS="ZUDX" FUNCTION="ATAB"/>
    <pfstatus_set STATUS="ZUDX" FUNCTION="BCCH"/>
    <pfstatus_set STATUS="ZUDX" FUNCTION="BCSH"/>
    <pfstatus_set STATUS="ZUDX" FUNCTION="DELE"/>
    <pfstatus_set STATUS="ZUDX" FUNCTION="DELM"/>
    <pfstatus_set STATUS="ZUDX" FUNCTION="EABR"/>
    <pfstatus_set STATUS="ZUDX" FUNCTION="ENDE"/>
    <pfstatus_set STATUS="ZUDX" FUNCTION="FDOC"/>
    <pfstatus_set STATUS="ZUDX" FUNCTION="GPRF"/>
    <pfstatus_set STATUS="ZUDX" FUNCTION="KOPE"/>
    <pfstatus_set STATUS="ZUDX" FUNCTION="LANG"/>
    <pfstatus_set STATUS="ZUDX" FUNCTION="MKEZ"/>
    <pfstatus_set STATUS="ZUDX" FUNCTION="NEWL"/>
    <pfstatus_set STATUS="ZUDX" FUNCTION="NEXT"/>
    <pfstatus_set STATUS="ZUDX" FUNCTION="ORDR"/>
    <pfstatus_set STATUS="ZUDX" FUNCTION="ORGI"/>
    <pfstatus_set STATUS="ZUDX" FUNCTION="POSI"/>
    <pfstatus_set STATUS="ZUDX" FUNCTION="PREV"/>
    <pfstatus_set STATUS="ZUDX" FUNCTION="PROT"/>
    <pfstatus_set STATUS="ZUDX" FUNCTION="PRST"/>
    <pfstatus_set STATUS="ZUDX" FUNCTION="SAVE"/>
    <pfstatus_set STATUS="ZUDX" FUNCTION="SCRF"/>
    <pfstatus_set STATUS="ZUDX" FUNCTION="SEAR"/>
    <pfstatus_set STATUS="ZUDX" FUNCTION="SELU"/>
    <pfstatus_set STATUS="ZUDX" FUNCTION="SLCT"/>
    <pfstatus_set STATUS="ZUDX" FUNCTION="TEXT"/>
    <pfstatus_set STATUS="ZUDX" FUNCTION="TRSP"/>
    <pfstatus_set STATUS="ZUDX" FUNCTION="UEBE"/>
    <pfstatus_set STATUS="ZUDX D" FUNCTION="ADDR"/>
    <pfstatus_set STATUS="ZUDX D" FUNCTION="ALMK"/>
    <pfstatus_set STATUS="ZUDX D" FUNCTION="ANZG"/>
    <pfstatus_set STATUS="ZUDX D" FUNCTION="ATAB"/>
    <pfstatus_set STATUS="ZUDX D" FUNCTION="EABR"/>
    <pfstatus_set STATUS="ZUDX D" FUNCTION="ENDE"/>
    <pfstatus_set STATUS="ZUDX D" FUNCTION="FDOC"/>
    <pfstatus_set STATUS="ZUDX D" FUNCTION="GPRF"/>
    <pfstatus_set STATUS="ZUDX D" FUNCTION="MKEZ"/>
    <pfstatus_set STATUS="ZUDX D" FUNCTION="NEXT"/>
    <pfstatus_set STATUS="ZUDX D" FUNCTION="ORDR"/>
    <pfstatus_set STATUS="ZUDX D" FUNCTION="POSI"/>
    <pfstatus_set STATUS="ZUDX D" FUNCTION="PREV"/>
    <pfstatus_set STATUS="ZUDX D" FUNCTION="PROT"/>
    <pfstatus_set STATUS="ZUDX D" FUNCTION="PRST"/>
    <pfstatus_set STATUS="ZUDX D" FUNCTION="SAVE"/>
    <pfstatus_set STATUS="ZUDX D" FUNCTION="SCRF"/>
    <pfstatus_set STATUS="ZUDX D" FUNCTION="SLCT"/>
    <pfstatus_set STATUS="ZUDX D" FUNCTION="UEBE"/>
    <pfstatus_set STATUS="ZUDX D" FUNCTION="UNDO"/>
    <pfstatus_set STATUS="ZUDXM" FUNCTION="ADDR"/>
    <pfstatus_set STATUS="ZUDXM" FUNCTION="ALMK"/>
    <pfstatus_set STATUS="ZUDXM" FUNCTION="ALNW"/>
    <pfstatus_set STATUS="ZUDXM" FUNCTION="ALOE"/>
    <pfstatus_set STATUS="ZUDXM" FUNCTION="ANZG"/>
    <pfstatus_set STATUS="ZUDXM" FUNCTION="ATAB"/>
    <pfstatus_set STATUS="ZUDXM" FUNCTION="BCCH"/>
    <pfstatus_set STATUS="ZUDXM" FUNCTION="BCSH"/>
    <pfstatus_set STATUS="ZUDXM" FUNCTION="DELE"/>
    <pfstatus_set STATUS="ZUDXM" FUNCTION="DELM"/>
    <pfstatus_set STATUS="ZUDXM" FUNCTION="EABR"/>
    <pfstatus_set STATUS="ZUDXM" FUNCTION="ENDE"/>
    <pfstatus_set STATUS="ZUDXM" FUNCTION="FDOC"/>
    <pfstatus_set STATUS="ZUDXM" FUNCTION="GPRF"/>
    <pfstatus_set STATUS="ZUDXM" FUNCTION="KOPE"/>
    <pfstatus_set STATUS="ZUDXM" FUNCTION="LANG"/>
    <pfstatus_set STATUS="ZUDXM" FUNCTION="MKEZ"/>
    <pfstatus_set STATUS="ZUDXM" FUNCTION="NEWL"/>
    <pfstatus_set STATUS="ZUDXM" FUNCTION="NEXT"/>
    <pfstatus_set STATUS="ZUDXM" FUNCTION="ORDR"/>
    <pfstatus_set STATUS="ZUDXM" FUNCTION="ORGI"/>
    <pfstatus_set STATUS="ZUDXM" FUNCTION="POSI"/>
    <pfstatus_set STATUS="ZUDXM" FUNCTION="PREV"/>
    <pfstatus_set STATUS="ZUDXM" FUNCTION="PROT"/>
    <pfstatus_set STATUS="ZUDXM" FUNCTION="PRST"/>
    <pfstatus_set STATUS="ZUDXM" FUNCTION="SAVE"/>
    <pfstatus_set STATUS="ZUDXM" FUNCTION="SCRF"/>
    <pfstatus_set STATUS="ZUDXM" FUNCTION="SEAR"/>
    <pfstatus_set STATUS="ZUDXM" FUNCTION="SELU"/>
    <pfstatus_set STATUS="ZUDXM" FUNCTION="SLCT"/>
    <pfstatus_set STATUS="ZUDXM" FUNCTION="TEXT"/>
    <pfstatus_set STATUS="ZUDXM" FUNCTION="TRSP"/>
    <pfstatus_set STATUS="ZUDXM" FUNCTION="UEBE"/>
    <pfstatus_set STATUS="ZUDXMD" FUNCTION="ADDR"/>
    <pfstatus_set STATUS="ZUDXMD" FUNCTION="ALMK"/>
    <pfstatus_set STATUS="ZUDXMD" FUNCTION="ANZG"/>
    <pfstatus_set STATUS="ZUDXMD" FUNCTION="ATAB"/>
    <pfstatus_set STATUS="ZUDXMD" FUNCTION="EABR"/>
    <pfstatus_set STATUS="ZUDXMD" FUNCTION="ENDE"/>
    <pfstatus_set STATUS="ZUDXMD" FUNCTION="FDOC"/>
    <pfstatus_set STATUS="ZUDXMD" FUNCTION="GPRF"/>
    <pfstatus_set STATUS="ZUDXMD" FUNCTION="MKEZ"/>
    <pfstatus_set STATUS="ZUDXMD" FUNCTION="NEXT"/>
    <pfstatus_set STATUS="ZUDXMD" FUNCTION="ORDR"/>
    <pfstatus_set STATUS="ZUDXMD" FUNCTION="POSI"/>
    <pfstatus_set STATUS="ZUDXMD" FUNCTION="PREV"/>
    <pfstatus_set STATUS="ZUDXMD" FUNCTION="PROT"/>
    <pfstatus_set STATUS="ZUDXMD" FUNCTION="PRST"/>
    <pfstatus_set STATUS="ZUDXMD" FUNCTION="SAVE"/>
    <pfstatus_set STATUS="ZUDXMD" FUNCTION="SCRF"/>
    <pfstatus_set STATUS="ZUDXMD" FUNCTION="SLCT"/>
    <pfstatus_set STATUS="ZUDXMD" FUNCTION="UEBE"/>
    <pfstatus_set STATUS="ZUDXMD" FUNCTION="UNDO"/>
    <pfstatus_set STATUS="ZULG" FUNCTION="ADDR"/>
    <pfstatus_set STATUS="ZULG" FUNCTION="ALMK"/>
    <pfstatus_set STATUS="ZULG" FUNCTION="ALNW"/>
    <pfstatus_set STATUS="ZULG" FUNCTION="ALOE"/>
    <pfstatus_set STATUS="ZULG" FUNCTION="ANZG"/>
    <pfstatus_set STATUS="ZULG" FUNCTION="ATAB"/>
    <pfstatus_set STATUS="ZULG" FUNCTION="BACK"/>
    <pfstatus_set STATUS="ZULG" FUNCTION="BCCH"/>
    <pfstatus_set STATUS="ZULG" FUNCTION="BCON"/>
    <pfstatus_set STATUS="ZULG" FUNCTION="BCSH"/>
    <pfstatus_set STATUS="ZULG" FUNCTION="CMPO"/>
    <pfstatus_set STATUS="ZULG" FUNCTION="CMPR"/>
    <pfstatus_set STATUS="ZULG" FUNCTION="COMP"/>
    <pfstatus_set STATUS="ZULG" FUNCTION="DELE"/>
    <pfstatus_set STATUS="ZULG" FUNCTION="DELM"/>
    <pfstatus_set STATUS="ZULG" FUNCTION="DETA"/>
    <pfstatus_set STATUS="ZULG" FUNCTION="DETM"/>
    <pfstatus_set STATUS="ZULG" FUNCTION="EABR"/>
    <pfstatus_set STATUS="ZULG" FUNCTION="ENDE"/>
    <pfstatus_set STATUS="ZULG" FUNCTION="EXPA"/>
    <pfstatus_set STATUS="ZULG" FUNCTION="FDOC"/>
    <pfstatus_set STATUS="ZULG" FUNCTION="GPRF"/>
    <pfstatus_set STATUS="ZULG" FUNCTION="KOPE"/>
    <pfstatus_set STATUS="ZULG" FUNCTION="LANG"/>
    <pfstatus_set STATUS="ZULG" FUNCTION="MKAL"/>
    <pfstatus_set STATUS="ZULG" FUNCTION="MKBL"/>
    <pfstatus_set STATUS="ZULG" FUNCTION="MKEZ"/>
    <pfstatus_set STATUS="ZULG" FUNCTION="MKLO"/>
    <pfstatus_set STATUS="ZULG" FUNCTION="NEWL"/>
    <pfstatus_set STATUS="ZULG" FUNCTION="NEXT"/>
    <pfstatus_set STATUS="ZULG" FUNCTION="ORDR"/>
    <pfstatus_set STATUS="ZULG" FUNCTION="ORGI"/>
    <pfstatus_set STATUS="ZULG" FUNCTION="P+"/>
    <pfstatus_set STATUS="ZULG" FUNCTION="P++"/>
    <pfstatus_set STATUS="ZULG" FUNCTION="P-"/>
    <pfstatus_set STATUS="ZULG" FUNCTION="P--"/>
    <pfstatus_set STATUS="ZULG" FUNCTION="POSI"/>
    <pfstatus_set STATUS="ZULG" FUNCTION="PREV"/>
    <pfstatus_set STATUS="ZULG" FUNCTION="PROT"/>
    <pfstatus_set STATUS="ZULG" FUNCTION="PRST"/>
    <pfstatus_set STATUS="ZULG" FUNCTION="REPL"/>
    <pfstatus_set STATUS="ZULG" FUNCTION="SAVE"/>
    <pfstatus_set STATUS="ZULG" FUNCTION="SCRF"/>
    <pfstatus_set STATUS="ZULG" FUNCTION="SEAR"/>
    <pfstatus_set STATUS="ZULG" FUNCTION="SELU"/>
    <pfstatus_set STATUS="ZULG" FUNCTION="TEXT"/>
    <pfstatus_set STATUS="ZULG" FUNCTION="TRSP"/>
    <pfstatus_set STATUS="ZULGM" FUNCTION="ADDR"/>
    <pfstatus_set STATUS="ZULGM" FUNCTION="ALMK"/>
    <pfstatus_set STATUS="ZULGM" FUNCTION="ALNW"/>
    <pfstatus_set STATUS="ZULGM" FUNCTION="ALOE"/>
    <pfstatus_set STATUS="ZULGM" FUNCTION="ANZG"/>
    <pfstatus_set STATUS="ZULGM" FUNCTION="ATAB"/>
    <pfstatus_set STATUS="ZULGM" FUNCTION="BACK"/>
    <pfstatus_set STATUS="ZULGM" FUNCTION="BCCH"/>
    <pfstatus_set STATUS="ZULGM" FUNCTION="BCON"/>
    <pfstatus_set STATUS="ZULGM" FUNCTION="BCSH"/>
    <pfstatus_set STATUS="ZULGM" FUNCTION="CMPO"/>
    <pfstatus_set STATUS="ZULGM" FUNCTION="CMPR"/>
    <pfstatus_set STATUS="ZULGM" FUNCTION="COMP"/>
    <pfstatus_set STATUS="ZULGM" FUNCTION="DELE"/>
    <pfstatus_set STATUS="ZULGM" FUNCTION="DELM"/>
    <pfstatus_set STATUS="ZULGM" FUNCTION="DETA"/>
    <pfstatus_set STATUS="ZULGM" FUNCTION="DETM"/>
    <pfstatus_set STATUS="ZULGM" FUNCTION="EABR"/>
    <pfstatus_set STATUS="ZULGM" FUNCTION="ENDE"/>
    <pfstatus_set STATUS="ZULGM" FUNCTION="EXPA"/>
    <pfstatus_set STATUS="ZULGM" FUNCTION="FDOC"/>
    <pfstatus_set STATUS="ZULGM" FUNCTION="GPRF"/>
    <pfstatus_set STATUS="ZULGM" FUNCTION="KOPE"/>
    <pfstatus_set STATUS="ZULGM" FUNCTION="LANG"/>
    <pfstatus_set STATUS="ZULGM" FUNCTION="MKAL"/>
    <pfstatus_set STATUS="ZULGM" FUNCTION="MKBL"/>
    <pfstatus_set STATUS="ZULGM" FUNCTION="MKEZ"/>
    <pfstatus_set STATUS="ZULGM" FUNCTION="MKLO"/>
    <pfstatus_set STATUS="ZULGM" FUNCTION="NEWL"/>
    <pfstatus_set STATUS="ZULGM" FUNCTION="NEXT"/>
    <pfstatus_set STATUS="ZULGM" FUNCTION="ORDR"/>
    <pfstatus_set STATUS="ZULGM" FUNCTION="ORGI"/>
    <pfstatus_set STATUS="ZULGM" FUNCTION="P+"/>
    <pfstatus_set STATUS="ZULGM" FUNCTION="P++"/>
    <pfstatus_set STATUS="ZULGM" FUNCTION="P-"/>
    <pfstatus_set STATUS="ZULGM" FUNCTION="P--"/>
    <pfstatus_set STATUS="ZULGM" FUNCTION="POSI"/>
    <pfstatus_set STATUS="ZULGM" FUNCTION="PREV"/>
    <pfstatus_set STATUS="ZULGM" FUNCTION="PROT"/>
    <pfstatus_set STATUS="ZULGM" FUNCTION="PRST"/>
    <pfstatus_set STATUS="ZULGM" FUNCTION="REPL"/>
    <pfstatus_set STATUS="ZULGM" FUNCTION="SAVE"/>
    <pfstatus_set STATUS="ZULGM" FUNCTION="SCRF"/>
    <pfstatus_set STATUS="ZULGM" FUNCTION="SEAR"/>
    <pfstatus_set STATUS="ZULGM" FUNCTION="SELU"/>
    <pfstatus_set STATUS="ZULGM" FUNCTION="TEXT"/>
    <pfstatus_set STATUS="ZULGM" FUNCTION="TRSP"/>
    <pfstatus_set STATUS="ZULX" FUNCTION="ADDR"/>
    <pfstatus_set STATUS="ZULX" FUNCTION="ALMK"/>
    <pfstatus_set STATUS="ZULX" FUNCTION="ALNW"/>
    <pfstatus_set STATUS="ZULX" FUNCTION="ALOE"/>
    <pfstatus_set STATUS="ZULX" FUNCTION="ANZG"/>
    <pfstatus_set STATUS="ZULX" FUNCTION="ATAB"/>
    <pfstatus_set STATUS="ZULX" FUNCTION="BACK"/>
    <pfstatus_set STATUS="ZULX" FUNCTION="BCCH"/>
    <pfstatus_set STATUS="ZULX" FUNCTION="BCSH"/>
    <pfstatus_set STATUS="ZULX" FUNCTION="DELE"/>
    <pfstatus_set STATUS="ZULX" FUNCTION="DELM"/>
    <pfstatus_set STATUS="ZULX" FUNCTION="DETA"/>
    <pfstatus_set STATUS="ZULX" FUNCTION="DETM"/>
    <pfstatus_set STATUS="ZULX" FUNCTION="EABR"/>
    <pfstatus_set STATUS="ZULX" FUNCTION="ENDE"/>
    <pfstatus_set STATUS="ZULX" FUNCTION="EXPA"/>
    <pfstatus_set STATUS="ZULX" FUNCTION="FDOC"/>
    <pfstatus_set STATUS="ZULX" FUNCTION="GPRF"/>
    <pfstatus_set STATUS="ZULX" FUNCTION="KOPE"/>
    <pfstatus_set STATUS="ZULX" FUNCTION="LANG"/>
    <pfstatus_set STATUS="ZULX" FUNCTION="MKAL"/>
    <pfstatus_set STATUS="ZULX" FUNCTION="MKBL"/>
    <pfstatus_set STATUS="ZULX" FUNCTION="MKEZ"/>
    <pfstatus_set STATUS="ZULX" FUNCTION="MKLO"/>
    <pfstatus_set STATUS="ZULX" FUNCTION="NEWL"/>
    <pfstatus_set STATUS="ZULX" FUNCTION="NEXT"/>
    <pfstatus_set STATUS="ZULX" FUNCTION="ORDR"/>
    <pfstatus_set STATUS="ZULX" FUNCTION="ORGI"/>
    <pfstatus_set STATUS="ZULX" FUNCTION="P+"/>
    <pfstatus_set STATUS="ZULX" FUNCTION="P++"/>
    <pfstatus_set STATUS="ZULX" FUNCTION="P-"/>
    <pfstatus_set STATUS="ZULX" FUNCTION="P--"/>
    <pfstatus_set STATUS="ZULX" FUNCTION="POSI"/>
    <pfstatus_set STATUS="ZULX" FUNCTION="PREV"/>
    <pfstatus_set STATUS="ZULX" FUNCTION="PROT"/>
    <pfstatus_set STATUS="ZULX" FUNCTION="PRST"/>
    <pfstatus_set STATUS="ZULX" FUNCTION="REPL"/>
    <pfstatus_set STATUS="ZULX" FUNCTION="SAVE"/>
    <pfstatus_set STATUS="ZULX" FUNCTION="SCRF"/>
    <pfstatus_set STATUS="ZULX" FUNCTION="SEAR"/>
    <pfstatus_set STATUS="ZULX" FUNCTION="SELU"/>
    <pfstatus_set STATUS="ZULX" FUNCTION="TEXT"/>
    <pfstatus_set STATUS="ZULX" FUNCTION="TRSP"/>
    <pfstatus_set STATUS="ZULX D" FUNCTION="ADDR"/>
    <pfstatus_set STATUS="ZULX D" FUNCTION="ALMK"/>
    <pfstatus_set STATUS="ZULX D" FUNCTION="ANZG"/>
    <pfstatus_set STATUS="ZULX D" FUNCTION="ATAB"/>
    <pfstatus_set STATUS="ZULX D" FUNCTION="BACK"/>
    <pfstatus_set STATUS="ZULX D" FUNCTION="DETA"/>
    <pfstatus_set STATUS="ZULX D" FUNCTION="DETM"/>
    <pfstatus_set STATUS="ZULX D" FUNCTION="EABR"/>
    <pfstatus_set STATUS="ZULX D" FUNCTION="ENDE"/>
    <pfstatus_set STATUS="ZULX D" FUNCTION="EXPA"/>
    <pfstatus_set STATUS="ZULX D" FUNCTION="FDOC"/>
    <pfstatus_set STATUS="ZULX D" FUNCTION="GPRF"/>
    <pfstatus_set STATUS="ZULX D" FUNCTION="MKAL"/>
    <pfstatus_set STATUS="ZULX D" FUNCTION="MKBL"/>
    <pfstatus_set STATUS="ZULX D" FUNCTION="MKEZ"/>
    <pfstatus_set STATUS="ZULX D" FUNCTION="MKLO"/>
    <pfstatus_set STATUS="ZULX D" FUNCTION="NEXT"/>
    <pfstatus_set STATUS="ZULX D" FUNCTION="ORDR"/>
    <pfstatus_set STATUS="ZULX D" FUNCTION="P+"/>
    <pfstatus_set STATUS="ZULX D" FUNCTION="P++"/>
    <pfstatus_set STATUS="ZULX D" FUNCTION="P-"/>
    <pfstatus_set STATUS="ZULX D" FUNCTION="P--"/>
    <pfstatus_set STATUS="ZULX D" FUNCTION="POSI"/>
    <pfstatus_set STATUS="ZULX D" FUNCTION="PREV"/>
    <pfstatus_set STATUS="ZULX D" FUNCTION="PROT"/>
    <pfstatus_set STATUS="ZULX D" FUNCTION="PRST"/>
    <pfstatus_set STATUS="ZULX D" FUNCTION="SAVE"/>
    <pfstatus_set STATUS="ZULX D" FUNCTION="SCRF"/>
    <pfstatus_set STATUS="ZULX D" FUNCTION="UNDO"/>
    <pfstatus_set STATUS="ZULXM" FUNCTION="ADDR"/>
    <pfstatus_set STATUS="ZULXM" FUNCTION="ALMK"/>
    <pfstatus_set STATUS="ZULXM" FUNCTION="ALNW"/>
    <pfstatus_set STATUS="ZULXM" FUNCTION="ALOE"/>
    <pfstatus_set STATUS="ZULXM" FUNCTION="ANZG"/>
    <pfstatus_set STATUS="ZULXM" FUNCTION="ATAB"/>
    <pfstatus_set STATUS="ZULXM" FUNCTION="BACK"/>
    <pfstatus_set STATUS="ZULXM" FUNCTION="BCCH"/>
    <pfstatus_set STATUS="ZULXM" FUNCTION="BCSH"/>
    <pfstatus_set STATUS="ZULXM" FUNCTION="DELE"/>
    <pfstatus_set STATUS="ZULXM" FUNCTION="DELM"/>
    <pfstatus_set STATUS="ZULXM" FUNCTION="DETA"/>
    <pfstatus_set STATUS="ZULXM" FUNCTION="DETM"/>
    <pfstatus_set STATUS="ZULXM" FUNCTION="EABR"/>
    <pfstatus_set STATUS="ZULXM" FUNCTION="ENDE"/>
    <pfstatus_set STATUS="ZULXM" FUNCTION="EXPA"/>
    <pfstatus_set STATUS="ZULXM" FUNCTION="FDOC"/>
    <pfstatus_set STATUS="ZULXM" FUNCTION="GPRF"/>
    <pfstatus_set STATUS="ZULXM" FUNCTION="KOPE"/>
    <pfstatus_set STATUS="ZULXM" FUNCTION="LANG"/>
    <pfstatus_set STATUS="ZULXM" FUNCTION="MKAL"/>
    <pfstatus_set STATUS="ZULXM" FUNCTION="MKBL"/>
    <pfstatus_set STATUS="ZULXM" FUNCTION="MKEZ"/>
    <pfstatus_set STATUS="ZULXM" FUNCTION="MKLO"/>
    <pfstatus_set STATUS="ZULXM" FUNCTION="NEWL"/>
    <pfstatus_set STATUS="ZULXM" FUNCTION="NEXT"/>
    <pfstatus_set STATUS="ZULXM" FUNCTION="ORDR"/>
    <pfstatus_set STATUS="ZULXM" FUNCTION="ORGI"/>
    <pfstatus_set STATUS="ZULXM" FUNCTION="P+"/>
    <pfstatus_set STATUS="ZULXM" FUNCTION="P++"/>
    <pfstatus_set STATUS="ZULXM" FUNCTION="P-"/>
    <pfstatus_set STATUS="ZULXM" FUNCTION="P--"/>
    <pfstatus_set STATUS="ZULXM" FUNCTION="POSI"/>
    <pfstatus_set STATUS="ZULXM" FUNCTION="PREV"/>
    <pfstatus_set STATUS="ZULXM" FUNCTION="PROT"/>
    <pfstatus_set STATUS="ZULXM" FUNCTION="PRST"/>
    <pfstatus_set STATUS="ZULXM" FUNCTION="REPL"/>
    <pfstatus_set STATUS="ZULXM" FUNCTION="SAVE"/>
    <pfstatus_set STATUS="ZULXM" FUNCTION="SCRF"/>
    <pfstatus_set STATUS="ZULXM" FUNCTION="SEAR"/>
    <pfstatus_set STATUS="ZULXM" FUNCTION="SELU"/>
    <pfstatus_set STATUS="ZULXM" FUNCTION="TEXT"/>
    <pfstatus_set STATUS="ZULXM" FUNCTION="TRSP"/>
    <pfstatus_set STATUS="ZULXMD" FUNCTION="ADDR"/>
    <pfstatus_set STATUS="ZULXMD" FUNCTION="ALMK"/>
    <pfstatus_set STATUS="ZULXMD" FUNCTION="ANZG"/>
    <pfstatus_set STATUS="ZULXMD" FUNCTION="ATAB"/>
    <pfstatus_set STATUS="ZULXMD" FUNCTION="BACK"/>
    <pfstatus_set STATUS="ZULXMD" FUNCTION="DELM"/>
    <pfstatus_set STATUS="ZULXMD" FUNCTION="DETA"/>
    <pfstatus_set STATUS="ZULXMD" FUNCTION="DETM"/>
    <pfstatus_set STATUS="ZULXMD" FUNCTION="EABR"/>
    <pfstatus_set STATUS="ZULXMD" FUNCTION="ENDE"/>
    <pfstatus_set STATUS="ZULXMD" FUNCTION="EXPA"/>
    <pfstatus_set STATUS="ZULXMD" FUNCTION="FDOC"/>
    <pfstatus_set STATUS="ZULXMD" FUNCTION="GPRF"/>
    <pfstatus_set STATUS="ZULXMD" FUNCTION="MKAL"/>
    <pfstatus_set STATUS="ZULXMD" FUNCTION="MKBL"/>
    <pfstatus_set STATUS="ZULXMD" FUNCTION="MKEZ"/>
    <pfstatus_set STATUS="ZULXMD" FUNCTION="MKLO"/>
    <pfstatus_set STATUS="ZULXMD" FUNCTION="NEXT"/>
    <pfstatus_set STATUS="ZULXMD" FUNCTION="ORDR"/>
    <pfstatus_set STATUS="ZULXMD" FUNCTION="P+"/>
    <pfstatus_set STATUS="ZULXMD" FUNCTION="P++"/>
    <pfstatus_set STATUS="ZULXMD" FUNCTION="P-"/>
    <pfstatus_set STATUS="ZULXMD" FUNCTION="P--"/>
    <pfstatus_set STATUS="ZULXMD" FUNCTION="POSI"/>
    <pfstatus_set STATUS="ZULXMD" FUNCTION="PREV"/>
    <pfstatus_set STATUS="ZULXMD" FUNCTION="PROT"/>
    <pfstatus_set STATUS="ZULXMD" FUNCTION="PRST"/>
    <pfstatus_set STATUS="ZULXMD" FUNCTION="SAVE"/>
    <pfstatus_set STATUS="ZULXMD" FUNCTION="SCRF"/>
    <pfstatus_set STATUS="ZULXMD" FUNCTION="UNDO"/>
    <pfstatus_doc OBJ_TYPE="A" OBJ_CODE="0004" MODAL="D" INT_NOTE="Menu Bar for Detail Screen"/>
    <pfstatus_doc OBJ_TYPE="A" OBJ_CODE="MAIN" MODAL="D" INT_NOTE="Menu Bar for List Screen"/>
    <pfstatus_doc OBJ_TYPE="P" OBJ_CODE="0005" MODAL="D" INT_NOTE="Select Block"/>
    <pfstatus_doc OBJ_TYPE="P" OBJ_CODE="0006" MODAL="P" INT_NOTE="Texts in Other Languages"/>
    <pfstatus_doc OBJ_TYPE="P" OBJ_CODE="COPY" MODAL="D" INT_NOTE="Copy: Create Target Entry"/>
    <pfstatus_doc OBJ_TYPE="P" OBJ_CODE="DETA" MODAL="D" INT_NOTE="Detail Screen"/>
    <pfstatus_doc OBJ_TYPE="P" OBJ_CODE="ERRO" MODAL="D" INT_NOTE="Error Dialog"/>
    <pfstatus_doc OBJ_TYPE="P" OBJ_CODE="LIST" MODAL="D" INT_NOTE="List Screen"/>
    <pfstatus_doc OBJ_TYPE="P" OBJ_CODE="TRDT" MODAL="D" INT_NOTE="Transport: Details Screen"/>
    <pfstatus_doc OBJ_TYPE="P" OBJ_CODE="TRLI" MODAL="D" INT_NOTE="Transport: List Screen"/>
    <pfstatus_tit CODE="ADX" TEXT="New Entries: Details of Added Entries"/>
    <pfstatus_tit CODE="ALX" TEXT="New Entries: Overview of Added Entries"/>
    <pfstatus_tit CODE="CDX" TEXT='Copy Entry in View &quot;&amp;&quot;: Target Entry'/>
    <pfstatus_tit CODE="CLX" TEXT='Copy Entries in View &quot;&amp;&quot;: Target Entries'/>
    <pfstatus_tit CODE="DDX" TEXT='Change View &quot;&amp;&quot;: Details of Deleted Entries'/>
    <pfstatus_tit CODE="DLX" TEXT='Change View &quot;&amp;&quot;: Overview of Deleted Entries'/>
    <pfstatus_tit CODE="GDX" TEXT='Define Validity in View &quot;&amp;&quot;: New Entry'/>
    <pfstatus_tit CODE="GLX" TEXT='Define Validity in View &quot;&amp;&quot;: New Entries'/>
    <pfstatus_tit CODE="SDG" TEXT='Display View &quot;&amp;&quot;: Details'/>
    <pfstatus_tit CODE="SDX" TEXT='Display View &quot;&amp;&quot;: Details of Selected Set'/>
    <pfstatus_tit CODE="SLG" TEXT='Display View &quot;&amp;&quot;: Overview'/>
    <pfstatus_tit CODE="SLX" TEXT='Display View &quot;&amp;&quot;: Overview of Selected Set'/>
    <pfstatus_tit CODE="TDG" TEXT='Transport View &quot;&amp;&quot;: Details'/>
    <pfstatus_tit CODE="TDX" TEXT='Transport View &quot;&amp;&quot;: Details of Selected Set'/>
    <pfstatus_tit CODE="TLG" TEXT='Transport View &quot;&amp;&quot;: Overview'/>
    <pfstatus_tit CODE="TLX" TEXT='Transport View &quot;&amp;&quot;: Overview of Selected Set'/>
    <pfstatus_tit CODE="TXS" TEXT="Display Texts in Other Languages"/>
    <pfstatus_tit CODE="TXT" TEXT="Maintain Texts in Other Languages"/>
    <pfstatus_tit CODE="UDG" TEXT='Change View &quot;&amp;&quot;: Details'/>
    <pfstatus_tit CODE="UDX" TEXT='Change View &quot;&amp;&quot;: Details of Selected Set'/>
    <pfstatus_tit CODE="ULG" TEXT='Change View &quot;&amp;&quot;: Overview'/>
    <pfstatus_tit CODE="ULX" TEXT='Change View &quot;&amp;&quot;: Overview of Selected Set'/>
   </pfstatus>
   <source>* regenerated at 16.12.2016 06:53:09
*******************************************************************
*   System-defined Include-files.                                 *
*******************************************************************
  INCLUDE LZNAOCV_QTD_CTRLHTOP.              &quot; Global Data
  INCLUDE LZNAOCV_QTD_CTRLHUXX.              &quot; Function Modules

*******************************************************************
*   User-defined Include-files (if necessary).                    *
*******************************************************************
* INCLUDE LZNAOCV_QTD_CTRLHF...              &quot; Subroutines
* INCLUDE LZNAOCV_QTD_CTRLHO...              &quot; PBO-Modules
* INCLUDE LZNAOCV_QTD_CTRLHI...              &quot; PAI-Modules
* INCLUDE LZNAOCV_QTD_CTRLHE...              &quot; Events
* INCLUDE LZNAOCV_QTD_CTRLHP...              &quot; Local class implement.
* INCLUDE LZNAOCV_QTD_CTRLHT99.              &quot; ABAP Unit tests
  INCLUDE LZNAOCV_QTD_CTRLHF00                    . &quot; subprograms
  INCLUDE LZNAOCV_QTD_CTRLHI00                    . &quot; PAI modules
  INCLUDE LSVIMFXX                                . &quot; subprograms
  INCLUDE LSVIMOXX                                . &quot; PBO modules
  INCLUDE LSVIMIXX                                . &quot; PAI modules

INCLUDE lznaocv_qtd_ctrlhi01.

INCLUDE lznaocv_qtd_ctrlhf01.</source>
  </mainprogram>
  <includeprograms>
   <include NAME="LZNAOCV_QTD_CTRLHF00" SQLX="X" EDTX="X" SUBC="I" LEVL="740" RLOAD="E">
    <include_source>*---------------------------------------------------------------------*
*    view related FORM routines
*   generation date: 16.12.2016 at 06:53:09
*   view maintenance generator version: #001407#
*---------------------------------------------------------------------*
*...processing: ZNAOCV_QTD_CTRLH................................*
FORM GET_DATA_ZNAOCV_QTD_CTRLH.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM ZNAOCT_QTD_CTRLH WHERE
(VIM_WHERETAB) .
    CLEAR ZNAOCV_QTD_CTRLH .
ZNAOCV_QTD_CTRLH-MANDT =
ZNAOCT_QTD_CTRLH-MANDT .
ZNAOCV_QTD_CTRLH-SPART =
ZNAOCT_QTD_CTRLH-SPART .
ZNAOCV_QTD_CTRLH-KUNNR =
ZNAOCT_QTD_CTRLH-KUNNR .
ZNAOCV_QTD_CTRLH-ZZDEAL_CODE =
ZNAOCT_QTD_CTRLH-ZZDEAL_CODE .
ZNAOCV_QTD_CTRLH-ENDDT =
ZNAOCT_QTD_CTRLH-ENDDT .
ZNAOCV_QTD_CTRLH-BEGDT =
ZNAOCT_QTD_CTRLH-BEGDT .
ZNAOCV_QTD_CTRLH-UOM =
ZNAOCT_QTD_CTRLH-UOM .
ZNAOCV_QTD_CTRLH-QTD_ALLOWED =
ZNAOCT_QTD_CTRLH-QTD_ALLOWED .
ZNAOCV_QTD_CTRLH-CREDAT =
ZNAOCT_QTD_CTRLH-CREDAT .
ZNAOCV_QTD_CTRLH-CREUSR =
ZNAOCT_QTD_CTRLH-CREUSR .
ZNAOCV_QTD_CTRLH-CRETIM =
ZNAOCT_QTD_CTRLH-CRETIM .
ZNAOCV_QTD_CTRLH-AENAM =
ZNAOCT_QTD_CTRLH-AENAM .
ZNAOCV_QTD_CTRLH-AEDAT =
ZNAOCT_QTD_CTRLH-AEDAT .
ZNAOCV_QTD_CTRLH-AETIM =
ZNAOCT_QTD_CTRLH-AETIM .
ZNAOCV_QTD_CTRLH-CHNUSR =
ZNAOCT_QTD_CTRLH-CHNUSR .
    SELECT SINGLE * FROM KNA1 WHERE
KUNNR = ZNAOCT_QTD_CTRLH-KUNNR .
    IF SY-SUBRC EQ 0.
ZNAOCV_QTD_CTRLH-NAME1 =
KNA1-NAME1 .
    ENDIF.
&lt;VIM_TOTAL_STRUC&gt; = ZNAOCV_QTD_CTRLH.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY &lt;VIM_XTOTAL_KEY&gt;.
  &lt;STATUS&gt;-ALR_SORTED = &apos;R&apos;.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZNAOCV_QTD_CTRLH .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK &lt;ACTION&gt; NE ORIGINAL.
MOVE &lt;VIM_TOTAL_STRUC&gt; TO ZNAOCV_QTD_CTRLH.
  IF &lt;ACTION&gt; = UPDATE_GELOESCHT.
    &lt;ACTION&gt; = GELOESCHT.
  ENDIF.
  CASE &lt;ACTION&gt;.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZNAOCV_QTD_CTRLH-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY &lt;VIM_XTOTAL_KEY&gt;.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM ZNAOCT_QTD_CTRLH WHERE
  SPART = ZNAOCV_QTD_CTRLH-SPART AND
  KUNNR = ZNAOCV_QTD_CTRLH-KUNNR AND
  ZZDEAL_CODE = ZNAOCV_QTD_CTRLH-ZZDEAL_CODE AND
  ENDDT = ZNAOCV_QTD_CTRLH-ENDDT .
    IF SY-SUBRC = 0.
    DELETE ZNAOCT_QTD_CTRLH .
    ENDIF.
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY &lt;VIM_XTOTAL_KEY&gt; BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM ZNAOCT_QTD_CTRLH WHERE
  SPART = ZNAOCV_QTD_CTRLH-SPART AND
  KUNNR = ZNAOCV_QTD_CTRLH-KUNNR AND
  ZZDEAL_CODE = ZNAOCV_QTD_CTRLH-ZZDEAL_CODE AND
  ENDDT = ZNAOCV_QTD_CTRLH-ENDDT .
    IF SY-SUBRC &lt;&gt; 0.   &quot;insert preprocessing: init WA
      CLEAR ZNAOCT_QTD_CTRLH.
    ENDIF.
ZNAOCT_QTD_CTRLH-MANDT =
ZNAOCV_QTD_CTRLH-MANDT .
ZNAOCT_QTD_CTRLH-SPART =
ZNAOCV_QTD_CTRLH-SPART .
ZNAOCT_QTD_CTRLH-KUNNR =
ZNAOCV_QTD_CTRLH-KUNNR .
ZNAOCT_QTD_CTRLH-ZZDEAL_CODE =
ZNAOCV_QTD_CTRLH-ZZDEAL_CODE .
ZNAOCT_QTD_CTRLH-ENDDT =
ZNAOCV_QTD_CTRLH-ENDDT .
ZNAOCT_QTD_CTRLH-BEGDT =
ZNAOCV_QTD_CTRLH-BEGDT .
ZNAOCT_QTD_CTRLH-UOM =
ZNAOCV_QTD_CTRLH-UOM .
ZNAOCT_QTD_CTRLH-QTD_ALLOWED =
ZNAOCV_QTD_CTRLH-QTD_ALLOWED .
ZNAOCT_QTD_CTRLH-CREDAT =
ZNAOCV_QTD_CTRLH-CREDAT .
ZNAOCT_QTD_CTRLH-CREUSR =
ZNAOCV_QTD_CTRLH-CREUSR .
ZNAOCT_QTD_CTRLH-CRETIM =
ZNAOCV_QTD_CTRLH-CRETIM .
ZNAOCT_QTD_CTRLH-AENAM =
ZNAOCV_QTD_CTRLH-AENAM .
ZNAOCT_QTD_CTRLH-AEDAT =
ZNAOCV_QTD_CTRLH-AEDAT .
ZNAOCT_QTD_CTRLH-AETIM =
ZNAOCV_QTD_CTRLH-AETIM .
ZNAOCT_QTD_CTRLH-CHNUSR =
ZNAOCV_QTD_CTRLH-CHNUSR .
    IF SY-SUBRC = 0.
    UPDATE ZNAOCT_QTD_CTRLH .
    ELSE.
    INSERT ZNAOCT_QTD_CTRLH .
    ENDIF.
    READ TABLE EXTRACT WITH KEY &lt;VIM_XTOTAL_KEY&gt;.
    IF SY-SUBRC EQ 0.
      &lt;XACT&gt; = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    &lt;ACTION&gt; = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZNAOCV_QTD_CTRLH-UPD_FLAG,
STATUS_ZNAOCV_QTD_CTRLH-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ZNAOCV_QTD_CTRLH.
  SELECT SINGLE * FROM ZNAOCT_QTD_CTRLH WHERE
SPART = ZNAOCV_QTD_CTRLH-SPART AND
KUNNR = ZNAOCV_QTD_CTRLH-KUNNR AND
ZZDEAL_CODE = ZNAOCV_QTD_CTRLH-ZZDEAL_CODE AND
ENDDT = ZNAOCV_QTD_CTRLH-ENDDT .
ZNAOCV_QTD_CTRLH-MANDT =
ZNAOCT_QTD_CTRLH-MANDT .
ZNAOCV_QTD_CTRLH-SPART =
ZNAOCT_QTD_CTRLH-SPART .
ZNAOCV_QTD_CTRLH-KUNNR =
ZNAOCT_QTD_CTRLH-KUNNR .
ZNAOCV_QTD_CTRLH-ZZDEAL_CODE =
ZNAOCT_QTD_CTRLH-ZZDEAL_CODE .
ZNAOCV_QTD_CTRLH-ENDDT =
ZNAOCT_QTD_CTRLH-ENDDT .
ZNAOCV_QTD_CTRLH-BEGDT =
ZNAOCT_QTD_CTRLH-BEGDT .
ZNAOCV_QTD_CTRLH-UOM =
ZNAOCT_QTD_CTRLH-UOM .
ZNAOCV_QTD_CTRLH-QTD_ALLOWED =
ZNAOCT_QTD_CTRLH-QTD_ALLOWED .
ZNAOCV_QTD_CTRLH-CREDAT =
ZNAOCT_QTD_CTRLH-CREDAT .
ZNAOCV_QTD_CTRLH-CREUSR =
ZNAOCT_QTD_CTRLH-CREUSR .
ZNAOCV_QTD_CTRLH-CRETIM =
ZNAOCT_QTD_CTRLH-CRETIM .
ZNAOCV_QTD_CTRLH-AENAM =
ZNAOCT_QTD_CTRLH-AENAM .
ZNAOCV_QTD_CTRLH-AEDAT =
ZNAOCT_QTD_CTRLH-AEDAT .
ZNAOCV_QTD_CTRLH-AETIM =
ZNAOCT_QTD_CTRLH-AETIM .
ZNAOCV_QTD_CTRLH-CHNUSR =
ZNAOCT_QTD_CTRLH-CHNUSR .
    SELECT SINGLE * FROM KNA1 WHERE
KUNNR = ZNAOCT_QTD_CTRLH-KUNNR .
    IF SY-SUBRC EQ 0.
ZNAOCV_QTD_CTRLH-NAME1 =
KNA1-NAME1 .
    ELSE.
      CLEAR SY-SUBRC.
      CLEAR ZNAOCV_QTD_CTRLH-NAME1 .
    ENDIF.
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZNAOCV_QTD_CTRLH USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: &lt;TAB_KEY_X&gt; TYPE X.
  CLEAR RC.
MOVE ZNAOCV_QTD_CTRLH-SPART TO
ZNAOCT_QTD_CTRLH-SPART .
MOVE ZNAOCV_QTD_CTRLH-KUNNR TO
ZNAOCT_QTD_CTRLH-KUNNR .
MOVE ZNAOCV_QTD_CTRLH-ZZDEAL_CODE TO
ZNAOCT_QTD_CTRLH-ZZDEAL_CODE .
MOVE ZNAOCV_QTD_CTRLH-ENDDT TO
ZNAOCT_QTD_CTRLH-ENDDT .
MOVE ZNAOCV_QTD_CTRLH-MANDT TO
ZNAOCT_QTD_CTRLH-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = &apos;ZNAOCT_QTD_CTRLH&apos;.
  IF NOT &lt;vim_corr_keyx&gt; IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO &lt;vim_corr_keyx&gt; CASTING.
  ENDIF.
  ASSIGN ZNAOCT_QTD_CTRLH TO &lt;TAB_KEY_X&gt; CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING &apos;ZNAOCT_QTD_CTRLH&apos;
    CHANGING TRSP_KEYLEN.
  &lt;VIM_CORR_KEYX&gt;(TRSP_KEYLEN) = &lt;TAB_KEY_X&gt;(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
FORM COMPL_ZNAOCV_QTD_CTRLH USING WORKAREA.
*      provides (read-only) fields from secondary tables related
*      to primary tables by foreignkey relationships
ZNAOCT_QTD_CTRLH-MANDT =
ZNAOCV_QTD_CTRLH-MANDT .
ZNAOCT_QTD_CTRLH-SPART =
ZNAOCV_QTD_CTRLH-SPART .
ZNAOCT_QTD_CTRLH-KUNNR =
ZNAOCV_QTD_CTRLH-KUNNR .
ZNAOCT_QTD_CTRLH-ZZDEAL_CODE =
ZNAOCV_QTD_CTRLH-ZZDEAL_CODE .
ZNAOCT_QTD_CTRLH-ENDDT =
ZNAOCV_QTD_CTRLH-ENDDT .
ZNAOCT_QTD_CTRLH-BEGDT =
ZNAOCV_QTD_CTRLH-BEGDT .
ZNAOCT_QTD_CTRLH-UOM =
ZNAOCV_QTD_CTRLH-UOM .
ZNAOCT_QTD_CTRLH-QTD_ALLOWED =
ZNAOCV_QTD_CTRLH-QTD_ALLOWED .
ZNAOCT_QTD_CTRLH-CREDAT =
ZNAOCV_QTD_CTRLH-CREDAT .
ZNAOCT_QTD_CTRLH-CREUSR =
ZNAOCV_QTD_CTRLH-CREUSR .
ZNAOCT_QTD_CTRLH-CRETIM =
ZNAOCV_QTD_CTRLH-CRETIM .
ZNAOCT_QTD_CTRLH-AENAM =
ZNAOCV_QTD_CTRLH-AENAM .
ZNAOCT_QTD_CTRLH-AEDAT =
ZNAOCV_QTD_CTRLH-AEDAT .
ZNAOCT_QTD_CTRLH-AETIM =
ZNAOCV_QTD_CTRLH-AETIM .
ZNAOCT_QTD_CTRLH-CHNUSR =
ZNAOCV_QTD_CTRLH-CHNUSR .
    SELECT SINGLE * FROM KNA1 WHERE
KUNNR = ZNAOCT_QTD_CTRLH-KUNNR .
    IF SY-SUBRC EQ 0.
ZNAOCV_QTD_CTRLH-NAME1 =
KNA1-NAME1 .
    ELSE.
      CLEAR SY-SUBRC.
      CLEAR ZNAOCV_QTD_CTRLH-NAME1 .
    ENDIF.
ENDFORM.</include_source>
   </include>
   <include NAME="LZNAOCV_QTD_CTRLHF01" SQLX="X" VARCL="X" SUBC="I" APPL="S" RMAND="200" RLOAD="E" UCCHECK="X">
    <include_source>*----------------------------------------------------------------------*
***INCLUDE LZNAOCV_QTD_CTRLHF01.
*----------------------------------------------------------------------*
FORM zf_fill_hidden.

  IF znaocv_qtd_ctrlh-credat IS INITIAL.
    znaocv_qtd_ctrlh-credat = sy-datum.
    znaocv_qtd_ctrlh-cretim = sy-uzeit.
    znaocv_qtd_ctrlh-creusr = sy-uname.
  ENDIF.
  znaocv_qtd_ctrlh-aenam  = sy-uname.
  znaocv_qtd_ctrlh-aedat  = sy-datum.
  znaocv_qtd_ctrlh-aetim  = sy-uzeit.
  znaocv_qtd_ctrlh-chnusr = sy-uname.

ENDFORM.


FORM zf_check_comsumption.

  SELECT COUNT(*)
    FROM znaoct_qtd_ctrld
    INTO @DATA(li_counter)
   WHERE spart       = @znaocv_qtd_ctrlh_total-spart
     AND kunnr       = @znaocv_qtd_ctrlh_total-kunnr
     AND zzdeal_code = @znaocv_qtd_ctrlh_total-zzdeal_code
     AND enddt       = @znaocv_qtd_ctrlh_total-enddt.
  IF li_counter &gt; 0.
    MESSAGE e001(znaoc) WITH znaocv_qtd_ctrlh_total-zzdeal_code DISPLAY LIKE &apos;S&apos;.
  ENDIF.
ENDFORM.


FORM zf_dates_checking.
  DATA: lt_master       TYPE STANDARD TABLE OF znaocv_qtd_ctrlh,
        lt_slave        TYPE STANDARD TABLE OF znaocv_qtd_ctrlh,
        lv_master_index TYPE sytabix,
        lv_slave_index  TYPE sytabix,
        lr_data         TYPE REF TO data.

* Begin of modification - Takechi - 09.August.2016
  DATA flg_error   TYPE char1.
* End of modification - Takechi - 09.August.2016

  FIELD-SYMBOLS: &lt;lt_myextract&gt; TYPE ANY TABLE,
                 &lt;lw_myextract&gt; TYPE any,
                 &lt;lv_field&gt;     TYPE any.

  DATA(lo_tydesc) = cl_abap_typedescr=&gt;describe_by_data( extract[] ).
  CREATE DATA lr_data TYPE (lo_tydesc-&gt;absolute_name).
  ASSIGN lr_data-&gt;* TO &lt;lt_myextract&gt;.

* Begin of modification - Takechi - 09.August.2016
  CLEAR flg_error.
* End of modification - Takechi - 09.August.2016

  lt_master = lt_slave = &lt;lt_myextract&gt; = extract[].
  LOOP AT lt_master ASSIGNING FIELD-SYMBOL(&lt;lw_master&gt;).
    lv_master_index = sy-tabix.

    LOOP AT &lt;lt_myextract&gt; ASSIGNING &lt;lw_myextract&gt;.
      IF sy-tabix = lv_master_index .
        ASSIGN COMPONENT &apos;ACTION&apos; OF STRUCTURE &lt;lw_myextract&gt; TO &lt;lv_field&gt;.
        EXIT.
      ENDIF.
    ENDLOOP.
    IF &lt;lv_field&gt; IS ASSIGNED.
      IF &lt;lv_field&gt; = &apos;D&apos; OR &lt;lv_field&gt; IS INITIAL.
        UNASSIGN &lt;lv_field&gt;.
        CONTINUE.
      ENDIF.
    ENDIF.

    IF &lt;lw_master&gt;-begdt &gt; &lt;lw_master&gt;-enddt.
* Begin of modification - Takechi - 09.August.2016
*      MESSAGE e004(znaoc) WITH sy-tabix DISPLAY LIKE &apos;I&apos;.
      IF flg_error IS INITIAL.
        MESSAGE s004(znaoc) WITH sy-tabix DISPLAY LIKE &apos;E&apos;.
        flg_error = abap_true.
      ENDIF.
* End of modification - Takechi - 09.August.2016

    ENDIF.

    LOOP AT lt_slave ASSIGNING FIELD-SYMBOL(&lt;lw_slave&gt;) WHERE spart       = &lt;lw_master&gt;-spart
                                                          AND kunnr       = &lt;lw_master&gt;-kunnr
                                                          AND zzdeal_code = &lt;lw_master&gt;-zzdeal_code.
      lv_slave_index = sy-tabix.
      LOOP AT &lt;lt_myextract&gt; ASSIGNING &lt;lw_myextract&gt;.
        IF sy-tabix = lv_slave_index.
          ASSIGN COMPONENT &apos;ACTION&apos; OF STRUCTURE &lt;lw_myextract&gt; TO &lt;lv_field&gt;.
          EXIT.
        ENDIF.
      ENDLOOP.
      IF &lt;lv_field&gt; IS ASSIGNED.
        IF &lt;lv_field&gt; = &apos;D&apos;.
          UNASSIGN &lt;lv_field&gt;.
          CONTINUE.
        ENDIF.
      ENDIF.
      IF &lt;lw_slave&gt;-enddt = &lt;lw_master&gt;-enddt.
        CONTINUE.
      ENDIF.
      IF ( &lt;lw_slave&gt;-enddt &lt;= &lt;lw_master&gt;-enddt AND
           &lt;lw_slave&gt;-begdt &gt;= &lt;lw_master&gt;-begdt     ) OR
         ( &lt;lw_slave&gt;-begdt &lt;= &lt;lw_master&gt;-enddt AND
           &lt;lw_slave&gt;-enddt &gt;= &lt;lw_master&gt;-enddt     ) OR
         ( &lt;lw_slave&gt;-begdt &lt;= &lt;lw_master&gt;-begdt AND
           &lt;lw_slave&gt;-enddt &gt;= &lt;lw_master&gt;-begdt ).
* Begin of modification - Takechi - 09.August.2016
*        MESSAGE e002(znaoc) WITH lv_master_index sy-tabix DISPLAY LIKE &apos;I&apos;.
        IF flg_error IS INITIAL.
          MESSAGE s002(znaoc) WITH lv_master_index sy-tabix DISPLAY LIKE &apos;E&apos;.
          flg_error = abap_true.
        ENDIF.
* End of modification - Takechi - 09.August.2016
      ENDIF.
    ENDLOOP.
    UNASSIGN &lt;lv_field&gt;.
  ENDLOOP.

* Begin of modification - Takechi - 09.August.2016
  IF flg_error IS NOT INITIAL.
    &lt;status&gt;-upd_flag = &apos; &apos;. &quot;data not changed, save not required
  ENDIF.
* End of modification - Takechi - 09.August.2016

ENDFORM.


FORM zf_check_entry_dates.

  IF znaocv_qtd_ctrlh-begdt &gt; znaocv_qtd_ctrlh-enddt.
    CLEAR &lt;status&gt;-upd_flag.
    MESSAGE e004(znaoc) DISPLAY LIKE &apos;S&apos;.
  ENDIF.
ENDFORM.


FORM zf_delimit_consumption.
  DATA: lv_update   TYPE abap_bool,
        lv_date(10) TYPE c.

  PERFORM zf_check_comsumption_dates CHANGING lv_update.

  IF lv_update = abap_true.
    TRY .
        PERFORM zf_delimit_consumption_db USING znaocv_qtd_ctrlh_total-spart
                                                znaocv_qtd_ctrlh_total-kunnr
                                                znaocv_qtd_ctrlh_total-zzdeal_code
                                                znaocv_qtd_ctrlh-enddt
                                                znaocv_qtd_ctrlh_total-enddt.
      CATCH cx_sy_sql_error.
        CLEAR &lt;status&gt;-upd_flag.
        MESSAGE &apos;Fail when updating consumption.&apos;(M01) TYPE &apos;E&apos; DISPLAY LIKE &apos;S&apos;.
    ENDTRY.
  ELSE.
    CLEAR &lt;status&gt;-upd_flag.
    WRITE znaocv_qtd_ctrlh_total-enddt TO lv_date.
    MESSAGE e010(znaoc) WITH lv_date DISPLAY LIKE &apos;S&apos;.
  ENDIF.
ENDFORM.


FORM zf_clear_creation_data.

  CLEAR: znaocv_qtd_ctrlh-credat, znaocv_qtd_ctrlh-cretim, znaocv_qtd_ctrlh-creusr.

ENDFORM.


FORM zf_check_comsumption_dates CHANGING c_update TYPE abap_bool.

  c_update = abap_false.

  TRY .
      PERFORM zf_check_comsumption_dates_db USING znaocv_qtd_ctrlh_total-spart
                                                  znaocv_qtd_ctrlh_total-kunnr
                                                  znaocv_qtd_ctrlh_total-zzdeal_code
                                                  znaocv_qtd_ctrlh_total-enddt.
    CATCH cx_sy_sql_error.
      RETURN.
  ENDTRY.

  c_update = abap_true.

ENDFORM.
*&amp;---------------------------------------------------------------------*
*&amp;      Form  ZF_CHECK_COMSUMPTION_DATES_DB
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      --&gt;P_SPART        text
*      --&gt;P_KUNNR        text
*      --&gt;P_ZZDEAL_CODE  text
*      --&gt;P_ENDDT        text
*----------------------------------------------------------------------*
FORM zf_check_comsumption_dates_db  USING    p_spart       TYPE spart
                                             p_kunnr       TYPE kunnr
                                             p_zzdeal_code TYPE zgloc_deal_code
                                             p_enddt       TYPE znaoce_deal_end
                                    RAISING cx_sy_sql_error.

  SELECT COUNT(*)
    FROM znaoct_qtd_ctrld AS z
   INNER JOIN vbep AS p
      ON p~vbeln = z~vbeln
     AND p~posnr = z~posnr
    INTO @DATA(lv_counter)
   WHERE spart       = @p_spart
     AND kunnr       = @p_kunnr
     AND zzdeal_code = @p_zzdeal_code
     AND edatu       &gt; @p_enddt.
  IF lv_counter &lt;&gt; 0.
    RAISE EXCEPTION TYPE cx_sy_sql_error.
  ENDIF.
ENDFORM.
*&amp;---------------------------------------------------------------------*
*&amp;      Form  ZF_DELIMIT_CONSUMPTION_DB
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      --&gt;P_SPART        text
*      --&gt;P_KUNNR        text
*      --&gt;P_ZZDEAL_CODE  text
*      --&gt;P_OLD_ENDDT    text
*      --&gt;P_NEW_ENDDT    text
*----------------------------------------------------------------------*
FORM zf_delimit_consumption_db  USING    p_spart       TYPE spart
                                         p_kunnr       TYPE kunnr
                                         p_zzdeal_code TYPE zgloc_deal_code
                                         p_old_enddt   TYPE znaoce_deal_end
                                         p_new_enddt   TYPE znaoce_deal_end
                                RAISING cx_sy_sql_error.

  SELECT *
    FROM znaoct_qtd_ctrld
    INTO TABLE @DATA(lt_consumption)
   WHERE spart       = @p_spart
     AND kunnr       = @p_kunnr
     AND zzdeal_code = @p_zzdeal_code
     AND enddt       = @p_old_enddt.
  IF lt_consumption IS NOT INITIAL.
    DELETE znaoct_qtd_ctrld FROM TABLE lt_consumption.
    LOOP AT lt_consumption ASSIGNING FIELD-SYMBOL(&lt;lw_consumption&gt;).
      &lt;lw_consumption&gt;-enddt = p_new_enddt.
    ENDLOOP.
    SORT lt_consumption BY table_line.
    DELETE ADJACENT DUPLICATES FROM lt_consumption COMPARING table_line.
    TRY .
        INSERT znaoct_qtd_ctrld FROM TABLE lt_consumption.
      CATCH cx_sy_open_sql_db.
        TRY .
            DELETE znaoct_qtd_ctrld FROM TABLE lt_consumption.
            INSERT znaoct_qtd_ctrld FROM TABLE lt_consumption.
          CATCH cx_sy_open_sql_db.
            RAISE EXCEPTION TYPE cx_sy_sql_error.
        ENDTRY.
    ENDTRY.
  ENDIF.
ENDFORM.
*&amp;---------------------------------------------------------------------*
*&amp;      Form  Z_CHANGE_END_DATE
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  --&gt;  p1        text
*  &lt;--  p2        text
*----------------------------------------------------------------------*
FORM z_change_end_date .
  DATA: BEGIN OF lt_sval OCCURS 1.  &quot;fields for POPUP_GET_VALUES
          INCLUDE STRUCTURE sval.
  DATA: END OF lt_sval.
  DATA: lv_new_enddt TYPE znaoce_deal_end,
        lv_old_enddt TYPE znaoce_deal_end,
        lv_rc(1)     TYPE c,
        lv_date(10)  TYPE c,
        lr_data      TYPE REF TO data.
  FIELD-SYMBOLS: &lt;lt_myextract&gt;   TYPE ANY TABLE,
                 &lt;lv_spart&gt;       TYPE spart,
                 &lt;lv_kunnr&gt;       TYPE kunnr,
                 &lt;lv_zzdeal_code&gt; TYPE zgloc_deal_code.
  DEFINE lm_remove_new_entry.
    DELETE: total   INDEX l,
            extract INDEX l.
  END-OF-DEFINITION.

  &quot;1. Ensure there is one entry selected.
  IF mark_extract = 0.
    MESSAGE &apos;Select one entry.&apos;(M01) TYPE &apos;S&apos;.
    LEAVE SCREEN.
  ELSEIF mark_extract &gt; 1.
    MESSAGE &apos;Select only one entry&apos;(M02) TYPE &apos;S&apos;.
    LEAVE SCREEN.
  ENDIF.

  &quot;2. Get the new end date
  APPEND INITIAL LINE TO lt_sval ASSIGNING FIELD-SYMBOL(&lt;lw_sval&gt;).
  &lt;lw_sval&gt;-tabname   = &apos;ZNAOCV_QTD_CTRLH&apos;.
  &lt;lw_sval&gt;-fieldname = &apos;ENDDT&apos;.
  &lt;lw_sval&gt;-value     = sy-datlo.
  &lt;lw_sval&gt;-field_obl = abap_true.

  CALL FUNCTION &apos;POPUP_GET_VALUES&apos;
    EXPORTING
      popup_title     = &apos;Please, provide a new end date&apos;(T01)
      start_column    = &apos;10&apos;
      start_row       = &apos;10&apos;
    IMPORTING
      returncode      = lv_rc
    TABLES
      fields          = lt_sval[]
    EXCEPTIONS
      error_in_fields = 01.
  IF sy-subrc NE 0 OR lv_rc = &apos;A&apos;.
    RETURN.
  ENDIF.
  READ TABLE lt_sval ASSIGNING &lt;lw_sval&gt; INDEX 1.
  IF sy-subrc = 0.
    lv_new_enddt = &lt;lw_sval&gt;-value.
  ENDIF.
  &quot;3. Copy the selected records and change the end date
  DATA(lo_tydesc) = cl_abap_typedescr=&gt;describe_by_data( extract[] ).
  CREATE DATA lr_data TYPE (lo_tydesc-&gt;absolute_name).
  ASSIGN lr_data-&gt;* TO &lt;lt_myextract&gt;.
  &lt;lt_myextract&gt; = extract[].

  LOOP AT &lt;lt_myextract&gt; ASSIGNING FIELD-SYMBOL(&lt;lw_myextract&gt;).
    ASSIGN COMPONENT: &apos;MARK&apos;   OF STRUCTURE &lt;lw_myextract&gt; TO FIELD-SYMBOL(&lt;lv_mark&gt;),
                      &apos;ACTION&apos; OF STRUCTURE &lt;lw_myextract&gt; TO FIELD-SYMBOL(&lt;lv_action&gt;).
    IF &lt;lv_mark&gt; IS ASSIGNED AND &lt;lv_action&gt; IS ASSIGNED.
      IF &lt;lv_mark&gt; = markiert.
        &lt;lv_action&gt; = &apos;D&apos;.
      ENDIF.
    ENDIF.
  ENDLOOP.
  extract[] = &lt;lt_myextract&gt;.

  LOOP AT &lt;lt_myextract&gt; ASSIGNING &lt;lw_myextract&gt;.
    ASSIGN COMPONENT: &apos;MARK&apos;   OF STRUCTURE &lt;lw_myextract&gt; TO &lt;lv_mark&gt;,
                      &apos;ACTION&apos; OF STRUCTURE &lt;lw_myextract&gt; TO &lt;lv_action&gt;,
                      &apos;ENDDT&apos;  OF STRUCTURE &lt;lw_myextract&gt; TO FIELD-SYMBOL(&lt;lv_enddt&gt;).
    IF &lt;lv_mark&gt; IS ASSIGNED AND &lt;lv_action&gt; IS ASSIGNED AND &lt;lv_enddt&gt; IS ASSIGNED.
      IF &lt;lv_mark&gt; &lt;&gt; markiert.
        DELETE TABLE &lt;lt_myextract&gt; FROM &lt;lw_myextract&gt;.
        CONTINUE.
      ELSE.
        &lt;lv_mark&gt;   = space.
        &lt;lv_action&gt; = neuer_eintrag.
        IF lv_old_enddt IS INITIAL.
          lv_old_enddt = &lt;lv_enddt&gt;.
        ENDIF.
      ENDIF.
      &lt;lv_enddt&gt;  = lv_new_enddt.
    ELSE.
      CONTINUE.
    ENDIF.

    INSERT &lt;lw_myextract&gt; INTO: extract INDEX l,
                                total   INDEX l.
  ENDLOOP.
  &quot;4. Check dates
  &lt;status&gt;-upd_flag = &apos;X&apos;.
  PERFORM zf_dates_checking.
  IF &lt;status&gt;-upd_flag  IS INITIAL.
    lm_remove_new_entry.
    LEAVE SCREEN.
  ENDIF.
  &quot;5. Update the related consumption
  LOOP AT &lt;lt_myextract&gt; ASSIGNING &lt;lw_myextract&gt;.
    ASSIGN COMPONENT: &apos;SPART&apos;       OF STRUCTURE &lt;lw_myextract&gt; TO &lt;lv_spart&gt;,
                      &apos;KUNNR&apos;       OF STRUCTURE &lt;lw_myextract&gt; TO &lt;lv_kunnr&gt;,
                      &apos;ZZDEAL_CODE&apos; OF STRUCTURE &lt;lw_myextract&gt; TO &lt;lv_zzdeal_code&gt;,
                      &apos;ENDDT&apos;       OF STRUCTURE &lt;lw_myextract&gt; TO &lt;lv_enddt&gt;.
    TRY .
        PERFORM zf_check_comsumption_dates_db USING &lt;lv_spart&gt;
                                                    &lt;lv_kunnr&gt;
                                                    &lt;lv_zzdeal_code&gt;
                                                    lv_new_enddt.
      CATCH cx_sy_sql_error.
        CLEAR &lt;status&gt;-upd_flag.
        lm_remove_new_entry.
        WRITE lv_new_enddt TO lv_date.
        MESSAGE e010(znaoc) WITH lv_date DISPLAY LIKE &apos;S&apos;.
        LEAVE SCREEN.
    ENDTRY.
    TRY .
        PERFORM zf_delimit_consumption_db USING &lt;lv_spart&gt;
                                                &lt;lv_kunnr&gt;
                                                &lt;lv_zzdeal_code&gt;
                                                lv_old_enddt
                                                lv_new_enddt.
      CATCH cx_sy_sql_error.
        CLEAR &lt;status&gt;-upd_flag.
        MESSAGE &apos;Fail when updating consumption.&apos;(M01) TYPE &apos;E&apos; DISPLAY LIKE &apos;S&apos;.
        LEAVE SCREEN.
    ENDTRY.
  ENDLOOP.
  &quot;6. Delete the selected records
  SORT total[] BY table_line.
  PERFORM loeschen.

  extract[] = &lt;lt_myextract&gt;.
  MESSAGE &apos;End date changed.&apos;(M03) TYPE &apos;S&apos;.
ENDFORM.</include_source>
   </include>
   <include NAME="LZNAOCV_QTD_CTRLHI00" SQLX="X" EDTX="X" SUBC="I" LEVL="740" RLOAD="E">
    <include_source>*---------------------------------------------------------------------*
*    view related PAI modules
*   generation date: 16.12.2016 at 06:53:09
*   view maintenance generator version: #001407#
*---------------------------------------------------------------------*
*...processing: ZNAOCV_QTD_CTRLH................................*
*---------------------------------------------------------------------*
* MODULE COMPLETE_ZNAOCV_QTD_CTRLH
*---------------------------------------------------------------------*
MODULE COMPLETE_ZNAOCV_QTD_CTRLH.
PERFORM COMPLETE_EXPROFIELDS.
ENDMODULE.</include_source>
   </include>
   <include NAME="LZNAOCV_QTD_CTRLHI01" SQLX="X" VARCL="X" SUBC="I" APPL="S" RMAND="200" RLOAD="E" UCCHECK="X">
    <include_source>*----------------------------------------------------------------------*
***INCLUDE LZNAOCV_QTD_CTRLHI01.
*----------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*&amp;      Module  Z_CHANGE_END_DATE  INPUT
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE z_change_end_date INPUT.

  IF function = &apos;CENDT&apos;.
    PERFORM z_change_end_date.
    CLEAR: function, sy-ucomm.
  ENDIF.

ENDMODULE.</include_source>
   </include>
   <include NAME="LZNAOCV_QTD_CTRLHTOP" DBAPL="S" DBNA="D$" SUBC="I" APPL="S" RMAND="200" FIXPT="X" LDBNAME="D$S" UCCHECK="X">
    <include_source>* regenerated at 16.12.2016 06:53:09
FUNCTION-POOL ZNAOCV_QTD_CTRLH           MESSAGE-ID SV.

* INCLUDE LZNAOCV_QTD_CTRLHD...              &quot; Local class definition
  INCLUDE LSVIMDAT                                . &quot;general data decl.
  INCLUDE LZNAOCV_QTD_CTRLHT00                    . &quot;view rel. data dcl.</include_source>
   </include>
  </includeprograms>
  <functionmodules>
   <functionmodule NAME="VIEWFRAME_ZNAOCV_QTD_CTRLH" STEXT="Extended Table Maintenance: Upper Level">
    <importing PARAMETER="VIEW_ACTION" DEFAULT="&apos;S&apos;"/>
    <importing PARAMETER="VIEW_NAME" DBFIELD="DD02V-TABNAME"/>
    <importing PARAMETER="CORR_NUMBER" DBFIELD="E070-TRKORR" DEFAULT="&apos; &apos;"/>
    <tables PARAMETER="DBA_SELLIST" DBSTRUCT="VIMSELLIST"/>
    <tables PARAMETER="DPL_SELLIST" DBSTRUCT="VIMSELLIST"/>
    <tables PARAMETER="EXCL_CUA_FUNCT" DBSTRUCT="VIMEXCLFUN"/>
    <tables PARAMETER="X_HEADER" DBSTRUCT="VIMDESC"/>
    <tables PARAMETER="X_NAMTAB" DBSTRUCT="VIMNAMTAB"/>
    <exceptions EXCEPTION="NO_VALUE_FOR_SUBSET_IDENT"/>
    <exceptions EXCEPTION="MISSING_CORR_NUMBER"/>
    <documentation PARAMETER="VIEW_ACTION" KIND="P" STEXT="Aktion mit dem View: anzeigen/ändern (S/U)" INDEX=" 001"/>
    <documentation PARAMETER="VIEW_NAME" KIND="P" STEXT="Name des Views" INDEX=" 002"/>
    <documentation PARAMETER="CORR_NUMBER" KIND="P" STEXT="Korrekturnummer für durchgeführte Änderungen" INDEX=" 003"/>
    <documentation PARAMETER="DBA_SELLIST" KIND="P" STEXT="Selektionsbedingungen für den DB-Zugriff" INDEX=" 004"/>
    <documentation PARAMETER="DPL_SELLIST" KIND="P" STEXT="Selektionsbedingungen für die Anzeige" INDEX=" 005"/>
    <documentation PARAMETER="EXCL_CUA_FUNCT" KIND="P" STEXT="Tabelle mit dynam. zu deaktivierenden CUA-Funkt." INDEX=" 006"/>
    <documentation PARAMETER="X_HEADER" KIND="P" STEXT="Kontrollblocktabelle für den View" INDEX=" 007"/>
    <documentation PARAMETER="X_NAMTAB" KIND="P" STEXT="Kontrollblocktabelle für die View-Felder" INDEX=" 008"/>
    <documentation PARAMETER="NO_VALUE_FOR_SUBSET_IDENT" KIND="X" STEXT="für &apos;SUBSET&apos;-Feld wurde kein Wert vorgegeben" INDEX=" 009"/>
    <documentation PARAMETER="MISSING_CORR_NUMBER" KIND="X" STEXT="Korrekturnummer fehlt" INDEX=" 010"/>
    <fm_source>*---------------------------------------------------------------------*
*    program for:   VIEWFRAME_ZNAOCV_QTD_CTRLH
*   generation date: 16.12.2016 at 06:53:08
*   view maintenance generator version: #001407#
*---------------------------------------------------------------------*

  DATA: ENQUEUE_PROCESSED TYPE C. &quot;flag: view enqueued by VIEWFRAME_...

*-&lt;&lt;&lt;--------------------------------------------------------------&gt;&gt;&gt;&gt;*
* Entrypoint after changing maintenance mode (show &lt;--&gt; update)        *
*-&lt;&lt;&lt;--------------------------------------------------------------&gt;&gt;&gt;&gt;*
  DO.
*----------------------------------------------------------------------*
* Select data from database                                            *
*----------------------------------------------------------------------*
CALL FUNCTION &apos;VIEWPROC_ZNAOCV_QTD_CTRLH&apos;
         EXPORTING
              FCODE          = READ
              VIEW_ACTION    = VIEW_ACTION
              VIEW_NAME      = VIEW_NAME
         TABLES
              EXCL_CUA_FUNCT = EXCL_CUA_FUNCT
EXTRACT = ZNAOCV_QTD_CTRLH_EXTRACT
TOTAL = ZNAOCV_QTD_CTRLH_TOTAL
              X_HEADER       = X_HEADER
              X_NAMTAB       = X_NAMTAB
              DBA_SELLIST    = DBA_SELLIST
              DPL_SELLIST    = DPL_SELLIST
              CORR_KEYTAB    = E071K_TAB
         EXCEPTIONS
              MISSING_CORR_NUMBER       = 1
              NO_VALUE_FOR_SUBSET_IDENT = 2.
    CASE SY-SUBRC.
      WHEN 1.
        RAISE MISSING_CORR_NUMBER.
      WHEN 2.
        RAISE NO_VALUE_FOR_SUBSET_IDENT.
    ENDCASE.
*-&lt;&lt;&lt;--------------------------------------------------------------&gt;&gt;&gt;&gt;*
* Entrypoint after saving data into database                           *
* Entrypoint after refreshing selected entries from database           *
*-&lt;&lt;&lt;--------------------------------------------------------------&gt;&gt;&gt;&gt;*
    DO.
*----------------------------------------------------------------------*
* Edit data                                                            *
*----------------------------------------------------------------------*
      DO.
CALL FUNCTION &apos;VIEWPROC_ZNAOCV_QTD_CTRLH&apos;
             EXPORTING
                  FCODE           = EDIT
                  VIEW_ACTION     = MAINT_MODE
                  VIEW_NAME       = VIEW_NAME
                  CORR_NUMBER     = CORR_NUMBER
             IMPORTING
                  UCOMM           = FUNCTION
UPDATE_REQUIRED = STATUS_ZNAOCV_QTD_CTRLH-UPD_FLAG
             TABLES
                  EXCL_CUA_FUNCT  = EXCL_CUA_FUNCT
EXTRACT = ZNAOCV_QTD_CTRLH_EXTRACT
TOTAL = ZNAOCV_QTD_CTRLH_TOTAL
                  X_HEADER        = X_HEADER
                  X_NAMTAB        = X_NAMTAB
                  DBA_SELLIST     = DBA_SELLIST
                  DPL_SELLIST     = DPL_SELLIST
                  CORR_KEYTAB     = E071K_TAB
             EXCEPTIONS
                  MISSING_CORR_NUMBER       = 1
                  NO_VALUE_FOR_SUBSET_IDENT = 2.
        CASE SY-SUBRC.
          WHEN 1.
            IF MAINT_MODE EQ TRANSPORTIEREN AND VIEW_ACTION EQ AENDERN.
              MOVE VIEW_ACTION TO MAINT_MODE.
            ELSE.
              PERFORM BEFORE_LEAVING_FRAME_FUNCTION
                                         USING X_HEADER-FRM_BF_END.
              RAISE MISSING_CORR_NUMBER.
            ENDIF.
          WHEN 2.
            RAISE NO_VALUE_FOR_SUBSET_IDENT.
          WHEN OTHERS.
            EXIT.
        ENDCASE.
      ENDDO.
*----------------------------------------------------------------------*
*  Handle usercommands...                                              *
*  ...at first handle commands which could cause loss of data          *
*----------------------------------------------------------------------*
      IF FUNCTION EQ BACK. FUNCTION = END. ENDIF.
      IF ( FUNCTION EQ SWITCH_TO_SHOW_MODE OR
           FUNCTION EQ GET_ANOTHER_VIEW    OR
           FUNCTION EQ SWITCH_TRANSP_TO_UPD_MODE OR
           FUNCTION EQ END ) AND
STATUS_ZNAOCV_QTD_CTRLH-UPD_FLAG NE SPACE.
        PERFORM BEENDEN.
        CASE SY-SUBRC.
          WHEN 0.
CALL FUNCTION &apos;VIEWPROC_ZNAOCV_QTD_CTRLH&apos;
                  EXPORTING
                      FCODE           = SAVE
                      VIEW_ACTION     = MAINT_MODE
                      VIEW_NAME       = VIEW_NAME
                      CORR_NUMBER     = CORR_NUMBER
                  IMPORTING
UPDATE_REQUIRED = STATUS_ZNAOCV_QTD_CTRLH-UPD_FLAG
                  TABLES
                      EXCL_CUA_FUNCT  = EXCL_CUA_FUNCT
EXTRACT = ZNAOCV_QTD_CTRLH_EXTRACT
TOTAL = ZNAOCV_QTD_CTRLH_TOTAL
                      X_HEADER        = X_HEADER
                      X_NAMTAB        = X_NAMTAB
                      DBA_SELLIST     = DBA_SELLIST
                      DPL_SELLIST     = DPL_SELLIST
                      CORR_KEYTAB     = E071K_TAB
                  EXCEPTIONS
                      MISSING_CORR_NUMBER       = 1
                      NO_VALUE_FOR_SUBSET_IDENT = 2
                      SAVING_CORRECTION_FAILED  = 3.
            CASE SY-SUBRC.
              WHEN 0.
IF STATUS_ZNAOCV_QTD_CTRLH-UPD_FLAG EQ SPACE. EXIT. ENDIF.
              WHEN 1. RAISE MISSING_CORR_NUMBER.
              WHEN 2. RAISE NO_VALUE_FOR_SUBSET_IDENT.
              WHEN 3.
            ENDCASE.
          WHEN 8. EXIT.
          WHEN 12.
        ENDCASE.
*----------------------------------------------------------------------*
*  ...2nd: transport request                                           *
*----------------------------------------------------------------------*
      ELSEIF FUNCTION EQ TRANSPORT.
IF STATUS_ZNAOCV_QTD_CTRLH-UPD_FLAG NE SPACE.
          PERFORM TRANSPORTIEREN.
          CASE SY-SUBRC.
            WHEN 0.
CALL FUNCTION &apos;VIEWPROC_ZNAOCV_QTD_CTRLH&apos;
                    EXPORTING
                        FCODE           = SAVE
                        VIEW_ACTION     = MAINT_MODE
                        VIEW_NAME       = VIEW_NAME
                        CORR_NUMBER     = CORR_NUMBER
                    IMPORTING
                              UPDATE_REQUIRED =
STATUS_ZNAOCV_QTD_CTRLH-UPD_FLAG
                    TABLES
                        EXCL_CUA_FUNCT  = EXCL_CUA_FUNCT
EXTRACT = ZNAOCV_QTD_CTRLH_EXTRACT
TOTAL = ZNAOCV_QTD_CTRLH_TOTAL
                        X_HEADER        = X_HEADER
                        X_NAMTAB        = X_NAMTAB
                        DBA_SELLIST     = DBA_SELLIST
                        DPL_SELLIST     = DPL_SELLIST
                        CORR_KEYTAB     = E071K_TAB
                    EXCEPTIONS
                        MISSING_CORR_NUMBER       = 1
                        NO_VALUE_FOR_SUBSET_IDENT = 2
                        SAVING_CORRECTION_FAILED  = 3.
              CASE SY-SUBRC.
                WHEN 0. MAINT_MODE = TRANSPORTIEREN.
                WHEN 1. RAISE MISSING_CORR_NUMBER.
                WHEN 2. RAISE NO_VALUE_FOR_SUBSET_IDENT.
                WHEN 3.
              ENDCASE.
            WHEN 8.
              EXIT.
            WHEN 12.
          ENDCASE.
        ELSE.
          MAINT_MODE = TRANSPORTIEREN.
        ENDIF.
*----------------------------------------------------------------------*
*  ...now reset or save requests                                       *
*----------------------------------------------------------------------*
      ELSEIF FUNCTION EQ RESET_LIST  OR
             FUNCTION EQ RESET_ENTRY OR
             FUNCTION EQ SAVE.
*----------------------------------------------------------------------*
*  Refresh selected entries from database or save data into database   *
*----------------------------------------------------------------------*
CALL FUNCTION &apos;VIEWPROC_ZNAOCV_QTD_CTRLH&apos;
             EXPORTING
                  FCODE               = FUNCTION
                  VIEW_ACTION         = MAINT_MODE
                  VIEW_NAME           = VIEW_NAME
                  CORR_NUMBER         = CORR_NUMBER
             IMPORTING
UPDATE_REQUIRED = STATUS_ZNAOCV_QTD_CTRLH-UPD_FLAG
             TABLES
                  EXCL_CUA_FUNCT      = EXCL_CUA_FUNCT
EXTRACT = ZNAOCV_QTD_CTRLH_EXTRACT
TOTAL = ZNAOCV_QTD_CTRLH_TOTAL
                  X_HEADER            = X_HEADER
                  X_NAMTAB            = X_NAMTAB
                  DBA_SELLIST         = DBA_SELLIST
                  DPL_SELLIST         = DPL_SELLIST
                  CORR_KEYTAB         = E071K_TAB
             EXCEPTIONS
                  MISSING_CORR_NUMBER       = 1
                  NO_VALUE_FOR_SUBSET_IDENT = 2
                  SAVING_CORRECTION_FAILED  = 3.
        CASE SY-SUBRC.
          WHEN 1. RAISE MISSING_CORR_NUMBER.
          WHEN 2. RAISE NO_VALUE_FOR_SUBSET_IDENT.
          WHEN 3.
        ENDCASE.
      ELSE.
        EXIT.
      ENDIF.
    ENDDO.
*----------------------------------------------------------------------*
*  ...now other commands...                                            *
*----------------------------------------------------------------------*
    CASE FUNCTION.
      WHEN SWITCH_TO_SHOW_MODE.
*     change maintenance mode from update to show
        PERFORM ENQUEUE USING &apos;D&apos; X_HEADER-FRM_AF_ENQ.    &quot;dequeue view
        CLEAR ENQUEUE_PROCESSED.
        VIEW_ACTION = ANZEIGEN.
      WHEN SWITCH_TO_UPDATE_MODE.
*     change maintenance mode from show to update
        PERFORM ENQUEUE USING &apos;E&apos; X_HEADER-FRM_AF_ENQ.    &quot;enqueue view
        IF SY-SUBRC EQ 0.
          MOVE &apos;X&apos; TO ENQUEUE_PROCESSED.
          VIEW_ACTION = AENDERN.
        ENDIF.
      WHEN SWITCH_TRANSP_TO_UPD_MODE.
*     change maintenance mode from transport to update
        VIEW_ACTION = AENDERN.
      WHEN TRANSPORT.
*     change maintenance mode from update to transport
        VIEW_ACTION = TRANSPORTIEREN.
      WHEN OTHERS.
        IF ENQUEUE_PROCESSED NE SPACE.
          PERFORM ENQUEUE USING &apos;D&apos; X_HEADER-FRM_AF_ENQ.  &quot;dequeue view
        ENDIF.
        PERFORM BEFORE_LEAVING_FRAME_FUNCTION USING X_HEADER-FRM_BF_END.
        EXIT.
    ENDCASE.
  ENDDO.</fm_source>
    <functionModuleDocumentation/>
   </functionmodule>
   <functionmodule NAME="VIEWPROC_ZNAOCV_QTD_CTRLH" GLOBAL="X" STEXT="Lower-level extended table maintenance">
    <importing PARAMETER="FCODE" DEFAULT="&apos;RDED&apos;"/>
    <importing PARAMETER="VIEW_ACTION" DEFAULT="&apos;S&apos;"/>
    <importing PARAMETER="VIEW_NAME" DBFIELD="DD02V-TABNAME"/>
    <importing PARAMETER="CORR_NUMBER" DBFIELD="E070-TRKORR" DEFAULT="&apos; &apos;"/>
    <exporting PARAMETER="LAST_ACT_ENTRY"/>
    <exporting PARAMETER="UCOMM"/>
    <exporting PARAMETER="UPDATE_REQUIRED"/>
    <tables PARAMETER="CORR_KEYTAB" DBSTRUCT="E071K"/>
    <tables PARAMETER="DBA_SELLIST" DBSTRUCT="VIMSELLIST"/>
    <tables PARAMETER="DPL_SELLIST" DBSTRUCT="VIMSELLIST"/>
    <tables PARAMETER="EXCL_CUA_FUNCT" DBSTRUCT="VIMEXCLFUN"/>
    <tables PARAMETER="EXTRACT"/>
    <tables PARAMETER="TOTAL"/>
    <tables PARAMETER="X_HEADER" DBSTRUCT="VIMDESC"/>
    <tables PARAMETER="X_NAMTAB" DBSTRUCT="VIMNAMTAB"/>
    <exceptions EXCEPTION="NO_VALUE_FOR_SUBSET_IDENT"/>
    <exceptions EXCEPTION="MISSING_CORR_NUMBER"/>
    <exceptions EXCEPTION="SAVING_CORRECTION_FAILED"/>
    <documentation PARAMETER="FCODE" KIND="P" STEXT="gewünschte Funktion des Bausteins" INDEX=" 001"/>
    <documentation PARAMETER="VIEW_ACTION" KIND="P" STEXT="Aktion mit dem View: anzeigen/ändern (S/U)" INDEX=" 002"/>
    <documentation PARAMETER="VIEW_NAME" KIND="P" STEXT="Name des Views" INDEX=" 003"/>
    <documentation PARAMETER="CORR_NUMBER" KIND="P" STEXT="Korrekturnummer für durchgeführte Änderungen" INDEX=" 004"/>
    <documentation PARAMETER="LAST_ACT_ENTRY" KIND="P" STEXT="Index der Cursorposition in der Anzeigetabelle" INDEX=" 005"/>
    <documentation PARAMETER="UCOMM" KIND="P" STEXT="letztes User-command innerhalb der Viewpflege" INDEX=" 006"/>
    <documentation PARAMETER="UPDATE_REQUIRED" KIND="P" STEXT="Flag: Einträge verändert, Sichern erforderlich" INDEX=" 007"/>
    <documentation PARAMETER="CORR_KEYTAB" KIND="P" STEXT="Tabelle mit den Keys der zu transport. Einträge" INDEX=" 008"/>
    <documentation PARAMETER="DBA_SELLIST" KIND="P" STEXT="Selektionsbedingungen für den DB-Zugriff" INDEX=" 009"/>
    <documentation PARAMETER="DPL_SELLIST" KIND="P" STEXT="Selektionsbedingungen für die Anzeige" INDEX=" 010"/>
    <documentation PARAMETER="EXCL_CUA_FUNCT" KIND="P" STEXT="Tab. der nicht zu aktivierenden CUA-Funktionen" INDEX=" 011"/>
    <documentation PARAMETER="EXTRACT" KIND="P" STEXT="Tab. der gerade sichtbaren Daten (Anzeigetabelle" INDEX=" 012"/>
    <documentation PARAMETER="TOTAL" KIND="P" STEXT="Tabelle, mit allen von der DB gelesenen Daten" INDEX=" 013"/>
    <documentation PARAMETER="X_HEADER" KIND="P" STEXT="Kontrollblocktabelle für den View" INDEX=" 014"/>
    <documentation PARAMETER="X_NAMTAB" KIND="P" STEXT="Kontrollblocktabelle für die View-Felder" INDEX=" 015"/>
    <documentation PARAMETER="NO_VALUE_FOR_SUBSET_IDENT" KIND="X" STEXT="für ein &apos;SUBSET&apos;-Feld wurde kein Wert vorgegeben" INDEX=" 016"/>
    <documentation PARAMETER="MISSING_CORR_NUMBER" KIND="X" STEXT="Korrekturnummer fehlt" INDEX=" 017"/>
    <documentation PARAMETER="SAVING_CORRECTION_FAILED" KIND="X" STEXT="Fehler beim Sichern der Korrektureinträge" INDEX=" 018"/>
    <fm_source>*---------------------------------------------------------------------*
*    program for:   VIEWPROC_ZNAOCV_QTD_CTRLH
*   generation date: 16.12.2016 at 06:53:09
*   view maintenance generator version: #001407#
*---------------------------------------------------------------------*
*----------------------------------------------------------------------*
* Initialization: set field-symbols etc.                               *
*----------------------------------------------------------------------*
   IF LAST_VIEW_INFO NE VIEW_NAME.
ASSIGN ZNAOCV_QTD_CTRLH TO &lt;TABLE1&gt;.
ASSIGN *ZNAOCV_QTD_CTRLH TO &lt;INITIAL&gt;.
ASSIGN STATUS_ZNAOCV_QTD_CTRLH TO &lt;STATUS&gt;.
     PERFORM INITIALISIEREN.
   ENDIF.
   PERFORM JUSTIFY_ACTION_MODE.
   MOVE: VIEW_ACTION TO MAINT_MODE,
         CORR_NUMBER TO CORR_NBR.

*----------------------------------------------------------------------*
* Get data from database                                               *
*----------------------------------------------------------------------*
  IF FCODE EQ READ OR FCODE EQ READ_AND_EDIT.
    PERFORM PREPARE_READ_REQUEST.
    IF X_HEADER-FRM_RP_GET NE SPACE.
            PERFORM (X_HEADER-FRM_RP_GET) IN PROGRAM.
    ELSE.
PERFORM GET_DATA_ZNAOCV_QTD_CTRLH.
    ENDIF.
    IF FCODE EQ READ_AND_EDIT. FCODE = EDIT. ENDIF.
  ENDIF.

  CASE FCODE.
    WHEN  EDIT.                          &quot; Edit read data
      PERFORM CALL_DYNPRO.
      PERFORM CHECK_UPD.
*....................................................................*

    WHEN SAVE.                           &quot; Write data into database
      PERFORM PREPARE_SAVING.
      IF &lt;STATUS&gt;-UPD_FLAG NE SPACE.
        IF X_HEADER-FRM_RP_UPD NE SPACE.
          PERFORM (X_HEADER-FRM_RP_UPD) IN PROGRAM.
        ELSE.
          IF SY-SUBRC EQ 0.
PERFORM DB_UPD_ZNAOCV_QTD_CTRLH.
          ENDIF.
        ENDIF.
        PERFORM AFTER_SAVING.
      ENDIF.
*....................................................................*

    WHEN RESET_LIST.     &quot; Refresh all marked entries of EXTRACT from db
      PERFORM RESET_ENTRIES USING LIST_BILD.
*....................................................................*

    WHEN RESET_ENTRY.               &quot; Refresh single entry from database
      PERFORM RESET_ENTRIES USING DETAIL_BILD.
*.......................................................................
  ENDCASE.
MOVE STATUS_ZNAOCV_QTD_CTRLH-UPD_FLAG TO UPDATE_REQUIRED.</fm_source>
    <functionModuleDocumentation/>
   </functionmodule>
  </functionmodules>
 </FUGR>
 <PROG NAME="ZNAOCR_DEAL_QTY_CLEANING" VARCL="X" SUBC="1" APPL="Z" RSTAT="K" RMAND="200" RLOAD="E" FIXPT="X" UCCHECK="X">
  <textPool>
   <language SPRAS="E">
    <textElement ID="I" KEY="001" ENTRY="Selection arguments" LENGTH="29 "/>
    <textElement ID="I" KEY="002" ENTRY="Removed entries:" LENGTH="26 "/>
    <textElement ID="I" KEY="003" ENTRY="No orphan entries found" LENGTH="46 "/>
    <textElement ID="R" ENTRY="Deal code cleaning" LENGTH="18 "/>
    <textElement ID="S" KEY="S_DEALC" ENTRY="        Deal code" LENGTH="17 "/>
    <textElement ID="S" KEY="S_ENDDT" ENTRY="        Expiration date" LENGTH="23 "/>
    <textElement ID="S" KEY="S_KUNNR" ENTRY="D       ." LENGTH="16 "/>
    <textElement ID="S" KEY="S_SPART" ENTRY="D       ." LENGTH="16 "/>
   </language>
  </textPool>
  <source>*&amp;---------------------------------------------------------------------*
*&amp; Report  ZNAOCR_DEAL_QTY_SETTING
*&amp;
*&amp;---------------------------------------------------------------------*
*&amp;
*&amp;
*&amp;---------------------------------------------------------------------*
REPORT znaocr_deal_qty_cleaning.
DATA: gt_sellist TYPE scprvimsellist,
      gt_removed TYPE znaoctt_qtd_ctrld,
      spart      TYPE spart,
      kunnr      TYPE kunnr,
      dealc      TYPE zgloc_deal_code,
      enddt      TYPE vim_endda.

SELECTION-SCREEN BEGIN OF BLOCK b1 WITH FRAME TITLE text-001.
SELECT-OPTIONS: s_spart FOR spart,
                s_kunnr FOR kunnr,
                s_dealc FOR dealc,
                s_enddt FOR enddt.
SELECTION-SCREEN END OF BLOCK b1.

DEFINE m_add_select_option.
  IF &amp;2 is NOT INITIAL.
  CALL FUNCTION &apos;VIEW_RANGETAB_TO_SELLIST&apos;
    EXPORTING
      fieldname = &amp;1
      APPEND_CONJUNCTION = &amp;3
    TABLES
      sellist   = gt_sellist
      rangetab  = &amp;2[].

  ENDIF.
END-OF-DEFINITION.

START-OF-SELECTION.
  m_add_select_option: &apos;SPART&apos;       s_spart  space,
                       &apos;KUNNR&apos;       s_kunnr &apos;AND&apos;,
                       &apos;ZZDEAL_CODE&apos; s_dealc &apos;AND&apos;,
                       &apos;ENDDT&apos;       s_enddt &apos;AND&apos;.

END-OF-SELECTION.
  CALL FUNCTION &apos;ZNAOC_DEAL_QTY_CLEANING_UP&apos;
    EXPORTING
      it_sellist = gt_sellist
    IMPORTING
      et_removed = gt_removed.


  IF gt_removed IS NOT INITIAL.
    WRITE &apos;Removed entries: &apos;(002).
    LOOP AT gt_removed ASSIGNING FIELD-SYMBOL(&lt;gw_removed&gt;).
      WRITE: /20 &lt;gw_removed&gt;-mandt, &lt;gw_removed&gt;-spart, &lt;gw_removed&gt;-kunnr, &lt;gw_removed&gt;-zzdeal_code,
                 &lt;gw_removed&gt;-enddt, &lt;gw_removed&gt;-vbeln, &lt;gw_removed&gt;-posnr, &lt;gw_removed&gt;-qtd_ordered,
                 &lt;gw_removed&gt;-rejected.
    ENDLOOP.
  else.
    WRITE &apos;No orphan entries found&apos;(003).
  ENDIF.</source>
 </PROG>
 <TTYP TYPENAME="ZNAOCTT_QTD_CTRLD" DDLANGUAGE="E" ROWTYPE="ZNAOCT_QTD_CTRLD" ROWKIND="S" DATATYPE="STRU" LENG="000000" DECIMALS="000000" ACCESSMODE="T" KEYDEF="K" KEYKIND="N" KEYFDCOUNT="0007" DDTEXT="Table of ZNAOCT_QTD_CTRLD" TYPELEN="000098" CTLENG="000000" CTDECIMALS="000000" OCCURS="00000">
  <dd42v TYPENAME="ZNAOCTT_QTD_CTRLD" KEYFDPOS="0001" ROWTYPEPOS="0001" KEYFIELD="MANDT"/>
  <dd42v TYPENAME="ZNAOCTT_QTD_CTRLD" KEYFDPOS="0002" ROWTYPEPOS="0002" KEYFIELD="SPART"/>
  <dd42v TYPENAME="ZNAOCTT_QTD_CTRLD" KEYFDPOS="0003" ROWTYPEPOS="0003" KEYFIELD="KUNNR"/>
  <dd42v TYPENAME="ZNAOCTT_QTD_CTRLD" KEYFDPOS="0004" ROWTYPEPOS="0004" KEYFIELD="ZZDEAL_CODE"/>
  <dd42v TYPENAME="ZNAOCTT_QTD_CTRLD" KEYFDPOS="0005" ROWTYPEPOS="0005" KEYFIELD="ENDDT"/>
  <dd42v TYPENAME="ZNAOCTT_QTD_CTRLD" KEYFDPOS="0006" ROWTYPEPOS="0006" KEYFIELD="VBELN"/>
  <dd42v TYPENAME="ZNAOCTT_QTD_CTRLD" KEYFDPOS="0007" ROWTYPEPOS="0007" KEYFIELD="POSNR"/>
 </TTYP>
</nugget>
