<?xml version="1.0" encoding="utf-8"?>
<nugget name="CHB_REFRESH_ON_DYNAMIC_TABLE">
 <CLAS CLSNAME="ZCL_WM_PARM_INV_STRG_LCTN_PRIT" VERSION="1" LANGU="E" DESCRIPT="INV_STG_LCT_PRT retriever" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" MSG_ID="ZWM" WITH_UNIT_TESTS="X" DURATION_TYPE="0 " RISK_LEVEL="0 " ZSAPLINK_PLUGIN_MAJOR_VERSION="0 " ZSAPLINK_PLUGIN_MINOR_VERSION="1 " ZSAPLINK_PLUGIN_BUILD_VERSION="0 " ZSAPLINK_PLUGIN_INFO1="ZSAPLINK_CLASS is part of the main ZSAPLINK project --&gt; This plugin found there instead of ZSAPLINK_PLUGINS projects" ZSAPLINK_PLUGIN_INFO2="SAPLINK homepage: https://www.assembla.com/spaces/saplink/wiki" ZSAPLINK_PLUGIN_INFO3="Download from https://www.assembla.com/code/saplink/subversion/nodes" ZSAPLINK_PLUGIN_INFO4="and navigate to:  trunk -&gt; core -&gt; ZSAPLINK -&gt; CLAS -&gt; ZSAPLINK_CLASS.slnk">
  <types CLSNAME="ZCL_WM_PARM_INV_STRG_LCTN_PRIT" CMPNAME="YS_RUNTIME" VERSION="1" LANGU="E" DESCRIPT="Runtime data" EXPOSURE="2" STATE="1" EDITORDER="1 " TYPTYPE="4" SRCROW1="16 " SRCCOLUMN1="6 " SRCROW2="22 " SRCCOLUMN2="33 " TYPESRC_LENG="0 " TYPESRC="BEGIN OF ys_runtime,
                    warehouse_number TYPE lgnum,
                    storage_type     TYPE lgtyp,
                    plant            TYPE werks_d,
                    storage_location TYPE lgort_d,
                    priority         TYPE zwm_de_priority,
                 END OF ys_runtime
"/>
  <types CLSNAME="ZCL_WM_PARM_INV_STRG_LCTN_PRIT" CMPNAME="YT_RUNTIME" VERSION="1" LANGU="E" DESCRIPT="List of runtime data" EXPOSURE="2" STATE="1" EDITORDER="2 " TYPTYPE="4" SRCROW1="24 " SRCCOLUMN1="6 " SRCROW2="24 " SRCCOLUMN2="49 " TYPESRC_LENG="0 " TYPESRC="yt_runtime TYPE STANDARD TABLE OF ys_runtime
"/>
  <implementing CLSNAME="ZCL_WM_PARM_INV_STRG_LCTN_PRIT" REFCLSNAME="ZIF_WM_PARAMETER_RETRIEVER" VERSION="1" EXPOSURE="2" STATE="1" RELTYPE="1" EDITORDER="1 "/>
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations

CLASS lcl_db IMPLEMENTATION.
  METHOD query_ztbwm_pm_inv_slp_tcode.

    CLEAR et_data.
    SELECT warehouse_number storage_type plant storage_location priority
      FROM ztbwm_pm_inv_slp AS setting
*      LEFT OUTER JOIN t001l AS stl
*       ON stl~werks = setting~plant
*      AND stl~lgort = setting~storage_location
      INTO TABLE et_data
     WHERE parameter_id = zcl_wm_parm_inv_strg_lctn_prit=&gt;c_inv_stg_lct_prt
       AND transaction_code = i_transaction_code
     ORDER BY priority.
    IF sy-subrc &lt;&gt; 0.
      RAISE EXCEPTION TYPE cx_sy_sql_error.
    ENDIF.
  ENDMETHOD.                    &quot;query_ztbwm_pm_inv_slp_tcode
  METHOD query_ztbwm_pm_inv_slp.

    CLEAR et_data.
    SELECT warehouse_number storage_type plant storage_location priority
      FROM ztbwm_pm_inv_slp AS setting
*      LEFT OUTER JOIN t001l AS stl
*       ON stl~werks = setting~plant
*      AND stl~lgort = setting~storage_location
      INTO TABLE et_data
     WHERE parameter_id = zcl_wm_parm_inv_strg_lctn_prit=&gt;c_inv_stg_lct_prt
     ORDER BY priority.
    IF sy-subrc &lt;&gt; 0.
      RAISE EXCEPTION TYPE cx_sy_sql_error.
    ENDIF.
  ENDMETHOD.                    &quot;query_ztbwm_pm_inv_slp
ENDCLASS.                    &quot;lcl_db IMPLEMENTATION</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section

CLASS lcl_db DEFINITION.
  PUBLIC SECTION.
    METHODS:
      query_ztbwm_pm_inv_slp_tcode IMPORTING i_transaction_code TYPE tcode
                                   EXPORTING et_data            TYPE zcl_wm_parm_inv_strg_lctn_prit=&gt;yt_runtime
                                   RAISING   cx_sy_sql_error,
      query_ztbwm_pm_inv_slp       EXPORTING et_data            TYPE zcl_wm_parm_inv_strg_lctn_prit=&gt;yt_runtime
                                   RAISING   cx_sy_sql_error.
ENDCLASS.                    &quot;lcl_db DEFINITION</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <localTestClasses>*&quot;* use this source file for your ABAP unit test classes
CLASS: lct_tcode_provided_not_found DEFINITION DEFERRED,
       lct_tcode_provided_ok        DEFINITION DEFERRED,
       lct_notcode_nothing_found    DEFINITION DEFERRED,
       lct_notcode_ok               DEFINITION DEFERRED.
CLASS zcl_wm_parm_inv_strg_lctn_prit       DEFINITION LOCAL FRIENDS lct_tcode_provided_not_found
                                                                    lct_tcode_provided_ok
                                                                    lct_notcode_nothing_found
                                                                    lct_notcode_ok.
* Helper classes
*----------------------------------------------------------------------*
*       CLASS lcl_db_tcode_not_found DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_db_tcode_not_found DEFINITION INHERITING FROM lcl_db.
  PUBLIC SECTION.
    METHODS
      query_ztbwm_pm_inv_slp_tcode REDEFINITION.
ENDCLASS.                    &quot;lcl_db_tcode_not_found DEFINITION
*----------------------------------------------------------------------*
*       CLASS lcl_db_tcode_not_found IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_db_tcode_not_found IMPLEMENTATION.
  METHOD query_ztbwm_pm_inv_slp_tcode.
    RAISE EXCEPTION TYPE cx_sy_sql_error.
  ENDMETHOD.                    &quot;query_ztbwm_pm_inv_slp_TCODE
ENDCLASS.                    &quot;lcl_db_tcode_not_found IMPLEMENTATION
*----------------------------------------------------------------------*
*       CLASS lcl_db_tcode_found DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_db_tcode_found DEFINITION INHERITING FROM lcl_db.
  PUBLIC SECTION.
    METHODS
      query_ztbwm_pm_inv_slp_tcode REDEFINITION.
ENDCLASS.                    &quot;lcl_db_tcode_found DEFINITION
*----------------------------------------------------------------------*
*       CLASS lcl_db_tcode_found IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_db_tcode_found IMPLEMENTATION.
  METHOD query_ztbwm_pm_inv_slp_tcode.
    FIELD-SYMBOLS &lt;ls_data&gt; LIKE LINE OF et_data.

    APPEND INITIAL LINE TO et_data ASSIGNING &lt;ls_data&gt;.
    &lt;ls_data&gt;-plant            = &apos;XPTO&apos;.
    &lt;ls_data&gt;-storage_location = &apos;XPTO&apos;.
  ENDMETHOD.                    &quot;QUERY_ztbwm_prmt_trnf_TCODE
ENDCLASS.                    &quot;lcl_db_tcode_found IMPLEMENTATION

CLASS lcl_db_notcode_not_found DEFINITION INHERITING FROM lcl_db.
  PUBLIC SECTION.
    METHODS query_ztbwm_pm_inv_slp REDEFINITION.
ENDCLASS.
CLASS lcl_db_notcode_not_found IMPLEMENTATION.
  METHOD query_ztbwm_pm_inv_slp.
    RAISE EXCEPTION TYPE cx_sy_sql_error.
  ENDMETHOD.
ENDCLASS.
CLASS lcl_db_notcode_found DEFINITION INHERITING FROM lcl_db.
  PUBLIC SECTION.
    METHODS
        query_ztbwm_pm_inv_slp REDEFINITION.
ENDCLASS.
CLASS lcl_db_notcode_found IMPLEMENTATION.
  METHOD query_ztbwm_pm_inv_slp.
    FIELD-SYMBOLS &lt;ls_data&gt; LIKE LINE OF et_data.

    APPEND INITIAL LINE TO et_data ASSIGNING &lt;ls_data&gt;.
    &lt;ls_data&gt;-plant            = &apos;XPTO&apos;.
    &lt;ls_data&gt;-storage_location = &apos;XPTO&apos;.
  ENDMETHOD.
ENDCLASS.
&quot;Test classes
CLASS lcl_tester DEFINITION ABSTRACT.
  PROTECTED SECTION.
    DATA
        mr_cut TYPE REF TO zcl_wm_parm_inv_strg_lctn_prit.
ENDCLASS.
CLASS lct_tcode_provided_not_found DEFINITION INHERITING FROM lcl_tester FINAL
                                   FOR TESTING
                                   RISK LEVEL HARMLESS
                                   DURATION SHORT.
  PRIVATE SECTION.
    METHODS:
        setup,
        tst_tcode_provided_not_found FOR TESTING.
ENDCLASS.
CLASS lct_tcode_provided_not_found IMPLEMENTATION.
  METHOD setup.
    DATA lr_db TYPE REF TO lcl_db_tcode_not_found.

    CREATE OBJECT: me-&gt;mr_cut,
                   lr_db.
    me-&gt;mr_cut-&gt;mr_db = lr_db.
  ENDMETHOD.
  METHOD tst_tcode_provided_not_found.
    DATA: lr_data  TYPE REF TO data,
          lx_error TYPE REF TO cx_bapi_error.
    &quot;Given that the TCODE provided is not found in database table
    &quot;When data is required
    TRY.
        me-&gt;mr_cut-&gt;zif_wm_parameter_retriever~get_data( &apos;XPTO&apos; ).
*              CATCH cx_bapi_error.    &quot; BAPI Error Exception: Migrated Error Messages Type &quot;E&quot;
      CATCH cx_bapi_error INTO lx_error ##no_handler.
    ENDTRY.
    &quot;Then an exception of type cx_bapi_error is raised.
    cl_abap_unit_assert=&gt;assert_bound(
      EXPORTING
        act              = lx_error    &quot; Reference Variable to Be Checked
*            msg              =     &quot; Error Message
*            level            = IF_AUNIT_CONSTANTS=&gt;CRITICAL    &quot; Error Severity
*            quit             = IF_AUNIT_CONSTANTS=&gt;METHOD    &quot; Flow Control in Case of Error
*          RECEIVING
*            assertion_failed =     &quot; Condition not met
    ).
  ENDMETHOD.
ENDCLASS.
CLASS lct_tcode_provided_ok DEFINITION INHERITING FROM lcl_tester FINAL
                            FOR TESTING
                            RISK LEVEL HARMLESS
                            DURATION SHORT.
  PRIVATE SECTION.
    METHODS:
        setup,
        tst_tcode_provided_ok FOR TESTING.
ENDCLASS.
CLASS lct_tcode_provided_ok IMPLEMENTATION.
  METHOD setup.
    DATA lr_db TYPE REF TO lcl_db_tcode_found.

    CREATE OBJECT: me-&gt;mr_cut,
                   lr_db.

    me-&gt;mr_cut-&gt;mr_db = lr_db.
  ENDMETHOD.
  METHOD tst_tcode_provided_ok.
    DATA lr_data  TYPE REF TO data.
    FIELD-SYMBOLS &lt;lt_data&gt; TYPE ANY TABLE.
    &quot;Given that the TCODE provided is found
    &quot;When data is required
    TRY.
        lr_data = me-&gt;mr_cut-&gt;zif_wm_parameter_retriever~get_data( i_transaction_code = &apos;XPTO&apos; ).
*          CATCH cx_bapi_error.    &quot; BAPI Error Exception: Migrated Error Messages Type &quot;E&quot;
      CATCH cx_bapi_error.
        cl_abap_unit_assert=&gt;fail(
*        EXPORTING
*          msg    =     &quot; Error Message
*          level  = IF_AUNIT_CONSTANTS=&gt;CRITICAL    &quot; Error Severity
*          quit   = IF_AUNIT_CONSTANTS=&gt;METHOD    &quot; Flow Control in Case of Error
*          detail =     &quot; Detailed Message
        ).
    ENDTRY.
    &quot;Then the data table is not empty
    ASSIGN lr_data-&gt;* TO &lt;lt_data&gt;.
    cl_abap_unit_assert=&gt;assert_not_initial(
      EXPORTING
        act              = &lt;lt_data&gt;    &quot; Actual Data Object
*        msg              =     &quot; Message in Case of Error
*        level            = IF_AUNIT_CONSTANTS=&gt;CRITICAL    &quot; Error Severity
*        quit             = IF_AUNIT_CONSTANTS=&gt;METHOD    &quot; Flow Control in Case of Error
*      RECEIVING
*        assertion_failed =     &quot; Condition not met
    ).
  ENDMETHOD.
ENDCLASS.
CLASS lct_notcode_nothing_found DEFINITION INHERITING FROM lcl_tester
                                FOR TESTING
                                RISK LEVEL HARMLESS
                                DURATION SHORT.
  PRIVATE SECTION.
    METHODS:
        setup,
        tst_notcode_nothing_found FOR TESTING.
ENDCLASS.
CLASS lct_notcode_nothing_found IMPLEMENTATION.
  METHOD setup.
    DATA lr_db TYPE REF TO lcl_db_notcode_not_found.

    CREATE OBJECT: me-&gt;mr_cut,
                   lr_db.

    me-&gt;mr_cut-&gt;mr_db = lr_db.
  ENDMETHOD.
  METHOD tst_notcode_nothing_found.
    DATA  lx_error TYPE REF TO cx_bapi_error.

    &quot;Given that no related record is found
    &quot;When data is required
    TRY.
        me-&gt;mr_cut-&gt;zif_wm_parameter_retriever~get_data( ).
*          CATCH cx_bapi_error.    &quot; BAPI Error Exception: Migrated Error Messages Type &quot;E&quot;
      CATCH cx_bapi_error INTO lx_error.
    ENDTRY.
    &quot;Then an exception is raised
    cl_abap_unit_assert=&gt;assert_bound(
      EXPORTING
        act              = lx_error    &quot; Reference Variable to Be Checked
*        msg              =     &quot; Error Message
*        level            = IF_AUNIT_CONSTANTS=&gt;CRITICAL    &quot; Error Severity
*        quit             = IF_AUNIT_CONSTANTS=&gt;METHOD    &quot; Flow Control in Case of Error
*      RECEIVING
*        assertion_failed =     &quot; Condition not met
    ).
  ENDMETHOD.
ENDCLASS.
CLASS lct_notcode_ok DEFINITION INHERITING FROM lcl_tester FINAL
                     FOR TESTING
                     RISK LEVEL HARMLESS
                     DURATION SHORT.
  PRIVATE SECTION.
    METHODS:
        setup,
        tst_notcode_ok FOR TESTING.
ENDCLASS.
CLASS lct_notcode_ok IMPLEMENTATION.
  METHOD setup.
    DATA lr_db TYPE REF TO lcl_db_notcode_found.

    CREATE OBJECT: me-&gt;mr_cut,
                   lr_db.

    me-&gt;mr_cut-&gt;mr_db = lr_db.
  ENDMETHOD.
  METHOD tst_notcode_ok.
    DATA lr_data TYPE REF TO data.
    FIELD-SYMBOLS &lt;lt_data&gt; TYPE ANY TABLE.
    &quot;Given the related record is found in database table
    &quot;When data is required
    TRY.
        lr_data = me-&gt;mr_cut-&gt;zif_wm_parameter_retriever~get_data( ).
*              CATCH cx_bapi_error.  &quot; BAPI Error Exception: Migrated Error Messages Type &quot;E&quot;
      CATCH cx_bapi_error.
        cl_abap_unit_assert=&gt;fail(
*              EXPORTING
*                msg    =     &quot; Error Message
*                level  = IF_AUNIT_CONSTANTS=&gt;CRITICAL    &quot; Error Severity
*                quit   = IF_AUNIT_CONSTANTS=&gt;METHOD    &quot; Flow Control in Case of Error
*                detail =     &quot; Detailed Message
        ).
    ENDTRY.
    &quot;Then the data table is not empty
    ASSIGN lr_data-&gt;* TO &lt;lt_data&gt;.
    cl_abap_unit_assert=&gt;assert_not_initial(
      EXPORTING
        act              = &lt;lt_data&gt;    &quot; Actual Data Object
*            msg              =     &quot; Message in Case of Error
*            level            = IF_AUNIT_CONSTANTS=&gt;CRITICAL    &quot; Error Severity
*            quit             = IF_AUNIT_CONSTANTS=&gt;METHOD    &quot; Flow Control in Case of Error
*          RECEIVING
*            assertion_failed =     &quot; Condition not met
    ).
  ENDMETHOD.
ENDCLASS.</localTestClasses>
  <attribute CLSNAME="ZCL_WM_PARM_INV_STRG_LCTN_PRIT" CMPNAME="C_INV_STG_LCT_PRT" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="1 " ATTDECLTYP="2" ATTVALUE="&apos;INV_STG_LCT_PRT&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="ZWM_DE_PARAMETER_ID" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_WM_PARM_INV_STRG_LCTN_PRIT" CMPNAME="MR_DB" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="1 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="3" TYPE="LCL_DB" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <interfaceMethod CLSNAME="ZCL_WM_PARM_INV_STRG_LCTN_PRIT" CPDNAME="ZIF_WM_PARAMETER_RETRIEVER~GET_DATA">
   <source>METHOD zif_wm_parameter_retriever~get_data.
    DATA: lt_data   TYPE yt_runtime,
          lt_return TYPE bapiret2_t,
          l_message TYPE string.
    FIELD-SYMBOLS:  &lt;t_data&gt;   TYPE yt_runtime,
                    &lt;ls_return&gt; TYPE bapiret2.

    TRY.
        IF i_transaction_code IS SUPPLIED.
          me-&gt;mr_db-&gt;query_ztbwm_pm_inv_slp_tcode(
            EXPORTING
              i_transaction_code = i_transaction_code
            IMPORTING
              et_data            = lt_data
          ).
*                CATCH cx_sy_sql_error.    &quot; SQL error
        ELSE.
          me-&gt;mr_db-&gt;query_ztbwm_pm_inv_slp(
            IMPORTING
              et_data = lt_data
          ).
*              CATCH cx_sy_sql_error.    &quot; SQL error
        ENDIF.

        CREATE DATA r_data TYPE yt_runtime.
        ASSIGN r_data-&gt;* TO &lt;t_data&gt;.
        &lt;t_data&gt; = lt_data.
      CATCH cx_sy_sql_error.
        &quot;No storage locations have been prioritized for inventory counts.
        MESSAGE e100(zwm) INTO l_message.
        APPEND INITIAL LINE TO lt_return ASSIGNING &lt;ls_return&gt;.
        &lt;ls_return&gt;-id = sy-msgid.
        &lt;ls_return&gt;-type = sy-msgty.
        &lt;ls_return&gt;-number = sy-msgno.
        &lt;ls_return&gt;-message = l_message.
        &lt;ls_return&gt;-message_v1 = sy-msgv1.
        &lt;ls_return&gt;-message_v2 = sy-msgv2.
        &lt;ls_return&gt;-message_v3 = sy-msgv3.
        &lt;ls_return&gt;-message_v4 = sy-msgv4.
        RAISE EXCEPTION TYPE cx_bapi_error
          EXPORTING
            status = lt_return.
    ENDTRY.

  ENDMETHOD.</source>
  </interfaceMethod>
  <method CLSNAME="ZCL_WM_PARM_INV_STRG_LCTN_PRIT" CMPNAME="CONSTRUCTOR" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="2" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD constructor.
    CREATE OBJECT me-&gt;mr_db.
  ENDMETHOD.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" VERSION="1" LANGU="E" DESCRIPT="Inventory model" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" WITH_UNIT_TESTS="X" DURATION_TYPE="0 " RISK_LEVEL="0 " ZSAPLINK_PLUGIN_MAJOR_VERSION="0 " ZSAPLINK_PLUGIN_MINOR_VERSION="1 " ZSAPLINK_PLUGIN_BUILD_VERSION="0 " ZSAPLINK_PLUGIN_INFO1="ZSAPLINK_CLASS is part of the main ZSAPLINK project --&gt; This plugin found there instead of ZSAPLINK_PLUGINS projects" ZSAPLINK_PLUGIN_INFO2="SAPLINK homepage: https://www.assembla.com/spaces/saplink/wiki" ZSAPLINK_PLUGIN_INFO3="Download from https://www.assembla.com/code/saplink/subversion/nodes" ZSAPLINK_PLUGIN_INFO4="and navigate to:  trunk -&gt; core -&gt; ZSAPLINK -&gt; CLAS -&gt; ZSAPLINK_CLASS.slnk" REFCLSNAME="ZCL_WM_LG_AUT_MODEL">
  <types CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="YS_INVENTORY_ENTRY" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="1 " TYPTYPE="4" SRCROW1="2 " SRCCOLUMN1="11 " SRCROW2="24 " SRCCOLUMN2="35 " TYPESRC_LENG="0 " TYPESRC='BEGIN OF ys_inventory_entry,
            &quot;keys
            warehouse_number TYPE lgnum,
            inventory_record TYPE lvs_ivnum,
            inventory_item   TYPE lvs_ivpos,
            quant            TYPE lvs_lqnum,
            count_number     TYPE linv_nanum,
            &quot;inventory attributes
            count_version    TYPE link_nvers,
            activity_ind     TYPE lvs_ivakt,
            item_status      TYPE linp_istat,
            &quot;organizational attributes
            plant            TYPE werks_d,
            storage_location TYPE lgort_d,
            batch            TYPE charg_d,
            storage_type     TYPE lgtyp,
            storage_bin      TYPE lgpla,
            storage_unit     TYPE lenum,
            &quot;Product_attributes
            product_id       TYPE matnr,
            unit             TYPE meins,
            stock_quantity   TYPE lqua_gesme,
           END OF ys_inventory_entry
'/>
  <types CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="YT_INVENTORY_ENTRIES" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="2 " TYPTYPE="4" SRCROW1="25 " SRCCOLUMN1="11 " SRCROW2="26 " SRCCOLUMN2="94 " TYPESRC_LENG="0 " TYPESRC="yt_inventory_entries TYPE SORTED TABLE OF ys_inventory_entry
            WITH UNIQUE KEY warehouse_number inventory_record inventory_item quant count_number
"/>
  <types CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="YT_COUNTERS" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="3 " TYPTYPE="4" SRCROW1="27 " SRCCOLUMN1="11 " SRCROW2="27 " SRCCOLUMN2="52 " TYPESRC_LENG="0 " TYPESRC="yt_counters TYPE STANDARD TABLE OF xubname
"/>
  <types CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="YS_UNIT" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="4 " TYPTYPE="4" SRCROW1="28 " SRCCOLUMN1="11 " SRCROW2="31 " SRCCOLUMN2="24 " TYPESRC_LENG="0 " TYPESRC="BEGIN OF ys_unit,
            product TYPE matnr,
            unit    TYPE meins,
           END OF ys_unit
"/>
  <types CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="YT_PRODUCT_UNITS" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="5 " TYPTYPE="4" SRCROW1="32 " SRCCOLUMN1="11 " SRCROW2="33 " SRCCOLUMN2="34 " TYPESRC_LENG="0 " TYPESRC="yt_product_units TYPE SORTED TABLE OF ys_unit
            WITH UNIQUE KEY product
"/>
  <types CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="YT_CUSTOM_INVENTORY_ENTRIES" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="6 " TYPTYPE="4" SRCROW1="34 " SRCCOLUMN1="11 " SRCROW2="36 " SRCCOLUMN2="52 " TYPESRC_LENG="0 " TYPESRC="yt_custom_inventory_entries TYPE SORTED TABLE OF ztbwm_invnt_cnt
            WITH UNIQUE KEY client       warehouse_number inventory_record inventory_item
                            quant        count_number
"/>
  <types CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="YS_COUNT" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="7 " TYPTYPE="4" SRCROW1="37 " SRCCOLUMN1="11 " SRCROW2="59 " SRCCOLUMN2="25 " TYPESRC_LENG="0 " TYPESRC='BEGIN OF ys_count,
            &quot;keys
            warehouse_number TYPE lgnum,
            inventory_record TYPE lvs_ivnum,
            inventory_item   TYPE lvs_ivpos,
            quant            TYPE zwm_de_lqnum,
            count_number     TYPE linv_nanum,
            &quot;organizational attributes
            plant            TYPE werks_d,
            storage_location TYPE lgort_d,
            storage_type     TYPE lgtyp,
            storage_bin      TYPE lgpla,
            storage_unit     TYPE lenum,
            &quot;Product_attributes
            product          TYPE matnr,
            unit             TYPE meins,
            quantity         TYPE linv_menge,
            matched_count    TYPE linv_nanum,
            &quot;Administrative data
            created_by       TYPE xubname,
            created_at       TYPE timestamp,
            creation_tz      TYPE erdat_tz,
           END OF ys_count
'/>
  <types CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="YT_COUNTS_NO_KEY" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="8 " TYPTYPE="4" SRCROW1="60 " SRCCOLUMN1="11 " SRCROW2="60 " SRCCOLUMN2="58 " TYPESRC_LENG="0 " TYPESRC="yt_counts_no_key TYPE STANDARD TABLE OF ys_count
"/>
  <types CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="YS_TOTAL" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="9 " TYPTYPE="4" SRCROW1="61 " SRCCOLUMN1="11 " SRCROW2="73 " SRCCOLUMN2="25 " TYPESRC_LENG="0 " TYPESRC='BEGIN OF ys_total,
            &quot;keys
            warehouse_number TYPE lgnum,
            inventory_record TYPE lvs_ivnum,
            inventory_item   TYPE lvs_ivpos,
            count_number     TYPE linv_nanum,
            &quot;organizational attributes
            storage_unit     TYPE lenum,
            &quot;Product_attributes
            product          TYPE matnr,
            unit             TYPE meins,
            quantity         TYPE linv_menge,
           END OF ys_total
'/>
  <types CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="YG_STATUSES" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="10 " TYPTYPE="4" SRCROW1="74 " SRCCOLUMN1="11 " SRCROW2="74 " SRCCOLUMN2="65 " TYPESRC_LENG="0 " TYPESRC="yg_statuses       TYPE RANGE OF zwm_de_inv_count_status
"/>
  <types CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="YG_TIMESTAMP" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="11 " TYPTYPE="4" SRCROW1="75 " SRCCOLUMN1="11 " SRCROW2="75 " SRCCOLUMN2="51 " TYPESRC_LENG="0 " TYPESRC="yg_timestamp      TYPE RANGE OF timestamp
"/>
  <types CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="YG_INVENTORY_RECORDS" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="1 " TYPTYPE="4" SRCROW1="8 " SRCCOLUMN1="11 " SRCROW2="8 " SRCCOLUMN2="54 " TYPESRC_LENG="0 " TYPESRC="yg_inventory_records TYPE RANGE OF lvs_ivnum
"/>
  <types CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="YG_STORAGE_TYPES" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="2 " TYPTYPE="4" SRCROW1="9 " SRCCOLUMN1="11 " SRCROW2="9 " SRCCOLUMN2="50 " TYPESRC_LENG="0 " TYPESRC="yg_storage_types     TYPE RANGE OF lgtyp
"/>
  <types CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="YG_STORAGE_BINS" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="3 " TYPTYPE="4" SRCROW1="10 " SRCCOLUMN1="11 " SRCROW2="10 " SRCCOLUMN2="50 " TYPESRC_LENG="0 " TYPESRC="yg_storage_bins      TYPE RANGE OF lgpla
"/>
  <types CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="YG_DATES" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="4 " TYPTYPE="4" SRCROW1="11 " SRCCOLUMN1="11 " SRCROW2="11 " SRCCOLUMN2="49 " TYPESRC_LENG="0 " TYPESRC="yg_dates             TYPE RANGE OF dats
"/>
  <types CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="YG_PRODUCTS" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="5 " TYPTYPE="4" SRCROW1="12 " SRCCOLUMN1="11 " SRCROW2="12 " SRCCOLUMN2="50 " TYPESRC_LENG="0 " TYPESRC="yg_products          TYPE RANGE OF matnr
"/>
  <types CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="YG_SITUATIONS" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="6 " TYPTYPE="4" SRCROW1="13 " SRCCOLUMN1="11 " SRCROW2="13 " SRCCOLUMN2="67 " TYPESRC_LENG="0 " TYPESRC="yg_situations        TYPE RANGE OF zwm_de_count_situation
"/>
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations
CLASS lcl_api IMPLEMENTATION.
  METHOD dequeue_ellinke.

    CALL FUNCTION &apos;DEQUEUE_ELLINKE&apos;
      EXPORTING
*       mode_link = &apos;E&apos; &quot; Lock mode for table LINK
*       mandt     = SY-MANDT    &quot; 01th enqueue argument
        lgnum     = i_warehouse_number    &quot; 02th enqueue argument
        ivnum     = i_inventory_record    &quot; 03th enqueue argument
*       x_lgnum   = SPACE    &quot; Fill argument 02 with initial value?
*       x_ivnum   = SPACE    &quot; Fill argument 03 with initial value?
*       _scope    = &apos;3&apos; &quot; Fill argument 03 with initial value?
*       _synchron = SPACE    &quot; Synchonous unlock
*       _collect  =  &apos; &apos; &quot; Initially only collect lock
      .
  ENDMETHOD.

  METHOD dequeue_eztbwm_invnt_cnt.

    CALL FUNCTION &apos;DEQUEUE_EZTBWM_INVNT_CNT&apos;
      EXPORTING
*       mode_ztbwm_invnt_cnt = &apos;X&apos; &quot; Lock mode for table ZTBWM_INVNT_CNT
*       client               = SY-MANDT    &quot; 01th enqueue argument
        warehouse_number     = i_warehouse_number    &quot; 02th enqueue argument
        inventory_record     = i_inventory_record    &quot; 03th enqueue argument
        inventory_item       = i_inventory_item    &quot; 04th enqueue argument
*       x_warehouse_number   = SPACE    &quot; Fill argument 02 with initial value?
*       x_inventory_record   = SPACE    &quot; Fill argument 03 with initial value?
*       x_inventory_item     = SPACE    &quot; Fill argument 04 with initial value?
*       _scope               = &apos;3&apos; &quot; Fill argument 04 with initial value?
*       _synchron            = SPACE    &quot; Synchonous unlock
*       _collect             =  &apos; &apos; &quot; Initially only collect lock
      .
  ENDMETHOD.

  METHOD enqueue_ellinke.
    DATA: lt_return TYPE bapiret2_t,
          l_message TYPE string.
    FIELD-SYMBOLS  &lt;ls_return&gt; TYPE bapiret2.

    CALL FUNCTION &apos;ENQUEUE_ELLINKE&apos;
      EXPORTING
*       mode_link      = &apos;E&apos; &quot; Lock mode for table LINK
*       mandt          = SY-MANDT    &quot; 01th enqueue argument
        lgnum          = i_warehouse_number    &quot; 02th enqueue argument
        ivnum          = i_inventory_record    &quot; 03th enqueue argument
*       x_lgnum        = SPACE    &quot; Fill argument 02 with initial value?
*       x_ivnum        = SPACE    &quot; Fill argument 03 with initial value?
*       _scope         = &apos;2&apos; &quot; Fill argument 03 with initial value?
*       _wait          = SPACE    &quot; Fill argument 03 with initial value?
*       _collect       = &apos; &apos; &quot; Initially only collect lock
      EXCEPTIONS
        foreign_lock   = 1
        system_failure = 2
        OTHERS         = 3.
    IF sy-subrc &lt;&gt; 0.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                 WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4
                 INTO l_message.
      m_raise_error_message.
    ENDIF.
  ENDMETHOD.

  METHOD enqueue_eztbwm_invnt_cnt.
    DATA: lt_return TYPE bapiret2_t,
          l_message TYPE string.
    FIELD-SYMBOLS  &lt;ls_return&gt; TYPE bapiret2.

    CALL FUNCTION &apos;ENQUEUE_EZTBWM_INVNT_CNT&apos;
      EXPORTING
*       mode_ztbwm_invnt_cnt = &apos;X&apos; &quot; Lock mode for table ZTBWM_INVNT_CNT
*       client               = SY-MANDT    &quot; 01th enqueue argument
        warehouse_number     = i_warehouse_number    &quot; 02th enqueue argument
        inventory_record     = i_inventory_record    &quot; 03th enqueue argument
        inventory_item       = i_inventory_item    &quot; 04th enqueue argument
*       x_warehouse_number   = SPACE    &quot; Fill argument 02 with initial value?
*       x_inventory_record   = SPACE    &quot; Fill argument 03 with initial value?
*       x_inventory_item     = SPACE    &quot; Fill argument 04 with initial value?
*       _scope               = &apos;2&apos; &quot; Fill argument 04 with initial value?
*       _wait                = SPACE    &quot; Fill argument 04 with initial value?
*       _collect             = &apos; &apos; &quot; Initially only collect lock
      EXCEPTIONS
        foreign_lock         = 1
        system_failure       = 2
        OTHERS               = 3.
    IF sy-subrc &lt;&gt; 0.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                 WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4
                 INTO l_message.
      m_raise_error_message.
    ENDIF.
  ENDMETHOD.

  METHOD l_inv_count.
    DATA: lt_return TYPE bapiret2_t,
          l_message TYPE string.
    FIELD-SYMBOLS  &lt;ls_return&gt; TYPE bapiret2.

    CLEAR e_version.
    CALL FUNCTION &apos;L_INV_COUNT&apos;
      EXPORTING
*       i_check_only                 =
*       i_commit                     = &apos;X&apos; &quot; Explicit commit (do not set for IDOCs)
        i_input_method               = space    &quot; Processing (X= foreground processing, otherwise background p
      IMPORTING
*       alle_lgnum                   =     &quot; Warehouse number
*       alle_ivnum                   =     &quot; Warehouse number
        alle_nvers                   = e_version    &quot; Warehouse number
      TABLES
        s_linv                       = it_inventory_entries    &quot; Count records
      EXCEPTIONS
        not_updated                  = 1
        foreign_lock                 = 2
        lenum_missing                = 3
        altme_missing                = 4
        ivnum_not_found              = 5
        lgnum_missing                = 6
        no_count_allowed             = 7
        lgpla_missing                = 8
        lgtyp_missing                = 9
        bin_not_in_ivnum             = 10
        plpos_missing                = 11
        either_quantity_or_empty_bin = 12
        ivnum_different              = 13
        nvers_different              = 14
        identical_key                = 15
        wrong_lgort                  = 16
        error_message                = 17
        OTHERS                       = 18.
    IF sy-subrc &lt;&gt; 0.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                 WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4
                 INTO l_message.
      m_raise_error_message.
    ENDIF.
  ENDMETHOD.
ENDCLASS.


CLASS lcl_db IMPLEMENTATION.
  METHOD cnt_mard.

    SELECT COUNT(*)
      FROM mard
     WHERE werks = i_plant
       AND matnr = i_product.
    IF sy-subrc &lt;&gt; 0.
      RAISE EXCEPTION TYPE cx_sy_sql_error.
    ENDIF.
  ENDMETHOD.

  METHOD cnt_matnr_linv.

    SELECT COUNT(*)
      FROM linv
     WHERE lgnum = i_warehouse_number
       AND ivnum = i_inventory_record
       AND lgtyp = i_storage_type
       AND lgpla = i_storage_bin
       AND matnr &lt;&gt; space.
    IF sy-subrc &lt;&gt; 0.
      RAISE EXCEPTION TYPE cx_sy_sql_error.
    ENDIF.
  ENDMETHOD.

  METHOD dlt_ztbwm_invnt_cnt.

    DELETE FROM ztbwm_invnt_cnt WHERE warehouse_number = i_warehouse_number
                                  AND inventory_record = i_inventory_record
                                  AND inventory_item   = i_inventory_item
                                  AND status          IN ig_statuses.
    IF sy-subrc &lt;&gt; 0.
      RAISE EXCEPTION TYPE cx_sy_sql_error.
    ENDIF.
  ENDMETHOD.

  METHOD mdf_ztbwm_invnt_cnt.

    MODIFY ztbwm_invnt_cnt FROM TABLE it_entries.
    IF sy-subrc &lt;&gt; 0.
      RAISE EXCEPTION TYPE cx_sy_sql_error.
    ENDIF.
  ENDMETHOD.

  METHOD qry_createdby_ztbwm_invnt_cnt.

    CLEAR et_creators.
    SELECT DISTINCT created_by
      FROM ztbwm_invnt_cnt
      INTO TABLE et_creators
     WHERE warehouse_number = i_warehouse_number
       AND inventory_record = i_inventory_record
       AND inventory_item   = i_inventory_item
       AND status          IN ig_statuses
       AND count_number    &lt;&gt; zif_wm_lg_aut_inventory=&gt;mc_initial_stock
     ORDER BY created_by.
    IF sy-subrc &lt;&gt; 0.
      RAISE EXCEPTION TYPE cx_sy_sql_error.
    ENDIF.
  ENDMETHOD.

*  METHOD qry_counts_totals.
*
*    CLEAR et_entries.
*    SELECT warehouse_number inventory_record inventory_item count_number &quot;Keys
*           storage_unit                                                  &quot;Organizational attributes
*           product          unit             SUM( quantity )             &quot;Product_attributes
*      FROM ztbwm_invnt_cnt
*      INTO TABLE et_entries
*     WHERE warehouse_number = i_warehouse_number
*       AND inventory_record = i_inventory_record
*       AND inventory_item   = i_inventory_item
*       AND status           IN ig_statuses
*     GROUP BY warehouse_number inventory_record inventory_item count_number
*              storage_unit     product          unit.
*    IF sy-subrc &lt;&gt; 0.
*      RAISE EXCEPTION TYPE cx_sy_sql_error.
*    ENDIF.
*  ENDMETHOD.

  METHOD max_countn_ztbwm_invnt_cnt.

    CLEAR r_count_number.
    SELECT MAX( count_number )
      FROM ztbwm_invnt_cnt
      INTO r_count_number
      WHERE warehouse_number = i_warehouse_number
       AND inventory_record = i_inventory_record
       AND inventory_item   = i_inventory_item
       AND count_number &lt;&gt; zif_wm_lg_aut_inventory=&gt;mc_initial_stock.
    IF sy-subrc &lt;&gt; 0.
      RAISE EXCEPTION TYPE cx_sy_sql_error.
    ENDIF.
  ENDMETHOD.

  METHOD qry_inventory.

    CLEAR rt_inventory_entries.
    SELECT k~lgnum k~ivnum p~ivpos v~lqnum v~nanum
           k~nvers k~ivakt p~istat werks   lgort
           charg   k~lgtyp p~lgpla lenum   matnr
           meins   gesme
      FROM link AS k
     INNER JOIN linp AS p
        ON p~lgnum = k~lgnum
       AND p~ivnum = k~ivnum
     INNER JOIN linv AS v
        ON v~lgnum = p~lgnum
       AND v~ivnum = p~ivnum
       AND v~ivpos = p~ivpos
      INTO TABLE rt_inventory_entries
     WHERE k~lgnum = i_warehouse_number
       AND k~lgtyp = i_storage_type
       AND p~lgpla = i_storage_bin
       AND k~ivakt = abap_true
     ORDER BY k~lgnum k~ivnum DESCENDING p~ivpos v~lqnum v~nanum.
    IF sy-subrc &lt;&gt; 0.
      RAISE EXCEPTION TYPE cx_sy_sql_error.
    ENDIF.
  ENDMETHOD.

  METHOD qry_inventory_doc.

    CLEAR rt_inventory_entries.
    SELECT k~lgnum k~ivnum p~ivpos v~lqnum v~nanum
           k~nvers k~ivakt p~istat werks   lgort
           charg   k~lgtyp p~lgpla lenum   matnr
           meins   gesme
      FROM link AS k
     INNER JOIN linp AS p
        ON p~lgnum = k~lgnum
       AND p~ivnum = k~ivnum
     INNER JOIN linv AS v
        ON v~lgnum = p~lgnum
       AND v~ivnum = p~ivnum
       AND v~ivpos = p~ivpos
      INTO TABLE rt_inventory_entries
     WHERE k~lgnum = i_warehouse_number
       AND k~ivnum = i_inventory_record
     ORDER BY k~lgnum k~ivnum p~ivpos v~lqnum v~nanum.
    IF sy-subrc &lt;&gt; 0.
      RAISE EXCEPTION TYPE cx_sy_sql_error.
    ENDIF.
  ENDMETHOD.



  METHOD qry_inventory_rpt.

    CLEAR rt_inventory_entries.
    SELECT k~lgnum k~ivnum p~ivpos v~lqnum v~nanum
           k~nvers k~ivakt p~istat werks   lgort
           charg   k~lgtyp p~lgpla lenum   matnr
           meins   gesme
      FROM link AS k
     INNER JOIN linp AS p
        ON p~lgnum = k~lgnum
       AND p~ivnum = k~ivnum
     INNER JOIN linv AS v
        ON v~lgnum = p~lgnum
       AND v~ivnum = p~ivnum
       AND v~ivpos = p~ivpos
      INTO TABLE rt_inventory_entries
     WHERE k~lgnum  = i_warehouse_number
       AND k~ivnum IN ig_inventory_records
       AND v~lgtyp IN ig_storage_types
       AND k~pdatu IN ig_dates
       AND p~lgpla IN ig_storage_bins
       AND v~matnr IN ig_products
     ORDER BY k~lgnum k~ivnum p~ivpos v~lqnum v~nanum.
    IF sy-subrc &lt;&gt; 0.
      RAISE EXCEPTION TYPE cx_sy_sql_error.
    ENDIF.
  ENDMETHOD.

  METHOD qry_lgtyp_lgap.

    CLEAR r_storage_type.
    SELECT lgtyp
        UP TO 1 ROWS
      FROM lagp
      INTO r_storage_type
     WHERE lgpla = i_storage_bin
     ORDER BY PRIMARY KEY.
    ENDSELECT.
    IF sy-subrc &lt;&gt; 0.
      RAISE EXCEPTION TYPE cx_sy_sql_error.
    ENDIF.
  ENDMETHOD.

  METHOD qry_matnr_from_ean.

    CLEAR r_product_code.
    SELECT mara~matnr
        UP TO 1 ROWS
      FROM mard
     INNER JOIN mara
        ON mara~matnr = mard~matnr
      INTO r_product_code
     WHERE werks = i_plant
       AND ean11 = i_ean_code.
    ENDSELECT.
    IF sy-subrc &lt;&gt; 0.
      RAISE EXCEPTION TYPE cx_sy_sql_error.
    ENDIF.
  ENDMETHOD.

  METHOD qry_meins_mara.

    CLEAR r_unit.
    SELECT meins
        UP TO 1 ROWS
      FROM mara
      INTO r_unit
     WHERE matnr = i_product
     ORDER BY PRIMARY KEY.
    ENDSELECT.
    IF sy-subrc &lt;&gt; 0.
      RAISE EXCEPTION TYPE cx_sy_sql_error.
    ENDIF.
  ENDMETHOD.

  METHOD qry_maktx_makt.

    CLEAR r_description.
    SELECT maktx
        UP TO 1 ROWS
      FROM makt
      INTO r_description
     WHERE matnr = i_product
       AND spras = sy-langu
     ORDER BY PRIMARY KEY.
    ENDSELECT.
    IF sy-subrc &lt;&gt; 0.
      RAISE EXCEPTION TYPE cx_sy_sql_error.
    ENDIF.
  ENDMETHOD.

  METHOD qry_status_ztbwm_invnt_cnt.
    DATA lt_statuses TYPE STANDARD TABLE OF zwm_de_inv_count_status.
    FIELD-SYMBOLS  &lt;l_status&gt; LIKE LINE OF lt_statuses.

    CLEAR r_status.
    SELECT status
      FROM ztbwm_invnt_cnt
      INTO TABLE lt_statuses
     WHERE warehouse_number = i_warehouse_number
       AND inventory_record = i_inventory_record
       AND inventory_item   = i_inventory_item
       AND count_number     = i_count_number
     ORDER BY status.
    IF sy-subrc &lt;&gt; 0.
      RAISE EXCEPTION TYPE cx_sy_sql_error.
    ELSE.
      READ TABLE lt_statuses INDEX 1
       ASSIGNING &lt;l_status&gt;.
      IF sy-subrc &lt;&gt; 0.
        RAISE EXCEPTION TYPE cx_sy_sql_error.
      ELSE.
        r_status = &lt;l_status&gt;.
      ENDIF.
    ENDIF.
  ENDMETHOD.

  METHOD qry_prodcount_ztbwm_invnt_cnt.

    CLEAR et_product_counts.
    SELECT warehouse_number inventory_record inventory_item quant       count_number &quot;Keys
           plant            storage_location storage_type   storage_bin storage_unit &quot;Organizational attributes
           product          unit             quantity       zzmatch                  &quot;Product_attributes
           created_by       created_at       creation_timezone                       &quot;Administrative data
      FROM ztbwm_invnt_cnt
      INTO TABLE et_product_counts
     WHERE warehouse_number = i_warehouse_number
       AND inventory_record = i_inventory_record
       AND inventory_item   = i_inventory_item
       AND product          = i_product
       AND status          IN ig_statuses
     ORDER BY warehouse_number inventory_record inventory_item quant count_number DESCENDING.
    IF sy-subrc &lt;&gt; 0.
      RAISE EXCEPTION TYPE cx_sy_sql_error.
    ENDIF.
  ENDMETHOD.

  METHOD qry_prodstock_ztbwm_invnt_cnt.

    CLEAR et_product_stocks.
    SELECT warehouse_number inventory_record inventory_item quant       count_number &quot;Keys
           plant            storage_location storage_type   storage_bin storage_unit &quot;Organizational attributes
           product          unit             quantity       zzmatch                  &quot;Product_attributes
           created_by       created_at       creation_timezone                       &quot;Administrative data
      FROM ztbwm_invnt_cnt
      INTO TABLE et_product_stocks
     WHERE warehouse_number = i_warehouse_number
       AND inventory_record = i_inventory_record
       AND inventory_item   = i_inventory_item
       AND product          = i_product
       AND count_number     = zif_wm_lg_aut_inventory=&gt;mc_initial_stock
     ORDER BY warehouse_number inventory_record inventory_item quant count_number DESCENDING.
    IF sy-subrc &lt;&gt; 0.
      RAISE EXCEPTION TYPE cx_sy_sql_error.
    ENDIF.
  ENDMETHOD.

  METHOD qry_sucount_ztbwm_invnt_cnt.

    CLEAR et_su_counts.
    SELECT warehouse_number inventory_record inventory_item quant       count_number &quot;Keys
           plant            storage_location storage_type   storage_bin storage_unit &quot;Organizational attributes
           product          unit             quantity       zzmatch                  &quot;Product_attributes
           created_by       created_at       creation_timezone                       &quot;Administrative data
      FROM ztbwm_invnt_cnt
      INTO TABLE et_su_counts
     WHERE warehouse_number = i_warehouse_number
       AND inventory_record = i_inventory_record
       AND inventory_item   = i_inventory_item
       AND storage_unit     = i_storage_unit
       AND product          = i_product
       AND status          IN ig_statuses
     ORDER BY warehouse_number inventory_record inventory_item quant count_number DESCENDING.
    IF sy-subrc &lt;&gt; 0.
      RAISE EXCEPTION TYPE cx_sy_sql_error.
    ENDIF.
  ENDMETHOD.

  METHOD qry_sustock_ztbwm_invnt_cnt.

    CLEAR et_su_stocks.
    SELECT warehouse_number inventory_record inventory_item quant       count_number &quot;Keys
           plant            storage_location storage_type   storage_bin storage_unit &quot;Organizational attributes
           product          unit             quantity       zzmatch                  &quot;Product_attributes
           created_by       created_at       creation_timezone                       &quot;Administrative data
      FROM ztbwm_invnt_cnt
      INTO TABLE et_su_stocks
     WHERE warehouse_number = i_warehouse_number
       AND inventory_record = i_inventory_record
       AND inventory_item   = i_inventory_item
       AND storage_unit     = i_storage_unit
       AND product          = i_product
       AND count_number     = zif_wm_lg_aut_inventory=&gt;mc_initial_stock
     ORDER BY warehouse_number inventory_record inventory_item quant count_number DESCENDING.
    IF sy-subrc &lt;&gt; 0.
      RAISE EXCEPTION TYPE cx_sy_sql_error.
    ENDIF.
  ENDMETHOD.

  METHOD qry_ztbwm_invnt_cnt.

    CLEAR et_entries.
    SELECT *
      FROM ztbwm_invnt_cnt
      INTO TABLE et_entries
     WHERE warehouse_number = i_warehouse_number
       AND inventory_record = i_inventory_record
       AND inventory_item   = i_inventory_item
       AND status          IN ig_statuses
     ORDER BY PRIMARY KEY.
    IF sy-subrc &lt;&gt; 0.
      RAISE EXCEPTION TYPE cx_sy_sql_error.
    ENDIF.
  ENDMETHOD.

  METHOD qry_ztbwm_invnt_cnt_by_count.

    CLEAR et_entries.
    SELECT *
      FROM ztbwm_invnt_cnt
      INTO TABLE et_entries
     WHERE warehouse_number = i_warehouse_number
       AND inventory_record = i_inventory_record
       AND inventory_item   = i_inventory_item
       AND count_number     = i_count_number
     ORDER BY PRIMARY KEY.
    IF sy-subrc &lt;&gt; 0.
      RAISE EXCEPTION TYPE cx_sy_sql_error.
    ENDIF.
  ENDMETHOD.

  METHOD qry_ztbwm_invnt_cnt_rpt.

    CLEAR rt_entries.
    SELECT *
      FROM ztbwm_invnt_cnt
      INTO TABLE rt_entries
     WHERE warehouse_number   = i_warehouse_number
       AND inventory_record  IN ig_inventory_records
       AND storage_type      IN ig_storage_types
       AND storage_bin       IN ig_storage_bins
       AND product           IN ig_products
       AND ( created_at      IN ig_timestamp OR
             changed_at      IN ig_timestamp )
     ORDER BY warehouse_number inventory_record inventory_item
              storage_location product.
    IF sy-subrc &lt;&gt; 0.
      RAISE EXCEPTION TYPE cx_sy_sql_error.
    ENDIF.
  ENDMETHOD.

  METHOD sum_quantity_ztbwm_invnt_cnt.

    CLEAR r_total_qty.
    SELECT SUM( quantity )
      FROM ztbwm_invnt_cnt
      INTO r_total_qty
     WHERE warehouse_number = i_warehouse_number
       AND inventory_record = i_inventory_record
       AND inventory_item   = i_inventory_item
       AND status          IN ig_statuses.
    IF sy-subrc &lt;&gt; 0.
      RAISE EXCEPTION TYPE cx_sy_sql_error.
    ENDIF.
  ENDMETHOD.
ENDCLASS.</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section
CLASS lcl_db DEFINITION DEFERRED.
CLASS zcl_wm_lg_aut_model_inventory DEFINITION LOCAL FRIENDS lcl_db.


CLASS lcl_api DEFINITION.
  PUBLIC SECTION.
    TYPES yt_inventory_entries TYPE STANDARD TABLE OF e1linvx.
    METHODS:
        dequeue_ellinke           IMPORTING i_warehouse_number          TYPE lgnum
                                            i_inventory_record          TYPE lvs_ivnum,
        dequeue_eztbwm_invnt_cnt  IMPORTING i_warehouse_number          TYPE lgnum
                                            i_inventory_record          TYPE lvs_ivnum
                                            i_inventory_item            TYPE lvs_ivpos,
        enqueue_ellinke           IMPORTING i_warehouse_number          TYPE lgnum
                                            i_inventory_record          TYPE lvs_ivnum
                                  RAISING   cx_bapi_error,
        enqueue_eztbwm_invnt_cnt  IMPORTING i_warehouse_number          TYPE lgnum
                                            i_inventory_record          TYPE lvs_ivnum
                                            i_inventory_item            TYPE lvs_ivpos
                                  RAISING   cx_bapi_error,
        l_inv_count               EXPORTING e_version                   TYPE linv_nvers
                                  CHANGING  it_inventory_entries        TYPE yt_inventory_entries
                                  RAISING   cx_bapi_error.
ENDCLASS.


CLASS lcl_db DEFINITION.
  PUBLIC SECTION.
    METHODS:
        cnt_mard                      IMPORTING i_plant                     TYPE werks_d
                                                i_product                   TYPE matnr
                                      RAISING   cx_sy_sql_error,
        cnt_matnr_linv                IMPORTING i_warehouse_number          TYPE lgnum
                                                i_inventory_record          TYPE lvs_ivnum
                                                i_storage_type              TYPE lgtyp
                                                i_storage_bin               TYPE lgpla
                                      RAISING   cx_sy_sql_error,
        dlt_ztbwm_invnt_cnt           IMPORTING i_warehouse_number          TYPE lgnum
                                                i_inventory_record          TYPE lvs_ivnum
                                                i_inventory_item            TYPE lvs_ivpos
                                                ig_statuses                 TYPE zcl_wm_lg_aut_model_inventory=&gt;yg_statuses
                                      RAISING   cx_sy_sql_error,
        mdf_ztbwm_invnt_cnt           IMPORTING it_entries                  TYPE zcl_wm_lg_aut_model_inventory=&gt;yt_custom_inventory_entries
                                      RAISING   cx_sy_sql_error,
        max_countn_ztbwm_invnt_cnt    IMPORTING i_warehouse_number          TYPE lgnum
                                                i_inventory_record          TYPE lvs_ivnum
                                                i_inventory_item            TYPE lvs_ivpos
                                      RETURNING value(r_count_number)       TYPE linv_nanum
                                      RAISING   cx_sy_sql_error,
        qry_createdby_ztbwm_invnt_cnt IMPORTING i_warehouse_number          TYPE lgnum
                                                i_inventory_record          TYPE lvs_ivnum
                                                i_inventory_item            TYPE lvs_ivpos
                                                ig_statuses                 TYPE zcl_wm_lg_aut_model_inventory=&gt;yg_statuses
                                      EXPORTING value(et_creators)          TYPE zcl_wm_lg_aut_model_inventory=&gt;yt_counters
                                      RAISING   cx_sy_sql_error,
*        qry_counts_totals             IMPORTING i_warehouse_number          TYPE lgnum
*                                                i_inventory_record          TYPE lvs_ivnum
*                                                i_inventory_item            TYPE lvs_ivpos
*                                                ig_statuses                 TYPE zcl_wm_lg_aut_model_inventory=&gt;yg_statuses
*                                      EXPORTING value(et_entries)           TYPE zcl_wm_lg_aut_model_inventory=&gt;yt_totals
*                                      RAISING   cx_sy_sql_error,
        qry_inventory                 IMPORTING i_warehouse_number          TYPE lgnum
                                                i_storage_type              TYPE lgtyp
                                                i_storage_bin               TYPE lgpla
                                      RETURNING value(rt_inventory_entries) TYPE zcl_wm_lg_aut_model_inventory=&gt;yt_inventory_entries
                                      RAISING   cx_sy_sql_error,
        qry_inventory_doc             IMPORTING i_warehouse_number          TYPE lgnum
                                                i_inventory_record          TYPE lvs_ivnum
                                      RETURNING value(rt_inventory_entries) TYPE zcl_wm_lg_aut_model_inventory=&gt;yt_inventory_entries
                                      RAISING   cx_sy_sql_error,
        qry_inventory_rpt             IMPORTING i_warehouse_number          TYPE lgnum
                                                ig_inventory_records        TYPE zcl_wm_lg_aut_model_inventory=&gt;yg_inventory_records
                                                ig_storage_types            TYPE zcl_wm_lg_aut_model_inventory=&gt;yg_storage_types
                                                ig_dates                    TYPE zcl_wm_lg_aut_model_inventory=&gt;yg_dates
                                                ig_storage_bins             TYPE zcl_wm_lg_aut_model_inventory=&gt;yg_storage_bins
                                                ig_products                 TYPE zcl_wm_lg_aut_model_inventory=&gt;yg_products
                                      RETURNING value(rt_inventory_entries) TYPE zcl_wm_lg_aut_model_inventory=&gt;yt_inventory_entries
                                      RAISING   cx_sy_sql_error,
        qry_lgtyp_lgap                IMPORTING i_storage_bin TYPE lgpla
                                      RETURNING value(r_storage_type) TYPE lgtyp
                                      RAISING   cx_sy_sql_error,
        qry_matnr_from_ean            IMPORTING i_plant                     TYPE werks_d
                                                i_ean_code                  TYPE ean11
                                      RETURNING value(r_product_code)       TYPE matnr
                                      RAISING   cx_sy_sql_error,
        qry_meins_mara                IMPORTING i_product                   TYPE matnr
                                      RETURNING value(r_unit)               TYPE meins
                                      RAISING   cx_sy_sql_error,
        qry_maktx_makt                IMPORTING i_product                   TYPE matnr
                                      RETURNING value(r_description)        TYPE maktx
                                      RAISING   cx_sy_sql_error,
        qry_prodcount_ztbwm_invnt_cnt IMPORTING i_warehouse_number          TYPE lgnum
                                                i_inventory_record          TYPE lvs_ivnum
                                                i_inventory_item            TYPE lvs_ivpos
                                                i_product                   TYPE matnr
                                                ig_statuses                 TYPE zcl_wm_lg_aut_model_inventory=&gt;yg_statuses
                                      EXPORTING et_product_counts           TYPE zcl_wm_lg_aut_model_inventory=&gt;yt_counts_no_key
                                      RAISING   cx_sy_sql_error,
        qry_prodstock_ztbwm_invnt_cnt IMPORTING i_warehouse_number          TYPE lgnum
                                                i_inventory_record          TYPE lvs_ivnum
                                                i_inventory_item            TYPE lvs_ivpos
                                                i_product                   TYPE matnr
                                      EXPORTING et_product_stocks           TYPE zcl_wm_lg_aut_model_inventory=&gt;yt_counts_no_key
                                      RAISING   cx_sy_sql_error,
        qry_status_ztbwm_invnt_cnt    IMPORTING i_warehouse_number          TYPE lgnum
                                                i_inventory_record          TYPE lvs_ivnum
                                                i_inventory_item            TYPE lvs_ivpos
                                                i_count_number              TYPE linv_nanum
                                      RETURNING value(r_status)             TYPE zwm_de_inv_count_status
                                      RAISING   cx_sy_sql_error,
        qry_sucount_ztbwm_invnt_cnt   IMPORTING i_warehouse_number          TYPE lgnum
                                                i_inventory_record          TYPE lvs_ivnum
                                                i_inventory_item            TYPE lvs_ivpos
                                                i_storage_unit              TYPE lenum
                                                i_product                   TYPE matnr
                                                ig_statuses                 TYPE zcl_wm_lg_aut_model_inventory=&gt;yg_statuses
                                      EXPORTING et_su_counts                TYPE zcl_wm_lg_aut_model_inventory=&gt;yt_counts_no_key
                                      RAISING   cx_sy_sql_error,
        qry_sustock_ztbwm_invnt_cnt   IMPORTING i_warehouse_number          TYPE lgnum
                                                i_inventory_record          TYPE lvs_ivnum
                                                i_inventory_item            TYPE lvs_ivpos
                                                i_storage_unit              TYPE lenum
                                                i_product                   TYPE matnr
                                      EXPORTING et_su_stocks                TYPE zcl_wm_lg_aut_model_inventory=&gt;yt_counts_no_key
                                      RAISING   cx_sy_sql_error,
        qry_ztbwm_invnt_cnt           IMPORTING i_warehouse_number          TYPE lgnum
                                                i_inventory_record          TYPE lvs_ivnum
                                                i_inventory_item            TYPE lvs_ivpos
                                                ig_statuses                 TYPE zcl_wm_lg_aut_model_inventory=&gt;yg_statuses
                                      EXPORTING value(et_entries)           TYPE zcl_wm_lg_aut_model_inventory=&gt;yt_custom_inventory_entries
                                      RAISING   cx_sy_sql_error,
        qry_ztbwm_invnt_cnt_by_count  IMPORTING i_warehouse_number          TYPE lgnum
                                                i_inventory_record          TYPE lvs_ivnum
                                                i_inventory_item            TYPE lvs_ivpos
                                                i_count_number              TYPE linv_nanum
                                      EXPORTING value(et_entries)           TYPE zcl_wm_lg_aut_model_inventory=&gt;yt_custom_inventory_entries
                                      RAISING   cx_sy_sql_error,
        qry_ztbwm_invnt_cnt_rpt       IMPORTING i_warehouse_number          TYPE lgnum
                                                ig_inventory_records        TYPE zcl_wm_lg_aut_model_inventory=&gt;yg_inventory_records
                                                ig_storage_types            TYPE zcl_wm_lg_aut_model_inventory=&gt;yg_storage_types
                                                ig_products                 TYPE zcl_wm_lg_aut_model_inventory=&gt;yg_products
                                                ig_storage_bins             TYPE zcl_wm_lg_aut_model_inventory=&gt;yg_storage_bins
                                                ig_timestamp                TYPE zcl_wm_lg_aut_model_inventory=&gt;yg_timestamp
                                      RETURNING value(rt_entries)           TYPE zcl_wm_lg_aut_model_inventory=&gt;yt_custom_inventory_entries
                                      RAISING   cx_sy_sql_error,
        sum_quantity_ztbwm_invnt_cnt  IMPORTING i_warehouse_number          TYPE lgnum
                                                i_inventory_record          TYPE lvs_ivnum
                                                i_inventory_item            TYPE lvs_ivpos
                                                ig_statuses                 TYPE zcl_wm_lg_aut_model_inventory=&gt;yg_statuses
                                      RETURNING value(r_total_qty)          TYPE menge_d
                                      RAISING   cx_sy_sql_error.
ENDCLASS.

CLASS lcx_new_item DEFINITION
                   INHERITING FROM cx_no_check
  FINAL
  CREATE PUBLIC .
ENDCLASS.</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class
DEFINE m_raise_error_message.
  append initial line to lt_return assigning &lt;ls_return&gt;.
  &lt;ls_return&gt;-id = sy-msgid.
  &lt;ls_return&gt;-type = sy-msgty.
  &lt;ls_return&gt;-number = sy-msgno.
  &lt;ls_return&gt;-message = l_message.
  &lt;ls_return&gt;-message_v1 = sy-msgv1.
  &lt;ls_return&gt;-message_v2 = sy-msgv2.
  &lt;ls_return&gt;-message_v3 = sy-msgv3.
  &lt;ls_return&gt;-message_v4 = sy-msgv4.

  raise exception type cx_bapi_error
    exporting
      status = lt_return.
END-OF-DEFINITION.

DEFINE m_fill_in_bdc.
  append initial line to lt_bdc assigning &lt;ls_bdc&gt;.
  if &amp;1 = &apos;X&apos;.
    move: &amp;2 to &lt;ls_bdc&gt;-program,
          &amp;3 to &lt;ls_bdc&gt;-dynpro,
          &amp;1 to &lt;ls_bdc&gt;-dynbegin.
  else.
    move: &amp;2 to &lt;ls_bdc&gt;-fnam,
          &amp;3 to &lt;ls_bdc&gt;-fval.
  endif.
END-OF-DEFINITION.</localMacros>
  <localTestClasses>*&quot;* use this source file for your ABAP unit test classes</localTestClasses>
  <attribute CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="MR_API" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="1 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="3" TYPE="LCL_API" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="MR_DB" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="2 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="3" TYPE="LCL_DB" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="MR_STR_LCTN_PRIORITY" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="3 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="3" TYPE="ZCL_WM_PARM_INV_STRG_LCTN_PRIT" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="MT_PRODUCT_UNITS" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="4 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="YT_PRODUCT_UNITS" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="M_INVENTORY_CLOSED" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="1 " ATTDECLTYP="0" ATTRDONLY="X" ATTEXPVIRT="0" TYPTYPE="1" TYPE="ABAP_BOOL" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <inheritance CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" REFCLSNAME="ZCL_WM_LG_AUT_MODEL" VERSION="1" STATE="1"/>
  <method CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="CALL_LI20" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="CALL_LI20" SCONAME="I_WAREHOUSE_NUMBER" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="LGNUM"/>
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="CALL_LI20" SCONAME="I_INVENTORY_RECORD" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="LVS_IVNUM"/>
   <exception CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="CALL_LI20" SCONAME="CX_BAPI_ERROR" VERSION="1" LANGU="E" MTDTYPE="0" EDITORDER="1 "/>
   <source>METHOD call_li20.
    DATA:
          lt_bdc       TYPE bdcdata_tab,
          ls_opt       TYPE ctu_params,
          lt_msg       TYPE tab_bdcmsgcoll,
          lt_return    TYPE bapiret2_t,
          l_message    TYPE string.
    FIELD-SYMBOLS:
                   &lt;ls_bdc&gt;    TYPE bdcdata,
                   &lt;ls_msg&gt;    TYPE bdcmsgcoll,
                   &lt;ls_return&gt; TYPE bapiret2.

    m_fill_in_bdc: &apos;X&apos; &apos;SAPML04I&apos;    &apos;0222&apos;,
                   &apos; &apos; &apos;BDC_OKCODE&apos;  &apos;/00&apos;,
                   &apos; &apos; &apos;LINV-LGNUM&apos;  i_warehouse_number,
                   &apos; &apos; &apos;LINV-IVNUM&apos;  i_inventory_record,
                   &apos; &apos; &apos;RL04I-DUNKL&apos; &apos;D&apos;.

    &quot; Processing options
    ls_opt-dismode = &apos;N&apos;.
    ls_opt-updmode = &apos;S&apos;.
    &quot; Transaction call
    &quot;Unlock inventory document
    me-&gt;mr_api-&gt;dequeue_ellinke(
      EXPORTING
        i_warehouse_number = i_warehouse_number
        i_inventory_record = i_inventory_record
    ).

    COMMIT WORK AND WAIT.

    CALL TRANSACTION &apos;LI20&apos; USING         lt_bdc
                            OPTIONS FROM  ls_opt
                            MESSAGES INTO lt_msg.

    READ TABLE lt_msg WITH KEY msgtyp = &apos;E&apos;
     TRANSPORTING NO FIELDS.
    IF sy-subrc = 0.
      LOOP AT lt_msg ASSIGNING &lt;ls_msg&gt;.
        MESSAGE
             ID &lt;ls_msg&gt;-msgid
           TYPE &lt;ls_msg&gt;-msgtyp
         NUMBER &lt;ls_msg&gt;-msgnr
           WITH &lt;ls_msg&gt;-msgv1 &lt;ls_msg&gt;-msgv2 &lt;ls_msg&gt;-msgv3 &lt;ls_msg&gt;-msgv4
           INTO l_message.

        APPEND INITIAL LINE TO lt_return ASSIGNING &lt;ls_return&gt;.
        &lt;ls_return&gt;-id = sy-msgid.
        &lt;ls_return&gt;-type = sy-msgty.
        &lt;ls_return&gt;-number = sy-msgno.
        &lt;ls_return&gt;-message = l_message.
        &lt;ls_return&gt;-message_v1 = sy-msgv1.
        &lt;ls_return&gt;-message_v2 = sy-msgv2.
        &lt;ls_return&gt;-message_v3 = sy-msgv3.
        &lt;ls_return&gt;-message_v4 = sy-msgv4.

        RAISE EXCEPTION TYPE cx_bapi_error
          EXPORTING
            status = lt_return.
      ENDLOOP.
    ELSE.
      me-&gt;m_inventory_closed = abap_true.
    ENDIF.
  ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="CHECK_COUNT_2FINISH" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="CHECK_COUNT_2FINISH" SCONAME="I_WAREHOUSE_NUMBER" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="LGNUM"/>
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="CHECK_COUNT_2FINISH" SCONAME="I_INVENTORY_RECORD" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="LVS_IVNUM"/>
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="CHECK_COUNT_2FINISH" SCONAME="I_INVENTORY_ITEM" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="LVS_IVPOS"/>
   <exception CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="CHECK_COUNT_2FINISH" SCONAME="CX_BAPI_ERROR" VERSION="1" LANGU="E" MTDTYPE="0" EDITORDER="1 "/>
   <source>METHOD check_count_2finish.
    DATA: lg_statuses          TYPE yg_statuses,
          lt_return            TYPE bapiret2_t,
          l_message            TYPE string.
    FIELD-SYMBOLS:
                   &lt;ls_return&gt; TYPE bapiret2,
                   &lt;ls_status&gt; LIKE LINE OF lg_statuses.

    APPEND INITIAL LINE TO lg_statuses ASSIGNING &lt;ls_status&gt;.
    &lt;ls_status&gt;-sign = &apos;I&apos;.
    &lt;ls_status&gt;-option = &apos;EQ&apos;.
    &lt;ls_status&gt;-low = zif_wm_lg_aut_inventory=&gt;mc_zcount_status-started.
    APPEND INITIAL LINE TO lg_statuses ASSIGNING &lt;ls_status&gt;.
    &lt;ls_status&gt;-sign = &apos;I&apos;.
    &lt;ls_status&gt;-option = &apos;EQ&apos;.
    &lt;ls_status&gt;-low = zif_wm_lg_aut_inventory=&gt;mc_zcount_status-su_finished.
    TRY.
        me-&gt;mr_db-&gt;qry_ztbwm_invnt_cnt(
          EXPORTING
            i_warehouse_number = i_warehouse_number
            i_inventory_record = i_inventory_record
            i_inventory_item   = i_inventory_item
            ig_statuses        = lg_statuses
*          IMPORTING
*            et_entries         =
        ).
*          CATCH cx_sy_sql_error.    &quot; SQL error
      CATCH cx_sy_sql_error.
        MESSAGE e114(zwm) INTO l_message.
        m_raise_error_message.
    ENDTRY.
  ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="CHECK_MATCH" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="CHECK_MATCH" SCONAME="I_WAREHOUSE_NUMBER" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="LGNUM"/>
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="CHECK_MATCH" SCONAME="I_INVENTORY_RECORD" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="LVS_IVNUM"/>
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="CHECK_MATCH" SCONAME="I_INVENTORY_ITEM" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="LVS_IVPOS"/>
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="CHECK_MATCH" SCONAME="R_MATCHED_COUNT" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="LINV_NANUM"/>
   <exception CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="CHECK_MATCH" SCONAME="CX_BAPI_ERROR" VERSION="1" LANGU="E" MTDTYPE="0" EDITORDER="1 "/>
   <source>METHOD check_match.
    TYPES: BEGIN OF ys_match,
            storage_location TYPE lgort_d,
            storage_unit     TYPE lenum,
            product          TYPE matnr,
            count_number     TYPE linv_nanum,
           END OF ys_match,
           yt_matches    TYPE SORTED TABLE OF ys_match
            WITH UNIQUE KEY storage_location storage_unit product count_number.
    DATA: lt_this_count      TYPE yt_custom_inventory_entries,
          lt_previous_counts TYPE yt_custom_inventory_entries,
          lt_matches         TYPE yt_matches,
          lt_matched_counts  TYPE STANDARD TABLE OF linv_nanum,
          lg_statuses        TYPE yg_statuses,
          ls_match           TYPE ys_match,
          lt_return          TYPE bapiret2_t,
          l_not_found        TYPE linv_nanum,
          l_message          TYPE string.
    FIELD-SYMBOLS: &lt;ls_this&gt;         LIKE LINE OF lt_this_count,
                   &lt;ls_previous&gt;     LIKE LINE OF lt_previous_counts,
                   &lt;ls_return&gt;       TYPE bapiret2,
                   &lt;ls_status&gt;       LIKE LINE OF lg_statuses,
                   &lt;l_matched_count&gt; TYPE linv_nanum.

    CLEAR r_matched_count.
    APPEND INITIAL LINE TO lg_statuses ASSIGNING &lt;ls_status&gt;.
    &lt;ls_status&gt;-sign = &apos;I&apos;.
    &lt;ls_status&gt;-option = &apos;EQ&apos;.
    &lt;ls_status&gt;-low = zif_wm_lg_aut_inventory=&gt;mc_zcount_status-started.
    APPEND INITIAL LINE TO lg_statuses ASSIGNING &lt;ls_status&gt;.
    &lt;ls_status&gt;-sign = &apos;I&apos;.
    &lt;ls_status&gt;-option = &apos;EQ&apos;.
    &lt;ls_status&gt;-low = zif_wm_lg_aut_inventory=&gt;mc_zcount_status-su_finished.

    TRY.
        me-&gt;mr_db-&gt;qry_ztbwm_invnt_cnt(
          EXPORTING
            i_warehouse_number = i_warehouse_number
            i_inventory_record = i_inventory_record
            i_inventory_item   = i_inventory_item
            ig_statuses        = lg_statuses
          IMPORTING
            et_entries         = lt_this_count
        ).
*          CATCH cx_sy_sql_error.    &quot; SQL error
        CLEAR lg_statuses.
        APPEND INITIAL LINE TO lg_statuses ASSIGNING &lt;ls_status&gt;.
        &lt;ls_status&gt;-sign = &apos;I&apos;.
        &lt;ls_status&gt;-option = &apos;EQ&apos;.
        &lt;ls_status&gt;-low = zif_wm_lg_aut_inventory=&gt;mc_zcount_status-counted.
        me-&gt;mr_db-&gt;qry_ztbwm_invnt_cnt(
           EXPORTING
             i_warehouse_number = i_warehouse_number
             i_inventory_record = i_inventory_record
             i_inventory_item   = i_inventory_item
             ig_statuses        = lg_statuses
           IMPORTING
             et_entries         = lt_previous_counts
         ).
*          CATCH cx_sy_sql_error.    &quot; SQL error
      CATCH cx_sy_sql_error.
        MESSAGE e106(zwm) INTO l_message.
        m_raise_error_message.
    ENDTRY.

    &quot;These entries cannot be matched since they don&apos;t exist in the WM system
    DELETE lt_previous_counts WHERE count_number = zif_wm_lg_aut_inventory=&gt;mc_initial_stock
                                AND quant(3)     = zif_wm_lg_aut_inventory=&gt;mc_new_quant_prefix.

    LOOP AT lt_this_count ASSIGNING &lt;ls_this&gt;.
      LOOP AT lt_previous_counts ASSIGNING &lt;ls_previous&gt; WHERE storage_location = &lt;ls_this&gt;-storage_location
                                                           AND storage_unit     = &lt;ls_this&gt;-storage_unit
                                                           AND product  = &lt;ls_this&gt;-product
                                                           AND unit     = &lt;ls_this&gt;-unit
                                                           AND quantity = &lt;ls_this&gt;-quantity.
        MOVE-CORRESPONDING &lt;ls_previous&gt; TO ls_match.
        INSERT ls_match INTO TABLE lt_matches.
        APPEND &lt;ls_previous&gt;-count_number TO lt_matched_counts.

        CLEAR ls_match.
      ENDLOOP.
    ENDLOOP.

    LOOP AT lt_previous_counts ASSIGNING &lt;ls_previous&gt;.
      READ TABLE lt_this_count WITH KEY storage_location = &lt;ls_previous&gt;-storage_location
                                        storage_unit     = &lt;ls_previous&gt;-storage_unit
                                        product          = &lt;ls_previous&gt;-product
       TRANSPORTING NO FIELDS.
      IF sy-subrc &lt;&gt; 0.
        DELETE: lt_matches        WHERE count_number = &lt;ls_previous&gt;-count_number,
                lt_matched_counts WHERE table_line = &lt;ls_previous&gt;-count_number.
      ENDIF.
    ENDLOOP.

    SORT lt_matched_counts BY table_line.
    DELETE ADJACENT DUPLICATES FROM lt_matched_counts COMPARING table_line.
    LOOP AT lt_this_count ASSIGNING &lt;ls_this&gt;.
      LOOP AT lt_matched_counts ASSIGNING &lt;l_matched_count&gt;.
        CLEAR l_not_found.
        READ TABLE lt_matches WITH KEY storage_location = &lt;ls_this&gt;-storage_location
                                       storage_unit     = &lt;ls_this&gt;-storage_unit
                                       product          = &lt;ls_this&gt;-product
                                       count_number     = &lt;l_matched_count&gt;
         TRANSPORTING NO FIELDS.
        IF sy-subrc &lt;&gt; 0.
          l_not_found = &lt;l_matched_count&gt;.
          EXIT.
        ENDIF.
      ENDLOOP.
      IF l_not_found IS NOT INITIAL.
        DELETE lt_matched_counts WHERE table_line = l_not_found.
      ENDIF.
      IF lt_matched_counts IS INITIAL.
        EXIT.
      ENDIF.
    ENDLOOP.

    READ TABLE lt_matched_counts ASSIGNING &lt;l_matched_count&gt; INDEX 1.
    IF sy-subrc = 0.
      r_matched_count = &lt;l_matched_count&gt;.
    ENDIF.
  ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="CHECK_PRODUCT" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="3 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="CHECK_PRODUCT" SCONAME="I_PLANT" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="WERKS_D"/>
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="CHECK_PRODUCT" SCONAME="I_PRODUCT" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="MATNR"/>
   <exception CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="CHECK_PRODUCT" SCONAME="CX_BAPI_ERROR" VERSION="1" LANGU="E" MTDTYPE="0" EDITORDER="1 "/>
   <source>METHOD check_product.
    DATA: lt_return            TYPE bapiret2_t,
          l_message            TYPE string.
    FIELD-SYMBOLS  &lt;ls_return&gt; TYPE bapiret2.

    TRY.
        me-&gt;mr_db-&gt;cnt_mard(
          EXPORTING
            i_plant   = i_plant
            i_product = i_product
        ).
*          CATCH cx_sy_sql_error.    &quot; SQL error
      CATCH cx_sy_sql_error.
        MESSAGE e105(zwm) INTO l_message.
        m_raise_error_message.
    ENDTRY.
  ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="CHECK_SU_STORAGE_BIN" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="4 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="CHECK_SU_STORAGE_BIN" SCONAME="IR_MODEL" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="ZCL_WM_LG_AUT_MODEL_RCOUNT"/>
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="CHECK_SU_STORAGE_BIN" SCONAME="I_WAREHOUSE_NUMBER" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="LGNUM"/>
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="CHECK_SU_STORAGE_BIN" SCONAME="I_STORAGE_UNIT" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="LENUM"/>
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="CHECK_SU_STORAGE_BIN" SCONAME="I_STORAGE_BIN" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="LGPLA"/>
   <exception CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="CHECK_SU_STORAGE_BIN" SCONAME="CX_BAPI_ERROR" VERSION="1" LANGU="E" MTDTYPE="0" EDITORDER="1 "/>
   <source>METHOD check_su_storage_bin.
    DATA: lx_error         TYPE REF TO cx_bapi_error,
          lt_return        TYPE bapiret2_t,
          l_su_storage_bin TYPE lgpla,
          l_message        TYPE string.
    FIELD-SYMBOLS  &lt;ls_return&gt; TYPE bapiret2.

    TRY.
        l_su_storage_bin = ir_model-&gt;get_su_position(
            i_warehouse_number = i_warehouse_number
            i_storage_unit     = i_storage_unit
        ).
*          CATCH cx_bapi_error.  &quot; BAPI Error Exception: Migrated Error Messages Type &quot;E&quot;
      CATCH cx_bapi_error INTO lx_error.
        MESSAGE e112(zwm) INTO l_message.
        m_raise_error_message.
    ENDTRY.

    IF l_su_storage_bin &lt;&gt; i_storage_bin.
      MESSAGE e111(zwm) WITH l_su_storage_bin INTO l_message.
      m_raise_error_message.
    ENDIF.
  ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="CLOSE_COUNT" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="3 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="CLOSE_COUNT" SCONAME="I_WAREHOUSE_NUMBER" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="LGNUM"/>
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="CLOSE_COUNT" SCONAME="I_INVENTORY_RECORD" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="LVS_IVNUM"/>
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="CLOSE_COUNT" SCONAME="I_INVENTORY_ITEM" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="LVS_IVPOS"/>
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="CLOSE_COUNT" SCONAME="I_MATCHED_COUNT" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="LINV_NANUM"/>
   <exception CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="CLOSE_COUNT" SCONAME="CX_BAPI_ERROR" VERSION="1" LANGU="E" MTDTYPE="0" EDITORDER="1 "/>
   <source>METHOD close_count.
    DATA: lx_error                    TYPE REF TO cx_bapi_error,
          lt_count_entries            TYPE yt_custom_inventory_entries,
          lt_matched_entries          TYPE yt_custom_inventory_entries,
          lt_return                   TYPE bapiret2_t,
          lg_statuses                 TYPE yg_statuses,
          l_now                       TYPE timestamp,
          l_message                   TYPE string.
    FIELD-SYMBOLS: &lt;ls_entry&gt;         LIKE LINE OF lt_count_entries,
                   &lt;ls_matched_entry&gt; LIKE LINE OF lt_matched_entries,
                   &lt;ls_return&gt;        TYPE bapiret2,
                   &lt;ls_status&gt;        LIKE LINE OF lg_statuses.

    &quot;1. Lock counting on storage bin
    TRY.
        lock_storage_bin(
          EXPORTING
            i_warehouse_number = i_warehouse_number
            i_inventory_record = i_inventory_record
            i_inventory_item   = i_inventory_item
        ).
*          CATCH cx_bapi_error.    &quot; BAPI Error Exception: Migrated Error Messages Type &quot;E&quot;.
      CATCH cx_bapi_error INTO lx_error.
        RAISE EXCEPTION lx_error.
    ENDTRY.
    &quot;2. Set status to counted
    APPEND INITIAL LINE TO lg_statuses ASSIGNING &lt;ls_status&gt;.
    &lt;ls_status&gt;-sign = &apos;I&apos;.
    &lt;ls_status&gt;-option = &apos;EQ&apos;.
    &lt;ls_status&gt;-low = zif_wm_lg_aut_inventory=&gt;mc_zcount_status-started.
    APPEND INITIAL LINE TO lg_statuses ASSIGNING &lt;ls_status&gt;.
    &lt;ls_status&gt;-sign = &apos;I&apos;.
    &lt;ls_status&gt;-option = &apos;EQ&apos;.
    &lt;ls_status&gt;-low = zif_wm_lg_aut_inventory=&gt;mc_zcount_status-su_finished.
    TRY.
        me-&gt;mr_db-&gt;qry_ztbwm_invnt_cnt(
          EXPORTING
            i_warehouse_number = i_warehouse_number
            i_inventory_record = i_inventory_record
            i_inventory_item   = i_inventory_item
            ig_statuses        = lg_statuses
          IMPORTING
            et_entries         = lt_count_entries
        ).
*          CATCH cx_sy_sql_error.    &quot; SQL error

        GET TIME.
        CONVERT DATE sy-datlo TIME sy-timlo INTO TIME STAMP l_now TIME ZONE sy-zonlo.
        LOOP AT lt_count_entries ASSIGNING &lt;ls_entry&gt;.
          &lt;ls_entry&gt;-status          = zif_wm_lg_aut_inventory=&gt;mc_zcount_status-counted.
          &lt;ls_entry&gt;-zzmatch         = i_matched_count.
          &lt;ls_entry&gt;-changed_by      = sy-uname.
          &lt;ls_entry&gt;-changed_at      = l_now.
          &lt;ls_entry&gt;-change_timezone = sy-zonlo.
        ENDLOOP.

        me-&gt;mr_db-&gt;mdf_ztbwm_invnt_cnt( it_entries = lt_count_entries ).
*          CATCH cx_sy_sql_error.    &quot; SQL error

        &quot;Setting the matched count
        IF i_matched_count IS NOT INITIAL.
          me-&gt;mr_db-&gt;qry_ztbwm_invnt_cnt_by_count(
            EXPORTING
              i_warehouse_number = i_warehouse_number
              i_inventory_record = i_inventory_record
              i_inventory_item   = i_inventory_item
              i_count_number     = i_matched_count
            IMPORTING
              et_entries         = lt_matched_entries
          ).
*          CATCH cx_sy_sql_error.    &quot; SQL error

          READ TABLE lt_count_entries INDEX 1
           ASSIGNING &lt;ls_entry&gt;.
          IF sy-subrc = 0.
            LOOP AT lt_matched_entries ASSIGNING &lt;ls_matched_entry&gt;.
              &lt;ls_matched_entry&gt;-zzmatch         = &lt;ls_entry&gt;-count_number.
              &lt;ls_matched_entry&gt;-changed_by      = sy-uname.
              &lt;ls_matched_entry&gt;-changed_at      = l_now.
              &lt;ls_matched_entry&gt;-change_timezone = sy-zonlo.
            ENDLOOP.

            me-&gt;mr_db-&gt;mdf_ztbwm_invnt_cnt( it_entries = lt_matched_entries ).
*          CATCH cx_sy_sql_error.    &quot; SQL error
          ENDIF.
        ENDIF.

        &quot;3. Release lock
        me-&gt;mr_api-&gt;dequeue_eztbwm_invnt_cnt(
          EXPORTING
            i_warehouse_number = i_warehouse_number
            i_inventory_record = i_inventory_record
            i_inventory_item   = i_inventory_item
        ).
      CATCH cx_sy_sql_error ##no_handler.
        MESSAGE e106(zwm) INTO l_message.
        m_raise_error_message.
    ENDTRY.
  ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="CONSTRUCTOR" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="2" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD constructor.

    super-&gt;constructor( ).
    CREATE OBJECT: me-&gt;mr_api,
                   me-&gt;mr_db,
                   me-&gt;mr_str_lctn_priority.

    me-&gt;m_inventory_closed = abap_false.
  ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="COUNT_PRODUCT" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="5 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="COUNT_PRODUCT" SCONAME="I_WAREHOUSE_NUMBER" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="LGNUM"/>
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="COUNT_PRODUCT" SCONAME="I_INVENTORY_RECORD" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="LVS_IVNUM"/>
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="COUNT_PRODUCT" SCONAME="I_INVENTORY_ITEM" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="LVS_IVPOS"/>
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="COUNT_PRODUCT" SCONAME="I_STORAGE_TYPE" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="LGTYP"/>
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="COUNT_PRODUCT" SCONAME="I_STORAGE_BIN" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="5 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="LGPLA"/>
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="COUNT_PRODUCT" SCONAME="I_PRODUCT" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="6 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="MATNR"/>
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="COUNT_PRODUCT" SCONAME="R_COUNT" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="7 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="INT4"/>
   <exception CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="COUNT_PRODUCT" SCONAME="CX_BAPI_ERROR" VERSION="1" LANGU="E" MTDTYPE="0" EDITORDER="1 "/>
   <source>METHOD count_product.
    DATA: lr_priority_settings TYPE REF TO data,
          lx_error             TYPE REF TO cx_bapi_error,
          lt_product_counts    TYPE yt_counts_no_key,
          lt_product_stocks    TYPE yt_counts_no_key,
          lt_entries           TYPE yt_custom_inventory_entries,
          lg_started           TYPE yg_statuses,
          lg_counted           TYPE yg_statuses,
          ls_new_entry         LIKE LINE OF lt_product_counts,
          ls_entry             TYPE ztbwm_invnt_cnt,
          lt_return            TYPE bapiret2_t,
          ls_product_unit      TYPE ys_unit,
          l_this_count_id      TYPE linv_nanum,
          l_counted            TYPE abap_bool,
          l_now                TYPE timestamp,
          l_creation_at        TYPE timestamp,
          l_message            TYPE string.
    FIELD-SYMBOLS: &lt;lt_priority&gt;      TYPE zcl_wm_parm_inv_strg_lctn_prit=&gt;yt_runtime,
                   &lt;ls_priority&gt;      LIKE LINE OF &lt;lt_priority&gt;,
                   &lt;ls_product_count&gt; LIKE LINE OF lt_product_counts,
                   &lt;ls_stock&gt;         LIKE LINE OF lt_product_stocks,
                   &lt;ls_return&gt;        TYPE bapiret2,
                   &lt;ls_status&gt;        LIKE LINE OF lg_started.

    CLEAR r_count.
    &quot;1. Lock counting on storage bin
    TRY.
        lock_storage_bin(
          EXPORTING
            i_warehouse_number = i_warehouse_number
            i_inventory_record = i_inventory_record
            i_inventory_item   = i_inventory_item
        ).
*          CATCH cx_bapi_error.    &quot; BAPI Error Exception: Migrated Error Messages Type &quot;E&quot;
      CATCH cx_bapi_error INTO lx_error.
        RAISE EXCEPTION lx_error.
    ENDTRY.
    &quot;2. Get last open count id and its quantity
    APPEND INITIAL LINE TO lg_started ASSIGNING &lt;ls_status&gt;.
    &lt;ls_status&gt;-sign = &apos;I&apos;.
    &lt;ls_status&gt;-option = &apos;EQ&apos;.
    &lt;ls_status&gt;-low = zif_wm_lg_aut_inventory=&gt;mc_zcount_status-started.
    APPEND INITIAL LINE TO lg_started ASSIGNING &lt;ls_status&gt;.
    &lt;ls_status&gt;-sign = &apos;I&apos;.
    &lt;ls_status&gt;-option = &apos;EQ&apos;.
    &lt;ls_status&gt;-low = zif_wm_lg_aut_inventory=&gt;mc_zcount_status-su_finished.
    TRY.
        me-&gt;mr_db-&gt;qry_prodcount_ztbwm_invnt_cnt(
          EXPORTING
            i_warehouse_number = i_warehouse_number
            i_inventory_record = i_inventory_record
            i_inventory_item   = i_inventory_item
            i_product          = i_product
            ig_statuses        = lg_started
          IMPORTING
            et_product_counts  = lt_product_counts
        ).
*          CATCH cx_sy_sql_error.    &quot; SQL error
      CATCH cx_sy_sql_error.
        &quot;2.1. If not found:
        &quot;2.1.1. Get last closed count id and increment it by one
        APPEND INITIAL LINE TO lg_counted ASSIGNING &lt;ls_status&gt;.
        &lt;ls_status&gt;-sign = &apos;I&apos;.
        &lt;ls_status&gt;-option = &apos;EQ&apos;.
        &lt;ls_status&gt;-low = zif_wm_lg_aut_inventory=&gt;mc_zcount_status-counted.
        TRY.
            me-&gt;mr_db-&gt;qry_prodcount_ztbwm_invnt_cnt(
              EXPORTING
                i_warehouse_number = i_warehouse_number
                i_inventory_record = i_inventory_record
                i_inventory_item   = i_inventory_item
                i_product          = i_product
                ig_statuses        = lg_counted
              IMPORTING
                et_product_counts  = lt_product_counts
            ).
*              CATCH cx_sy_sql_error.    &quot; SQL error

            SORT lt_product_counts BY warehouse_number inventory_record
                                      inventory_item   quant.
            DELETE ADJACENT DUPLICATES FROM lt_product_counts COMPARING warehouse_number inventory_record
                                                                        inventory_item   quant.
            LOOP AT lt_product_counts ASSIGNING &lt;ls_product_count&gt;.
              CLEAR &lt;ls_product_count&gt;-quantity.
            ENDLOOP.

            &quot;This is a new count
            CONVERT DATE sy-datlo TIME sy-timlo INTO TIME STAMP l_creation_at TIME ZONE sy-zonlo.
          CATCH cx_sy_sql_error.
            TRY.
                me-&gt;start_count(
                    EXPORTING
                        i_warehouse_number = i_warehouse_number
                        i_inventory_record = i_inventory_record
                        i_inventory_item   = i_inventory_item
                        i_storage_type     = i_storage_type
                        i_storage_bin      = i_storage_bin
                        i_product          = i_product
                ).
              CATCH cx_sy_sql_error.
                &quot;This is a product that is not known to be in this storage bin.
                RAISE EXCEPTION TYPE lcx_new_item.
            ENDTRY.

            RETRY.
          CATCH cx_bapi_error INTO lx_error.
            RAISE EXCEPTION lx_error.
        ENDTRY.
      CATCH lcx_new_item.
        RETRY.
    ENDTRY.

    TRY.
        l_this_count_id = me-&gt;get_this_count_id(
                i_warehouse_number = i_warehouse_number
                i_inventory_record = i_inventory_record
                i_inventory_item   = i_inventory_item
            ).
      CATCH cx_bapi_error INTO lx_error.
        RAISE EXCEPTION lx_error.
    ENDTRY.

    TRY.
        me-&gt;mr_db-&gt;qry_prodstock_ztbwm_invnt_cnt(
              EXPORTING
                i_warehouse_number = i_warehouse_number
                i_inventory_record = i_inventory_record
                i_inventory_item   = i_inventory_item
                i_product          = i_product
              IMPORTING
                et_product_stocks  = lt_product_stocks
            ).
      CATCH cx_sy_sql_error.
        MESSAGE e106(zwm) INTO l_message.
        m_raise_error_message.
    ENDTRY.

    &quot;3. Increment count by one
    TRY.
        lr_priority_settings = mr_str_lctn_priority-&gt;zif_wm_parameter_retriever~get_data( ).
        ASSIGN lr_priority_settings-&gt;* TO &lt;lt_priority&gt;.
*          CATCH cx_bapi_error.  &quot; BAPI Error Exception: Migrated Error Messages Type &quot;E&quot;
      CATCH cx_bapi_error ##no_handler.
    ENDTRY.

    IF &lt;lt_priority&gt; IS ASSIGNED.
      CLEAR l_counted.
      LOOP AT &lt;lt_priority&gt; ASSIGNING &lt;ls_priority&gt;.
        IF &lt;ls_priority&gt;-storage_type IS NOT INITIAL.
          READ TABLE lt_product_counts WITH KEY storage_type = &lt;ls_priority&gt;-storage_type
                                                storage_location = &lt;ls_priority&gt;-storage_location
           ASSIGNING &lt;ls_product_count&gt;.
          IF sy-subrc = 0.
            READ TABLE lt_product_stocks ASSIGNING &lt;ls_stock&gt;
             WITH KEY storage_type     = &lt;ls_priority&gt;-storage_type
                      storage_location = &lt;ls_priority&gt;-storage_location.
            IF sy-subrc = 0.
              IF &lt;ls_stock&gt;-quantity &gt; &lt;ls_product_count&gt;-quantity.
                ADD 1 TO &lt;ls_product_count&gt;-quantity.
                l_counted = abap_true.
                EXIT.
              ENDIF.
            ENDIF.
          ENDIF.
        ELSEIF &lt;ls_priority&gt;-storage_type IS INITIAL.
          READ TABLE lt_product_counts WITH KEY storage_location = &lt;ls_priority&gt;-storage_location
           ASSIGNING &lt;ls_product_count&gt;.
          IF sy-subrc = 0.
            READ TABLE lt_product_stocks ASSIGNING &lt;ls_stock&gt;
                         WITH KEY storage_location = &lt;ls_priority&gt;-storage_location.
            IF sy-subrc = 0.
              IF &lt;ls_stock&gt;-quantity &gt; &lt;ls_product_count&gt;-quantity.
                ADD 1 TO &lt;ls_product_count&gt;-quantity.
                l_counted = abap_true.
                EXIT.
              ENDIF.
            ENDIF.
          ENDIF..
        ENDIF.
      ENDLOOP.

      IF l_counted = abap_false.
        LOOP AT &lt;lt_priority&gt; ASSIGNING &lt;ls_priority&gt;.
          IF &lt;ls_priority&gt;-storage_type &lt;&gt; i_storage_type AND
             &lt;ls_priority&gt;-storage_type IS NOT INITIAL.
            CONTINUE.
          ENDIF.

          READ TABLE lt_product_counts WITH KEY storage_location = &lt;ls_priority&gt;-storage_location
           ASSIGNING &lt;ls_product_count&gt;.
          IF sy-subrc = 0.
            ADD 1 TO &lt;ls_product_count&gt;-quantity.
            EXIT.
          ELSE.
            READ TABLE lt_product_counts INDEX 1
             ASSIGNING &lt;ls_product_count&gt;.
            IF sy-subrc = 0.
              GET TIME.
              CONVERT DATE sy-datlo TIME sy-timlo INTO TIME STAMP l_now TIME ZONE sy-zonlo.

              MOVE-CORRESPONDING &lt;ls_product_count&gt; TO ls_new_entry.
              ls_new_entry-created_at = l_now.
              ls_new_entry-created_by = sy-uname.
              ls_new_entry-creation_tz = sy-zonlo.
              CLEAR ls_new_entry-quantity.
              ls_new_entry-storage_location = &lt;ls_priority&gt;-storage_location.
              ADD 1 TO ls_new_entry-quantity.

              TRY.
                  me-&gt;set_stock_4new_item(
                      EXPORTING
                                  i_warehouse_number = i_warehouse_number
                                  i_inventory_record = i_inventory_record
                                  i_inventory_item   = i_inventory_item
                                  i_storage_location = ls_new_entry-storage_location
                                  i_storage_type     = i_storage_type
                                  i_storage_bin      = i_storage_bin
                                  i_product          = i_product
                   ).
                CATCH cx_bapi_error INTO lx_error.
                  RAISE EXCEPTION lx_error.
              ENDTRY.

              TRY.
                  me-&gt;mr_db-&gt;qry_prodstock_ztbwm_invnt_cnt(
                        EXPORTING
                          i_warehouse_number = i_warehouse_number
                          i_inventory_record = i_inventory_record
                          i_inventory_item   = i_inventory_item
                          i_product          = i_product
                        IMPORTING
                          et_product_stocks  = lt_product_stocks
                      ).
                CATCH cx_sy_sql_error.
                  MESSAGE e106(zwm) INTO l_message.
                  m_raise_error_message.
              ENDTRY.

              READ TABLE lt_product_stocks WITH KEY storage_location = &lt;ls_priority&gt;-storage_location
              ASSIGNING &lt;ls_stock&gt;.
              IF sy-subrc = 0.
                ls_new_entry-quant = &lt;ls_stock&gt;-quant.
              ENDIF.

              APPEND ls_new_entry TO lt_product_counts.
              EXIT.
            ENDIF.
          ENDIF.
        ENDLOOP.
      ENDIF.
    ELSE.
      READ TABLE lt_product_counts INDEX 1
       ASSIGNING &lt;ls_product_count&gt;.
      IF sy-subrc = 0.
        ADD 1 TO &lt;ls_product_count&gt;-quantity.
      ENDIF.
    ENDIF.

    LOOP AT lt_product_counts ASSIGNING &lt;ls_product_count&gt;.
      MOVE-CORRESPONDING &lt;ls_product_count&gt; TO ls_entry.
      ls_entry-count_number     = l_this_count_id.
      ls_entry-status           = zif_wm_lg_aut_inventory=&gt;mc_zcount_status-started.
      IF ls_product_unit-unit IS INITIAL.
        READ TABLE me-&gt;mt_product_units WITH KEY product = i_product
         INTO ls_product_unit.
        IF sy-subrc &lt;&gt; 0.
          TRY.
              ls_product_unit-unit    = me-&gt;mr_db-&gt;qry_meins_mara( i_product ).
              ls_product_unit-product = i_product.
              INSERT ls_product_unit INTO TABLE me-&gt;mt_product_units.
            CATCH cx_sy_sql_error.
              MESSAGE e106(zwm) INTO l_message.
              m_raise_error_message.
          ENDTRY.
        ENDIF.
      ENDIF.

      GET TIME.
      CONVERT DATE sy-datlo TIME sy-timlo INTO TIME STAMP l_now TIME ZONE sy-zonlo.
      ls_entry-changed_by = sy-uname.
      ls_entry-changed_at = l_now.
      ls_entry-change_timezone = sy-zonlo.
      IF ls_entry-creation_timezone IS INITIAL.
        ls_entry-creation_timezone = sy-zonlo.
      ENDIF.
      IF l_creation_at IS NOT INITIAL.
        ls_entry-created_at = l_creation_at.
        ls_entry-created_by = sy-uname.
        ls_entry-creation_timezone = sy-zonlo.
      ENDIF.

      INSERT ls_entry INTO TABLE lt_entries.
      CLEAR ls_entry.

      r_count = r_count + &lt;ls_product_count&gt;-quantity.
    ENDLOOP.
    TRY.
        me-&gt;mr_db-&gt;mdf_ztbwm_invnt_cnt( lt_entries ).
        COMMIT WORK.

        r_count = me-&gt;mr_db-&gt;sum_quantity_ztbwm_invnt_cnt(
            i_warehouse_number = i_warehouse_number
            i_inventory_record = i_inventory_record
            i_inventory_item   = i_inventory_item
            ig_statuses        = lg_started
        ).
      CATCH cx_sy_sql_error.
        MESSAGE e106(zwm) INTO l_message.
        m_raise_error_message.
    ENDTRY.

    &quot;4. Release lock
    me-&gt;mr_api-&gt;dequeue_eztbwm_invnt_cnt(
      EXPORTING
        i_warehouse_number = i_warehouse_number
        i_inventory_record = i_inventory_record
        i_inventory_item   = i_inventory_item
    ).
  ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="COUNT_SU" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="6 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="COUNT_SU" SCONAME="I_WAREHOUSE_NUMBER" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="LGNUM"/>
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="COUNT_SU" SCONAME="I_INVENTORY_RECORD" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="LVS_IVNUM"/>
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="COUNT_SU" SCONAME="I_INVENTORY_ITEM" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="LVS_IVPOS"/>
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="COUNT_SU" SCONAME="I_STORAGE_TYPE" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="LGTYP"/>
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="COUNT_SU" SCONAME="I_STORAGE_BIN" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="5 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="LGPLA"/>
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="COUNT_SU" SCONAME="I_STORAGE_UNIT" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="6 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="LENUM"/>
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="COUNT_SU" SCONAME="I_PRODUCT" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="7 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="MATNR"/>
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="COUNT_SU" SCONAME="I_UNIT" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="8 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="MEINS"/>
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="COUNT_SU" SCONAME="I_QUANTITY" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="9 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="MENGE_D"/>
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="COUNT_SU" SCONAME="R_COUNT" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="10 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="INT4"/>
   <exception CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="COUNT_SU" SCONAME="CX_BAPI_ERROR" VERSION="1" LANGU="E" MTDTYPE="0" EDITORDER="1 "/>
   <source>METHOD count_su.
    DATA: lr_priority_settings TYPE REF TO data,
          lx_error             TYPE REF TO cx_bapi_error,
          lt_product_counts    TYPE yt_counts_no_key,
          lt_product_stocks    TYPE yt_counts_no_key,
          lt_entries           TYPE yt_custom_inventory_entries,
          lt_return            TYPE bapiret2_t,
          lg_statuses          TYPE yg_statuses,
          ls_new_entry         LIKE LINE OF lt_product_counts,
          ls_product_unit      TYPE ys_unit,
          ls_entry             TYPE ztbwm_invnt_cnt,
          l_this_count_id      TYPE linv_nanum,
          l_quantity           TYPE menge_d,
          l_now                TYPE timestamp,
          l_counted            TYPE abap_bool,
          l_message            TYPE string.
    FIELD-SYMBOLS: &lt;lt_priority&gt;      TYPE zcl_wm_parm_inv_strg_lctn_prit=&gt;yt_runtime,
                   &lt;ls_priority&gt;      LIKE LINE OF &lt;lt_priority&gt;,
                   &lt;ls_product_count&gt; LIKE LINE OF lt_product_counts,
                   &lt;ls_stock&gt;         LIKE LINE OF lt_product_stocks,
                   &lt;ls_return&gt;        TYPE bapiret2,
                   &lt;ls_status&gt;        LIKE LINE OF lg_statuses.

    CLEAR r_count.
    &quot;1. Lock counting on storage bin
    TRY.
        lock_storage_bin(
          EXPORTING
            i_warehouse_number = i_warehouse_number
            i_inventory_record = i_inventory_record
            i_inventory_item   = i_inventory_item
        ).
*          CATCH cx_bapi_error.    &quot; BAPI Error Exception: Migrated Error Messages Type &quot;E&quot;
      CATCH cx_bapi_error INTO lx_error.
        RAISE EXCEPTION lx_error.
    ENDTRY.
    &quot;2. Get last open count id and its quantity
    APPEND INITIAL LINE TO lg_statuses ASSIGNING &lt;ls_status&gt;.
    &lt;ls_status&gt;-sign = &apos;I&apos;.
    &lt;ls_status&gt;-option = &apos;EQ&apos;.
    &lt;ls_status&gt;-low = zif_wm_lg_aut_inventory=&gt;mc_zcount_status-counted.
    TRY.
        me-&gt;mr_db-&gt;qry_sucount_ztbwm_invnt_cnt(
          EXPORTING
            i_warehouse_number = i_warehouse_number
            i_inventory_record = i_inventory_record
            i_inventory_item   = i_inventory_item
            i_storage_unit     = i_storage_unit
            i_product          = i_product
            ig_statuses        = lg_statuses
          IMPORTING
            et_su_counts       = lt_product_counts
        ).
*          CATCH cx_sy_sql_error.    &quot; SQL error
        DELETE lt_product_counts WHERE count_number &lt;&gt; zif_wm_lg_aut_inventory=&gt;mc_initial_stock.
        READ TABLE lt_product_counts INDEX 1
            ASSIGNING &lt;ls_product_count&gt;.
        IF sy-subrc = 0.
          LOOP AT lt_product_counts ASSIGNING &lt;ls_product_count&gt;.
            CLEAR &lt;ls_product_count&gt;-quantity.
          ENDLOOP.
        ENDIF.


        l_this_count_id = me-&gt;get_this_count_id(
            i_warehouse_number = i_warehouse_number
            i_inventory_record = i_inventory_record
            i_inventory_item   = i_inventory_item
        ).
*            CATCH cx_bapi_error.  &quot; BAPI Error Exception: Migrated Error Messages Type &quot;E&quot;.
      CATCH cx_sy_sql_error.
        TRY.
            me-&gt;start_su_count(
                EXPORTING
                    i_warehouse_number = i_warehouse_number
                    i_inventory_record = i_inventory_record
                    i_inventory_item   = i_inventory_item
                    i_storage_type     = i_storage_type
                    i_storage_bin      = i_storage_bin
                    i_storage_unit     = i_storage_unit
                    i_product          = i_product
            ).
          CATCH cx_bapi_error INTO lx_error.
            RAISE EXCEPTION lx_error.
        ENDTRY.

        RETRY.
      CATCH cx_bapi_error INTO lx_error.
        RAISE EXCEPTION lx_error.
    ENDTRY.

    TRY.
        me-&gt;mr_db-&gt;qry_sustock_ztbwm_invnt_cnt(
              EXPORTING
                i_warehouse_number = i_warehouse_number
                i_inventory_record = i_inventory_record
                i_inventory_item   = i_inventory_item
                i_storage_unit     = i_storage_unit
                i_product          = i_product
              IMPORTING
                et_su_stocks       = lt_product_stocks
            ).
      CATCH cx_sy_sql_error.
        MESSAGE e106(zwm) INTO l_message.
        m_raise_error_message.
    ENDTRY.

    &quot;3. Register count
    TRY.
        lr_priority_settings = mr_str_lctn_priority-&gt;zif_wm_parameter_retriever~get_data( ).
        ASSIGN lr_priority_settings-&gt;* TO &lt;lt_priority&gt;.
*          CATCH cx_bapi_error.  &quot; BAPI Error Exception: Migrated Error Messages Type &quot;E&quot;
      CATCH cx_bapi_error ##no_handler.
    ENDTRY.

    l_quantity = i_quantity.
    IF &lt;lt_priority&gt; IS ASSIGNED.
      CLEAR l_counted.
      LOOP AT &lt;lt_priority&gt; ASSIGNING &lt;ls_priority&gt;.
        IF &lt;ls_priority&gt;-storage_type IS NOT INITIAL.
          READ TABLE lt_product_counts WITH KEY storage_type = &lt;ls_priority&gt;-storage_type
                                                storage_location = &lt;ls_priority&gt;-storage_location
           ASSIGNING &lt;ls_product_count&gt;.
          IF sy-subrc = 0 AND
            &lt;ls_product_count&gt;-quantity = 0.
            READ TABLE lt_product_stocks WITH KEY storage_type = &lt;ls_priority&gt;-storage_type
                                                  storage_location = &lt;ls_priority&gt;-storage_location
             ASSIGNING &lt;ls_stock&gt;.
            IF sy-subrc = 0.
              IF &lt;ls_stock&gt;-quantity &gt;= l_quantity.
                &lt;ls_product_count&gt;-quantity = l_quantity.
                &lt;ls_stock&gt;-quantity = &lt;ls_stock&gt;-quantity - l_quantity.
                l_counted = abap_true.
                EXIT.
              ELSE.
                &lt;ls_product_count&gt;-quantity = &lt;ls_stock&gt;-quantity.
                l_quantity = l_quantity - &lt;ls_stock&gt;-quantity.
                CLEAR &lt;ls_stock&gt;-quantity.
              ENDIF.
            ENDIF.
          ELSE.
            READ TABLE lt_product_counts WITH KEY storage_location = &lt;ls_priority&gt;-storage_location
             ASSIGNING &lt;ls_product_count&gt;.
            IF sy-subrc = 0 AND &lt;ls_priority&gt;-storage_type IS INITIAL.
              READ TABLE lt_product_stocks WITH KEY storage_location = &lt;ls_priority&gt;-storage_location
               ASSIGNING &lt;ls_stock&gt;.
              IF sy-subrc = 0 AND
                 &lt;ls_product_count&gt;-quantity = 0.
                IF &lt;ls_stock&gt;-quantity &gt;= l_quantity.
                  &lt;ls_product_count&gt;-quantity = l_quantity.
                  &lt;ls_stock&gt;-quantity = &lt;ls_stock&gt;-quantity - l_quantity.
                  l_counted = abap_true.
                  EXIT.
                ELSE.
                  &lt;ls_product_count&gt;-quantity = &lt;ls_stock&gt;-quantity.
                  l_quantity = l_quantity - &lt;ls_stock&gt;-quantity.
                  CLEAR &lt;ls_stock&gt;-quantity.
                ENDIF.
              ENDIF.
            ENDIF.
          ENDIF.
        ELSEIF &lt;ls_priority&gt;-storage_type IS INITIAL.
          READ TABLE lt_product_counts WITH KEY storage_location = &lt;ls_priority&gt;-storage_location
           ASSIGNING &lt;ls_product_count&gt;.
          IF sy-subrc = 0 AND
             &lt;ls_product_count&gt;-quantity = 0.
            READ TABLE lt_product_stocks WITH KEY storage_location = &lt;ls_priority&gt;-storage_location
             ASSIGNING &lt;ls_stock&gt;.
            IF sy-subrc = 0.
              IF &lt;ls_stock&gt;-quantity &gt;= l_quantity.
                &lt;ls_product_count&gt;-quantity = l_quantity.
                &lt;ls_stock&gt;-quantity = &lt;ls_stock&gt;-quantity - l_quantity.
                l_counted = abap_true.
                EXIT.
              ELSE.
                &lt;ls_product_count&gt;-quantity = &lt;ls_stock&gt;-quantity.
                l_quantity = l_quantity - &lt;ls_stock&gt;-quantity.
                CLEAR &lt;ls_stock&gt;-quantity.
              ENDIF.
            ENDIF.
          ENDIF.
        ENDIF.
      ENDLOOP.

      IF l_counted = abap_false.
        LOOP AT &lt;lt_priority&gt; ASSIGNING &lt;ls_priority&gt;.
          IF &lt;ls_priority&gt;-storage_type &lt;&gt; i_storage_type AND
             &lt;ls_priority&gt;-storage_type IS NOT INITIAL.
            CONTINUE.
          ENDIF.
          READ TABLE lt_product_counts WITH KEY storage_location = &lt;ls_priority&gt;-storage_location
                                                storage_unit     = i_storage_unit
           ASSIGNING &lt;ls_product_count&gt;.
          IF sy-subrc = 0.
            &lt;ls_product_count&gt;-quantity = &lt;ls_product_count&gt;-quantity + l_quantity.
            EXIT.
          ELSE.
            READ TABLE lt_product_counts INDEX 1
             ASSIGNING &lt;ls_product_count&gt;.
            IF sy-subrc = 0.
              GET TIME.
              CONVERT DATE sy-datlo TIME sy-timlo INTO TIME STAMP l_now TIME ZONE sy-zonlo.

              MOVE-CORRESPONDING &lt;ls_product_count&gt; TO ls_new_entry.
              ls_new_entry-created_at = l_now.
              ls_new_entry-created_by = sy-uname.
              ls_new_entry-creation_tz = sy-zonlo.
              ls_new_entry-storage_location = &lt;ls_priority&gt;-storage_location.
              ls_new_entry-quantity = l_quantity.

              TRY.
                  me-&gt;set_stock_4new_item(
                      EXPORTING
                                  i_warehouse_number = i_warehouse_number
                                  i_inventory_record = i_inventory_record
                                  i_inventory_item   = i_inventory_item
                                  i_storage_location = ls_new_entry-storage_location
                                  i_storage_type     = i_storage_type
                                  i_storage_bin      = i_storage_bin
                                  i_storage_unit     = i_storage_unit
                                  i_product          = i_product
                   ).

                  TRY.
                      me-&gt;mr_db-&gt;qry_sustock_ztbwm_invnt_cnt(
                            EXPORTING
                              i_warehouse_number = i_warehouse_number
                              i_inventory_record = i_inventory_record
                              i_inventory_item   = i_inventory_item
                              i_storage_unit     = i_storage_unit
                              i_product          = i_product
                            IMPORTING
                              et_su_stocks       = lt_product_stocks
                          ).
                    CATCH cx_sy_sql_error.
                      MESSAGE e106(zwm) INTO l_message.
                      m_raise_error_message.
                  ENDTRY.
                CATCH cx_bapi_error INTO lx_error.
                  RAISE EXCEPTION lx_error.
              ENDTRY.

              READ TABLE lt_product_stocks WITH KEY storage_location = &lt;ls_priority&gt;-storage_location
               ASSIGNING &lt;ls_stock&gt;.
              IF sy-subrc = 0.
                ls_new_entry-quant = &lt;ls_stock&gt;-quant.
              ENDIF.
              APPEND ls_new_entry TO lt_product_counts.
              EXIT.
            ENDIF.
          ENDIF.
        ENDLOOP.
      ENDIF.
    ELSE.
      READ TABLE lt_product_counts INDEX 1
       ASSIGNING &lt;ls_product_count&gt;.
      IF sy-subrc = 0.
        &lt;ls_product_count&gt;-quantity = i_quantity.
      ENDIF.
    ENDIF.

    LOOP AT lt_product_counts ASSIGNING &lt;ls_product_count&gt;.
      MOVE-CORRESPONDING &lt;ls_product_count&gt; TO ls_entry.
      ls_entry-count_number     = l_this_count_id.
      ls_entry-status           = zif_wm_lg_aut_inventory=&gt;mc_zcount_status-started.

      IF ls_product_unit-unit IS INITIAL.
        READ TABLE me-&gt;mt_product_units WITH KEY product = i_product
         INTO ls_product_unit.
        IF sy-subrc &lt;&gt; 0.
          TRY.
              ls_product_unit-unit    = me-&gt;mr_db-&gt;qry_meins_mara( i_product ).
              ls_product_unit-product = i_product.
              INSERT ls_product_unit INTO TABLE me-&gt;mt_product_units.
            CATCH cx_sy_sql_error.
              MESSAGE e106(zwm) INTO l_message.
              m_raise_error_message.
          ENDTRY.
        ENDIF.
      ENDIF.

      GET TIME.
      CONVERT DATE sy-datlo TIME sy-timlo INTO TIME STAMP l_now TIME ZONE sy-zonlo.
      ls_entry-created_by = ls_entry-changed_by = sy-uname.
      ls_entry-created_at = ls_entry-changed_at = l_now.
      ls_entry-creation_timezone = ls_entry-change_timezone = sy-zonlo.

      INSERT ls_entry INTO TABLE lt_entries.

      TRY.
          me-&gt;mr_db-&gt;mdf_ztbwm_invnt_cnt( lt_entries ).
          COMMIT WORK.
        CATCH cx_sy_sql_error.
          MESSAGE e106(zwm) INTO l_message.
          m_raise_error_message.
      ENDTRY.

      CLEAR ls_entry.
    ENDLOOP.
    &quot;4. Release lock
    me-&gt;mr_api-&gt;dequeue_eztbwm_invnt_cnt(
      EXPORTING
        i_warehouse_number = i_warehouse_number
        i_inventory_record = i_inventory_record
        i_inventory_item   = i_inventory_item
    ).
  ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="COUNT_ZERO" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="7 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="COUNT_ZERO" SCONAME="I_WAREHOUSE_NUMBER" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="LGNUM"/>
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="COUNT_ZERO" SCONAME="I_INVENTORY_RECORD" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="LVS_IVNUM"/>
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="COUNT_ZERO" SCONAME="I_INVENTORY_ITEM" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="LVS_IVPOS"/>
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="COUNT_ZERO" SCONAME="I_STORAGE_TYPE" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="LGTYP"/>
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="COUNT_ZERO" SCONAME="I_STORAGE_BIN" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="5 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="LGPLA"/>
   <exception CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="COUNT_ZERO" SCONAME="CX_BAPI_ERROR" VERSION="1" LANGU="E" MTDTYPE="0" EDITORDER="1 "/>
   <source>METHOD count_zero.
    DATA: lx_error             TYPE REF TO cx_bapi_error,
          lt_entries           TYPE yt_custom_inventory_entries,
          lt_entries_modified  TYPE yt_custom_inventory_entries,
          lg_started           TYPE yg_statuses,
          lg_counted           TYPE yg_statuses,
          ls_entry             TYPE ztbwm_invnt_cnt,
          lt_return            TYPE bapiret2_t,
          l_this_count_id      TYPE linv_nanum,
          l_now                TYPE timestamp,
          l_message            TYPE string.
    FIELD-SYMBOLS: &lt;ls_entry&gt;          LIKE LINE OF lt_entries,
                   &lt;ls_return&gt;         TYPE bapiret2,
                   &lt;ls_status&gt;         LIKE LINE OF lg_started.

    &quot;1. Lock counting on storage bin
    TRY.
        lock_storage_bin(
          EXPORTING
            i_warehouse_number = i_warehouse_number
            i_inventory_record = i_inventory_record
            i_inventory_item   = i_inventory_item
        ).
*          CATCH cx_bapi_error.    &quot; BAPI Error Exception: Migrated Error Messages Type &quot;E&quot;
      CATCH cx_bapi_error INTO lx_error.
        RAISE EXCEPTION lx_error.
    ENDTRY.
    &quot;2. Get last open count id and its quantity
    APPEND INITIAL LINE TO lg_started ASSIGNING &lt;ls_status&gt;.
    &lt;ls_status&gt;-sign = &apos;I&apos;.
    &lt;ls_status&gt;-option = &apos;EQ&apos;.
    &lt;ls_status&gt;-low = zif_wm_lg_aut_inventory=&gt;mc_zcount_status-started.
    APPEND INITIAL LINE TO lg_started ASSIGNING &lt;ls_status&gt;.
    &lt;ls_status&gt;-sign = &apos;I&apos;.
    &lt;ls_status&gt;-option = &apos;EQ&apos;.
    &lt;ls_status&gt;-low = zif_wm_lg_aut_inventory=&gt;mc_zcount_status-su_finished.
    TRY.
        me-&gt;mr_db-&gt;qry_ztbwm_invnt_cnt(
          EXPORTING
            i_warehouse_number = i_warehouse_number
            i_inventory_record = i_inventory_record
            i_inventory_item   = i_inventory_item
            ig_statuses        = lg_started
          IMPORTING
            et_entries         = lt_entries
        ).
*          CATCH cx_sy_sql_error.    &quot; SQL error
      CATCH cx_sy_sql_error.
        &quot;2.1. If not found:
        &quot;2.1.1. Get last closed count id and increment it by one
        APPEND INITIAL LINE TO lg_counted ASSIGNING &lt;ls_status&gt;.
        &lt;ls_status&gt;-sign = &apos;I&apos;.
        &lt;ls_status&gt;-option = &apos;EQ&apos;.
        &lt;ls_status&gt;-low = zif_wm_lg_aut_inventory=&gt;mc_zcount_status-counted.
        TRY.
            me-&gt;mr_db-&gt;qry_ztbwm_invnt_cnt(
              EXPORTING
                i_warehouse_number = i_warehouse_number
                i_inventory_record = i_inventory_record
                i_inventory_item   = i_inventory_item
                ig_statuses        = lg_counted
          IMPORTING
            et_entries         = lt_entries
        ).
*              CATCH cx_sy_sql_error.    &quot; SQL error

            DELETE ADJACENT DUPLICATES FROM lt_entries COMPARING warehouse_number inventory_record
                                                                 inventory_item   quant.
            LOOP AT lt_entries ASSIGNING &lt;ls_entry&gt;.
              CLEAR &lt;ls_entry&gt;-quantity.
            ENDLOOP.
          CATCH cx_sy_sql_error.
            me-&gt;start_count_zero(
                    EXPORTING
                        i_warehouse_number = i_warehouse_number
                        i_inventory_record = i_inventory_record
                        i_inventory_item   = i_inventory_item
                        i_storage_type     = i_storage_type
                        i_storage_bin      = i_storage_bin
                ).

            RETRY.
          CATCH cx_bapi_error INTO lx_error.
            RAISE EXCEPTION lx_error.
        ENDTRY.
    ENDTRY.

    TRY.
        l_this_count_id = me-&gt;get_this_count_id(
                i_warehouse_number = i_warehouse_number
                i_inventory_record = i_inventory_record
                i_inventory_item   = i_inventory_item
            ).
      CATCH cx_bapi_error INTO lx_error.
        RAISE EXCEPTION lx_error.
    ENDTRY.

    LOOP AT lt_entries ASSIGNING &lt;ls_entry&gt;.
      MOVE-CORRESPONDING &lt;ls_entry&gt; TO ls_entry.
      ls_entry-count_number     = l_this_count_id.
      ls_entry-quantity         = 0.
      ls_entry-status           = zif_wm_lg_aut_inventory=&gt;mc_zcount_status-started.

      GET TIME.
      CONVERT DATE sy-datlo TIME sy-timlo INTO TIME STAMP l_now TIME ZONE sy-zonlo.
      ls_entry-created_by = ls_entry-changed_by = sy-uname.
      ls_entry-created_at = ls_entry-changed_at = l_now.
      ls_entry-creation_timezone = ls_entry-change_timezone = sy-zonlo.
      IF ls_entry-creation_timezone IS INITIAL.
        ls_entry-creation_timezone = sy-zonlo.
      ENDIF.

      INSERT ls_entry INTO TABLE lt_entries_modified.
    ENDLOOP.

    TRY.
        me-&gt;mr_db-&gt;mdf_ztbwm_invnt_cnt( lt_entries_modified ).
        COMMIT WORK.
      CATCH cx_sy_sql_error.
        MESSAGE e106(zwm) INTO l_message.
        m_raise_error_message.
    ENDTRY.

    &quot;4. Release lock
    me-&gt;mr_api-&gt;dequeue_eztbwm_invnt_cnt(
      EXPORTING
        i_warehouse_number = i_warehouse_number
        i_inventory_record = i_inventory_record
        i_inventory_item   = i_inventory_item
    ).
  ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="EAN_TO_MATNR" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="8 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="EAN_TO_MATNR" SCONAME="I_EAN_CODE" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="EAN11"/>
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="EAN_TO_MATNR" SCONAME="I_PLANT" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="WERKS_D"/>
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="EAN_TO_MATNR" SCONAME="R_PRODUCT_CODE" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="MATNR"/>
   <exception CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="EAN_TO_MATNR" SCONAME="CX_BAPI_ERROR" VERSION="1" LANGU="E" MTDTYPE="0" EDITORDER="1 "/>
   <source>METHOD ean_to_matnr.
    DATA: lt_return          TYPE bapiret2_t,
          l_status           TYPE zwm_de_inv_count_status,
          l_message          TYPE string.
    FIELD-SYMBOLS  &lt;ls_return&gt; TYPE bapiret2.

    clear r_product_code.
    try.
        r_product_code = me-&gt;mr_db-&gt;qry_matnr_from_ean(
            i_plant        = i_plant
            i_ean_code     = i_ean_code
        ).
*          CATCH cx_sy_sql_error.  &quot; SQL error
      catch cx_sy_sql_error.
        MESSAGE e105(zwm) INTO l_message.
        m_raise_error_message.
    endtry.
  ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="FINISH_COUNT" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="9 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="FINISH_COUNT" SCONAME="I_WAREHOUSE_NUMBER" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="LGNUM"/>
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="FINISH_COUNT" SCONAME="I_INVENTORY_RECORD" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="LVS_IVNUM"/>
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="FINISH_COUNT" SCONAME="I_INVENTORY_ITEM" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="LVS_IVPOS"/>
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="FINISH_COUNT" SCONAME="I_STORAGE_TYPE" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="LGTYP"/>
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="FINISH_COUNT" SCONAME="I_STORAGE_BIN" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="5 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="LGPLA"/>
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="FINISH_COUNT" SCONAME="R_DIFF" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="6 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="BOOLEAN"/>
   <exception CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="FINISH_COUNT" SCONAME="CX_BAPI_ERROR" VERSION="1" LANGU="E" MTDTYPE="0" EDITORDER="1 "/>
   <source>METHOD finish_count.
    DATA: lx_error        TYPE REF TO cx_bapi_error,
          l_matched_count TYPE linv_nanum.

    CLEAR r_diff.
    TRY.
        &quot;1. Check match with previous count
        l_matched_count = me-&gt;check_match(
             i_warehouse_number = i_warehouse_number
             i_inventory_record = i_inventory_record
             i_inventory_item   = i_inventory_item
         ).
        &quot;2. If match occurs
        IF l_matched_count IS NOT INITIAL.
          me-&gt;post_count(
            EXPORTING
              i_warehouse_number = i_warehouse_number
              i_inventory_record = i_inventory_record
              i_inventory_item   = i_inventory_item
              i_storage_type     = i_storage_type
              i_storage_bin      = i_storage_bin
              i_matched_count    = l_matched_count
          ).
*            CATCH cx_bapi_error.    &quot; BAPI Error Exception: Migrated Error Messages Type &quot;E&quot;
        ELSE.
          r_diff = abap_true.
        ENDIF.
        &quot;3. Close count
        me-&gt;close_count(
                    EXPORTING
                      i_warehouse_number = i_warehouse_number
                      i_inventory_record = i_inventory_record
                      i_inventory_item   = i_inventory_item
                      i_matched_count    = l_matched_count
                  ).
*            CATCH cx_bapi_error.    &quot; BAPI Error Exception: Migrated Error Messages Type &quot;E&quot;
      CATCH cx_bapi_error INTO lx_error.
        me-&gt;mr_api-&gt;dequeue_ellinke(
          EXPORTING
            i_warehouse_number = i_warehouse_number
            i_inventory_record = i_inventory_record
        ).
        RAISE EXCEPTION lx_error.
    ENDTRY.
  ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="FINISH_SU_COUNT" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="10 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="FINISH_SU_COUNT" SCONAME="I_WAREHOUSE_NUMBER" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="LGNUM"/>
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="FINISH_SU_COUNT" SCONAME="I_INVENTORY_RECORD" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="LVS_IVNUM"/>
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="FINISH_SU_COUNT" SCONAME="I_INVENTORY_ITEM" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="LVS_IVPOS"/>
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="FINISH_SU_COUNT" SCONAME="I_STORAGE_UNIT" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="LENUM"/>
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="FINISH_SU_COUNT" SCONAME="R_DIFF" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="5 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="BOOLEAN"/>
   <exception CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="FINISH_SU_COUNT" SCONAME="CX_BAPI_ERROR" VERSION="1" LANGU="E" MTDTYPE="0" EDITORDER="1 "/>
   <source>METHOD finish_su_count.
    DATA: lx_error             TYPE REF TO cx_bapi_error,
          lt_count_entries     TYPE yt_custom_inventory_entries,
          lt_return            TYPE bapiret2_t,
          lg_statuses          TYPE yg_statuses,
          l_now                TYPE timestamp,
          l_message            TYPE string.
    FIELD-SYMBOLS: &lt;ls_entry&gt;  LIKE LINE OF lt_count_entries,
                   &lt;ls_return&gt; TYPE bapiret2,
                   &lt;ls_status&gt; LIKE LINE OF lg_statuses.

    &quot;1. Lock counting on storage bin
    TRY.
        lock_storage_bin(
          EXPORTING
            i_warehouse_number = i_warehouse_number
            i_inventory_record = i_inventory_record
            i_inventory_item   = i_inventory_item
        ).
*          CATCH cx_bapi_error.    &quot; BAPI Error Exception: Migrated Error Messages Type &quot;E&quot;.
      CATCH cx_bapi_error INTO lx_error.
        RAISE EXCEPTION lx_error.
    ENDTRY.
    &quot;2. Set status to counted
    APPEND INITIAL LINE TO lg_statuses ASSIGNING &lt;ls_status&gt;.
    &lt;ls_status&gt;-sign = &apos;I&apos;.
    &lt;ls_status&gt;-option = &apos;EQ&apos;.
    &lt;ls_status&gt;-low = zif_wm_lg_aut_inventory=&gt;mc_zcount_status-started.
    APPEND INITIAL LINE TO lg_statuses ASSIGNING &lt;ls_status&gt;.
    &lt;ls_status&gt;-sign = &apos;I&apos;.
    &lt;ls_status&gt;-option = &apos;EQ&apos;.
    &lt;ls_status&gt;-low = zif_wm_lg_aut_inventory=&gt;mc_zcount_status-su_finished.
    TRY.
        me-&gt;mr_db-&gt;qry_ztbwm_invnt_cnt(
          EXPORTING
            i_warehouse_number = i_warehouse_number
            i_inventory_record = i_inventory_record
            i_inventory_item   = i_inventory_item
            ig_statuses        = lg_statuses
          IMPORTING
            et_entries         = lt_count_entries
        ).
*          CATCH cx_sy_sql_error.    &quot; SQL error

        DELETE lt_count_entries WHERE storage_unit &lt;&gt; i_storage_unit.

        GET TIME.
        CONVERT DATE sy-datlo TIME sy-timlo INTO TIME STAMP l_now TIME ZONE sy-zonlo.
        LOOP AT lt_count_entries ASSIGNING &lt;ls_entry&gt;.
          &lt;ls_entry&gt;-status = zif_wm_lg_aut_inventory=&gt;mc_zcount_status-su_finished.
          &lt;ls_entry&gt;-changed_by = sy-uname.
          &lt;ls_entry&gt;-changed_at = l_now.
          &lt;ls_entry&gt;-change_timezone = sy-zonlo.
        ENDLOOP.

        me-&gt;mr_db-&gt;mdf_ztbwm_invnt_cnt( it_entries = lt_count_entries ).
*          CATCH cx_sy_sql_error.    &quot; SQL error
        &quot;3. Release lock
        me-&gt;mr_api-&gt;dequeue_eztbwm_invnt_cnt(
          EXPORTING
            i_warehouse_number = i_warehouse_number
            i_inventory_record = i_inventory_record
            i_inventory_item   = i_inventory_item
        ).
      CATCH cx_sy_sql_error ##no_handler.
        MESSAGE e106(zwm) INTO l_message.
        m_raise_error_message.
    ENDTRY.
  ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="GET_COUNT_DATA" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="12 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="GET_COUNT_DATA" SCONAME="I_WAREHOUSE_NUMBER" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="LGNUM"/>
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="GET_COUNT_DATA" SCONAME="IG_INVENTORY_RECORDS" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="YG_INVENTORY_RECORDS"/>
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="GET_COUNT_DATA" SCONAME="IG_STORAGE_TYPES" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="YG_STORAGE_TYPES"/>
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="GET_COUNT_DATA" SCONAME="IG_STORAGE_BINS" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="YG_STORAGE_BINS"/>
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="GET_COUNT_DATA" SCONAME="IG_PRODUCTS" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="5 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="YG_PRODUCTS"/>
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="GET_COUNT_DATA" SCONAME="IG_DATES" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="6 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="YG_DATES"/>
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="GET_COUNT_DATA" SCONAME="IG_SITUATIONS" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="7 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="YG_SITUATIONS"/>
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="GET_COUNT_DATA" SCONAME="E_MAX_COUNT_LINES" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="8 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="I"/>
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="GET_COUNT_DATA" SCONAME="ET_COUNT_DATA" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="9 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="ZTTWM0017"/>
   <exception CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="GET_COUNT_DATA" SCONAME="CX_BAPI_ERROR" VERSION="1" LANGU="E" MTDTYPE="0" EDITORDER="1 "/>
   <source>METHOD get_count_data.
    CONSTANTS: lc_initial_time      TYPE t VALUE &apos;000000&apos;,
               lc_final_time        TYPE t VALUE &apos;235959&apos;.
    DATA:
          lg_timestamp              TYPE RANGE OF timestamp,
          lg_storage_types          TYPE yg_storage_types,
          lg_storage_bins           TYPE yg_storage_bins,
          lg_products               TYPE yg_products,
          lt_inventory_entries      TYPE yt_inventory_entries,
          lt_count_entries          TYPE yt_custom_inventory_entries,
          lt_counts                 TYPE yt_custom_inventory_entries,
          lt_count_numbering        TYPE STANDARD TABLE OF ztbwm_invnt_cnt,
          lt_storage_bins           TYPE STANDARD TABLE OF lgpla,
          lt_inventories            TYPE STANDARD TABLE OF lvs_ivnum,
          lt_segments               TYPE table_of_strings,
          lt_return                 TYPE bapiret2_t,
          l_message                 TYPE string.
    FIELD-SYMBOLS:
                   &lt;ls_inventory&gt;   LIKE LINE OF lt_inventory_entries,
                   &lt;ls_count&gt;       LIKE LINE OF lt_count_entries,
                   &lt;ls_count_line&gt;  LIKE LINE OF lt_counts,
                   &lt;ls_count_data&gt;  LIKE LINE OF et_count_data,
                   &lt;ls_count_entry&gt; TYPE zeswm0019,
                   &lt;ls_date&gt;        LIKE LINE OF ig_dates,
                   &lt;ls_timestamp&gt;   LIKE LINE OF lg_timestamp,
                   &lt;ls_return&gt;      TYPE bapiret2,
                   &lt;l_storage_bin&gt;  TYPE lgpla,
                   &lt;l_segment&gt;      TYPE string,
                   &lt;l_inv_record&gt;   TYPE lvs_ivnum.

    CLEAR: e_max_count_lines, et_count_data.
    LOOP AT ig_dates ASSIGNING &lt;ls_date&gt;.
      APPEND INITIAL LINE TO lg_timestamp ASSIGNING &lt;ls_timestamp&gt;.
      &lt;ls_timestamp&gt;-sign = &lt;ls_date&gt;-sign.
      &lt;ls_timestamp&gt;-option = &lt;ls_date&gt;-option.
      CONVERT DATE &lt;ls_date&gt;-low TIME lc_initial_time INTO TIME STAMP &lt;ls_timestamp&gt;-low TIME ZONE sy-zonlo.
      IF &lt;ls_date&gt;-high IS NOT INITIAL.
        CONVERT DATE &lt;ls_date&gt;-high TIME lc_final_time INTO TIME STAMP &lt;ls_timestamp&gt;-high TIME ZONE sy-zonlo.
      ELSE.
        CONVERT DATE &lt;ls_date&gt;-low TIME lc_final_time INTO TIME STAMP &lt;ls_timestamp&gt;-high TIME ZONE sy-zonlo.
      ENDIF.
    ENDLOOP.

    TRY.
        lt_inventory_entries = me-&gt;mr_db-&gt;qry_inventory_rpt(
            i_warehouse_number   = i_warehouse_number
            ig_inventory_records = ig_inventory_records
            ig_storage_types     = lg_storage_types &quot;ig_storage_types
            ig_dates             = ig_dates
            ig_storage_bins      = lg_storage_bins  &quot;ig_storage_bins
            ig_products          = lg_products      &quot;ig_products
        ).
*          CATCH cx_sy_sql_error.  &quot; SQL error
      CATCH cx_sy_sql_error.
        MESSAGE e116(zwm) INTO l_message.
        m_raise_error_message.
    ENDTRY.

    TRY.
        lt_count_entries = me-&gt;mr_db-&gt;qry_ztbwm_invnt_cnt_rpt(
            i_warehouse_number   = i_warehouse_number
            ig_inventory_records = ig_inventory_records
            ig_storage_types     = lg_storage_types &quot;ig_storage_types
            ig_products          = lg_products      &quot;ig_products
            ig_storage_bins      = lg_storage_bins  &quot;ig_storage_bins
            ig_timestamp         = lg_timestamp
        ).
*          CATCH cx_sy_sql_error.  &quot; SQL error
      CATCH cx_sy_sql_error ##no_handler.
    ENDTRY.

    LOOP AT lt_inventory_entries ASSIGNING &lt;ls_inventory&gt;.
      APPEND INITIAL LINE TO et_count_data ASSIGNING &lt;ls_count_data&gt;.
      MOVE-CORRESPONDING &lt;ls_inventory&gt; TO &lt;ls_count_data&gt;.
      &lt;ls_count_data&gt;-product = &lt;ls_inventory&gt;-product_id.

      LOOP AT lt_count_entries ASSIGNING &lt;ls_count&gt;
       WHERE warehouse_number = &lt;ls_inventory&gt;-warehouse_number
         AND inventory_record = &lt;ls_inventory&gt;-inventory_record
         AND inventory_item   = &lt;ls_inventory&gt;-inventory_item
         AND storage_location = &lt;ls_inventory&gt;-storage_location
         AND storage_type     = &lt;ls_inventory&gt;-storage_type
         AND storage_bin      = &lt;ls_inventory&gt;-storage_bin
         AND storage_unit     = &lt;ls_inventory&gt;-storage_unit
         AND product          = &lt;ls_inventory&gt;-product_id.
        APPEND INITIAL LINE TO &lt;ls_count_data&gt;-counts ASSIGNING &lt;ls_count_entry&gt;.
        MOVE-CORRESPONDING &lt;ls_count&gt; TO &lt;ls_count_entry&gt;.

        &lt;ls_count_entry&gt;-counting_number = &lt;ls_count&gt;-count_number.
        IF &lt;ls_count_entry&gt;-counting_number = zif_wm_lg_aut_inventory=&gt;mc_initial_stock.
          CLEAR &lt;ls_count_entry&gt;-counting_number.
        ENDIF.
        CONVERT TIME STAMP &lt;ls_count&gt;-created_at TIME ZONE &lt;ls_count&gt;-creation_timezone
           INTO DATE  &lt;ls_count_entry&gt;-counting_date TIME &lt;ls_count_entry&gt;-counting_time.
        &lt;ls_count_entry&gt;-zuser = &lt;ls_count&gt;-created_by.
      ENDLOOP.
      SORT &lt;ls_count_data&gt;-counts BY counting_number.
      APPEND: &lt;ls_inventory&gt;-storage_bin TO lt_storage_bins,
              &lt;ls_inventory&gt;-inventory_record TO lt_inventories.
    ENDLOOP.
    SORT: lt_storage_bins BY table_line,
          lt_inventories  BY table_line.
    DELETE ADJACENT DUPLICATES FROM: lt_storage_bins COMPARING table_line,
                                     lt_inventories  COMPARING table_line.
    LOOP AT lt_count_entries ASSIGNING &lt;ls_count&gt;.
      READ TABLE lt_inventory_entries WITH KEY warehouse_number = &lt;ls_count&gt;-warehouse_number
                                               inventory_record = &lt;ls_count&gt;-inventory_record
                                               inventory_item   = &lt;ls_count&gt;-inventory_item
                                               storage_location = &lt;ls_count&gt;-storage_location
                                               storage_type     = &lt;ls_count&gt;-storage_type
                                               storage_bin      = &lt;ls_count&gt;-storage_bin
                                               storage_unit     = &lt;ls_count&gt;-storage_unit
                                               product_id       = &lt;ls_count&gt;-product
        TRANSPORTING NO FIELDS.
      IF sy-subrc &lt;&gt; 0.
        READ TABLE et_count_data WITH KEY inventory_record = &lt;ls_count&gt;-inventory_record
                                          inventory_item   = &lt;ls_count&gt;-inventory_item
                                          storage_location = &lt;ls_count&gt;-storage_location
                                          storage_type     = &lt;ls_count&gt;-storage_type
                                          storage_bin      = &lt;ls_count&gt;-storage_bin
                                          storage_unit     = &lt;ls_count&gt;-storage_unit
                                          product          = &lt;ls_count&gt;-product
        TRANSPORTING NO FIELDS.
        IF sy-subrc &lt;&gt; 0.
          APPEND INITIAL LINE TO et_count_data ASSIGNING &lt;ls_count_data&gt;.
          MOVE-CORRESPONDING &lt;ls_count&gt; TO &lt;ls_count_data&gt;.

          lt_counts = lt_count_entries.
          DELETE lt_counts WHERE warehouse_number &lt;&gt; &lt;ls_count&gt;-warehouse_number
                              OR inventory_record &lt;&gt; &lt;ls_count&gt;-inventory_record
                              OR inventory_item   &lt;&gt; &lt;ls_count&gt;-inventory_item
                              OR storage_location &lt;&gt; &lt;ls_count&gt;-storage_location
                              OR storage_type     &lt;&gt; &lt;ls_count&gt;-storage_type
                              OR storage_bin      &lt;&gt; &lt;ls_count&gt;-storage_bin
                              OR storage_unit     &lt;&gt; &lt;ls_count&gt;-storage_unit
                              OR product          &lt;&gt; &lt;ls_count&gt;-product.
          DELETE lt_counts WHERE quant(3) = zif_wm_lg_aut_inventory=&gt;mc_new_quant_prefix
                             AND count_number = zif_wm_lg_aut_inventory=&gt;mc_initial_stock.
          LOOP AT lt_counts ASSIGNING &lt;ls_count_line&gt;.
            APPEND INITIAL LINE TO &lt;ls_count_data&gt;-counts ASSIGNING &lt;ls_count_entry&gt;.
            MOVE-CORRESPONDING &lt;ls_count_line&gt; TO &lt;ls_count_entry&gt;.

            IF &lt;ls_count_entry&gt;-counting_number = zif_wm_lg_aut_inventory=&gt;mc_initial_stock.
              CLEAR &lt;ls_count_entry&gt;-counting_number.
            ENDIF.

            &lt;ls_count_entry&gt;-counting_number = &lt;ls_count_line&gt;-count_number.
            IF &lt;ls_count_entry&gt;-counting_number = zif_wm_lg_aut_inventory=&gt;mc_initial_stock.
              CLEAR &lt;ls_count_entry&gt;-counting_number.
            ENDIF.

            CONVERT TIME STAMP &lt;ls_count_line&gt;-created_at TIME ZONE &lt;ls_count_line&gt;-creation_timezone
               INTO DATE  &lt;ls_count_entry&gt;-counting_date TIME &lt;ls_count_entry&gt;-counting_time.

            &lt;ls_count_entry&gt;-zuser = &lt;ls_count_line&gt;-created_by.
          ENDLOOP.

          CLEAR lt_counts.
        ENDIF.
      ENDIF.
    ENDLOOP.

    &quot;Fill the calculated columns
    LOOP AT et_count_data ASSIGNING &lt;ls_count_data&gt;.
      IF &lt;ls_count_data&gt;-item_status = zif_wm_lg_aut_inventory=&gt;mc_count_status-counted OR
         &lt;ls_count_data&gt;-item_status = zif_wm_lg_aut_inventory=&gt;mc_count_status-cleared.
        &lt;ls_count_data&gt;-situation = zif_wm_lg_aut_inventory=&gt;mc_situation-completed.
        &lt;ls_count_data&gt;-icon_count_status = zif_wm_lg_aut_inventory=&gt;mc_icon-green_light.
      ELSEIF &lt;ls_count_data&gt;-counts IS INITIAL.
        &lt;ls_count_data&gt;-situation = zif_wm_lg_aut_inventory=&gt;mc_situation-not_started.
        &lt;ls_count_data&gt;-icon_count_status = zif_wm_lg_aut_inventory=&gt;mc_icon-red_light.
      ELSE.
        LOOP AT &lt;ls_count_data&gt;-counts TRANSPORTING NO FIELDS
         WHERE zzmatch IS NOT INITIAL.
          EXIT.
        ENDLOOP.
        IF sy-subrc &lt;&gt; 0.
          &lt;ls_count_data&gt;-situation = zif_wm_lg_aut_inventory=&gt;mc_situation-diverging.
          &lt;ls_count_data&gt;-icon_count_status = zif_wm_lg_aut_inventory=&gt;mc_icon-yellow_light.
        ELSE.
          &lt;ls_count_data&gt;-situation = zif_wm_lg_aut_inventory=&gt;mc_situation-completed.
          &lt;ls_count_data&gt;-icon_count_status = zif_wm_lg_aut_inventory=&gt;mc_icon-green_light.
        ENDIF.
      ENDIF.

      &lt;ls_count_data&gt;-fiscal_year = sy-datlo(4).
      &lt;ls_count_data&gt;-zmonth = sy-datlo+4(2).
      SPLIT &lt;ls_count_data&gt;-storage_bin AT &apos;-&apos; INTO TABLE lt_segments.
      READ TABLE lt_segments ASSIGNING &lt;l_segment&gt; INDEX 1.
      IF sy-subrc = 0.
        &lt;ls_count_data&gt;-storage_aisle = &lt;l_segment&gt;.
      ENDIF.
      LOOP AT &lt;ls_count_data&gt;-counts ASSIGNING &lt;ls_count_entry&gt;.
        IF &lt;ls_count_data&gt;-matched_counts IS INITIAL AND &lt;ls_count_entry&gt;-zzmatch IS NOT INITIAL.
          CONCATENATE &lt;ls_count_entry&gt;-counting_number &apos;-&apos; INTO &lt;ls_count_data&gt;-matched_counts
           SEPARATED BY space.
          CONTINUE.
        ELSEIF &lt;ls_count_entry&gt;-zzmatch IS NOT INITIAL.
          CONCATENATE &lt;ls_count_data&gt;-matched_counts &lt;ls_count_entry&gt;-counting_number
                 INTO &lt;ls_count_data&gt;-matched_counts SEPARATED BY space.
        ENDIF.
      ENDLOOP.
    ENDLOOP.

    &quot;Filter situation.
    DELETE et_count_data WHERE situation NOT IN ig_situations.

    &quot;Set storage bin icon
    SORT et_count_data BY inventory_record
                          inventory_item
                          item_status
                          plant
                          storage_location
                          storage_type
                          storage_bin
                          icon_count_status.
    LOOP AT lt_storage_bins ASSIGNING &lt;l_storage_bin&gt;.
      LOOP AT et_count_data ASSIGNING &lt;ls_count_data&gt; WHERE storage_bin = &lt;l_storage_bin&gt;.
        &lt;ls_count_data&gt;-icon_storage_bin = &lt;ls_count_data&gt;-icon_count_status.
      ENDLOOP.
    ENDLOOP.
    &quot;Set inventory_icon
    LOOP AT lt_inventories ASSIGNING &lt;l_inv_record&gt;.
      LOOP AT et_count_data ASSIGNING &lt;ls_count_data&gt; WHERE inventory_record = &lt;l_inv_record&gt;.
        READ TABLE lt_count_entries WITH KEY inventory_record = &lt;l_inv_record&gt;
         TRANSPORTING NO FIELDS.
        IF sy-subrc &lt;&gt; 0.
          &lt;ls_count_data&gt;-icon_count_status = zif_wm_lg_aut_inventory=&gt;mc_icon-red_light.
        ELSE.
          &lt;ls_count_data&gt;-icon_count_status = zif_wm_lg_aut_inventory=&gt;mc_icon-yellow_light.
        ENDIF.
      ENDLOOP.
      LOOP AT lt_inventory_entries TRANSPORTING NO FIELDS
       WHERE inventory_record  = &lt;l_inv_record&gt;
         AND ( item_status    &lt;&gt; zif_wm_lg_aut_inventory=&gt;mc_count_status-counted AND
               item_status    &lt;&gt; zif_wm_lg_aut_inventory=&gt;mc_count_status-cleared    ).
        EXIT.
      ENDLOOP.
      IF sy-subrc &lt;&gt; 0.
        LOOP AT et_count_data ASSIGNING &lt;ls_count_data&gt; WHERE inventory_record = &lt;l_inv_record&gt;.
          &lt;ls_count_data&gt;-icon_count_status = zif_wm_lg_aut_inventory=&gt;mc_icon-green_light.
        ENDLOOP.
      ENDIF.
    ENDLOOP.

    &quot;Applying additional filters
    DELETE: et_count_data WHERE storage_type NOT IN ig_storage_types,
            et_count_data WHERE storage_bin  NOT IN ig_storage_bins,
            et_count_data WHERE product      NOT IN ig_products.

    &quot;Set the maximum counter number.
    lt_count_numbering = lt_count_entries.
    SORT lt_count_numbering BY count_number DESCENDING.
    DELETE lt_count_numbering WHERE count_number = zif_wm_lg_aut_inventory=&gt;mc_initial_stock.
    READ TABLE lt_count_numbering INDEX 1
     ASSIGNING &lt;ls_count&gt;.
    IF sy-subrc = 0.
      e_max_count_lines = &lt;ls_count&gt;-count_number + 1.
    ENDIF.
  ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="GET_INVENTORY_RECORD" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="13 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="GET_INVENTORY_RECORD" SCONAME="I_WAREHOUSE_NUMBER" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="LGNUM"/>
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="GET_INVENTORY_RECORD" SCONAME="I_STORAGE_TYPE" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="LGTYP"/>
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="GET_INVENTORY_RECORD" SCONAME="I_STORAGE_BIN" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="LGPLA"/>
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="GET_INVENTORY_RECORD" SCONAME="E_INVENTORY_RECORD" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="LVS_IVNUM"/>
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="GET_INVENTORY_RECORD" SCONAME="E_INVENTORY_ITEM" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="5 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="LVS_IVPOS"/>
   <exception CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="GET_INVENTORY_RECORD" SCONAME="CX_BAPI_ERROR" VERSION="1" LANGU="E" MTDTYPE="0" EDITORDER="1 "/>
   <source>METHOD get_inventory_record.
    DATA: lt_inventory_entries TYPE yt_inventory_entries,
          lt_last_counters     TYPE yt_counters,
          lt_return            TYPE bapiret2_t,
          lg_statuses          TYPE yg_statuses,
          l_message            TYPE string.
    FIELD-SYMBOLS: &lt;ls_inventory_entry&gt; TYPE ys_inventory_entry,
                   &lt;ls_return&gt; TYPE bapiret2,
                   &lt;ls_status&gt; LIKE LINE OF lg_statuses.

    CLEAR: e_inventory_record, e_inventory_item.
    TRY.
        lt_inventory_entries = me-&gt;mr_db-&gt;qry_inventory(
             i_warehouse_number = i_warehouse_number
             i_storage_type     = i_storage_type
             i_storage_bin      = i_storage_bin ).
      CATCH cx_sy_sql_error.
        MESSAGE e057(zwm) INTO l_message.
        m_raise_error_message.
    ENDTRY.

    DELETE lt_inventory_entries WHERE activity_ind &lt;&gt; abap_true.
    IF lt_inventory_entries IS INITIAL.
      MESSAGE e084(zwm) INTO l_message.
      m_raise_error_message.
    ELSE.
      READ TABLE lt_inventory_entries
       WITH KEY item_status = zif_wm_lg_aut_inventory=&gt;mc_count_status-counted
       TRANSPORTING NO FIELDS.
      IF sy-subrc = 0.
        MESSAGE e102(zwm) INTO l_message.
        m_raise_error_message.
      ELSE.
        READ TABLE lt_inventory_entries
         WITH KEY item_status = zif_wm_lg_aut_inventory=&gt;mc_count_status-cleared
         TRANSPORTING NO FIELDS.
        IF sy-subrc = 0.
          MESSAGE e103(zwm) INTO l_message.
          m_raise_error_message.
        ELSE.
          READ TABLE lt_inventory_entries
           WITH KEY item_status = zif_wm_lg_aut_inventory=&gt;mc_count_status-not_counted
           ASSIGNING &lt;ls_inventory_entry&gt;.
          IF sy-subrc = 0.
            APPEND INITIAL LINE TO lg_statuses ASSIGNING &lt;ls_status&gt;.
            &lt;ls_status&gt;-sign = &apos;I&apos;.
            &lt;ls_status&gt;-option = &apos;EQ&apos;.
            &lt;ls_status&gt;-low = zif_wm_lg_aut_inventory=&gt;mc_zcount_status-counted.
            TRY. &quot;Check previous counters
                me-&gt;mr_db-&gt;qry_createdby_ztbwm_invnt_cnt(
                  EXPORTING
                    i_warehouse_number = i_warehouse_number
                    i_inventory_record = &lt;ls_inventory_entry&gt;-inventory_record
                    i_inventory_item   = &lt;ls_inventory_entry&gt;-inventory_item
                    ig_statuses        = lg_statuses
                  IMPORTING
                    et_creators        = lt_last_counters
                ).
*                  CATCH cx_sy_sql_error.    &quot; SQL error
                FIND sy-uname IN TABLE lt_last_counters.
                IF sy-subrc = 0.
                  MESSAGE e104(zwm) INTO l_message.
                  m_raise_error_message.
                ENDIF.
              CATCH cx_sy_sql_error ##no_handler.
            ENDTRY.

            e_inventory_record = &lt;ls_inventory_entry&gt;-inventory_record.
            e_inventory_item   = &lt;ls_inventory_entry&gt;-inventory_item.
          ELSE.
            MESSAGE e057(zwm) INTO l_message.
            m_raise_error_message.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.
  ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="GET_PRODUCT_DESCR" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="14 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="GET_PRODUCT_DESCR" SCONAME="I_PRODUCT" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="MATNR"/>
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="GET_PRODUCT_DESCR" SCONAME="R_DESCR" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="MAKTX"/>
   <exception CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="GET_PRODUCT_DESCR" SCONAME="CX_BAPI_ERROR" VERSION="1" LANGU="E" MTDTYPE="0" EDITORDER="1 "/>
   <source>METHOD get_product_descr.
    DATA: lt_return TYPE bapiret2_t,
          l_message TYPE string.
    FIELD-SYMBOLS &lt;ls_return&gt; TYPE bapiret2.

    CLEAR r_descr.
    TRY.
        r_descr = me-&gt;mr_db-&gt;qry_maktx_makt( i_product = i_product ).
*          CATCH cx_sy_sql_error.    &quot; SQL error
      CATCH cx_sy_sql_error.
        MESSAGE e081(zwm) INTO l_message.
        m_raise_error_message.
    ENDTRY.

  ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="GET_STORAGE_TYPE" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="15 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="GET_STORAGE_TYPE" SCONAME="I_STORAGE_BIN" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="LGPLA"/>
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="GET_STORAGE_TYPE" SCONAME="R_STORAGE_TYPE" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="LGTYP"/>
   <exception CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="GET_STORAGE_TYPE" SCONAME="CX_BAPI_ERROR" VERSION="1" LANGU="E" MTDTYPE="0" EDITORDER="1 "/>
   <source>METHOD get_storage_type.
    DATA: lt_return TYPE bapiret2_t,
          l_message TYPE string.
    FIELD-SYMBOLS &lt;ls_return&gt; TYPE bapiret2.

    CLEAR r_storage_type.
    TRY.
        r_storage_type = me-&gt;mr_db-&gt;qry_lgtyp_lgap( i_storage_bin = i_storage_bin ).
*          CATCH cx_sy_sql_error.    &quot; SQL error
      CATCH cx_sy_sql_error .
*        MESSAGE e101(zwm) INTO l_message.
*        APPEND INITIAL LINE TO lt_return ASSIGNING &lt;ls_return&gt;.
*        &lt;ls_return&gt;-id = sy-msgid.
*        &lt;ls_return&gt;-type = sy-msgty.
*        &lt;ls_return&gt;-number = sy-msgno.
*        &lt;ls_return&gt;-message = l_message.
*        &lt;ls_return&gt;-message_v1 = sy-msgv1.
*        &lt;ls_return&gt;-message_v2 = sy-msgv2.
*        &lt;ls_return&gt;-message_v3 = sy-msgv3.
*        &lt;ls_return&gt;-message_v4 = sy-msgv4.
*
*        RAISE EXCEPTION TYPE cx_bapi_error
*          EXPORTING
*            status = lt_return.
        MESSAGE e101(zwm) INTO l_message.
        m_raise_error_message.
    ENDTRY.
  ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="GET_THIS_COUNT_ID" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="4 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="GET_THIS_COUNT_ID" SCONAME="I_WAREHOUSE_NUMBER" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="LGNUM"/>
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="GET_THIS_COUNT_ID" SCONAME="I_INVENTORY_RECORD" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="LVS_IVNUM"/>
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="GET_THIS_COUNT_ID" SCONAME="I_INVENTORY_ITEM" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="LVS_IVPOS"/>
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="GET_THIS_COUNT_ID" SCONAME="R_COUNT_ID" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="LINV_NANUM"/>
   <exception CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="GET_THIS_COUNT_ID" SCONAME="CX_BAPI_ERROR" VERSION="1" LANGU="E" MTDTYPE="0" EDITORDER="1 "/>
   <source>METHOD get_this_count_id.
    DATA: lt_return          TYPE bapiret2_t,
          l_status           TYPE zwm_de_inv_count_status,
          l_message          TYPE string.
    FIELD-SYMBOLS  &lt;ls_return&gt; TYPE bapiret2.

    CLEAR r_count_id.
    TRY.
        r_count_id = me-&gt;mr_db-&gt;max_countn_ztbwm_invnt_cnt(
            i_warehouse_number = i_warehouse_number
            i_inventory_record = i_inventory_record
            i_inventory_item   = i_inventory_item
        ).
*          CATCH cx_sy_sql_error.  &quot; SQL error

        IF r_count_id IS INITIAL.
          ADD 1 TO r_count_id.
        ELSE.
          l_status = me-&gt;mr_db-&gt;qry_status_ztbwm_invnt_cnt(
                i_warehouse_number = i_warehouse_number
                i_inventory_record = i_inventory_record
                i_inventory_item   = i_inventory_item
                i_count_number     = r_count_id
            ).
*              CATCH cx_sy_sql_error.  &quot; SQL error
          IF l_status = zif_wm_lg_aut_inventory=&gt;mc_zcount_status-counted.
            ADD 1 TO r_count_id.
          ENDIF.
        ENDIF.
      CATCH cx_sy_sql_error.
        MESSAGE e106(zwm) INTO l_message.
        m_raise_error_message.
    ENDTRY.
  ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="INIT_COUNT" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="11 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="INIT_COUNT" SCONAME="I_WAREHOUSE_NUMBER" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="LGNUM"/>
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="INIT_COUNT" SCONAME="I_INVENTORY_RECORD" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="LVS_IVNUM"/>
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="INIT_COUNT" SCONAME="I_INVENTORY_ITEM" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="LVS_IVPOS"/>
   <exception CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="INIT_COUNT" SCONAME="CX_BAPI_ERROR" VERSION="1" LANGU="E" MTDTYPE="0" EDITORDER="1 "/>
   <source>METHOD init_count.
    DATA: lg_started  TYPE yg_statuses.
    FIELD-SYMBOLS: &lt;ls_status&gt; LIKE LINE OF lg_started.

    APPEND INITIAL LINE TO lg_started ASSIGNING &lt;ls_status&gt;.
    &lt;ls_status&gt;-sign = &apos;I&apos;.
    &lt;ls_status&gt;-option = &apos;EQ&apos;.
    &lt;ls_status&gt;-low = zif_wm_lg_aut_inventory=&gt;mc_zcount_status-started.
    APPEND INITIAL LINE TO lg_started ASSIGNING &lt;ls_status&gt;.
    &lt;ls_status&gt;-sign = &apos;I&apos;.
    &lt;ls_status&gt;-option = &apos;EQ&apos;.
    &lt;ls_status&gt;-low = zif_wm_lg_aut_inventory=&gt;mc_zcount_status-su_finished.
    TRY.
        me-&gt;mr_db-&gt;dlt_ztbwm_invnt_cnt(
          EXPORTING
            i_warehouse_number = i_warehouse_number
            i_inventory_record = i_inventory_record
            i_inventory_item   = i_inventory_item
            ig_statuses        = lg_started
        ).
*          CATCH cx_sy_sql_error.    &quot; SQL errordlt_ztbwm_invnt_cnt(  ).
      CATCH cx_sy_sql_error  ##no_handler.
    ENDTRY.
  ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="IS_STORAGE_BIN_EMPTY" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="16 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="IS_STORAGE_BIN_EMPTY" SCONAME="I_WAREHOUSE_NUMBER" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="LGNUM"/>
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="IS_STORAGE_BIN_EMPTY" SCONAME="I_INVENTORY_RECORD" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="LVS_IVNUM"/>
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="IS_STORAGE_BIN_EMPTY" SCONAME="I_STORAGE_TYPE" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="LGTYP"/>
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="IS_STORAGE_BIN_EMPTY" SCONAME="I_STORAGE_BIN" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="LGPLA"/>
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="IS_STORAGE_BIN_EMPTY" SCONAME="R_RESULT" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="5 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="BOOLEAN"/>
   <source>METHOD is_storage_bin_empty.

    CLEAR r_result.
    TRY.
        me-&gt;mr_db-&gt;cnt_matnr_linv(
          EXPORTING
            i_warehouse_number = i_warehouse_number
            i_inventory_record = i_inventory_record
            i_storage_type     = i_storage_type
            i_storage_bin      = i_storage_bin
        ).
*          CATCH cx_sy_sql_error.    &quot; SQL error
      CATCH cx_sy_sql_error.
        r_result = abap_true.
    ENDTRY.
  ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="LOCK_STORAGE_BIN" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="5 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="LOCK_STORAGE_BIN" SCONAME="I_WAREHOUSE_NUMBER" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="LGNUM"/>
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="LOCK_STORAGE_BIN" SCONAME="I_INVENTORY_RECORD" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="LVS_IVNUM"/>
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="LOCK_STORAGE_BIN" SCONAME="I_INVENTORY_ITEM" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="LVS_IVPOS"/>
   <exception CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="LOCK_STORAGE_BIN" SCONAME="CX_BAPI_ERROR" VERSION="1" LANGU="E" MTDTYPE="0" EDITORDER="1 "/>
   <source>METHOD lock_storage_bin.
    DATA: lx_error TYPE REF TO cx_bapi_error,
          l_tries TYPE i.

    DO.
      TRY.
          me-&gt;mr_api-&gt;enqueue_eztbwm_invnt_cnt(
            EXPORTING
              i_warehouse_number = i_warehouse_number
              i_inventory_record = i_inventory_record
              i_inventory_item   = i_inventory_item
          ).
*              CATCH cx_bapi_error.    &quot; BAPI Error Exception: Migrated Error Messages Type &quot;E&quot;
          EXIT.
        CATCH cx_bapi_error INTO lx_error.
          ADD 1 TO l_tries.
          IF l_tries &lt;= 100.
            RETRY.
          ELSE.
            RAISE EXCEPTION lx_error.
          ENDIF.
      ENDTRY.
    ENDDO.

  ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="POST_COUNT" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="6 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="POST_COUNT" SCONAME="I_WAREHOUSE_NUMBER" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="LGNUM"/>
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="POST_COUNT" SCONAME="I_INVENTORY_RECORD" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="LVS_IVNUM"/>
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="POST_COUNT" SCONAME="I_INVENTORY_ITEM" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="LVS_IVPOS"/>
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="POST_COUNT" SCONAME="I_STORAGE_TYPE" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="LGTYP"/>
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="POST_COUNT" SCONAME="I_STORAGE_BIN" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="5 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="LGPLA"/>
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="POST_COUNT" SCONAME="I_MATCHED_COUNT" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="6 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="LINV_NANUM"/>
   <exception CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="POST_COUNT" SCONAME="CX_BAPI_ERROR" VERSION="1" LANGU="E" MTDTYPE="0" EDITORDER="1 "/>
   <source>METHOD post_count.
    DATA: lx_error             TYPE REF TO cx_bapi_error,
          lt_api_entries       TYPE lcl_api=&gt;yt_inventory_entries,
          lt_inventory_entries TYPE yt_inventory_entries,
          lt_return            TYPE bapiret2_t,
          li_tries             TYPE i,
          l_message            TYPE string.

    FIELD-SYMBOLS &lt;ls_return&gt; TYPE bapiret2.

    CLEAR me-&gt;m_inventory_closed.

    TRY.
        prepare_posting_data(
          EXPORTING
            i_warehouse_number = i_warehouse_number
            i_inventory_record = i_inventory_record
            i_inventory_item   = i_inventory_item
            i_storage_type     = i_storage_type
            i_storage_bin      = i_storage_bin
          IMPORTING
            et_posting_data    = lt_api_entries
        ).
*          CATCH cx_bapi_error.    &quot; BAPI Error Exception: Migrated Error Messages Type &quot;E&quot;.
        &quot;Lock inventory document;
*        me-&gt;mr_api-&gt;enqueue_ellinke(
*          EXPORTING
*            i_warehouse_number = i_warehouse_number
*            i_inventory_record = i_inventory_record
*        ).
**            CATCH cx_bapi_error.    &quot; BAPI Error Exception: Migrated Error Messages Type &quot;E&quot;
        me-&gt;mr_api-&gt;l_inv_count(
*          IMPORTING
*            e_version            =
          CHANGING
            it_inventory_entries = lt_api_entries
        ).
*          CATCH cx_bapi_error.    &quot; BAPI Error Exception: Migrated Error Messages Type &quot;E&quot;
        &quot;Check whether all inventory items have been counted
        TRY.
            lt_inventory_entries = me-&gt;mr_db-&gt;qry_inventory_doc(
                i_warehouse_number   = i_warehouse_number
                i_inventory_record   = i_inventory_record
            ).
*              CATCH cx_sy_sql_error.  &quot; SQL error
            LOOP AT lt_inventory_entries TRANSPORTING NO FIELDS
             WHERE item_status &lt;&gt; zif_wm_lg_aut_inventory=&gt;mc_count_status-counted.
              EXIT.
            ENDLOOP.
            IF sy-subrc &lt;&gt; 0.
              TRY.
                  me-&gt;call_li20(
                    i_warehouse_number   = i_warehouse_number
                    i_inventory_record   = i_inventory_record
                  ).
                CATCH cx_bapi_error INTO lx_error.
                  ADD 1 TO li_tries.

                  IF li_tries &gt; 10.
                    me-&gt;close_count(
                                EXPORTING
                                  i_warehouse_number = i_warehouse_number
                                  i_inventory_record = i_inventory_record
                                  i_inventory_item   = i_inventory_item
                                  i_matched_count    = i_matched_count
                              ).
*            CATCH cx_bapi_error.    &quot; BAPI Error Exception: Migrated Error Messages Type &quot;E&quot;

                    COMMIT WORK.
                    RAISE EXCEPTION lx_error.
                  ELSE.
                    WAIT UP TO 2 SECONDS.

                    RETRY.
                  ENDIF.
              ENDTRY.
            ENDIF.

            &quot;Unlock inventory document
            me-&gt;mr_api-&gt;dequeue_ellinke(
              EXPORTING
                i_warehouse_number = i_warehouse_number
                i_inventory_record = i_inventory_record
            ).
          CATCH cx_sy_sql_error.
            MESSAGE e106(zwm) INTO l_message.
            m_raise_error_message.
        ENDTRY.
      CATCH cx_bapi_error INTO lx_error.
*        me-&gt;mr_api-&gt;dequeue_ellinke(
*          EXPORTING
*            i_warehouse_number = i_warehouse_number
*            i_inventory_record = i_inventory_record
*        ).
        RAISE EXCEPTION lx_error.
    ENDTRY.
  ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="PREPARE_POSTING_DATA" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="7 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="PREPARE_POSTING_DATA" SCONAME="I_WAREHOUSE_NUMBER" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="LGNUM"/>
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="PREPARE_POSTING_DATA" SCONAME="I_INVENTORY_RECORD" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="LVS_IVNUM"/>
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="PREPARE_POSTING_DATA" SCONAME="I_INVENTORY_ITEM" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="LVS_IVPOS"/>
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="PREPARE_POSTING_DATA" SCONAME="I_STORAGE_TYPE" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="LGTYP"/>
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="PREPARE_POSTING_DATA" SCONAME="I_STORAGE_BIN" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="5 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="LGPLA"/>
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="PREPARE_POSTING_DATA" SCONAME="ET_POSTING_DATA" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="6 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="LCL_API=&gt;YT_INVENTORY_ENTRIES"/>
   <exception CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="PREPARE_POSTING_DATA" SCONAME="CX_BAPI_ERROR" VERSION="1" LANGU="E" MTDTYPE="0" EDITORDER="1 "/>
   <source>METHOD prepare_posting_data.
    DATA:
          lt_count_entries        TYPE yt_custom_inventory_entries,
          lt_counted_entries      TYPE yt_custom_inventory_entries, &quot;To check stocks
          lt_inventory_entries    TYPE yt_inventory_entries,
          lt_inventory_aux        TYPE yt_inventory_entries,
          lt_return               TYPE bapiret2_t,
          lg_started              TYPE yg_statuses,
          lg_counted              TYPE yg_statuses,
          l_message               TYPE string.
    FIELD-SYMBOLS: &lt;ls_count&gt;     LIKE LINE OF lt_count_entries,
                   &lt;ls_stock&gt;     LIKE LINE OF lt_counted_entries,
                   &lt;ls_inventory&gt; LIKE LINE OF lt_inventory_entries,
                   &lt;ls_api&gt;       LIKE LINE OF et_posting_data,
                   &lt;ls_return&gt;    TYPE bapiret2,
                   &lt;ls_status&gt;    LIKE LINE OF lg_started.

    CLEAR et_posting_data.
    TRY.
        &quot;Get count entries
        APPEND INITIAL LINE TO lg_started ASSIGNING &lt;ls_status&gt;.
        &lt;ls_status&gt;-sign = &apos;I&apos;.
        &lt;ls_status&gt;-option = &apos;EQ&apos;.
        &lt;ls_status&gt;-low = zif_wm_lg_aut_inventory=&gt;mc_zcount_status-started.
        APPEND INITIAL LINE TO lg_started ASSIGNING &lt;ls_status&gt;.
        &lt;ls_status&gt;-sign = &apos;I&apos;.
        &lt;ls_status&gt;-option = &apos;EQ&apos;.
        &lt;ls_status&gt;-low = zif_wm_lg_aut_inventory=&gt;mc_zcount_status-su_finished.
        me-&gt;mr_db-&gt;qry_ztbwm_invnt_cnt(
          EXPORTING
            i_warehouse_number = i_warehouse_number
            i_inventory_record = i_inventory_record
            i_inventory_item   = i_inventory_item
            ig_statuses        = lg_started
          IMPORTING
            et_entries         = lt_count_entries
        ).
*          CATCH cx_sy_sql_error.    &quot; SQL error
        &quot;Get closed_entries
        APPEND INITIAL LINE TO lg_counted ASSIGNING &lt;ls_status&gt;.
        &lt;ls_status&gt;-sign = &apos;I&apos;.
        &lt;ls_status&gt;-option = &apos;EQ&apos;.
        &lt;ls_status&gt;-low = zif_wm_lg_aut_inventory=&gt;mc_zcount_status-counted.
        me-&gt;mr_db-&gt;qry_ztbwm_invnt_cnt(
          EXPORTING
            i_warehouse_number = i_warehouse_number
            i_inventory_record = i_inventory_record
            i_inventory_item   = i_inventory_item
            ig_statuses        = lg_counted
          IMPORTING
            et_entries         = lt_counted_entries
        ).
*          CATCH cx_sy_sql_error.    &quot; SQL error
        DELETE lt_counted_entries WHERE count_number &lt;&gt; zif_wm_lg_aut_inventory=&gt;mc_initial_stock. &quot;Keep only stocks

        LOOP AT lt_count_entries ASSIGNING &lt;ls_count&gt;.
          READ TABLE lt_counted_entries WITH KEY quant        = &lt;ls_count&gt;-quant
                                                 storage_unit = &lt;ls_count&gt;-storage_unit
                                                 product      = &lt;ls_count&gt;-product
           ASSIGNING &lt;ls_stock&gt;.
          IF sy-subrc = 0 AND &lt;ls_stock&gt;-quantity IS INITIAL AND &lt;ls_count&gt;-quantity IS INITIAL AND
             &lt;ls_count&gt;-product IS NOT INITIAL.
            CONTINUE. &quot;This entry is has been reseted and is related to a product that does not exist in the inventory.
          ENDIF.

          APPEND INITIAL LINE TO et_posting_data ASSIGNING &lt;ls_api&gt;.
          &lt;ls_api&gt;-lgnum = &lt;ls_count&gt;-warehouse_number.
          &lt;ls_api&gt;-ivnum = &lt;ls_count&gt;-inventory_record.
          &lt;ls_api&gt;-ivpos = &lt;ls_count&gt;-inventory_item.
          &lt;ls_api&gt;-werks = &lt;ls_count&gt;-plant.
          &lt;ls_api&gt;-lgort = &lt;ls_count&gt;-storage_location.
          &lt;ls_api&gt;-lgtyp = &lt;ls_count&gt;-storage_type.
          &lt;ls_api&gt;-lgpla = &lt;ls_count&gt;-storage_bin.
          IF &lt;ls_count&gt;-quant NP &apos;NEW*&apos;.
            &lt;ls_api&gt;-lqnum = &lt;ls_count&gt;-quant.
          ENDIF.
          &lt;ls_api&gt;-lenum = &lt;ls_count&gt;-storage_unit.
          &lt;ls_api&gt;-matnr = &lt;ls_count&gt;-product.
          &lt;ls_api&gt;-altme = &lt;ls_count&gt;-unit.
          &lt;ls_api&gt;-menga = &lt;ls_count&gt;-quantity.
          &lt;ls_api&gt;-letyp = zif_wm_lg_aut_inventory=&gt;mc_e1.
          &lt;ls_api&gt;-wdatu = sy-datum.
          IF &lt;ls_count&gt;-quantity IS INITIAL.
            &lt;ls_api&gt;-kznul = abap_true.
          ENDIF.
        ENDLOOP.

        &quot;Get all inventory items to check not counted items
        TRY.
            lt_inventory_entries = me-&gt;mr_db-&gt;qry_inventory(
                i_warehouse_number   = i_warehouse_number
                i_storage_type       = i_storage_type
                i_storage_bin        = i_storage_bin
            ).
*              CATCH cx_sy_sql_error.  &quot; SQL error
          CATCH cx_sy_sql_error.
            MESSAGE e106(zwm) INTO l_message.
            m_raise_error_message.
        ENDTRY.

        &quot;Removing any eventual wrong inventory
        lt_inventory_aux = lt_inventory_entries.
        LOOP AT lt_inventory_aux ASSIGNING &lt;ls_inventory&gt;.
          READ TABLE lt_counted_entries WITH KEY inventory_record = &lt;ls_inventory&gt;-inventory_record
           TRANSPORTING NO FIELDS.
          IF sy-subrc &lt;&gt; 0.
            READ TABLE lt_count_entries WITH KEY inventory_record = &lt;ls_inventory&gt;-inventory_record
             TRANSPORTING NO FIELDS.
            IF sy-subrc &lt;&gt; 0.
              DELETE lt_inventory_entries WHERE inventory_record = &lt;ls_inventory&gt;-inventory_record.
            ENDIF.
          ENDIF.
        ENDLOOP.

        LOOP AT lt_inventory_entries ASSIGNING &lt;ls_inventory&gt;.
          READ TABLE lt_count_entries WITH KEY storage_location = &lt;ls_inventory&gt;-storage_location
                                               storage_unit     = &lt;ls_inventory&gt;-storage_unit
                                               product          = &lt;ls_inventory&gt;-product_id
           TRANSPORTING NO FIELDS.
          IF sy-subrc &lt;&gt; 0.
            APPEND INITIAL LINE TO et_posting_data ASSIGNING &lt;ls_api&gt;.
            &lt;ls_api&gt;-lgnum = &lt;ls_inventory&gt;-warehouse_number.
            &lt;ls_api&gt;-ivnum = &lt;ls_inventory&gt;-inventory_record.
            &lt;ls_api&gt;-ivpos = &lt;ls_inventory&gt;-inventory_item.
            &lt;ls_api&gt;-werks = &lt;ls_inventory&gt;-plant.
            &lt;ls_api&gt;-lgort = &lt;ls_inventory&gt;-storage_location.
            &lt;ls_api&gt;-lgtyp = &lt;ls_inventory&gt;-storage_type.
            &lt;ls_api&gt;-lgpla = &lt;ls_inventory&gt;-storage_bin.
            &lt;ls_api&gt;-lqnum = &lt;ls_inventory&gt;-quant.
            &lt;ls_api&gt;-lenum = &lt;ls_inventory&gt;-storage_unit.
            &lt;ls_api&gt;-matnr = &lt;ls_inventory&gt;-product_id.
            &lt;ls_api&gt;-altme = &lt;ls_inventory&gt;-unit.
            &lt;ls_api&gt;-letyp = zif_wm_lg_aut_inventory=&gt;mc_e1.
            &lt;ls_api&gt;-wdatu = sy-datum.
            &lt;ls_api&gt;-kznul = abap_true.
          ENDIF.
        ENDLOOP.
      CATCH cx_sy_sql_error.
        MESSAGE e106(zwm) INTO l_message.
        m_raise_error_message.
    ENDTRY.

  ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="RESET_STORAGE_BIN" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="17 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="RESET_STORAGE_BIN" SCONAME="I_WAREHOUSE_NUMBER" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="LGNUM"/>
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="RESET_STORAGE_BIN" SCONAME="I_INVENTORY_RECORD" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="LVS_IVNUM"/>
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="RESET_STORAGE_BIN" SCONAME="I_INVENTORY_ITEM" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="LVS_IVPOS"/>
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="RESET_STORAGE_BIN" SCONAME="I_STORAGE_TYPE" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="LGTYP"/>
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="RESET_STORAGE_BIN" SCONAME="I_STORAGE_BIN" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="5 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="LGPLA"/>
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="RESET_STORAGE_BIN" SCONAME="R_DIFF" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="6 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="BOOLEAN"/>
   <exception CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="RESET_STORAGE_BIN" SCONAME="CX_BAPI_ERROR" VERSION="1" LANGU="E" MTDTYPE="0" EDITORDER="1 "/>
   <source>METHOD reset_storage_bin.
    DATA: lx_error             TYPE REF TO cx_bapi_error,
          l_matched_count      TYPE linv_nanum.
    CLEAR r_diff.

    TRY.
        &quot;0. Count zero to all items of the storage bin
        me-&gt;count_zero(
                  EXPORTING
                    i_warehouse_number = i_warehouse_number
                    i_inventory_record = i_inventory_record
                    i_inventory_item   = i_inventory_item
                    i_storage_type     = i_storage_type
                    i_storage_bin      = i_storage_bin
                ).
*          CATCH cx_bapi_error.    &quot; BAPI Error Exception: Migrated Error Messages Type &quot;E&quot;.

        &quot; Check whether a previous count match
        l_matched_count = me-&gt;check_match(
             i_warehouse_number = i_warehouse_number
             i_inventory_record = i_inventory_record
             i_inventory_item   = i_inventory_item
         ).
        &quot;If match occurs
        IF l_matched_count IS NOT INITIAL.
          &quot;Reset inventory counts
          me-&gt;post_count(
            EXPORTING
              i_warehouse_number = i_warehouse_number
              i_inventory_record = i_inventory_record
              i_inventory_item   = i_inventory_item
              i_storage_type     = i_storage_type
              i_storage_bin      = i_storage_bin
              i_matched_count    = l_matched_count
          ).
*            CATCH cx_bapi_error.    &quot; BAPI Error Exception: Migrated Error Messages Type &quot;E&quot;
        ELSE.
          r_diff = abap_true.
        ENDIF.

        &quot;Close count
        me-&gt;close_count(
                    EXPORTING
                      i_warehouse_number = i_warehouse_number
                      i_inventory_record = i_inventory_record
                      i_inventory_item   = i_inventory_item
                      i_matched_count    = l_matched_count
                  ).
*            CATCH cx_bapi_error.    &quot; BAPI Error Exception: Migrated Error Messages Type &quot;E&quot;
      CATCH cx_bapi_error INTO lx_error.
        RAISE EXCEPTION lx_error.
    ENDTRY.
  ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="RESTART_COUNT" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="18 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="RESTART_COUNT" SCONAME="I_WAREHOUSE_NUMBER" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="LGNUM"/>
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="RESTART_COUNT" SCONAME="I_INVENTORY_RECORD" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="LVS_IVNUM"/>
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="RESTART_COUNT" SCONAME="I_INVENTORY_ITEM" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="LVS_IVPOS"/>
   <exception CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="RESTART_COUNT" SCONAME="CX_BAPI_ERROR" VERSION="1" LANGU="E" MTDTYPE="0" EDITORDER="1 "/>
   <source>METHOD restart_count.
    DATA: lt_return   TYPE bapiret2_t,
          lg_started  TYPE yg_statuses,
          l_message   TYPE string.
    FIELD-SYMBOLS: &lt;ls_status&gt; LIKE LINE OF lg_started,
                   &lt;ls_return&gt; TYPE bapiret2.

    APPEND INITIAL LINE TO lg_started ASSIGNING &lt;ls_status&gt;.
    &lt;ls_status&gt;-sign = &apos;I&apos;.
    &lt;ls_status&gt;-option = &apos;EQ&apos;.
    &lt;ls_status&gt;-low = zif_wm_lg_aut_inventory=&gt;mc_zcount_status-started.
    APPEND INITIAL LINE TO lg_started ASSIGNING &lt;ls_status&gt;.
    &lt;ls_status&gt;-sign = &apos;I&apos;.
    &lt;ls_status&gt;-option = &apos;EQ&apos;.
    &lt;ls_status&gt;-low = zif_wm_lg_aut_inventory=&gt;mc_zcount_status-su_finished.

    TRY.
        me-&gt;mr_db-&gt;dlt_ztbwm_invnt_cnt(
          EXPORTING
            i_warehouse_number = i_warehouse_number
            i_inventory_record = i_inventory_record
            i_inventory_item   = i_inventory_item
            ig_statuses        = lg_started
        ).
*          CATCH cx_sy_sql_error.    &quot; SQL error
      CATCH cx_sy_sql_error.
        &quot;Count not started.
        MESSAGE e107(zwm) INTO l_message.
        m_raise_error_message.
    ENDTRY.
  ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="SET_STOCK_4NEW_ITEM" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="11 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="SET_STOCK_4NEW_ITEM" SCONAME="I_WAREHOUSE_NUMBER" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="LGNUM"/>
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="SET_STOCK_4NEW_ITEM" SCONAME="I_INVENTORY_RECORD" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="LVS_IVNUM"/>
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="SET_STOCK_4NEW_ITEM" SCONAME="I_INVENTORY_ITEM" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="LVS_IVPOS"/>
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="SET_STOCK_4NEW_ITEM" SCONAME="I_STORAGE_LOCATION" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="LGORT_D"/>
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="SET_STOCK_4NEW_ITEM" SCONAME="I_STORAGE_TYPE" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="5 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="LGTYP"/>
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="SET_STOCK_4NEW_ITEM" SCONAME="I_STORAGE_BIN" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="6 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="LGPLA"/>
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="SET_STOCK_4NEW_ITEM" SCONAME="I_STORAGE_UNIT" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="7 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="LENUM" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="SET_STOCK_4NEW_ITEM" SCONAME="I_PRODUCT" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="8 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="MATNR"/>
   <exception CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="SET_STOCK_4NEW_ITEM" SCONAME="CX_BAPI_ERROR" VERSION="1" LANGU="E" MTDTYPE="0" EDITORDER="1 "/>
   <source>METHOD set_stock_4new_item.
    DATA: lt_stocks  TYPE yt_counts_no_key,
          lt_entries TYPE yt_custom_inventory_entries,
          lt_return  TYPE bapiret2_t,
          l_now      TYPE timestamp,
          l_guid     TYPE sysuuid_c32,
          l_message  TYPE string,
          ls_entry   LIKE LINE OF lt_entries.
    FIELD-SYMBOLS: &lt;ls_stock&gt;  LIKE LINE OF lt_stocks,
                   &lt;ls_return&gt; TYPE bapiret2.

    TRY.
        IF i_storage_unit IS SUPPLIED.
          me-&gt;mr_db-&gt;qry_sustock_ztbwm_invnt_cnt(
            EXPORTING
              i_warehouse_number = i_warehouse_number
              i_inventory_record = i_inventory_record
              i_inventory_item   = i_inventory_item
              i_storage_unit     = i_storage_unit
              i_product          = i_product
            IMPORTING
              et_su_stocks       = lt_stocks
          ).
*          CATCH cx_sy_sql_error.    &quot; SQL error
        ELSE.

          me-&gt;mr_db-&gt;qry_prodstock_ztbwm_invnt_cnt(
                EXPORTING
                  i_warehouse_number = i_warehouse_number
                  i_inventory_record = i_inventory_record
                  i_inventory_item   = i_inventory_item
                  i_product          = i_product
                IMPORTING
                  et_product_stocks  = lt_stocks
              ).
        ENDIF.
      CATCH cx_sy_sql_error ##no_handler.
    ENDTRY.

    READ TABLE lt_stocks WITH KEY storage_location = i_storage_location
        TRANSPORTING NO FIELDS.
    IF sy-subrc = 0.
      RETURN. &quot;The stock record already exists.
    ELSE. &quot;Get a sample and modify it.
      READ TABLE lt_stocks INDEX 1
        ASSIGNING &lt;ls_stock&gt;.
      IF sy-subrc = 0.
        MOVE-CORRESPONDING &lt;ls_stock&gt; TO ls_entry.
        TRY.
            l_guid = cl_uuid_factory=&gt;create_system_uuid( )-&gt;create_uuid_c32( ).
*                                                        CATCH cx_uuid_error.
          CATCH cx_uuid_error.
            MESSAGE e106(zwm) INTO l_message.
            m_raise_error_message.
        ENDTRY.

        CONCATENATE &apos;NEW&apos; l_guid+22(7) INTO ls_entry-quant.
        CLEAR ls_entry-quantity.
        ls_entry-storage_location = i_storage_location.
        ls_entry-status           = zif_wm_lg_aut_inventory=&gt;mc_zcount_status-counted.

        GET TIME.
        CONVERT DATE sy-datlo TIME sy-timlo INTO TIME STAMP l_now TIME ZONE sy-zonlo.

        ls_entry-changed_at      = ls_entry-created_at        = l_now.
        ls_entry-changed_by      = ls_entry-created_by        = sy-uname.
        ls_entry-change_timezone = ls_entry-creation_timezone = sy-zonlo.

        INSERT ls_entry INTO TABLE lt_entries.

        TRY.
            me-&gt;mr_db-&gt;mdf_ztbwm_invnt_cnt( it_entries = lt_entries ).
*              CATCH cx_sy_sql_error.    &quot; SQL error
          CATCH cx_sy_sql_error.
            MESSAGE e106(zwm) INTO l_message.
            m_raise_error_message.
        ENDTRY.
      ENDIF.
    ENDIF.
  ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="START_COUNT" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="8 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="START_COUNT" SCONAME="I_WAREHOUSE_NUMBER" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="LGNUM"/>
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="START_COUNT" SCONAME="I_INVENTORY_RECORD" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="LVS_IVNUM"/>
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="START_COUNT" SCONAME="I_INVENTORY_ITEM" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="LVS_IVPOS"/>
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="START_COUNT" SCONAME="I_STORAGE_TYPE" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="LGTYP"/>
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="START_COUNT" SCONAME="I_STORAGE_BIN" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="5 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="LGPLA"/>
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="START_COUNT" SCONAME="I_PRODUCT" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="6 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="MATNR"/>
   <exception CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="START_COUNT" SCONAME="CX_BAPI_ERROR" VERSION="1" LANGU="E" MTDTYPE="0" EDITORDER="1 "/>
   <source>METHOD start_count.
    DATA: lr_priority_settings TYPE REF TO data,
          lt_inventory_entries TYPE yt_inventory_entries,
          lt_entries           TYPE yt_custom_inventory_entries,
          ls_entry             LIKE LINE OF lt_entries,
          lt_return            TYPE bapiret2_t,
          l_plant              TYPE werks_d,
          l_now                TYPE timestamp,
          l_guid               TYPE sysuuid_c32,
          l_message            TYPE string.
    FIELD-SYMBOLS: &lt;ls_inventory&gt; LIKE LINE OF lt_inventory_entries,
                   &lt;lt_priority&gt;  TYPE zcl_wm_parm_inv_strg_lctn_prit=&gt;yt_runtime,
                   &lt;ls_priority&gt;  LIKE LINE OF &lt;lt_priority&gt;,
                   &lt;ls_return&gt;    TYPE bapiret2.

    TRY.
        lt_inventory_entries = me-&gt;mr_db-&gt;qry_inventory(
             i_warehouse_number = i_warehouse_number
             i_storage_type     = i_storage_type
             i_storage_bin      = i_storage_bin ).

        GET TIME.
        CONVERT DATE sy-datlo TIME sy-timlo INTO TIME STAMP l_now TIME ZONE sy-zonlo.

        READ TABLE lt_inventory_entries INDEX 1
         ASSIGNING &lt;ls_inventory&gt;.
        IF sy-subrc = 0.
          IF &lt;ls_inventory&gt;-plant IS NOT INITIAL.
            l_plant = &lt;ls_inventory&gt;-plant.
          ELSE.
            l_plant = zif_wm_lg_aut_inventory=&gt;mc_organization-plant.
          ENDIF.
        ENDIF.

        DELETE lt_inventory_entries WHERE product_id &lt;&gt; i_product.
        IF lt_inventory_entries IS INITIAL. &quot;This is a product that is not known to be in this storage bin.
          TRY.
              l_guid = cl_uuid_factory=&gt;create_system_uuid( )-&gt;create_uuid_c32( ).
*                                                        CATCH cx_uuid_error.
            CATCH cx_uuid_error.
              MESSAGE e106(zwm) INTO l_message.
              m_raise_error_message.
          ENDTRY.
          ls_entry-warehouse_number = i_warehouse_number.
          ls_entry-inventory_record = i_inventory_record.
          ls_entry-inventory_item   = i_inventory_item.
          CONCATENATE &apos;NEW&apos; l_guid+22(7) INTO ls_entry-quant.
          ls_entry-plant          = zif_wm_lg_aut_inventory=&gt;mc_organization-plant.

          ls_entry-storage_type     = i_storage_type.
          ls_entry-storage_bin      = i_storage_bin.
          ls_entry-count_number     = 99.
          ls_entry-product          = i_product.
          ls_entry-quantity         = 0.
          ls_entry-unit             = me-&gt;mr_db-&gt;qry_meins_mara( i_product = i_product ).
*            CATCH cx_sy_sql_error.  &quot; SQL error
          ls_entry-status           = zif_wm_lg_aut_inventory=&gt;mc_zcount_status-counted.
          ls_entry-created_by = ls_entry-changed_by = sy-uname.
          ls_entry-created_at = ls_entry-changed_at = l_now.
          ls_entry-creation_timezone = ls_entry-change_timezone = sy-zonlo.

          TRY.
              lr_priority_settings = mr_str_lctn_priority-&gt;zif_wm_parameter_retriever~get_data( ).
              ASSIGN lr_priority_settings-&gt;* TO &lt;lt_priority&gt;.
*          CATCH cx_bapi_error.  &quot; BAPI Error Exception: Migrated Error Messages Type &quot;E&quot;
            CATCH cx_bapi_error ##no_handler.
          ENDTRY.

          IF &lt;lt_priority&gt; IS ASSIGNED.
            LOOP AT &lt;lt_priority&gt; ASSIGNING &lt;ls_priority&gt;.
              IF &lt;ls_priority&gt;-storage_type     = i_storage_type AND
                 &lt;ls_priority&gt;-warehouse_number = i_warehouse_number AND
                 &lt;ls_priority&gt;-plant            = l_plant.
                ls_entry-storage_location = &lt;ls_priority&gt;-storage_location.
                EXIT.
              ELSEIF &lt;ls_priority&gt;-storage_type IS INITIAL AND
                     &lt;ls_priority&gt;-plant  = l_plant.
                ls_entry-storage_location = &lt;ls_priority&gt;-storage_location.
                EXIT.
              ENDIF.
            ENDLOOP.
          ENDIF.

          INSERT ls_entry INTO TABLE lt_entries.
        ELSE.
          LOOP AT lt_inventory_entries ASSIGNING &lt;ls_inventory&gt;.
            MOVE-CORRESPONDING &lt;ls_inventory&gt; TO ls_entry.
            ls_entry-count_number = zif_wm_lg_aut_inventory=&gt;mc_initial_stock.
            ls_entry-product      = &lt;ls_inventory&gt;-product_id.
            ls_entry-quantity     = &lt;ls_inventory&gt;-stock_quantity.
            ls_entry-status       = zif_wm_lg_aut_inventory=&gt;mc_zcount_status-counted.
            ls_entry-created_by   = ls_entry-changed_by = sy-uname.
            ls_entry-created_at   = ls_entry-changed_at = l_now.
            ls_entry-creation_timezone = ls_entry-change_timezone = sy-zonlo.
            INSERT ls_entry INTO TABLE lt_entries.
          ENDLOOP.
        ENDIF.

        me-&gt;mr_db-&gt;mdf_ztbwm_invnt_cnt( it_entries = lt_entries ).
*      CATCH cx_sy_sql_error.    &quot; SQL error

        COMMIT WORK.
      CATCH cx_sy_sql_error.
        &quot;Count error
        MESSAGE e106(zwm) INTO l_message.
        m_raise_error_message.
    ENDTRY.
  ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="START_COUNT_ZERO" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="9 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="START_COUNT_ZERO" SCONAME="I_WAREHOUSE_NUMBER" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="LGNUM"/>
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="START_COUNT_ZERO" SCONAME="I_INVENTORY_RECORD" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="LVS_IVNUM"/>
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="START_COUNT_ZERO" SCONAME="I_INVENTORY_ITEM" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="LVS_IVPOS"/>
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="START_COUNT_ZERO" SCONAME="I_STORAGE_TYPE" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="LGTYP"/>
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="START_COUNT_ZERO" SCONAME="I_STORAGE_BIN" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="5 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="LGPLA"/>
   <exception CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="START_COUNT_ZERO" SCONAME="CX_BAPI_ERROR" VERSION="1" LANGU="E" MTDTYPE="0" EDITORDER="1 "/>
   <source>METHOD start_count_zero.
    DATA: lt_inventory_entries TYPE yt_inventory_entries,
          lt_entries           TYPE yt_custom_inventory_entries,
          ls_entry             LIKE LINE OF lt_entries,
          lt_return            TYPE bapiret2_t,
          l_plant              TYPE werks_d,
          l_now                TYPE timestamp,
          l_message            TYPE string.
    FIELD-SYMBOLS: &lt;ls_inventory&gt; LIKE LINE OF lt_inventory_entries,
                   &lt;ls_return&gt;    TYPE bapiret2.

    TRY.
        lt_inventory_entries = me-&gt;mr_db-&gt;qry_inventory(
             i_warehouse_number = i_warehouse_number
             i_storage_type     = i_storage_type
             i_storage_bin      = i_storage_bin ).

        GET TIME.
        CONVERT DATE sy-datlo TIME sy-timlo INTO TIME STAMP l_now TIME ZONE sy-zonlo.

        READ TABLE lt_inventory_entries INDEX 1
         ASSIGNING &lt;ls_inventory&gt;.
        IF sy-subrc = 0.
          l_plant = &lt;ls_inventory&gt;-plant.
        ENDIF.

        LOOP AT lt_inventory_entries ASSIGNING &lt;ls_inventory&gt;.
          MOVE-CORRESPONDING &lt;ls_inventory&gt; TO ls_entry.
          ls_entry-count_number = zif_wm_lg_aut_inventory=&gt;mc_initial_stock.
          ls_entry-product      = &lt;ls_inventory&gt;-product_id.
          ls_entry-quantity     = &lt;ls_inventory&gt;-stock_quantity.
          ls_entry-status       = zif_wm_lg_aut_inventory=&gt;mc_zcount_status-counted.
          ls_entry-created_by   = ls_entry-changed_by = sy-uname.
          ls_entry-created_at   = ls_entry-changed_at = l_now.
          ls_entry-creation_timezone = ls_entry-change_timezone = sy-zonlo.
          INSERT ls_entry INTO TABLE lt_entries.
        ENDLOOP.

        me-&gt;mr_db-&gt;mdf_ztbwm_invnt_cnt( it_entries = lt_entries ).
*      CATCH cx_sy_sql_error.    &quot; SQL error

        COMMIT WORK.
      CATCH cx_sy_sql_error.
        &quot;Count error
        MESSAGE e106(zwm) INTO l_message.
        m_raise_error_message.
    ENDTRY.
  ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="START_SU_COUNT" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="10 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="START_SU_COUNT" SCONAME="I_WAREHOUSE_NUMBER" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="LGNUM"/>
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="START_SU_COUNT" SCONAME="I_INVENTORY_RECORD" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="LVS_IVNUM"/>
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="START_SU_COUNT" SCONAME="I_INVENTORY_ITEM" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="LVS_IVPOS"/>
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="START_SU_COUNT" SCONAME="I_STORAGE_TYPE" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="LGTYP"/>
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="START_SU_COUNT" SCONAME="I_STORAGE_BIN" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="5 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="LGPLA"/>
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="START_SU_COUNT" SCONAME="I_STORAGE_UNIT" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="6 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="LENUM"/>
   <parameter CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="START_SU_COUNT" SCONAME="I_PRODUCT" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="7 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="MATNR"/>
   <exception CLSNAME="ZCL_WM_LG_AUT_MODEL_INVENTORY" CMPNAME="START_SU_COUNT" SCONAME="CX_BAPI_ERROR" VERSION="1" LANGU="E" MTDTYPE="0" EDITORDER="1 "/>
   <source>METHOD start_su_count.
    DATA: lr_priority_settings TYPE REF TO data,
          lt_inventory_entries TYPE yt_inventory_entries,
          lt_entries           TYPE yt_custom_inventory_entries,
          ls_entry             LIKE LINE OF lt_entries,
          lt_return            TYPE bapiret2_t,
          l_plant              TYPE werks_d,
          l_now                TYPE timestamp,
          l_guid               TYPE sysuuid_c32,
          l_message            TYPE string.
    FIELD-SYMBOLS: &lt;ls_inventory&gt; LIKE LINE OF lt_inventory_entries,
                   &lt;lt_priority&gt;  TYPE zcl_wm_parm_inv_strg_lctn_prit=&gt;yt_runtime,
                   &lt;ls_priority&gt;  LIKE LINE OF &lt;lt_priority&gt;,
                   &lt;ls_return&gt;    TYPE bapiret2.

    TRY.
        lt_inventory_entries = me-&gt;mr_db-&gt;qry_inventory(
             i_warehouse_number = i_warehouse_number
             i_storage_type     = i_storage_type
             i_storage_bin      = i_storage_bin ).

        GET TIME.
        CONVERT DATE sy-datlo TIME sy-timlo INTO TIME STAMP l_now TIME ZONE sy-zonlo.

        READ TABLE lt_inventory_entries INDEX 1
         ASSIGNING &lt;ls_inventory&gt;.
        IF sy-subrc = 0.
          IF &lt;ls_inventory&gt;-plant IS NOT INITIAL.
            l_plant = &lt;ls_inventory&gt;-plant.
          ELSE.
            l_plant = zif_wm_lg_aut_inventory=&gt;mc_organization-plant.
          ENDIF.
        ENDIF.

        DELETE lt_inventory_entries WHERE storage_unit &lt;&gt; i_storage_unit
                                       OR product_id   &lt;&gt; i_product.
        IF lt_inventory_entries IS INITIAL. &quot;This is a product that is not known to be in this storage unit.
          TRY.
              l_guid = cl_uuid_factory=&gt;create_system_uuid( )-&gt;create_uuid_c32( ).
*                                                        CATCH cx_uuid_error.
            CATCH cx_uuid_error.
              MESSAGE e106(zwm) INTO l_message.
              m_raise_error_message.
          ENDTRY.

          ls_entry-warehouse_number = i_warehouse_number.
          ls_entry-inventory_record = i_inventory_record.
          ls_entry-inventory_item   = i_inventory_item.
          CONCATENATE &apos;NEW&apos; l_guid+22(7) INTO ls_entry-quant.
          ls_entry-count_number     = 99.
          ls_entry-plant            = l_plant.
          ls_entry-storage_type     = i_storage_type.
          ls_entry-storage_bin      = i_storage_bin.
          ls_entry-product          = i_product.
          ls_entry-quantity         = 0.
          ls_entry-unit             = me-&gt;mr_db-&gt;qry_meins_mara( i_product = i_product ).
          ls_entry-storage_unit     = i_storage_unit.
          ls_entry-status           = zif_wm_lg_aut_inventory=&gt;mc_zcount_status-counted.
          ls_entry-created_by = ls_entry-changed_by = sy-uname.
          ls_entry-created_at = ls_entry-changed_at = l_now.
          ls_entry-creation_timezone = ls_entry-change_timezone = sy-zonlo.

          TRY.
              lr_priority_settings = mr_str_lctn_priority-&gt;zif_wm_parameter_retriever~get_data( ).
              ASSIGN lr_priority_settings-&gt;* TO &lt;lt_priority&gt;.
*          CATCH cx_bapi_error.  &quot; BAPI Error Exception: Migrated Error Messages Type &quot;E&quot;
            CATCH cx_bapi_error ##no_handler.
          ENDTRY.

          IF &lt;lt_priority&gt; IS ASSIGNED.
            LOOP AT &lt;lt_priority&gt; ASSIGNING &lt;ls_priority&gt;.
              IF &lt;ls_priority&gt;-storage_type = i_storage_type AND
                 &lt;ls_priority&gt;-warehouse_number = i_warehouse_number AND
                 &lt;ls_priority&gt;-plant            = l_plant.
                ls_entry-storage_location = &lt;ls_priority&gt;-storage_location.
                EXIT.
              ELSEIF &lt;ls_priority&gt;-storage_type IS INITIAL AND
                     &lt;ls_priority&gt;-plant            = l_plant.
                ls_entry-storage_location = &lt;ls_priority&gt;-storage_location.
                EXIT.
              ENDIF.
            ENDLOOP.
          ENDIF.

          INSERT ls_entry INTO TABLE lt_entries.
        ELSE.
          LOOP AT lt_inventory_entries ASSIGNING &lt;ls_inventory&gt;.
            MOVE-CORRESPONDING &lt;ls_inventory&gt; TO ls_entry.
            ls_entry-count_number = zif_wm_lg_aut_inventory=&gt;mc_initial_stock.
            ls_entry-product      = &lt;ls_inventory&gt;-product_id.
            ls_entry-quantity     = &lt;ls_inventory&gt;-stock_quantity.
            ls_entry-status = zif_wm_lg_aut_inventory=&gt;mc_zcount_status-counted.
            ls_entry-created_by = ls_entry-changed_by = sy-uname.
            ls_entry-created_at = ls_entry-changed_at = l_now.
            ls_entry-creation_timezone = ls_entry-change_timezone = sy-zonlo.
            INSERT ls_entry INTO TABLE lt_entries.
          ENDLOOP.
        ENDIF.

        me-&gt;mr_db-&gt;mdf_ztbwm_invnt_cnt( it_entries = lt_entries ).
*      CATCH cx_sy_sql_error.    &quot; SQL error

        COMMIT WORK.
      CATCH cx_sy_sql_error.
        &quot;Count error
        MESSAGE e106(zwm) INTO l_message.
        m_raise_error_message.
    ENDTRY.
  ENDMETHOD.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZCL_WM_LG_AUT_CTRL_INV_CNT" VERSION="1" LANGU="E" DESCRIPT="Controller for inventory count" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" WITH_UNIT_TESTS="X" DURATION_TYPE="0 " RISK_LEVEL="0 " ZSAPLINK_PLUGIN_MAJOR_VERSION="0 " ZSAPLINK_PLUGIN_MINOR_VERSION="1 " ZSAPLINK_PLUGIN_BUILD_VERSION="0 " ZSAPLINK_PLUGIN_INFO1="ZSAPLINK_CLASS is part of the main ZSAPLINK project --&gt; This plugin found there instead of ZSAPLINK_PLUGINS projects" ZSAPLINK_PLUGIN_INFO2="SAPLINK homepage: https://www.assembla.com/spaces/saplink/wiki" ZSAPLINK_PLUGIN_INFO3="Download from https://www.assembla.com/code/saplink/subversion/nodes" ZSAPLINK_PLUGIN_INFO4="and navigate to:  trunk -&gt; core -&gt; ZSAPLINK -&gt; CLAS -&gt; ZSAPLINK_CLASS.slnk" REFCLSNAME="ZCL_WM_LG_AUT_CONTROLLER">
  <types CLSNAME="ZCL_WM_LG_AUT_CTRL_INV_CNT" CMPNAME="YS_COUNTING_TRACK" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="1 " TYPTYPE="4" SRCROW1="2 " SRCCOLUMN1="11 " SRCROW2="6 " SRCCOLUMN2="34 " TYPESRC_LENG="0 " TYPESRC="BEGIN OF ys_counting_track,
            product      TYPE matnr,
            storage_unit TYPE lenum,
            count        TYPE int4,
           END OF ys_counting_track
"/>
  <types CLSNAME="ZCL_WM_LG_AUT_CTRL_INV_CNT" CMPNAME="YT_COUNTING_TRACK" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="2 " TYPTYPE="4" SRCROW1="7 " SRCCOLUMN1="11 " SRCROW2="7 " SRCCOLUMN2="68 " TYPESRC_LENG="0 " TYPESRC="yt_counting_track TYPE STANDARD TABLE OF ys_counting_track
"/>
  <types CLSNAME="ZCL_WM_LG_AUT_CTRL_INV_CNT" CMPNAME="YT_FUNCTIONS" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="1 " TYPTYPE="4" SRCROW1="8 " SRCCOLUMN1="11 " SRCROW2="8 " SRCCOLUMN2="53 " TYPESRC_LENG="0 " TYPESRC="yt_functions TYPE STANDARD TABLE OF syucomm
"/>
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations
CLASS lcl_api IMPLEMENTATION.
  METHOD conversion_exit_lenum_input.
    DATA: lt_return TYPE bapiret2_t,
          l_message TYPE string.
    FIELD-SYMBOLS  &lt;ls_return&gt; TYPE bapiret2.

    CLEAR r_input.
    CALL FUNCTION &apos;CONVERSION_EXIT_LENUM_INPUT&apos;
      EXPORTING
        input           = i_output    &quot; External entry
      IMPORTING
        output          = r_input     &quot; Edited storage unit number for sto
      EXCEPTIONS
        check_failed    = 1
        not_numeric     = 2
        t344_get_failed = 3
        wrong_length    = 4
        OTHERS          = 5.
    IF sy-subrc &lt;&gt; 0.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                 WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4
                 INTO l_message.
      APPEND INITIAL LINE TO lt_return ASSIGNING &lt;ls_return&gt;.
      &lt;ls_return&gt;-id = sy-msgid.
      &lt;ls_return&gt;-type = sy-msgty.
      &lt;ls_return&gt;-number = sy-msgno.
      &lt;ls_return&gt;-message = l_message.
      &lt;ls_return&gt;-message_v1 = sy-msgv1.
      &lt;ls_return&gt;-message_v2 = sy-msgv2.
      &lt;ls_return&gt;-message_v3 = sy-msgv3.
      &lt;ls_return&gt;-message_v4 = sy-msgv4.
      RAISE EXCEPTION TYPE cx_bapi_error
        EXPORTING
          status = lt_return.
    ENDIF.
  ENDMETHOD.                    &quot;conversion_exit_lenum_input
  METHOD conversion_exit_lenum_output.
    DATA: lt_return TYPE bapiret2_t,
          l_message TYPE string.
    FIELD-SYMBOLS  &lt;ls_return&gt; TYPE bapiret2.

    CLEAR r_output.
    CALL FUNCTION &apos;CONVERSION_EXIT_LENUM_OUTPUT&apos;
      EXPORTING
        input           = i_input     &quot; Storage unit number (internal form
      IMPORTING
        output          = r_output    &quot; Storage unit number (output format
      EXCEPTIONS
        t344_get_failed = 1
        OTHERS          = 2.
    IF sy-subrc &lt;&gt; 0.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                 WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4
                 INTO l_message.
      APPEND INITIAL LINE TO lt_return ASSIGNING &lt;ls_return&gt;.
      &lt;ls_return&gt;-id = sy-msgid.
      &lt;ls_return&gt;-type = sy-msgty.
      &lt;ls_return&gt;-number = sy-msgno.
      &lt;ls_return&gt;-message = l_message.
      &lt;ls_return&gt;-message_v1 = sy-msgv1.
      &lt;ls_return&gt;-message_v2 = sy-msgv2.
      &lt;ls_return&gt;-message_v3 = sy-msgv3.
      &lt;ls_return&gt;-message_v4 = sy-msgv4.
      RAISE EXCEPTION TYPE cx_bapi_error
        EXPORTING
          status = lt_return.
    ENDIF.
  ENDMETHOD.                    &quot;conversion_exit_lenum_output
ENDCLASS.                    &quot;lcl_api IMPLEMENTATION</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section
CLASS lcl_api DEFINITION.
  PUBLIC SECTION.
    METHODS:
      conversion_exit_lenum_input   IMPORTING i_output       TYPE char18
                                    RETURNING value(r_input) TYPE lenum
                                    RAISING   cx_bapi_error,
      conversion_exit_lenum_output  IMPORTING i_input         TYPE lenum
                                    RETURNING value(r_output) TYPE char18
                                    RAISING   cx_bapi_error.
ENDCLASS.                    &quot;lcl_api IMPLEMENTATION</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <localTestClasses>*&quot;* use this source file for your ABAP unit test classes</localTestClasses>
  <textPool>
   <language SPRAS="E">
    <textElement ID="I" KEY="Q01" ENTRY="The bin stores items. Please confirm its resetting?" LENGTH="60 "/>
    <textElement ID="I" KEY="Q02" ENTRY="Do you confirm the count restart?" LENGTH="40 "/>
    <textElement ID="I" KEY="Q03" ENTRY="Do you confirm the count finish?" LENGTH="40 "/>
    <textElement ID="I" KEY="Q04" ENTRY="Do you confirm the end of the SU count?" LENGTH="39 "/>
    <textElement ID="I" KEY="Q05" ENTRY="Do you confirm the loss of the unfinished count?" LENGTH="55 "/>
   </language>
   <language SPRAS="P">
    <textElement ID="I" KEY="Q01" ENTRY="A posição contém itens. Por favor confirme que deseja zerar." LENGTH="60 "/>
    <textElement ID="I" KEY="Q02" ENTRY="Você confirma o reinício da contagem?" LENGTH="40 "/>
    <textElement ID="I" KEY="Q03" ENTRY="Confirma o encerramento da contagem?" LENGTH="40 "/>
    <textElement ID="I" KEY="Q04" ENTRY="Você confirma o fim da contagem da UD?" LENGTH="39 "/>
    <textElement ID="I" KEY="Q05" ENTRY="Confirma a perda da contagem não finalizada?" LENGTH="55 "/>
   </language>
  </textPool>
  <attribute CLSNAME="ZCL_WM_LG_AUT_CTRL_INV_CNT" CMPNAME="MR_API" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="1 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="3" TYPE="LCL_API" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_WM_LG_AUT_CTRL_INV_CNT" CMPNAME="MR_MODEL_OF_THIS" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="2 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="3" TYPE="ZCL_WM_LG_AUT_MODEL_INVENTORY" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_WM_LG_AUT_CTRL_INV_CNT" CMPNAME="MT_COUNTING_TRACK" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="3 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="YT_COUNTING_TRACK" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_WM_LG_AUT_CTRL_INV_CNT" CMPNAME="MT_EXCLUDED_FUNCTIONS" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="1 " ATTDECLTYP="0" ATTRDONLY="X" ATTEXPVIRT="0" TYPTYPE="4" SRCROW1="10 " SRCCOLUMN1="8 " SRCROW2="10 " SRCCOLUMN2="51 " TYPESRC_LENG="46 " TYPESRC="mt_excluded_functions  TYPE TABLE OF syucomm
"/>
  <attribute CLSNAME="ZCL_WM_LG_AUT_CTRL_INV_CNT" CMPNAME="M_INVENTORY_ITEM" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="3 " ATTDECLTYP="0" ATTRDONLY="X" ATTEXPVIRT="0" TYPTYPE="1" TYPE="LVS_IVPOS" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_WM_LG_AUT_CTRL_INV_CNT" CMPNAME="M_INVENTORY_RECORD" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="2 " ATTDECLTYP="0" ATTRDONLY="X" ATTEXPVIRT="0" TYPTYPE="1" TYPE="LVS_IVNUM" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_WM_LG_AUT_CTRL_INV_CNT" CMPNAME="M_PRODUCT" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="5 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="MATNR" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_WM_LG_AUT_CTRL_INV_CNT" CMPNAME="M_PROD_DESCR" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="6 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="MAKTX" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_WM_LG_AUT_CTRL_INV_CNT" CMPNAME="M_QUANTITY" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="9 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="NUM6" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_WM_LG_AUT_CTRL_INV_CNT" CMPNAME="M_STORAGE_UNIT" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="4 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="LENUM" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_WM_LG_AUT_CTRL_INV_CNT" CMPNAME="M_UNIT" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="8 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="MEINS" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_WM_LG_AUT_CTRL_INV_CNT" CMPNAME="M_UNITS_COUNTER" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="7 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="NUMC4" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <inheritance CLSNAME="ZCL_WM_LG_AUT_CTRL_INV_CNT" REFCLSNAME="ZCL_WM_LG_AUT_CONTROLLER" VERSION="1" STATE="1"/>
  <method CLSNAME="ZCL_WM_LG_AUT_CTRL_INV_CNT" CMPNAME="BACK" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD back.
    DATA l_index  TYPE i.
    FIELD-SYMBOLS  &lt;l_screen&gt; TYPE sydynnr.

    l_index = lines( me-&gt;mt_screens_stack ).
    IF l_index &gt; 0.
      DELETE me-&gt;mt_screens_stack INDEX l_index.
      l_index = lines( me-&gt;mt_screens_stack ).
    ENDIF.

    IF l_index = 1.
      CLEAR:  me-&gt;m_storage_type, me-&gt;m_position, me-&gt;m_product, me-&gt;m_units_counter,
              me-&gt;mt_counting_track,
              me-&gt;m_storage_unit, me-&gt;m_prod_descr, me-&gt;m_unit, me-&gt;m_quantity.
    ELSEIF l_index IS INITIAL.
      LEAVE TO SCREEN 0.
    ENDIF.

    READ TABLE me-&gt;mt_screens_stack INDEX l_index
        ASSIGNING &lt;l_screen&gt;.
    IF sy-subrc = 0.
      LEAVE TO SCREEN &lt;l_screen&gt;.
    ENDIF.
  ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_WM_LG_AUT_CTRL_INV_CNT" CMPNAME="CONSTRUCTOR" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="2" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD constructor.

    super-&gt;constructor( ).

    CREATE OBJECT: me-&gt;mr_api,
                   me-&gt;mr_model_of_this.
  ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_WM_LG_AUT_CTRL_INV_CNT" CMPNAME="EXECUTE_9000" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_WM_LG_AUT_CTRL_INV_CNT" CMPNAME="EXECUTE_9000" SCONAME="I_STORAGE_BIN" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="LGPLA"/>
   <parameter CLSNAME="ZCL_WM_LG_AUT_CTRL_INV_CNT" CMPNAME="EXECUTE_9000" SCONAME="I_OKCODE" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SYUCOMM"/>
   <parameter CLSNAME="ZCL_WM_LG_AUT_CTRL_INV_CNT" CMPNAME="EXECUTE_9000" SCONAME="R_OKCODE" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="SYUCOMM"/>
   <source>METHOD execute_9000.
    DATA lx_error TYPE REF TO cx_bapi_error.
    FIELD-SYMBOLS &lt;ls_return&gt; TYPE bapiret2.

    CLEAR r_okcode.
    IF i_okcode = zif_wm_lg_aut_inventory=&gt;mc_okcode-back.
      me-&gt;back(  ).
    ELSEIF i_okcode = zif_wm_lg_aut_inventory=&gt;mc_okcode-clear.
      CLEAR me-&gt;m_position.
      RETURN.
    ENDIF.


    TRY.
        me-&gt;m_storage_type = me-&gt;mr_model_of_this-&gt;get_storage_type( i_storage_bin ).&quot;Checks storage bin existence - Verificar se a posição lida existe
        me-&gt;mr_model_of_this-&gt;get_inventory_record(
          EXPORTING
            i_warehouse_number = me-&gt;m_warehouse_number
            i_storage_type     = me-&gt;m_storage_type
            i_storage_bin      = i_storage_bin
          IMPORTING
            e_inventory_record = me-&gt;m_inventory_record
            e_inventory_item   = me-&gt;m_inventory_item
        ).
*          CATCH cx_bapi_error.    &quot; BAPI Error Exception: Migrated Error Messages Type &quot;E&quot;.

        me-&gt;mr_model_of_this-&gt;init_count(
          EXPORTING
            i_warehouse_number = me-&gt;m_warehouse_number
            i_inventory_record = me-&gt;m_inventory_record
            i_inventory_item   = me-&gt;m_inventory_item
        ).
*         CATCH cx_bapi_error.    &quot; BAPI Error Exception: Migrated Error Messages Type &quot;E&quot;

        me-&gt;m_position = i_storage_bin.
      CATCH cx_bapi_error INTO lx_error.
        LOOP AT lx_error-&gt;status ASSIGNING &lt;ls_return&gt;.
          TRY .
              me-&gt;send_its_message( is_message = &lt;ls_return&gt; ).
*                      CATCH cx_bapi_error.    &quot; BAPI Error Exception: Migrated Error Messages Type &quot;E&quot;
            CATCH cx_bapi_error ##no_handler.
          ENDTRY.
        ENDLOOP.

        CLEAR me-&gt;m_position.
        RETURN.
    ENDTRY.

    IF me-&gt;mr_model-&gt;is_su_managed(
        i_warehouse_number = me-&gt;m_warehouse_number
        i_storage_type     = me-&gt;m_storage_type
    ) = abap_false.
      APPEND 9001 TO me-&gt;mt_screens_stack.
      LEAVE TO SCREEN 9001.
    ELSE.
      APPEND 9002 TO me-&gt;mt_screens_stack.
      LEAVE TO SCREEN 9002.
    ENDIF.

  ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_WM_LG_AUT_CTRL_INV_CNT" CMPNAME="EXECUTE_9001" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="3 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_WM_LG_AUT_CTRL_INV_CNT" CMPNAME="EXECUTE_9001" SCONAME="I_PRODUCT" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="CHAR18"/>
   <parameter CLSNAME="ZCL_WM_LG_AUT_CTRL_INV_CNT" CMPNAME="EXECUTE_9001" SCONAME="I_OKCODE" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SYUCOMM"/>
   <parameter CLSNAME="ZCL_WM_LG_AUT_CTRL_INV_CNT" CMPNAME="EXECUTE_9001" SCONAME="R_OKCODE" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="SYUCOMM"/>
   <source>METHOD execute_9001.
    DATA: lx_error   TYPE REF TO cx_bapi_error,
          ls_message TYPE bapiret2,
          l_question TYPE logline,
          l_diff     TYPE boolean.
    FIELD-SYMBOLS: &lt;ls_counting_track&gt; LIKE LINE OF me-&gt;mt_counting_track,
                   &lt;ls_return&gt; TYPE bapiret2.

    CLEAR r_okcode.

    IF i_okcode = zif_wm_lg_aut_inventory=&gt;mc_okcode-back.
      TRY.
          me-&gt;mr_model_of_this-&gt;check_count_2finish(
                  i_warehouse_number = me-&gt;m_warehouse_number
                  i_inventory_record = me-&gt;m_inventory_record
                  i_inventory_item   = me-&gt;m_inventory_item
              ).

          l_question = &apos;Do you confirm the loss of the unfinished count?&apos;(q05).
          IF me-&gt;send_yes_no_question( i_text = l_question ) &lt;&gt; zif_wm_lg_aut_inventory=&gt;mc_yes. &quot;Different from &quot;Yes&quot;, which means &quot;No&quot;
            RETURN.
          ENDIF.
        CATCH cx_bapi_error ##no_handler.
      ENDTRY.

      me-&gt;back(  ).
    ENDIF.

    TRY.
        CASE i_okcode.
          WHEN zif_wm_lg_aut_inventory=&gt;mc_okcode-finish.
            l_question = &apos;Do you confirm the count finish?&apos;(q03).
            IF me-&gt;send_yes_no_question( i_text = l_question ) &lt;&gt; zif_wm_lg_aut_inventory=&gt;mc_yes. &quot;Different from &quot;Yes&quot;, which means &quot;No&quot;
              RETURN.
            ENDIF.

            l_diff = me-&gt;mr_model_of_this-&gt;finish_count(
                i_warehouse_number = me-&gt;m_warehouse_number
                i_inventory_record = me-&gt;m_inventory_record
                i_inventory_item   = me-&gt;m_inventory_item
                i_storage_type     = me-&gt;m_storage_type
                i_storage_bin      = me-&gt;m_position
            ).
*              CATCH cx_bapi_error.  &quot; BAPI Error Exception: Migrated Error Messages Type &quot;E&quot;.
            IF l_diff = abap_true.
              MESSAGE i110(zwm) INTO ls_message-message.
            ELSEIF me-&gt;mr_model_of_this-&gt;m_inventory_closed = abap_false.
              MESSAGE i109(zwm) INTO ls_message-message.
            ELSE.&quot;Inventory document finished
              MESSAGE i115(zwm) INTO ls_message-message.
            ENDIF.
            ls_message-id = sy-msgid.
            ls_message-type = sy-msgty.
            ls_message-number = sy-msgno.
            TRY .
                me-&gt;send_its_message( is_message = ls_message ).
*                      CATCH cx_bapi_error.    &quot; BAPI Error Exception: Migrated Error Messages Type &quot;E&quot;
              CATCH cx_bapi_error ##no_handler.
            ENDTRY.
            CLEAR: me-&gt;m_position, me-&gt;m_units_counter.
            me-&gt;back( ).
          WHEN zif_wm_lg_aut_inventory=&gt;mc_okcode-clear.
            l_question = &apos;Do you confirm the count restart?&apos;(q02).
            IF me-&gt;send_yes_no_question( i_text = l_question ) &lt;&gt; zif_wm_lg_aut_inventory=&gt;mc_yes. &quot;Different from &quot;Yes&quot;, which means &quot;No&quot;
              RETURN.
            ENDIF.

            me-&gt;mr_model_of_this-&gt;restart_count(
              EXPORTING
                i_warehouse_number = me-&gt;m_warehouse_number
                i_inventory_record = me-&gt;m_inventory_record
                i_inventory_item   = me-&gt;m_inventory_item
            ).
*              CATCH cx_bapi_error.    &quot; BAPI Error Exception: Migrated Error Messages Type &quot;E&quot;

            CLEAR: me-&gt;m_product, me-&gt;mt_counting_track.
            MESSAGE i108(zwm) INTO ls_message-message.
            ls_message-id = sy-msgid.
            ls_message-type = sy-msgty.
            ls_message-number = sy-msgno.
            TRY .
                me-&gt;send_its_message( is_message = ls_message ).
*                      CATCH cx_bapi_error.    &quot; BAPI Error Exception: Migrated Error Messages Type &quot;E&quot;
              CATCH cx_bapi_error ##no_handler.
            ENDTRY.
          WHEN zif_wm_lg_aut_inventory=&gt;mc_okcode-reset.
            IF me-&gt;mr_model_of_this-&gt;is_storage_bin_empty(
                i_warehouse_number = me-&gt;m_warehouse_number
                i_inventory_record = me-&gt;m_inventory_record
                i_storage_type     = me-&gt;m_storage_type
                i_storage_bin      = me-&gt;m_position
            ) = abap_false.
              l_question = &apos;The bin stores items. Please confirm its resetting?&apos;(q01).
              IF me-&gt;send_yes_no_question( i_text = l_question ) &lt;&gt; zif_wm_lg_aut_inventory=&gt;mc_yes. &quot;Different from &quot;Yes&quot;, which means &quot;No&quot;
                RETURN.
              ENDIF.
            ENDIF.

            l_diff = me-&gt;mr_model_of_this-&gt;reset_storage_bin(
                i_warehouse_number = me-&gt;m_warehouse_number
                i_inventory_record = me-&gt;m_inventory_record
                i_inventory_item   = me-&gt;m_inventory_item
                i_storage_type     = me-&gt;m_storage_type
                i_storage_bin      = me-&gt;m_position
            ).
*              CATCH cx_bapi_error.    &quot; BAPI Error Exception: Migrated Error Messages Type &quot;E&quot;
            IF l_diff = abap_true.
              MESSAGE i110(zwm) INTO ls_message-message.
            ELSEIF me-&gt;mr_model_of_this-&gt;m_inventory_closed = abap_false.
              MESSAGE i109(zwm) INTO ls_message-message.
            ELSE.&quot;Inventory document finished
              MESSAGE i115(zwm) INTO ls_message-message.
            ENDIF.
            ls_message-id = sy-msgid.
            ls_message-type = sy-msgty.
            ls_message-number = sy-msgno.
            TRY .
                me-&gt;send_its_message( is_message = ls_message ).
*                      CATCH cx_bapi_error.    &quot; BAPI Error Exception: Migrated Error Messages Type &quot;E&quot;
              CATCH cx_bapi_error ##no_handler.
            ENDTRY.

            CLEAR: me-&gt;m_product, me-&gt;mt_counting_track.
            me-&gt;back( ).
          WHEN OTHERS.
            TRY.
                me-&gt;mr_model_of_this-&gt;check_product(
                  EXPORTING
                    i_plant   = me-&gt;m_plant
                    i_product = i_product
                ).
*              CATCH cx_bapi_error.    &quot; BAPI Error Exception: Migrated Error Messages Type &quot;E&quot;

                me-&gt;m_product = i_product.
              CATCH cx_bapi_error.
                me-&gt;m_product = me-&gt;mr_model_of_this-&gt;ean_to_matnr(
                    i_ean_code     = i_product
                    i_plant        = me-&gt;m_plant
                ).
*                  CATCH cx_bapi_error.  &quot; BAPI Error Exception: Migrated Error Messages Type &quot;E&quot;
            ENDTRY.

            me-&gt;m_units_counter = me-&gt;mr_model_of_this-&gt;count_product(
                i_warehouse_number = me-&gt;m_warehouse_number
                i_inventory_record = me-&gt;m_inventory_record
                i_inventory_item   = me-&gt;m_inventory_item
                i_storage_type     = me-&gt;m_storage_type
                i_storage_bin      = me-&gt;m_position
                i_product          = i_product
            ).
*              CATCH cx_bapi_error.  &quot; BAPI Error Exception: Migrated Error Messages Type &quot;E&quot;.

            READ TABLE me-&gt;mt_counting_track WITH KEY product = me-&gt;m_product
             ASSIGNING &lt;ls_counting_track&gt;.
            IF sy-subrc = 0.
              &lt;ls_counting_track&gt;-count = me-&gt;m_units_counter.
            ELSE.
              APPEND INITIAL LINE TO me-&gt;mt_counting_track ASSIGNING &lt;ls_counting_track&gt;.
              &lt;ls_counting_track&gt;-product = me-&gt;m_product.
              &lt;ls_counting_track&gt;-count   = me-&gt;m_units_counter.
            ENDIF.

            CLEAR me-&gt;m_product.
        ENDCASE.
      CATCH cx_bapi_error INTO lx_error.
        LOOP AT lx_error-&gt;status ASSIGNING &lt;ls_return&gt;.
          TRY .
              me-&gt;send_its_message( is_message = &lt;ls_return&gt; ).
*                      CATCH cx_bapi_error.    &quot; BAPI Error Exception: Migrated Error Messages Type &quot;E&quot;
            CATCH cx_bapi_error ##no_handler.
          ENDTRY.
        ENDLOOP.

        CLEAR me-&gt;m_product.
    ENDTRY.
  ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_WM_LG_AUT_CTRL_INV_CNT" CMPNAME="EXECUTE_9002" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="4 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_WM_LG_AUT_CTRL_INV_CNT" CMPNAME="EXECUTE_9002" SCONAME="I_STORAGE_UNIT" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="CHAR18"/>
   <parameter CLSNAME="ZCL_WM_LG_AUT_CTRL_INV_CNT" CMPNAME="EXECUTE_9002" SCONAME="I_PRODUCT" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="MATNR"/>
   <parameter CLSNAME="ZCL_WM_LG_AUT_CTRL_INV_CNT" CMPNAME="EXECUTE_9002" SCONAME="I_QUANTITY" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="NUM6"/>
   <parameter CLSNAME="ZCL_WM_LG_AUT_CTRL_INV_CNT" CMPNAME="EXECUTE_9002" SCONAME="I_OKCODE" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SYUCOMM"/>
   <parameter CLSNAME="ZCL_WM_LG_AUT_CTRL_INV_CNT" CMPNAME="EXECUTE_9002" SCONAME="R_OKCODE" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="5 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="SYUCOMM"/>
   <source>METHOD execute_9002.
    DATA: lx_error         TYPE REF TO cx_bapi_error,
          ls_message       TYPE bapiret2,
          l_question       TYPE logline,
          l_diff           TYPE boolean.
    FIELD-SYMBOLS: &lt;ls_counting_track&gt; LIKE LINE OF me-&gt;mt_counting_track,
                   &lt;ls_return&gt; TYPE bapiret2.

    CLEAR r_okcode.
    IF i_okcode = zif_wm_lg_aut_inventory=&gt;mc_okcode-back.
      IF me-&gt;m_quantity IS NOT INITIAL.
        CLEAR me-&gt;m_quantity.
        RETURN.
      ELSEIF me-&gt;m_product IS NOT INITIAL.
        CLEAR: me-&gt;m_product, me-&gt;m_prod_descr.
        RETURN.
      ELSEIF me-&gt;m_storage_unit IS NOT INITIAL.
        CLEAR me-&gt;m_storage_unit.
        RETURN.
      ELSE.
        TRY.
            me-&gt;mr_model_of_this-&gt;check_count_2finish(
                    i_warehouse_number = me-&gt;m_warehouse_number
                    i_inventory_record = me-&gt;m_inventory_record
                    i_inventory_item   = me-&gt;m_inventory_item
                ).

            l_question = &apos;Do you confirm the loss of the unfinished count?&apos;(q05).
            IF me-&gt;send_yes_no_question( i_text = l_question ) &lt;&gt; zif_wm_lg_aut_inventory=&gt;mc_yes. &quot;Different from &quot;Yes&quot;, which means &quot;No&quot;
              RETURN.
            ENDIF.
          CATCH cx_bapi_error ##no_handler.
        ENDTRY.

        me-&gt;back(  ).
      ENDIF.
    ENDIF.

    IF i_storage_unit IS NOT INITIAL.
      TRY.
          me-&gt;m_storage_unit = me-&gt;mr_api-&gt;conversion_exit_lenum_input( i_output = i_storage_unit ).
*        CATCH cx_bapi_error.  &quot; BAPI Error Exception: Migrated Error Messages Type &quot;E&quot;
        CATCH cx_bapi_error INTO lx_error.
          LOOP AT lx_error-&gt;status ASSIGNING &lt;ls_return&gt;.
            TRY .
                me-&gt;send_its_message( is_message = &lt;ls_return&gt; ).
*                      CATCH cx_bapi_error.    &quot; BAPI Error Exception: Migrated Error Messages Type &quot;E&quot;
              CATCH cx_bapi_error ##no_handler.
            ENDTRY.
          ENDLOOP.
          RETURN.
      ENDTRY.

      TRY.
          me-&gt;mr_model_of_this-&gt;check_su_storage_bin(
            EXPORTING
              ir_model           = me-&gt;mr_model
              i_warehouse_number = me-&gt;m_warehouse_number
              i_storage_unit     = me-&gt;m_storage_unit
              i_storage_bin      = me-&gt;m_position
          ).
*          CATCH cx_bapi_error.    &quot; BAPI Error Exception: Migrated Error Messages Type &quot;E&quot;
        CATCH cx_bapi_error INTO lx_error.
          LOOP AT lx_error-&gt;status ASSIGNING &lt;ls_return&gt;.
            TRY .
                me-&gt;send_its_message( is_message = &lt;ls_return&gt; ).
*                      CATCH cx_bapi_error.    &quot; BAPI Error Exception: Migrated Error Messages Type &quot;E&quot;
              CATCH cx_bapi_error ##no_handler.
            ENDTRY.
          ENDLOOP.

          CLEAR me-&gt;m_storage_unit.
          RETURN.
      ENDTRY.
    ENDIF.

    IF i_product IS NOT INITIAL.
      TRY.
          TRY.
              me-&gt;mr_model_of_this-&gt;check_product(
                EXPORTING
                  i_plant   = me-&gt;m_plant
                  i_product = i_product
              ).
*              CATCH cx_bapi_error.    &quot; BAPI Error Exception: Migrated Error Messages Type &quot;E&quot;

              me-&gt;m_product = i_product.
            CATCH cx_bapi_error.
              me-&gt;m_product = me-&gt;mr_model_of_this-&gt;ean_to_matnr(
                  i_ean_code     = i_product
                  i_plant        = me-&gt;m_plant
              ).
*                  CATCH cx_bapi_error.  &quot; BAPI Error Exception: Migrated Error Messages Type &quot;E&quot;
          ENDTRY.

          me-&gt;m_prod_descr = me-&gt;mr_model_of_this-&gt;get_product_descr( i_product = me-&gt;m_product ).
*            CATCH cx_bapi_error.  &quot; BAPI Error Exception: Migrated Error Messages Type &quot;E&quot;.
        CATCH cx_bapi_error INTO lx_error.
          LOOP AT lx_error-&gt;status ASSIGNING &lt;ls_return&gt;.
            TRY .
                me-&gt;send_its_message( is_message = &lt;ls_return&gt; ).
*                      CATCH cx_bapi_error.    &quot; BAPI Error Exception: Migrated Error Messages Type &quot;E&quot;
              CATCH cx_bapi_error ##no_handler.
            ENDTRY.
          ENDLOOP.

          CLEAR me-&gt;m_product.
          RETURN.
      ENDTRY.
    ENDIF.

    TRY.
        CASE i_okcode.
          WHEN zif_wm_lg_aut_inventory=&gt;mc_okcode-finish.
            l_question = &apos;Do you confirm the count finish?&apos;(q03).
            IF me-&gt;send_yes_no_question( i_text = l_question ) &lt;&gt; zif_wm_lg_aut_inventory=&gt;mc_yes. &quot;Different from &quot;Yes&quot;, which means &quot;No&quot;
              RETURN.
            ENDIF.

            CLEAR l_diff.
            l_diff = me-&gt;mr_model_of_this-&gt;finish_count(
                i_warehouse_number = me-&gt;m_warehouse_number
                i_inventory_record = me-&gt;m_inventory_record
                i_inventory_item   = me-&gt;m_inventory_item
                i_storage_type     = me-&gt;m_storage_type
                i_storage_bin      = me-&gt;m_position
            ).
*              CATCH cx_bapi_error.  &quot; BAPI Error Exception: Migrated Error Messages Type &quot;E&quot;.
            IF l_diff = abap_true.
              MESSAGE i110(zwm) INTO ls_message-message.
            ELSEIF me-&gt;mr_model_of_this-&gt;m_inventory_closed = abap_false.
              MESSAGE i109(zwm) INTO ls_message-message.
            ELSE.&quot;Inventory document finished
              MESSAGE i115(zwm) INTO ls_message-message.
            ENDIF.
            ls_message-id = sy-msgid.
            ls_message-type = sy-msgty.
            ls_message-number = sy-msgno.
            TRY .
                me-&gt;send_its_message( is_message = ls_message ).
*                      CATCH cx_bapi_error.    &quot; BAPI Error Exception: Migrated Error Messages Type &quot;E&quot;
              CATCH cx_bapi_error ##no_handler.
            ENDTRY.
            CLEAR: me-&gt;m_position, me-&gt;m_storage_unit, me-&gt;m_unit, me-&gt;m_quantity.
            me-&gt;back( ).
          WHEN zif_wm_lg_aut_inventory=&gt;mc_okcode-su_finish.
            l_question = &apos;Do you confirm the finish of SU count?&apos;(q04).
            IF me-&gt;send_yes_no_question( i_text = l_question ) &lt;&gt; zif_wm_lg_aut_inventory=&gt;mc_yes. &quot;Different from &quot;Yes&quot;, which means &quot;No&quot;
              RETURN.
            ENDIF.

            me-&gt;mr_model_of_this-&gt;finish_su_count(
                i_warehouse_number = me-&gt;m_warehouse_number
                i_inventory_record = me-&gt;m_inventory_record
                i_inventory_item   = me-&gt;m_inventory_item
                i_storage_unit     = me-&gt;m_storage_unit
            ).
*              CATCH cx_bapi_error.  &quot; BAPI Error Exception: Migrated Error Messages Type &quot;E&quot;.

            MESSAGE i113(zwm) INTO ls_message-message.
            ls_message-id = sy-msgid.
            ls_message-type = sy-msgty.
            ls_message-number = sy-msgno.
            TRY .
                me-&gt;send_its_message( is_message = ls_message ).
*                      CATCH cx_bapi_error.    &quot; BAPI Error Exception: Migrated Error Messages Type &quot;E&quot;
              CATCH cx_bapi_error ##no_handler.
            ENDTRY.
            CLEAR: me-&gt;m_storage_unit, me-&gt;m_product, me-&gt;m_unit, me-&gt;m_quantity, me-&gt;mt_counting_track.
          WHEN zif_wm_lg_aut_inventory=&gt;mc_okcode-clear.
            l_question = &apos;Do you confirm the count restart?&apos;(q02).
            IF me-&gt;send_yes_no_question( i_text = l_question ) &lt;&gt; zif_wm_lg_aut_inventory=&gt;mc_yes. &quot;Different from &quot;Yes&quot;, which means &quot;No&quot;
              RETURN.
            ENDIF.

            me-&gt;mr_model_of_this-&gt;restart_count(
              EXPORTING
                i_warehouse_number = me-&gt;m_warehouse_number
                i_inventory_record = me-&gt;m_inventory_record
                i_inventory_item   = me-&gt;m_inventory_item
            ).
*              CATCH cx_bapi_error.    &quot; BAPI Error Exception: Migrated Error Messages Type &quot;E&quot;

            CLEAR me-&gt;m_units_counter.
          WHEN zif_wm_lg_aut_inventory=&gt;mc_okcode-reset.
            IF me-&gt;mr_model_of_this-&gt;is_storage_bin_empty(
                i_warehouse_number = me-&gt;m_warehouse_number
                i_inventory_record = me-&gt;m_inventory_record
                i_storage_type     = me-&gt;m_storage_type
                i_storage_bin      = me-&gt;m_position
            ) = abap_false.
              l_question = &apos;The bin stores items. Please confirm its resetting?&apos;(q01).
              IF me-&gt;send_yes_no_question( i_text = l_question ) &lt;&gt; zif_wm_lg_aut_inventory=&gt;mc_yes. &quot;Different from &quot;Yes&quot;, which means &quot;No&quot;
                RETURN.
              ENDIF.
            ENDIF.

            CLEAR l_diff.
            l_diff = me-&gt;mr_model_of_this-&gt;reset_storage_bin(
                i_warehouse_number = me-&gt;m_warehouse_number
                i_inventory_record = me-&gt;m_inventory_record
                i_inventory_item   = me-&gt;m_inventory_item
                i_storage_type     = me-&gt;m_storage_type
                i_storage_bin      = me-&gt;m_position
            ).
*              CATCH cx_bapi_error.    &quot; BAPI Error Exception: Migrated Error Messages Type &quot;E&quot;

            IF l_diff = abap_true.
              MESSAGE i110(zwm) INTO ls_message-message.
            ELSEIF me-&gt;mr_model_of_this-&gt;m_inventory_closed = abap_false.
              MESSAGE i109(zwm) INTO ls_message-message.
            ELSE.&quot;Inventory document finished
              MESSAGE i115(zwm) INTO ls_message-message.
            ENDIF.
            ls_message-id = sy-msgid.
            ls_message-type = sy-msgty.
            ls_message-number = sy-msgno.
            TRY .
                me-&gt;send_its_message( is_message = ls_message ).
*                      CATCH cx_bapi_error.    &quot; BAPI Error Exception: Migrated Error Messages Type &quot;E&quot;
              CATCH cx_bapi_error ##no_handler.
            ENDTRY.

            CLEAR: me-&gt;m_product, me-&gt;mt_counting_track.
            me-&gt;back( ).
          WHEN OTHERS.&quot;Count
            DATA l_quantity TYPE menge_d.

            IF i_quantity IS NOT INITIAL.
              l_quantity = me-&gt;m_quantity = i_quantity.

              me-&gt;mr_model_of_this-&gt;count_su(
                  i_warehouse_number = me-&gt;m_warehouse_number
                  i_inventory_record = me-&gt;m_inventory_record
                  i_inventory_item   = me-&gt;m_inventory_item
                  i_storage_type     = me-&gt;m_storage_type
                  i_storage_bin      = me-&gt;m_position
                  i_storage_unit     = me-&gt;m_storage_unit
                  i_unit             = me-&gt;m_unit
                  i_quantity         = l_quantity
                  i_product          = me-&gt;m_product
              ).
*              CATCH cx_bapi_error.  &quot; BAPI Error Exception: Migrated Error Messages Type &quot;E&quot;.

              READ TABLE me-&gt;mt_counting_track WITH KEY product = me-&gt;m_product
                                                        storage_unit = me-&gt;m_storage_unit
               ASSIGNING &lt;ls_counting_track&gt;.
              IF sy-subrc = 0.
                &lt;ls_counting_track&gt;-count = me-&gt;m_quantity.
              ELSE.
                APPEND INITIAL LINE TO me-&gt;mt_counting_track ASSIGNING &lt;ls_counting_track&gt;.
                &lt;ls_counting_track&gt;-product = me-&gt;m_product.
                &lt;ls_counting_track&gt;-storage_unit = me-&gt;m_storage_unit.
                &lt;ls_counting_track&gt;-count   = me-&gt;m_quantity.
              ENDIF.

              CLEAR: me-&gt;m_quantity, m_product, m_prod_descr.
            ENDIF.
        ENDCASE.
      CATCH cx_bapi_error INTO lx_error.
        LOOP AT lx_error-&gt;status ASSIGNING &lt;ls_return&gt;.
          TRY .
              me-&gt;send_its_message( is_message = &lt;ls_return&gt; ).
*                      CATCH cx_bapi_error.    &quot; BAPI Error Exception: Migrated Error Messages Type &quot;E&quot;
            CATCH cx_bapi_error ##no_handler.
          ENDTRY.
        ENDLOOP.
    ENDTRY.
  ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_WM_LG_AUT_CTRL_INV_CNT" CMPNAME="GET_9000_DATA" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="5 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_WM_LG_AUT_CTRL_INV_CNT" CMPNAME="GET_9000_DATA" SCONAME="E_STORAGE_BIN" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="LGPLA"/>
   <source>METHOD get_9000_data.

    CLEAR e_storage_bin.
    e_storage_bin = me-&gt;m_position.
  ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_WM_LG_AUT_CTRL_INV_CNT" CMPNAME="GET_9001_DATA" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="6 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_WM_LG_AUT_CTRL_INV_CNT" CMPNAME="GET_9001_DATA" SCONAME="E_STORAGE_TYPE" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="LGTYP"/>
   <parameter CLSNAME="ZCL_WM_LG_AUT_CTRL_INV_CNT" CMPNAME="GET_9001_DATA" SCONAME="E_STORAGE_BIN" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="LGPLA"/>
   <parameter CLSNAME="ZCL_WM_LG_AUT_CTRL_INV_CNT" CMPNAME="GET_9001_DATA" SCONAME="E_PRODUCT" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="CHAR18"/>
   <parameter CLSNAME="ZCL_WM_LG_AUT_CTRL_INV_CNT" CMPNAME="GET_9001_DATA" SCONAME="E_UNITS_COUNTER" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="NUMC4"/>
   <source>METHOD get_9001_data.

    CLEAR: e_storage_bin, e_storage_type, e_product, e_units_counter.

    e_storage_type  = me-&gt;m_storage_type.
    e_storage_bin   = me-&gt;m_position.
    e_product       = me-&gt;m_product.
    e_units_counter = me-&gt;m_units_counter.

    CLEAR me-&gt;mt_excluded_functions.
    IF me-&gt;mt_counting_track IS NOT INITIAL.
      APPEND zif_wm_lg_aut_inventory=&gt;mc_okcode-reset TO me-&gt;mt_excluded_functions.
    ENDIF.

    TRY.
        me-&gt;mr_model_of_this-&gt;check_count_2finish(
                i_warehouse_number = me-&gt;m_warehouse_number
                i_inventory_record = me-&gt;m_inventory_record
                i_inventory_item   = me-&gt;m_inventory_item
            ).
      CATCH cx_bapi_error.
        APPEND zif_wm_lg_aut_inventory=&gt;mc_okcode-finish TO me-&gt;mt_excluded_functions.
    ENDTRY.
  ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_WM_LG_AUT_CTRL_INV_CNT" CMPNAME="GET_9002_DATA" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="7 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_WM_LG_AUT_CTRL_INV_CNT" CMPNAME="GET_9002_DATA" SCONAME="E_STORAGE_BIN" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="LGPLA"/>
   <parameter CLSNAME="ZCL_WM_LG_AUT_CTRL_INV_CNT" CMPNAME="GET_9002_DATA" SCONAME="E_STORAGE_UNIT" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="CHAR18"/>
   <parameter CLSNAME="ZCL_WM_LG_AUT_CTRL_INV_CNT" CMPNAME="GET_9002_DATA" SCONAME="E_SU_READ" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="LENUM"/>
   <parameter CLSNAME="ZCL_WM_LG_AUT_CTRL_INV_CNT" CMPNAME="GET_9002_DATA" SCONAME="E_PRODUCT" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="CHAR18"/>
   <parameter CLSNAME="ZCL_WM_LG_AUT_CTRL_INV_CNT" CMPNAME="GET_9002_DATA" SCONAME="E_PROD_DESCR" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="5 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="MAKTX"/>
   <parameter CLSNAME="ZCL_WM_LG_AUT_CTRL_INV_CNT" CMPNAME="GET_9002_DATA" SCONAME="E_UNIT" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="6 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="MEINS"/>
   <parameter CLSNAME="ZCL_WM_LG_AUT_CTRL_INV_CNT" CMPNAME="GET_9002_DATA" SCONAME="E_QUANTITY" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="7 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="NUM6"/>
   <source>METHOD get_9002_data.

    CLEAR: e_storage_bin, e_storage_unit, e_su_read, e_product,
           e_prod_descr,  e_unit,         e_quantity.

    e_storage_bin  = me-&gt;m_position.
    e_su_read      = me-&gt;m_storage_unit.
    e_product      = me-&gt;m_product.
    e_prod_descr   = me-&gt;m_prod_descr.
    e_unit         = me-&gt;m_unit.
    e_quantity     = me-&gt;m_quantity.

    CLEAR me-&gt;mt_excluded_functions.
    IF me-&gt;mt_counting_track IS NOT INITIAL.
      APPEND zif_wm_lg_aut_inventory=&gt;mc_okcode-reset TO me-&gt;mt_excluded_functions.
    ENDIF.

    TRY.
        me-&gt;mr_model_of_this-&gt;check_count_2finish(
                i_warehouse_number = me-&gt;m_warehouse_number
                i_inventory_record = me-&gt;m_inventory_record
                i_inventory_item   = me-&gt;m_inventory_item
            ).
      CATCH cx_bapi_error.
        APPEND zif_wm_lg_aut_inventory=&gt;mc_okcode-finish TO me-&gt;mt_excluded_functions.
    ENDTRY.
  ENDMETHOD.</source>
  </method>
 </CLAS>
 <PROG NAME="MZWM0017_TOP" VARCL="X" DBAPL="S" DBNA="D$" SUBC="I" RMAND="100" FIXPT="X" LDBNAME="D$S" UCCHECK="X">
  <textPool>
   <language SPRAS="E">
    <textElement ID="R" ENTRY="Inventory counting - Global definitions" LENGTH="39 "/>
   </language>
  </textPool>
  <source>*&amp;---------------------------------------------------------------------*
*&amp;  Include  mzwm0017_top
*&amp;---------------------------------------------------------------------*
PROGRAM sapmzwm0017 MESSAGE-ID zwm.

**********************************************************************
* GLOBAL VARIABLES
**********************************************************************
DATA:
      gr_controller   TYPE REF TO zcl_wm_lg_aut_ctrl_inv_cnt,
      g_okcode        TYPE syucomm,
      &quot;Screen 9000 - Storage bin
      g_storage_bin   TYPE lgpla,
      &quot;Screen 9001 - Product
      g_storage_type  TYPE lgtyp,
      g_product       TYPE c LENGTH 18,
      g_units_counter TYPE n LENGTH 4,
      &quot;Screen 9002 - Storage unit
      g_storage_unit  TYPE c LENGTH 18,
      g_su_read       TYPE lenum,
      g_prod_descr    TYPE maktx,
      g_quantity      TYPE n LENGTH 6,
      g_unit          TYPE meins.</source>
 </PROG>
 <PROG NAME="ZIWM0005_D01" VARCL="X" DBAPL="S" DBNA="D$" SUBC="I" LEVL="731" RMAND="100" FIXPT="X" LDBNAME="D$S" UCCHECK="X">
  <textPool>
   <language SPRAS="P">
    <textElement ID="R" ENTRY="OPEX - Relatório Real x Previsões - Definições de classes" LENGTH="57 "/>
   </language>
  </textPool>
  <source>CLASS lcl_controller DEFINITION FINAL.
  PUBLIC SECTION.
    INTERFACES if_salv_csqt_content_manager.

    DATA
          mr_output  TYPE REF TO data.
    METHODS:
             constructor,
             get_data,
             show_data.
  PRIVATE SECTION.
    CONSTANTS mc_container TYPE string VALUE &apos;(SAPLSALV_CSQT_SCREEN_MANAGER)GR_CONTAINER&apos;.

    DATA:
          mr_model            TYPE REF TO zcl_wm_lg_aut_model_inventory,
          mr_top_container    TYPE REF TO cl_gui_container,
          mr_main_container   TYPE REF TO cl_gui_container,
          mr_view             TYPE REF TO cl_salv_table,
          mr_top              TYPE REF TO cl_dd_document,
          m_wm_column         TYPE i,
          m_max_counts_number TYPE i.
    EVENTS refresh_view.
    METHODS:
             display              IMPORTING ir_container TYPE REF TO cl_gui_container,
             on_user_command      FOR EVENT added_function OF cl_salv_events
                                  IMPORTING e_salv_function,
             on_refresh_view      FOR EVENT refresh_view OF lcl_controller,
             raise_refresh_view,
             refresh,
             set_columns_order,
             set_columns_styles,
             set_custom_functions IMPORTING ir_functions TYPE REF TO cl_salv_functions_list,
             set_events,
             set_functions,
             set_refresh          IMPORTING ir_functions TYPE REF TO cl_salv_functions_list,
             set_sort,
             set_texts,
             set_top_page IMPORTING i_reuse_control TYPE  sdydo_flag,
             set_view.
ENDCLASS.</source>
 </PROG>
 <PROG NAME="ZIWM0005_P01" VARCL="X" DBAPL="S" DBNA="D$" SUBC="I" LEVL="731" RMAND="100" FIXPT="X" LDBNAME="D$S" UCCHECK="X">
  <textPool>
   <language SPRAS="P">
    <textElement ID="R" ENTRY="OPEX - Relatório Real x Previsões - Implementações de classes" LENGTH="61 "/>
   </language>
  </textPool>
  <source>CLASS lcl_controller IMPLEMENTATION.
  METHOD constructor.

    &quot;me-&gt;mr_model = NEW zcl_fi_opex_model( ).
    CREATE OBJECT me-&gt;mr_model.
  ENDMETHOD.

  METHOD if_salv_csqt_content_manager~fill_container_content.
    DATA lr_splitter TYPE REF TO cl_gui_splitter_container.

    CREATE OBJECT lr_splitter
      EXPORTING
*        link_dynnr              =     &quot; Screen Number
*        link_repid              =     &quot; Report Name
*        shellstyle              =     &quot; Window Style
*        left                    =     &quot; Left-aligned
*        top                     =     &quot; top
*        width                   =     &quot; NPlWidth
*        height                  =     &quot; Hght
*        metric                  = CNTL_METRIC_DYNPRO    &quot; Metric
*        align                   = 15    &quot; Alignment
        parent                  = r_container    &quot; Parent Container
        rows                    = 2    &quot; Number of Rows to be displayed
        columns                 = 1    &quot; Number of Columns to be Displayed
*        no_autodef_progid_dynnr =     &quot; Don&apos;t Autodefined Progid and Dynnr?
*        name                    =     &quot; Name
      EXCEPTIONS
        cntl_error              = 1
        cntl_system_error       = 2
        OTHERS                  = 3.
    IF sy-subrc &lt;&gt; 0.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                 WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.

    lr_splitter-&gt;set_row_height(
      EXPORTING
        id                = 1    &quot; Row ID
        height            = 20    &quot; Height
*      IMPORTING
*        result            =     &quot; Result Code
      EXCEPTIONS
        cntl_error        = 1
        cntl_system_error = 2
        OTHERS            = 3
    ).
    IF sy-subrc &lt;&gt; 0.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                 WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.

    me-&gt;mr_top_container = lr_splitter-&gt;get_container(
        row       = 1
        column    = 1
    ).

    me-&gt;mr_main_container = lr_splitter-&gt;get_container(
        row       = 2
        column    = 1
    ).

    TRY .
        me-&gt;display( ir_container = me-&gt;mr_main_container ).
      CATCH cx_bapi_error.
    ENDTRY.
  ENDMETHOD.

  METHOD display.
    DATA:
          lx_salv_msg TYPE REF TO cx_salv_msg,
          l_message   TYPE string.
    FIELD-SYMBOLS
                  &lt;lt_output&gt; TYPE ANY TABLE.

    ASSIGN me-&gt;mr_output-&gt;* TO &lt;lt_output&gt;.

    TRY.
        cl_salv_table=&gt;factory(
          EXPORTING
*            list_display   = list_display    &quot; ALV Displayed in List Mode
            r_container    = ir_container    &quot; Abstract Container for GUI Controls
*            container_name = container_name
          IMPORTING
            r_salv_table   = me-&gt;mr_view    &quot; Basis Class Simple ALV Tables
          CHANGING
            t_table        = &lt;lt_output&gt;
        ).
*          CATCH cx_salv_msg.    &quot;
      CATCH cx_salv_msg INTO lx_salv_msg.
        l_message = lx_salv_msg-&gt;get_text( ).
        MESSAGE l_message TYPE &apos;E&apos;.
    ENDTRY.

    set_view( ).

    mr_view-&gt;display( ).
  ENDMETHOD.


  METHOD on_user_command.

    CASE e_salv_function.
      WHEN zif_wm_lg_aut_inventory=&gt;mc_okcode-refresh.
        refresh( ).
    ENDCASE.
  ENDMETHOD.


  METHOD on_refresh_view.
    DATA lr_container TYPE REF TO cl_gui_custom_container.
    FIELD-SYMBOLS &lt;lr_container&gt; TYPE REF TO cl_gui_custom_container.

    CREATE OBJECT lr_container
      EXPORTING
*        parent                      =     &quot; Parent container
        container_name              = &apos;CONTAINER&apos;    &quot; Name of the Screen CustCtrl Name to Link Container To
*        style                       =     &quot; Windows Style Attributes Applied to this Container
*        lifetime                    = LIFETIME_DEFAULT    &quot; Lifetime
*        repid                       =     &quot; Screen to Which this Container is Linked
*        dynnr                       =     &quot; Report To Which this Container is Linked
*        no_autodef_progid_dynnr     =     &quot; Don&apos;t Autodefined Progid and Dynnr?
*      EXCEPTIONS
*        cntl_error                  = 1
*        cntl_system_error           = 2
*        create_error                = 3
*        lifetime_error              = 4
*        lifetime_dynpro_dynpro_link = 5
*        others                      = 6
      .
    IF sy-subrc &lt;&gt; 0.
*     MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
*                WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.

    ASSIGN (mc_container) TO &lt;lr_container&gt;.
    IF &lt;lr_container&gt; IS ASSIGNED.
      &lt;lr_container&gt; = lr_container.
    ENDIF.

    me-&gt;if_salv_csqt_content_manager~fill_container_content( r_container = lr_container ).
  ENDMETHOD.


  METHOD raise_refresh_view.

    RAISE EVENT refresh_view.
  ENDMETHOD.


  METHOD refresh.
    DATA: lr_container TYPE REF TO cl_gui_custom_container,
          lr_event     TYPE REF TO cl_salv_events_table.
    FIELD-SYMBOLS &lt;lr_container&gt; TYPE REF TO cl_gui_custom_container.

*    FIELD-SYMBOLS &lt;lt_output&gt;     TYPE ANY TABLE.
    ASSIGN (mc_container) TO &lt;lr_container&gt;.
    IF &lt;lr_container&gt; IS NOT ASSIGNED.
      RETURN.
    ENDIF.

    me-&gt;get_data( ).

*    ASSIGN mr_output-&gt;* TO &lt;lt_output&gt;.
*
*    me-&gt;set_top_page( i_reuse_control = abap_true ).
*
*    TRY.
*        me-&gt;mr_view-&gt;set_data(
*          CHANGING
*            t_table = &lt;lt_output&gt;   &quot; Table to Be Displayed
*        ).
**      CATCH cx_salv_no_new_data_allowed.    &quot; ALV: Setting New Data Not Allowed
*      CATCH cx_salv_no_new_data_allowed ##no_handler.
*    ENDTRY.
*
*    me-&gt;mr_view-&gt;refresh(
*          EXPORTING
**            s_stable     =
*            refresh_mode = if_salv_c_refresh=&gt;full
*    ).

    lr_container  = &lt;lr_container&gt;.
    IF lr_container IS BOUND.
      lr_container-&gt;free(
*      EXCEPTIONS
*        cntl_error        = 1
*        cntl_system_error = 2
*        others            = 3
      ).
      IF sy-subrc &lt;&gt; 0.
*     MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
*                WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
      ENDIF.

      CLEAR &lt;lr_container&gt;.
    ENDIF.
    me-&gt;raise_refresh_view( ).
  ENDMETHOD.


  METHOD get_data.
    CONSTANTS:
          lc_header_str            TYPE typename VALUE &apos;ZESWM0018&apos;,
          lc_calc_str              TYPE typename VALUE &apos;ZESWM0020&apos;,
          lc_count_str             TYPE typename VALUE &apos;ZESWM0019&apos;.
    DATA: lr_header                TYPE REF TO cl_abap_structdescr,
          lr_calculated            TYPE REF TO cl_abap_structdescr,
          lr_count                 TYPE REF TO cl_abap_structdescr,
          lr_output_line           TYPE REF TO data,
          lx_error                 TYPE REF TO cx_bapi_error,
          lg_inventory_records     TYPE RANGE OF lvs_ivnum,
          lg_storage_types         TYPE RANGE OF lgtyp,
          lg_storage_bins          TYPE RANGE OF lgpla,
          lg_dates                 TYPE RANGE OF dats,
          lg_products              TYPE RANGE OF matnr,
          lg_situations            TYPE RANGE OF zwm_de_count_situation,
          lt_count_data            TYPE zttwm0017,
          lt_fields_catalog        TYPE lvc_t_fcat,
          l_suffix                 TYPE n LENGTH 2,
          l_name                   TYPE abap_compname,
          l_header_components      TYPE i,
          l_calc_components        TYPE i.
    FIELD-SYMBOLS:
                   &lt;lt_output&gt;     TYPE ANY TABLE,
                   &lt;ls_component&gt;  TYPE abap_compdescr,
                   &lt;ls_fieldcat&gt;   LIKE LINE OF lt_fields_catalog,
                   &lt;ls_count_data&gt; LIKE LINE OF lt_count_data,
                   &lt;ls_count&gt;      TYPE zeswm0019,
                   &lt;ls_output&gt;     TYPE any,
                   &lt;l_source&gt;      TYPE any,
                   &lt;l_target&gt;      TYPE any.
    DEFINE lm_set_range.
      if &amp;1 is not initial.
        append &amp;1 to &amp;1[].
        sort &amp;1[] by table_line.
        delete adjacent duplicates from &amp;1[] comparing table_line.
      endif.

      if &amp;1[] is not initial.
        &amp;2 = &amp;1[].
      endif.
    END-OF-DEFINITION.
    DEFINE lm_set_columns.
      loop at &amp;1-&gt;components assigning &lt;ls_component&gt;.
        append initial line to lt_fields_catalog assigning &lt;ls_fieldcat&gt;.
        &lt;ls_fieldcat&gt;-fieldname = &lt;ls_component&gt;-name.
        &lt;ls_fieldcat&gt;-datatype  = &lt;ls_component&gt;-type_kind.
        case &lt;ls_component&gt;-type_kind.
          when &apos;C&apos;.
            &lt;ls_fieldcat&gt;-datatype = &apos;CHAR&apos;.
          when &apos;N&apos;.
            &lt;ls_fieldcat&gt;-datatype = &apos;NUMC&apos;.
          when &apos;D&apos;.
            &lt;ls_fieldcat&gt;-datatype = &apos;DATE&apos;.
          when &apos;P&apos;.
            &lt;ls_fieldcat&gt;-datatype = &apos;PACK&apos;.
          when others.
            &lt;ls_fieldcat&gt;-datatype = &lt;ls_component&gt;-type_kind.
        endcase.
        &lt;ls_fieldcat&gt;-inttype  = &lt;ls_component&gt;-type_kind.
        &lt;ls_fieldcat&gt;-intlen   = &lt;ls_component&gt;-length.
        &lt;ls_fieldcat&gt;-decimals = &lt;ls_component&gt;-decimals.
      endloop.
    END-OF-DEFINITION.
    DEFINE lm_set_value.
      loop at &amp;1-&gt;components assigning &lt;ls_component&gt;.
        assign component &lt;ls_component&gt;-name of structure &lt;ls_count_data&gt; to &lt;l_source&gt;.

        assign component &lt;ls_component&gt;-name of structure &lt;ls_output&gt; to &lt;l_target&gt;.
        if &lt;l_source&gt; is assigned and
           &lt;l_target&gt; is assigned.
          &lt;l_target&gt; = &lt;l_source&gt;.
        endif.
      endloop.
    END-OF-DEFINITION.

*Macro example
*    IF s_ivnum IS NOT INITIAL.
*      APPEND s_ivnum TO s_ivnum[].
*      SORT s_ivnum[] BY table_line.
*      DELETE ADJACENT DUPLICATES FROM s_ivnum[] COMPARING table_line.
*    ENDIF.
*
*    if s_ivnum[] is not initial.
*        lg_inventory_records = s_ivnum[].
*    ENDIF.
    lm_set_range: s_ivnum lg_inventory_records,
                  s_pdatu lg_dates,
                  s_stgty lg_storage_types,
                  s_lgpla lg_storage_bins,
                  s_prdct lg_products,
                  s_stton lg_situations.

    TRY.
        me-&gt;mr_model-&gt;get_count_data(
          EXPORTING
            i_warehouse_number   = p_lgnum
            ig_inventory_records = lg_inventory_records
            ig_storage_types     = lg_storage_types
            ig_storage_bins      = lg_storage_bins
            ig_products          = lg_products
            ig_dates             = lg_dates
            ig_situations        = lg_situations
          IMPORTING
            e_max_count_lines    = me-&gt;m_max_counts_number
            et_count_data        = lt_count_data
        ).
*          CATCH cx_bapi_error.  &quot; BAPI Error Exception: Migrated Error Messages Type &quot;E&quot;
      CATCH cx_bapi_error INTO lx_error.
    ENDTRY.

    &quot;Build_dynamic table.
    lr_header ?= cl_abap_structdescr=&gt;describe_by_name( p_name = lc_header_str ).
    lr_calculated ?= cl_abap_structdescr=&gt;describe_by_name( p_name = lc_calc_str ).
    lr_count  ?= cl_abap_structdescr=&gt;describe_by_name( p_name = lc_count_str ).

    lm_set_columns: lr_header, lr_calculated.

    DO me-&gt;m_max_counts_number TIMES.
      l_suffix = sy-index.
      LOOP AT lr_count-&gt;components ASSIGNING &lt;ls_component&gt;.
        APPEND INITIAL LINE TO lt_fields_catalog ASSIGNING &lt;ls_fieldcat&gt;.
        CONCATENATE &lt;ls_component&gt;-name l_suffix INTO &lt;ls_fieldcat&gt;-fieldname.
        &lt;ls_fieldcat&gt;-datatype  = &lt;ls_component&gt;-type_kind.
        CASE &lt;ls_component&gt;-type_kind.
          WHEN &apos;C&apos;.
            &lt;ls_fieldcat&gt;-datatype = &apos;CHAR&apos;.
          WHEN &apos;N&apos;.
            &lt;ls_fieldcat&gt;-datatype = &apos;NUMC&apos;.
          WHEN &apos;D&apos;.
            &lt;ls_fieldcat&gt;-datatype = &apos;DATE&apos;.
          WHEN &apos;P&apos;.
            &lt;ls_fieldcat&gt;-datatype = &apos;PACK&apos;.
          WHEN OTHERS.
            &lt;ls_fieldcat&gt;-datatype = &lt;ls_component&gt;-type_kind.
        ENDCASE.
        &lt;ls_fieldcat&gt;-inttype  = &lt;ls_component&gt;-type_kind.
        IF &lt;ls_component&gt;-type_kind = &apos;P&apos;.
          &lt;ls_fieldcat&gt;-intlen   = 10.
        ELSE.
          &lt;ls_fieldcat&gt;-intlen   = &lt;ls_component&gt;-length.
        ENDIF.
        &lt;ls_fieldcat&gt;-decimals = &lt;ls_component&gt;-decimals.
      ENDLOOP.
    ENDDO.

    DESCRIBE TABLE: lr_header-&gt;components     LINES l_header_components,
                    lr_calculated-&gt;components LINES l_calc_components.
    me-&gt;m_wm_column = l_header_components + l_calc_components.

    cl_alv_table_create=&gt;create_dynamic_table(
      EXPORTING
*        i_style_table             =     &quot; Add Style Table
        it_fieldcatalog           = lt_fields_catalog     &quot; Field Catalog
*        i_length_in_byte          =     &quot; Boolean Variable (X=True, Space=False)
      IMPORTING
        ep_table                  = me-&gt;mr_output    &quot; Pointer to Dynamic Data Table
*        e_style_fname             =     &quot; ALV Control: Field Name of Internal Table Field
      EXCEPTIONS
        generate_subpool_dir_full = 1
        OTHERS                    = 2
    ).
    IF sy-subrc &lt;&gt; 0.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                 WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.

    ASSIGN me-&gt;mr_output-&gt;* TO &lt;lt_output&gt;.
    LOOP AT lt_count_data ASSIGNING &lt;ls_count_data&gt;.
      CREATE DATA lr_output_line LIKE LINE OF &lt;lt_output&gt;.
      ASSIGN: lr_output_line-&gt;* TO &lt;ls_output&gt;.
      lm_set_value: lr_header, lr_calculated.

      LOOP AT &lt;ls_count_data&gt;-counts ASSIGNING &lt;ls_count&gt;.
        l_suffix = &lt;ls_count&gt;-counting_number + 1.
        LOOP AT lr_count-&gt;components ASSIGNING &lt;ls_component&gt;.
          CONCATENATE &lt;ls_component&gt;-name l_suffix INTO l_name.
          ASSIGN COMPONENT &lt;ls_component&gt;-name OF STRUCTURE &lt;ls_count&gt; TO &lt;l_source&gt;.

          ASSIGN COMPONENT l_name OF STRUCTURE &lt;ls_output&gt; TO &lt;l_target&gt;.
          IF &lt;l_source&gt; IS ASSIGNED AND
             &lt;l_target&gt; IS ASSIGNED.
            &lt;l_target&gt; = &lt;l_source&gt;.
          ENDIF.

          CLEAR l_name.
          UNASSIGN: &lt;l_source&gt;, &lt;l_target&gt;.
        ENDLOOP.
      ENDLOOP.

      INSERT &lt;ls_output&gt; INTO TABLE &lt;lt_output&gt;.
      UNASSIGN &lt;ls_output&gt;.
    ENDLOOP.
  ENDMETHOD.


  METHOD set_columns_order.
    DATA:
          lr_columns        TYPE REF TO cl_salv_columns_table,
          l_suffix          TYPE n LENGTH 2,
          l_counting_number TYPE lvc_fname VALUE &apos;COUNTING_NUMBER&apos;,
          l_unit            TYPE lvc_fname VALUE &apos;UNIT&apos;,
          l_quantity        TYPE lvc_fname VALUE &apos;QUANTITY&apos;,
          l_zzmatch         TYPE lvc_fname VALUE &apos;ZZMATCH&apos;,
          l_zuser           TYPE lvc_fname VALUE &apos;ZUSER&apos;,
          l_counting_date   TYPE lvc_fname VALUE &apos;COUNTING_DATE&apos;,
          l_counting_time   TYPE lvc_fname VALUE &apos;COUNTING_TIME&apos;,
          l_wm_position     TYPE i.
    DEFINE lm_set_position.
      lr_columns-&gt;set_column_position(
        exporting
          columnname = &amp;1    &quot; ALV Control: Field Name of Internal Table Field
          position   = &amp;2
      ).
    END-OF-DEFINITION.
    lr_columns = me-&gt;mr_view-&gt;get_columns( ).

*    lr_columns-&gt;set_column_position(
*      EXPORTING
*        columnname = &apos;ICON_COUNT_STATUS&apos;    &quot; ALV Control: Field Name of Internal Table Field
*        position   = 1
*    ).
    lm_set_position: &apos;ICON_COUNT_STATUS&apos; 1,
                     &apos;ICON_STORAGE_BIN&apos;  2,
                     &apos;INVENTORY_RECORD&apos;  3,
                     &apos;INVENTORY_ITEM&apos;    4.
    &quot;Setting WM system column
    l_suffix = 01. &quot;me-&gt;m_max_counts_number.
    CONCATENATE: l_counting_number l_suffix INTO l_counting_number,
                 l_unit            l_suffix INTO l_unit,
                 l_quantity        l_suffix INTO l_quantity,
                 l_zzmatch         l_suffix INTO l_zzmatch,
                 l_zuser           l_suffix INTO l_zuser,
                 l_counting_date   l_suffix INTO l_counting_date,
                 l_counting_time   l_suffix INTO l_counting_time.
    l_wm_position = me-&gt;m_wm_column.
    DO 7 TIMES.
      ADD 1 TO l_wm_position.
      CASE sy-index.
        WHEN 1.
          lm_set_position l_counting_number l_wm_position.
        WHEN 2.
          lm_set_position l_unit l_wm_position.
        WHEN 3.
          lm_set_position l_quantity l_wm_position.
        WHEN 4.
          lm_set_position l_zzmatch l_wm_position.
        WHEN 5.
          lm_set_position l_zuser l_wm_position.
        WHEN 6.
          lm_set_position l_counting_date l_wm_position.
        WHEN 7.
          lm_set_position l_counting_time l_wm_position.
      ENDCASE.
    ENDDO.
  ENDMETHOD.


  METHOD set_columns_styles.
    CONSTANTS:
               lc_counting_number  TYPE lvc_fname VALUE &apos;COUNTING_NUMBER&apos;,
               lc_count_status     TYPE lvc_fname VALUE &apos;COUNT_STATUS&apos;,
               lc_quantity         TYPE lvc_fname VALUE &apos;QUANTITY&apos;,
               lc_zuser            TYPE lvc_fname VALUE &apos;ZUSER&apos;,
               lc_counting_date    TYPE lvc_fname VALUE &apos;COUNTING_DATE&apos;,
               lc_counting_time    TYPE lvc_fname VALUE &apos;COUNTING_TIME&apos;,
               lc_zzmatch          TYPE lvc_fname VALUE &apos;ZZMATCH&apos;,
               lc_unit             TYPE lvc_fname VALUE &apos;UNIT&apos;.
    DATA:
          lr_columns        TYPE REF TO cl_salv_columns_table,
          l_suffix          TYPE n LENGTH 2,
          l_counting_number TYPE lvc_fname,
          l_count_status    TYPE lvc_fname,
          l_quantity        TYPE lvc_fname,
          l_zzmatch         TYPE lvc_fname,
          l_zuser           TYPE lvc_fname,
          l_counting_date   TYPE lvc_fname,
          l_counting_time   TYPE lvc_fname,
          l_unit            TYPE lvc_fname, &quot; lvc_quan,
          l_iterations      TYPE i.
    DEFINE lm_set_technical.
      try .
          lr_columns-&gt;get_column( &amp;1 )-&gt;set_technical( if_salv_c_bool_sap=&gt;true ).
        catch cx_salv_not_found
              cx_salv_data_error ##no_handler.
      endtry.
    END-OF-DEFINITION.
    DEFINE lm_set_sign.
      try .
          lr_columns-&gt;get_column( &amp;1 )-&gt;set_sign( if_salv_c_bool_sap=&gt;true ).
        catch cx_salv_not_found
              cx_salv_data_error ##no_handler.
      endtry.
    END-OF-DEFINITION.
    DEFINE lm_set_alignment.
      try .
          lr_columns-&gt;get_column( &amp;1 )-&gt;set_alignment( &amp;2 ).
        catch cx_salv_not_found
              cx_salv_data_error ##no_handler.
      endtry.
    END-OF-DEFINITION.
    DEFINE lm_set_hidden.
      try .
          lr_columns-&gt;get_column( &amp;1 )-&gt;set_visible( value = if_salv_c_bool_sap=&gt;false ).
        catch cx_salv_not_found
              cx_salv_data_error ##no_handler.
      endtry.
    END-OF-DEFINITION.
    DEFINE lm_set_qty_unit.
      try .
          lr_columns-&gt;get_column( &amp;1 )-&gt;set_quantity_column( value = &amp;2 ).
*            CATCH cx_salv_not_found.  &quot; ALV: General Error Class (Checked During Syntax Check)
*            CATCH cx_salv_data_error.  &quot; ALV: General Error Class (Checked During Syntax Check).
        catch cx_salv_not_found
              cx_salv_data_error ##no_handler.
      endtry.
    END-OF-DEFINITION.

    TRY.
        lr_columns = me-&gt;mr_view-&gt;get_columns(  ).
      CATCH cx_salv_not_found.
        RETURN.
    ENDTRY.

    lr_columns-&gt;set_optimize( value = if_salv_c_bool_sap=&gt;true ).

    l_suffix = 01. &quot;me-&gt;m_max_counts_number.
    CONCATENATE: lc_counting_number l_suffix INTO l_counting_number,
                 lc_count_status    l_suffix INTO l_count_status,
                 lc_zuser           l_suffix INTO l_zuser,
                 lc_counting_date   l_suffix INTO l_counting_date,
                 lc_counting_time   l_suffix INTO l_counting_time.

    lm_set_technical: &apos;SITUATION&apos;,     &apos;STORAGE_BIN_STATUS&apos;, &apos;ITEM_STATUS&apos;,
                      &apos;COUNT_STATUS&apos;,  l_counting_number,    l_count_status,
                      l_zuser,         l_counting_date,      l_counting_time.

    l_iterations = me-&gt;m_max_counts_number - 1.
    DO l_iterations TIMES. &quot;For all counts, except the WM system count.
      l_suffix = sy-index + 1.
      CONCATENATE: lc_counting_number l_suffix INTO l_counting_number,
                   lc_unit            l_suffix INTO l_unit.
      lm_set_technical: l_counting_number,
                        l_unit.
    ENDDO.

    lm_set_hidden: &apos;INVENTORY_ITEM&apos;.

    DO me-&gt;m_max_counts_number TIMES. &quot;For all counts
      l_suffix = sy-index.
      CONCATENATE: lc_count_status l_suffix INTO l_count_status,
                   lc_zzmatch      l_suffix INTO l_zzmatch,
                   lc_quantity     l_suffix INTO l_quantity,
                   lc_unit         l_suffix INTO l_unit.

      lm_set_hidden: l_zzmatch, l_count_status.
      lm_set_qty_unit l_quantity l_unit.
    ENDDO.
  ENDMETHOD.


  METHOD set_custom_functions.

*    TRY.
*        ir_functions-&gt;add_function(
*          EXPORTING
*            name               = &quot;zif_wm_inventory_constants=&gt;mc_alv_custom_function-    &quot; ALV Function
*            icon               = &quot;zif_wm_inventory_constants=&gt;mc_icon-
**            text               =
**            tooltip            =
*            position           = if_salv_c_function_position=&gt;right_of_salv_functions    &quot; Positioning Function
*        ).
**          CATCH cx_salv_existing.    &quot;
**          CATCH cx_salv_wrong_call.    &quot;
*      CATCH cx_salv_existing ##no_handler
*            cx_salv_not_found
*            cx_salv_wrong_call.
*    ENDTRY.

    set_refresh( ir_functions ).
  ENDMETHOD.


  METHOD set_events.
    DATA
          lr_event TYPE REF TO cl_salv_events_table.

    lr_event = me-&gt;mr_view-&gt;get_event( ).
    SET HANDLER: me-&gt;on_user_command FOR lr_event,
                 me-&gt;on_refresh_view FOR me.
  ENDMETHOD.

  METHOD set_functions.
    DATA lr_functions TYPE REF TO cl_salv_functions_list.

    lr_functions = mr_view-&gt;get_functions( ).
    lr_functions-&gt;set_all(
*      value = if_salv_c_bool_sap=&gt;true
    ).

    lr_functions-&gt;set_export_localfile(
*      value = if_salv_c_bool_sap=&gt;true
    ).

    me-&gt;set_custom_functions( ir_functions = lr_functions ).

  ENDMETHOD.


  METHOD set_refresh.
    DATA: l_tooltip TYPE string,
          l_icon    TYPE string.

    l_tooltip = &apos;Reload data&apos;(p01).
    l_icon    = zif_wm_lg_aut_inventory=&gt;mc_icon-refresh.
    TRY.
        ir_functions-&gt;add_function(
          EXPORTING
            name     =  zif_wm_lg_aut_inventory=&gt;mc_okcode-refresh
            icon     = l_icon
*            text     =
            tooltip  = l_tooltip
            position = if_salv_c_function_position=&gt;left_of_salv_functions                 &quot;Positioning Function
        ).
*        CATCH cx_salv_existing.   &amp;amp;quot; ALV: General Error Class (Checked During Syntax Check)
*        CATCH cx_salv_wrong_call. &amp;amp;quot; ALV: General Error Class (Checked During Syntax Check)
      CATCH cx_salv_existing
            cx_salv_not_found
            cx_salv_wrong_call.
    ENDTRY.
  ENDMETHOD.


  METHOD set_sort.
    DATA
          lr_sorts TYPE REF TO cl_salv_sorts.
    TRY.
        lr_sorts = me-&gt;mr_view-&gt;get_sorts(  ).
      CATCH cx_salv_not_found.
        RETURN.
    ENDTRY.

  ENDMETHOD.

  METHOD set_texts.
    CONSTANTS:
               lc_counting_number  TYPE lvc_fname VALUE &apos;COUNTING_NUMBER&apos;,
               lc_unit             TYPE lvc_fname VALUE &apos;UNIT&apos;,
               lc_quantity         TYPE lvc_fname VALUE &apos;QUANTITY&apos;,
               lc_zzmatch          TYPE lvc_fname VALUE &apos;ZZMATCH&apos;,
               lc_zuser            TYPE lvc_fname VALUE &apos;ZUSER&apos;,
               lc_counting_date    TYPE lvc_fname VALUE &apos;COUNTING_DATE&apos;,
               lc_counting_time    TYPE lvc_fname VALUE &apos;COUNTING_TIME&apos;.
    DATA:
          lr_columns               TYPE REF TO cl_salv_columns_table,
          lr_column                TYPE REF TO cl_salv_column,
          l_short_text             TYPE scrtext_s,
          l_medium_text            TYPE scrtext_m,
          l_long_text              TYPE scrtext_l,
          l_counting_number        TYPE lvc_fname,
          l_unit                   TYPE lvc_fname,
          l_quantity               TYPE lvc_fname,
          l_zzmatch                TYPE lvc_fname,
          l_zuser                  TYPE lvc_fname,
          l_counting_date          TYPE lvc_fname,
          l_counting_time          TYPE lvc_fname,
          l_suffix                 TYPE n LENGTH 2,
          l_suffix_txt             TYPE n LENGTH 2,
          l_text                   TYPE string.
    DEFINE lm_set_texts.
      l_short_text  = &amp;2.
      l_medium_text = &amp;2.
      l_long_text   = &amp;2.

      try.
          lr_column = lr_columns-&gt;get_column( columnname = &amp;1 ).
*      CATCH cx_salv_not_found.    &quot; ALV: General Error Class (Checked During Syntax Check)
          lr_column-&gt;set_short_text( value = l_short_text ).
          lr_column-&gt;set_medium_text( value = l_medium_text ).
          lr_column-&gt;set_long_text( value = l_long_text ).
        catch cx_salv_not_found ##no_handler.
      endtry.
    END-OF-DEFINITION.
    TRY.
        lr_columns = me-&gt;mr_view-&gt;get_columns(  ).
      CATCH cx_salv_not_found.
        RETURN.
    ENDTRY.

*    l_short_text  = &apos;Count Status&apos;(h01).
*    l_medium_text = &apos;Count Status&apos;(h01).
*    l_long_text   = &apos;Count Status&apos;(h01).
*
*    TRY.
*        lr_column = lr_columns-&gt;get_column( columnname = &apos;ICON_COUNT_STATUS&apos; ).
**      CATCH cx_salv_not_found.    &quot; ALV: General Error Class (Checked During Syntax Check)
*        lr_column-&gt;set_short_text( value = l_short_text ).
*        lr_column-&gt;set_medium_text( value = l_medium_text ).
*        lr_column-&gt;set_long_text( value = l_long_text ).
*      CATCH cx_salv_not_found ##no_handler.
*    ENDTRY.
    lm_set_texts: &apos;ICON_COUNT_STATUS&apos; &apos;Count Status&apos;(h01),
                  &apos;ICON_STORAGE_BIN&apos;  &apos;Status&apos;(h02),
                  &apos;INVENTORY_RECORD&apos;  &apos;Inventory record&apos;(h03),
                  &apos;INVENTORY_ITEM&apos;    &apos;Inventory item&apos;(h04),
                  &apos;PLANT&apos;             &apos;Plant&apos;(h05),
                  &apos;STORAGE_LOCATION&apos;  &apos;Storage location&apos;(h06),
                  &apos;STORAGE_TYPE&apos;      &apos;Storage type&apos;(h07),
                  &apos;STORAGE_BIN&apos;       &apos;Storage bin&apos;(h08),
                  &apos;STORAGE_UNIT&apos;      &apos;Storage unit&apos;(h09),
                  &apos;PRODUCT&apos;           &apos;Product&apos;(h10),
                  &apos;FISCAL_YEAR&apos;       &apos;Year&apos;(h11),
                  &apos;ZMONTH&apos;            &apos;Month&apos;(h12),
                  &apos;STORAGE_AISLE&apos;     &apos;Aisle&apos;(h13),
                  &apos;MATCHED_COUNTS&apos;    &apos;Matched counts&apos;(h14).

    DO me-&gt;m_max_counts_number TIMES.
      l_suffix = sy-index.
      l_suffix_txt = l_suffix - 1.
      CONCATENATE: lc_counting_number l_suffix INTO l_counting_number,
                   lc_unit            l_suffix INTO l_unit,
                   lc_quantity        l_suffix INTO l_quantity,
                   lc_zzmatch         l_suffix INTO l_zzmatch,
                   lc_zuser           l_suffix INTO l_zuser,
                   lc_counting_date   l_suffix INTO l_counting_date,
                   lc_counting_time   l_suffix INTO l_counting_time.
      DO 7 TIMES.
        CASE sy-index.
          WHEN 1.
            CONTINUE.
*            CONCATENATE &apos;Count     &apos;(h15) l_suffix_txt INTO l_text.
*            lm_set_texts l_counting_number l_text.
          WHEN 2.
            IF l_suffix &lt;&gt; 01.
              CONCATENATE &apos;Unit      &apos;(h16) l_suffix_txt INTO l_text.
            ELSE.
              l_text = &apos;Unit      &apos;(h16).
            ENDIF.
            lm_set_texts l_unit l_text.
          WHEN 3.
            IF l_suffix &lt;&gt; 01.
              CONCATENATE &apos;Count     &apos;(h17) l_suffix_txt INTO l_text.
            ELSE.
              l_text = &apos;Syst. Qty.&apos;(h21).
            ENDIF.
            lm_set_texts l_quantity l_text.
          WHEN 4.
            IF l_suffix &lt;&gt; 01.
              CONCATENATE &apos;CountMatch&apos;(h18) l_suffix_txt INTO l_text.
            ELSE.
              l_text = &apos;Syst.Mtch.&apos;(h22).
            ENDIF.
            lm_set_texts l_zzmatch l_text.
          WHEN 5.
            CONCATENATE &apos;User      &apos;(h19) l_suffix_txt INTO l_text.
            lm_set_texts l_zuser l_text.
          WHEN 6.
            CONCATENATE &apos;Count Date&apos;(h20) l_suffix_txt INTO l_text.
            lm_set_texts l_counting_date l_text.
          WHEN 7.
            CONCATENATE &apos;Count time&apos;(h23) l_suffix_txt INTO l_text.
            lm_set_texts l_counting_time l_text.
        ENDCASE.
      ENDDO.

      CLEAR: l_counting_number, l_unit, l_quantity, l_zzmatch, l_zuser,
             l_counting_date,   l_counting_time.
    ENDDO.

  ENDMETHOD.

  METHOD set_top_page.
    DATA:
          l_text TYPE sdydo_text_element,
          l_date TYPE c LENGTH 10,
          l_time TYPE c LENGTH 8.
    FIELD-SYMBOLS  &lt;lt_output&gt; TYPE ANY TABLE.
    DEFINE lm_set_top_text.
      l_text = &amp;1.
      me-&gt;mr_top-&gt;add_text(
        exporting
          text          = l_text    &quot; Single Text, Up To 255 Characters Long
*        text_table    =     &quot; Table With Single Texts
*        fix_lines     =     &quot; If &apos;X&apos;: TEXT_TABLE Display in Lines, Otherwise Continuous
        sap_style     = &amp;2    &quot; Recommended Styles
*        sap_color     =     &quot; Not Release 99
*        sap_fontsize  =     &quot; Recommended Font Sizes
*        sap_fontstyle =     &quot; Not Release 99
*        sap_emphasis  =     &quot; Text Highlighting
*        style_class   =     &quot; Not Release 99
*        a11y_tooltip  =     &quot; A11Y: Additional Explanation
*      CHANGING
*        document      =     &quot; x
      ).
      clear l_text.
    END-OF-DEFINITION.

    IF i_reuse_control IS INITIAL.
      CREATE OBJECT me-&gt;mr_top
*          EXPORTING
*            style            =     &quot; Adjusting to the Style of a Particular GUI Environment
*            background_color =     &quot; Color ID
*            bds_stylesheet   =     &quot; Use BDS Style Sheet
*            no_margins       =     &quot; &apos;X&apos;: Document Created Without Free Margins
        .
    ELSE.
      me-&gt;mr_top-&gt;initialize_document(
*          EXPORTING
*            first_time       =     &quot; Internal Use
*            style            =     &quot; Adjusting to the Style of a Particular GUI Environment
*            background_color =     &quot; Color ID
*            bds_stylesheet   =     &quot; Stylesheet Stored in BDS
*            no_margins       =     &quot; Document Generated Without Free Margins
      ).
    ENDIF.


*    l_text = &apos;Transaction:&apos;(l01).
*    me-&gt;mr_top-&gt;add_text(
*      EXPORTING
*        text          = l_text    &quot; Single Text, Up To 255 Characters Long
**        text_table    =     &quot; Table With Single Texts
**        fix_lines     =     &quot; If &apos;X&apos;: TEXT_TABLE Display in Lines, Otherwise Continuous
**        sap_style     = cl_dd_document=&gt;    &quot; Recommended Styles
**        sap_color     =     &quot; Not Release 99
**        sap_fontsize  =     &quot; Recommended Font Sizes
**        sap_fontstyle =     &quot; Not Release 99
**        sap_emphasis  =     &quot; Text Highlighting
**        style_class   =     &quot; Not Release 99
**        a11y_tooltip  =     &quot; A11Y: Additional Explanation
**      CHANGING
**        document      =     &quot; x
*    ).
    lm_set_top_text: &apos;Transaction:&apos;(l01)     cl_dd_document=&gt;standard,
                      sy-tcode               cl_dd_document=&gt;strong.
    me-&gt;mr_top-&gt;new_line( ).
    lm_set_top_text: &apos;User:&apos;(l02)            cl_dd_document=&gt;standard,
                     sy-uname                cl_dd_document=&gt;strong.
    me-&gt;mr_top-&gt;new_line( ).
    lm_set_top_text  &apos;Processing date:&apos;(l03) cl_dd_document=&gt;standard.
    WRITE: sy-datlo TO l_date,
           sy-timlo TO l_time.
    CONCATENATE l_date &apos;at&apos;(l04) l_time INTO l_text SEPARATED BY space.
    lm_set_top_text  l_text                  cl_dd_document=&gt;strong.
    me-&gt;mr_top-&gt;new_line( ).
    lm_set_top_text  &apos;Number of records found:&apos;(l05) cl_dd_document=&gt;standard.
    ASSIGN me-&gt;mr_output-&gt;* TO &lt;lt_output&gt;.
    DESCRIBE TABLE &lt;lt_output&gt; LINES l_text.
    lm_set_top_text  l_text                  cl_dd_document=&gt;strong.



    me-&gt;mr_top-&gt;display_document(
      EXPORTING
        reuse_control      = i_reuse_control
*        reuse_registration =
*        container          =
        parent             = me-&gt;mr_top_container
      EXCEPTIONS
        html_display_error = 1
        OTHERS             = 2
    ).
    IF sy-subrc &lt;&gt; 0.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
        WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.

  ENDMETHOD.

  METHOD set_view.

    me-&gt;set_top_page( i_reuse_control = abap_false ).

    me-&gt;set_sort( ).

    me-&gt;set_columns_order( ).

    me-&gt;set_columns_styles( ).

    me-&gt;set_functions( ).

    me-&gt;set_events( ).

    me-&gt;set_texts( ).
  ENDMETHOD.

  METHOD show_data.

    CALL FUNCTION &apos;SALV_CSQT_CREATE_CONTAINER&apos;
      EXPORTING
        r_content_manager = me    &quot; Parameter display
        title             = &apos;WM - Relatório de inventário&apos;(t01).
  ENDMETHOD.
ENDCLASS.</source>
 </PROG>
 <PROG NAME="ZIWM0005_TOP" VARCL="X" DBAPL="S" DBNA="D$" SUBC="I" LEVL="731" RMAND="100" FIXPT="X" LDBNAME="D$S" UCCHECK="X">
  <textPool>
   <language SPRAS="P">
    <textElement ID="R" ENTRY="OPEX - Relatório Real x Previsões - Definições globais" LENGTH="54 "/>
   </language>
  </textPool>
  <source>REPORT zrwm0005 MESSAGE-ID zwm.
INCLUDE ziwm0005_d01. &quot;Definições de classes

**********************************************************************
* Variáveis de referência
**********************************************************************
DATA:
     inventory_record TYPE lvs_ivnum,
     storage_type     TYPE lgtyp,
     planned_date     TYPE link_pdatu,
     storage_bin      TYPE lgpla,
     product          TYPE matnr,
     situation        TYPE zwm_de_count_situation.
**********************************************************************
* Tela de seleção
**********************************************************************
SELECTION-SCREEN BEGIN OF BLOCK b1 WITH FRAME TITLE text-s01.
PARAMETER       p_lgnum TYPE lgnum OBLIGATORY MEMORY ID lgn.

SELECT-OPTIONS: s_ivnum FOR inventory_record,
                s_pdatu FOR planned_date.
SELECTION-SCREEN END OF BLOCK b1.

SELECTION-SCREEN BEGIN OF BLOCK b2 WITH FRAME TITLE text-s02.
SELECT-OPTIONS: s_stgty FOR storage_type,
                s_lgpla FOR storage_bin,
                s_prdct FOR product,
                s_stton FOR situation NO-EXTENSION NO INTERVALS.
SELECTION-SCREEN END OF BLOCK b2.

**********************************************************************
* Variáveis de globais
**********************************************************************
DATA
     gr_controller TYPE REF TO lcl_controller.</source>
 </PROG>
 <PROG NAME="ZIWM0006_D01" VARCL="X" DBAPL="S" DBNA="D$" SUBC="I" LEVL="731" RMAND="100" FIXPT="X" LDBNAME="D$S" UCCHECK="X">
  <textPool>
   <language SPRAS="P">
    <textElement ID="R" ENTRY="OPEX - Relatório Real x Previsões - Definições de classes" LENGTH="57 "/>
   </language>
  </textPool>
  <source>CLASS lcl_controller DEFINITION FINAL.
  PUBLIC SECTION.
    METHODS:
             constructor,
             get_data,
             show_data.
  PRIVATE SECTION.
    DATA:
          mr_model      TYPE REF TO zcl_wm_lg_aut_model_inventory,
          mr_view       TYPE REF TO cl_salv_hierseq_table,
          mt_output_hdr TYPE zttwm0018,
          mt_output_itm TYPE zttwm0019,
          mt_binding    TYPE salv_t_hierseq_binding.
    METHODS:
             display         , &quot;IMPORTING ir_container TYPE REF TO cl_gui_custom_container,
*             on_link_click FOR EVENT link_click OF cl_salv_events_hierseq
*                           IMPORTING level
*                                     row
*                                     column,
             set_columns_order,
             set_columns_styles,
             set_events,
             set_expand_option,
             set_functions,
             set_sort,
             set_texts,
             set_view.
ENDCLASS.</source>
 </PROG>
 <PROG NAME="ZIWM0006_P01" VARCL="X" DBAPL="S" DBNA="D$" SUBC="I" LEVL="731" RMAND="100" FIXPT="X" LDBNAME="D$S" UCCHECK="X">
  <textPool>
   <language SPRAS="P">
    <textElement ID="R" ENTRY="OPEX - Relatório Real x Previsões - Implementações de classes" LENGTH="61 "/>
   </language>
  </textPool>
  <source>CLASS lcl_controller IMPLEMENTATION.
  METHOD constructor.

    &quot;me-&gt;mr_model = NEW zcl_wm_lg_aut_model_inventory( ).
    CREATE OBJECT me-&gt;mr_model.
  ENDMETHOD.

  METHOD display.
    DATA: lx_data_error TYPE REF TO cx_salv_data_error,
          lx_not_found  TYPE REF TO cx_salv_not_found,
          l_message     TYPE string.
    TRY.
        cl_salv_hierseq_table=&gt;factory(
          EXPORTING
            t_binding_level1_level2 = me-&gt;mt_binding    &quot; Binding Between Two Tables
          IMPORTING
            r_hierseq               = me-&gt;mr_view    &quot; Sequential ALV Tables
          CHANGING
            t_table_level1          = me-&gt;mt_output_hdr
            t_table_level2          = me-&gt;mt_output_itm
        ).
*          CATCH cx_salv_data_error.    &quot;
*          CATCH cx_salv_not_found.    &quot;
      CATCH cx_salv_data_error INTO lx_data_error.
        l_message = lx_data_error-&gt;get_text( ).
        MESSAGE l_message TYPE &apos;E&apos;.
      CATCH cx_salv_not_found INTO lx_not_found.
        l_message = lx_not_found-&gt;get_text( ).
        MESSAGE l_message TYPE &apos;E&apos;.
    ENDTRY.

    set_view( ).

    mr_view-&gt;display( ).
  ENDMETHOD.


*  METHOD on_link_click.
*
*  ENDMETHOD.


  METHOD get_data.

  ENDMETHOD.


  METHOD set_columns_order.
    DEFINE lm_set_row.
      try.
          me-&gt;mr_view-&gt;get_level( &amp;1 )-&gt;get_columns( )-&gt;get_column( columnname = &amp;2 )-&gt;set_row( value = &amp;3 ).
*              CATCH cx_salv_not_found.    &quot;
        catch cx_salv_not_found ##no_handler.
      endtry.
    END-OF-DEFINITION.

*    lm_set_row: &quot;Parent
*                &quot; Child
  ENDMETHOD.


  METHOD set_columns_styles.
    DATA: lr_hdr_columns TYPE REF TO cl_salv_columns_hierseq,
          lr_itm_columns TYPE REF TO cl_salv_columns_hierseq.
    DEFINE lm_set_technical.
      try .
          &amp;1-&gt;get_column( &amp;2 )-&gt;set_technical( if_salv_c_bool_sap=&gt;true ).
        catch cx_salv_not_found
              cx_salv_data_error ##no_handler.
      endtry.
    END-OF-DEFINITION.
    DEFINE lm_set_sign.
      try .
          &amp;1-&gt;get_column( &amp;2 )-&gt;set_sign( if_salv_c_bool_sap=&gt;true ).
        catch cx_salv_not_found
              cx_salv_data_error ##no_handler.
      endtry.
    END-OF-DEFINITION.
    DEFINE lm_set_alignment.
      try .
          &amp;1-&gt;get_column( &amp;2 )-&gt;set_alignment( &amp;3 ).
        catch cx_salv_not_found
              cx_salv_data_error ##no_handler.
      endtry.
    END-OF-DEFINITION.

    TRY.
        lr_hdr_columns = me-&gt;mr_view-&gt;get_columns( 1 ).
      CATCH cx_salv_not_found.
        RETURN.
    ENDTRY.

    TRY.
        lr_itm_columns = me-&gt;mr_view-&gt;get_columns( 2 ).
      CATCH cx_salv_not_found.
        RETURN.
    ENDTRY.

*    lr_hdr_columns-&gt;set_optimize( value = if_salv_c_bool_sap=&gt;true ).
*    lr_itm_columns-&gt;set_optimize( value = if_salv_c_bool_sap=&gt;true ).

    lm_set_technical: lr_hdr_columns &apos;EXPAND&apos;,
                      lr_itm_columns &apos;EXPAND&apos;.

*    TRY. &quot;Changing color
*        DATA(lr_columnlist) = CAST cl_salv_column_list( lr_hdr_columns-&gt;get_column( columnname = &apos;SEPARATOR1&apos; ) ).
**          CATCH cx_salv_not_found.    &quot;
*        lr_columnlist-&gt;set_color( value = VALUE #( col = 6 int = 0 inv = 0 ) ).
*        lr_columnlist = CAST cl_salv_column_list( lr_hdr_columns-&gt;get_column( columnname = &apos;SEPARATOR2&apos; ) ).
**          CATCH cx_salv_not_found.    &quot;
*        lr_columnlist-&gt;set_color( value = VALUE #( col = 6 int = 0 inv = 0 ) ).
*      CATCH cx_salv_not_found ##NO_HANDLER.
*    ENDTRY.
    &quot;Setting sign for variations
    TRY.
        lr_itm_columns-&gt;get_column( &apos;VAR_BDG&apos; )-&gt;set_alignment(
                value = if_salv_c_alignment=&gt;centered
            ).
      CATCH cx_salv_not_found ##no_handler.
    ENDTRY.
    &quot;lm_set_sign: .
    &quot;Setting alignment for variations
    &quot;lm_set_alignment: .
    &quot;Setting hotspot
*    TRY .
*        cast cl_salv_column_list( lr_hdr_columns-&gt;get_column( &apos;&lt;column name&gt;&apos; ) )-&gt;set_cell_type( if_salv_c_cell_type=&gt;hotspot ).
*        cast cl_salv_column_list( lr_itm_columns-&gt;get_column( &apos;&lt;column name&gt;&apos; ) )-&gt;set_cell_type( if_salv_c_cell_type=&gt;hotspot ).
*      CATCH cx_salv_not_found
*            cx_salv_data_error ##no_handler.
*    ENDTRY.

  ENDMETHOD.

  METHOD set_events.
    DATA lr_event TYPE REF TO cl_salv_events_hierseq.

    lr_event = me-&gt;mr_view-&gt;get_event( ).
    &quot;SET HANDLER  me-&gt;on_link_click   FOR lr_event.
  ENDMETHOD.

  METHOD set_expand_option.

    TRY.
        me-&gt;mr_view-&gt;get_columns( 1 )-&gt;set_expand_column( &apos;EXPAND&apos; ).
      CATCH cx_salv_not_found
            cx_salv_data_error.
        RETURN.
    ENDTRY.
*
*   Set items compressed by default
    TRY.
        me-&gt;mr_view-&gt;get_level( 1 )-&gt;set_items_expanded( if_salv_c_bool_sap=&gt;false ).
      CATCH cx_salv_not_found.
    ENDTRY.
  ENDMETHOD.

  METHOD set_functions.
    DATA lr_functions TYPE REF TO cl_salv_functions_list.

    mr_view-&gt;set_screen_status(
      EXPORTING
        report        = sy-repid    &quot; ABAP Program: Current Main Program
        pfstatus      = &apos;STANDARD_FULLSCREEN&apos;    &quot; Screens, Current GUI Status
*        set_functions = C_FUNCTIONS_NONE    &quot; ALV: Data Element for Constants
    ).

    lr_functions = mr_view-&gt;get_functions( ).
    lr_functions-&gt;set_all(
*      value = if_salv_c_bool_sap=&gt;true
    ).

    lr_functions-&gt;set_export_localfile(
*      value = if_salv_c_bool_sap=&gt;true
    ).

  ENDMETHOD.


  METHOD set_sort.
    DATA: lr_sort_hdr TYPE REF TO cl_salv_sorts,
          lr_sort_itm TYPE REF TO cl_salv_sorts.
    TRY.
        lr_sort_hdr = me-&gt;mr_view-&gt;get_sorts( level = 1 ).
*                      CATCH cx_salv_not_found.  &quot;
        lr_sort_itm  = me-&gt;mr_view-&gt;get_sorts( level = 2 ).
*                       CATCH cx_salv_not_found.  &quot;
      CATCH cx_salv_not_found.
        RETURN.
    ENDTRY.

  ENDMETHOD.

  METHOD set_texts.
    DATA:
          lr_hdr_columns TYPE REF TO cl_salv_columns_hierseq,
          lr_itm_columns TYPE REF TO cl_salv_columns_hierseq,
          lr_column      TYPE REF TO cl_salv_column,
          l_hdr_text     TYPE string,
          l_month_text   TYPE string,
          l_length       TYPE lvc_outlen.
    DEFINE lm_set_header_text.
*      l_hdr_text = cond string( when &amp;1 = abap_true then |{ l_month_text }{ l_previous_year+2(2) } - { &amp;2 }|
*                                else  |{ l_month_text }{ p_year+2(2) } - { &amp;2 }| ).
*      l_length = strlen( l_hdr_text ).
*      try.
*          lr_column = &amp;3-&gt;get_column( columnname = &amp;4 ).
**                    CATCH cx_salv_not_found.  &quot; .
*          lr_column-&gt;set_long_text( value = conv #( l_hdr_text ) ).
*          lr_column-&gt;set_output_length( value = l_length ).
*        catch cx_salv_not_found ##no_handler.
*      endtry.
    END-OF-DEFINITION.

    TRY.
        lr_hdr_columns = me-&gt;mr_view-&gt;get_columns( 1 ).
      CATCH cx_salv_not_found.
        RETURN.
    ENDTRY.

    TRY.
        lr_itm_columns = me-&gt;mr_view-&gt;get_columns( 2 ).
      CATCH cx_salv_not_found.
        RETURN.
    ENDTRY.

*    lm_set_header_text: &apos;X&apos; &apos;&lt;text&gt;&apos;(h14)            lr_hdr_columns &apos;&lt;column name&gt;&apos;.
  ENDMETHOD.

  METHOD set_view.

    me-&gt;set_sort( ).

    me-&gt;set_columns_order( ).

    me-&gt;set_columns_styles( ).

    me-&gt;set_functions( ).

    me-&gt;set_events( ).

    me-&gt;set_expand_option( ).

    me-&gt;set_texts( ).
  ENDMETHOD.

  METHOD show_data.

    TRY .
        me-&gt;display( ).
*        CATCH cx_bapi_error.    &quot;BAPI Error Exception: Migrated Error Messages Type &apos;E&apos;;
      CATCH cx_bapi_error ##no_handler.
    ENDTRY.
  ENDMETHOD.
ENDCLASS.</source>
 </PROG>
 <PROG NAME="ZIWM0006_TOP" VARCL="X" DBAPL="S" DBNA="D$" SUBC="I" LEVL="731" RMAND="100" FIXPT="X" LDBNAME="D$S" UCCHECK="X">
  <textPool>
   <language SPRAS="P">
    <textElement ID="R" ENTRY="OPEX - Relatório Real x Previsões - Definições globais" LENGTH="54 "/>
   </language>
  </textPool>
  <source>REPORT zrwm0006 MESSAGE-ID zwm.
INCLUDE ziwm0006_d01. &quot;Definições de classes

**********************************************************************
* Variáveis de referência
**********************************************************************
DATA:
     warehouse_number TYPE lgnum,
     inventory_record TYPE lvs_ivnum,
     planned_date     TYPE link_pdatu,
     storage_bin      TYPE lgpla.
**********************************************************************
* Tela de seleção
**********************************************************************
SELECTION-SCREEN BEGIN OF BLOCK b1 WITH FRAME TITLE text-s01.
SELECT-OPTIONS: s_lgnum FOR warehouse_number NO-EXTENSION NO INTERVALS OBLIGATORY MEMORY ID lgn,
                s_ivnum FOR inventory_record,
                s_pdatu FOR planned_date.
SELECTION-SCREEN END OF BLOCK b1.

SELECTION-SCREEN BEGIN OF BLOCK b2 WITH FRAME TITLE text-s02.
SELECT-OPTIONS: s_lgpla FOR storage_bin.
SELECTION-SCREEN END OF BLOCK b2.

**********************************************************************
* Variáveis de globais
**********************************************************************
DATA
     gr_controller TYPE REF TO lcl_controller.</source>
 </PROG>
 <PROG NAME="ZRWM0005" VARCL="X" DBAPL="S" SUBC="1" RMAND="100" FIXPT="X" LDBNAME="D$S" UCCHECK="X">
  <textPool>
   <language SPRAS="E">
    <textElement ID="I" KEY="H01" ENTRY="Count Status" LENGTH="15 "/>
    <textElement ID="I" KEY="H02" ENTRY="Status" LENGTH="10 "/>
    <textElement ID="I" KEY="H03" ENTRY="Inventory record" LENGTH="25 "/>
    <textElement ID="I" KEY="H04" ENTRY="Inventory Item" LENGTH="20 "/>
    <textElement ID="I" KEY="H05" ENTRY="Plant" LENGTH="10 "/>
    <textElement ID="I" KEY="H06" ENTRY="Storage location" LENGTH="20 "/>
    <textElement ID="I" KEY="H07" ENTRY="Storage type" LENGTH="20 "/>
    <textElement ID="I" KEY="H08" ENTRY="Storage bin" LENGTH="20 "/>
    <textElement ID="I" KEY="H09" ENTRY="Storage unit" LENGTH="25 "/>
    <textElement ID="I" KEY="H10" ENTRY="Product" LENGTH="15 "/>
    <textElement ID="I" KEY="H11" ENTRY="Year" LENGTH="4 "/>
    <textElement ID="I" KEY="H12" ENTRY="Month" LENGTH="5 "/>
    <textElement ID="I" KEY="H13" ENTRY="Aisle" LENGTH="5 "/>
    <textElement ID="I" KEY="H14" ENTRY="Matched counts" LENGTH="14 "/>
    <textElement ID="I" KEY="H15" ENTRY="Count" LENGTH="10 "/>
    <textElement ID="I" KEY="H16" ENTRY="Unit" LENGTH="10 "/>
    <textElement ID="I" KEY="H17" ENTRY="Count" LENGTH="10 "/>
    <textElement ID="I" KEY="H18" ENTRY="CountMatch" LENGTH="10 "/>
    <textElement ID="I" KEY="H19" ENTRY="User" LENGTH="10 "/>
    <textElement ID="I" KEY="H20" ENTRY="Count Date" LENGTH="10 "/>
    <textElement ID="I" KEY="H21" ENTRY="Syst. Qty." LENGTH="10 "/>
    <textElement ID="I" KEY="H22" ENTRY="Syst.Mtch." LENGTH="10 "/>
    <textElement ID="I" KEY="H23" ENTRY="Count time" LENGTH="10 "/>
    <textElement ID="I" KEY="L01" ENTRY="Transaction:" LENGTH="15 "/>
    <textElement ID="I" KEY="L02" ENTRY="User:" LENGTH="10 "/>
    <textElement ID="I" KEY="L03" ENTRY="Processing date:" LENGTH="20 "/>
    <textElement ID="I" KEY="L04" ENTRY="at" LENGTH="2 "/>
    <textElement ID="I" KEY="L05" ENTRY="Number of records found:" LENGTH="35 "/>
    <textElement ID="I" KEY="P01" ENTRY="Reload data" LENGTH="20 "/>
    <textElement ID="I" KEY="S01" ENTRY="General Selection Parameters" LENGTH="35 "/>
    <textElement ID="I" KEY="S02" ENTRY="Specific Selection Parameters" LENGTH="40 "/>
    <textElement ID="I" KEY="T01" ENTRY="WM - Inventory report" LENGTH="35 "/>
    <textElement ID="R" ENTRY="WM - Inventory Report" LENGTH="21 "/>
    <textElement ID="S" KEY="P_LGNUM" ENTRY="D       ." LENGTH="24 "/>
    <textElement ID="S" KEY="S_IVNUM" ENTRY="D       ." LENGTH="24 "/>
    <textElement ID="S" KEY="S_LGPLA" ENTRY="D       ." LENGTH="19 "/>
    <textElement ID="S" KEY="S_PDATU" ENTRY="D       ." LENGTH="26 "/>
    <textElement ID="S" KEY="S_PRDCT" ENTRY="D       ." LENGTH="15 "/>
    <textElement ID="S" KEY="S_STGTY" ENTRY="D       ." LENGTH="20 "/>
    <textElement ID="S" KEY="S_STTON" ENTRY="D       ." LENGTH="33 "/>
   </language>
   <language SPRAS="P">
    <textElement ID="I" KEY="H01" ENTRY="Status Contagem" LENGTH="15 "/>
    <textElement ID="I" KEY="H02" ENTRY="Status" LENGTH="10 "/>
    <textElement ID="I" KEY="H03" ENTRY="Documento de inventário" LENGTH="25 "/>
    <textElement ID="I" KEY="H04" ENTRY="Item de Inventário" LENGTH="20 "/>
    <textElement ID="I" KEY="H05" ENTRY="Planta" LENGTH="10 "/>
    <textElement ID="I" KEY="H06" ENTRY="Depósito" LENGTH="20 "/>
    <textElement ID="I" KEY="H07" ENTRY="Tipo de depósito" LENGTH="20 "/>
    <textElement ID="I" KEY="H08" ENTRY="Posição no depósito" LENGTH="20 "/>
    <textElement ID="I" KEY="H09" ENTRY="Unidade de depósito" LENGTH="25 "/>
    <textElement ID="I" KEY="H10" ENTRY="Material" LENGTH="15 "/>
    <textElement ID="I" KEY="H11" ENTRY="Ano" LENGTH="4 "/>
    <textElement ID="I" KEY="H12" ENTRY="Mês" LENGTH="5 "/>
    <textElement ID="I" KEY="H13" ENTRY="Rua" LENGTH="5 "/>
    <textElement ID="I" KEY="H14" ENTRY="Cntg. Coinc." LENGTH="14 "/>
    <textElement ID="I" KEY="H15" ENTRY="Contagem" LENGTH="10 "/>
    <textElement ID="I" KEY="H16" ENTRY="Unidade" LENGTH="10 "/>
    <textElement ID="I" KEY="H17" ENTRY="Contagem" LENGTH="10 "/>
    <textElement ID="I" KEY="H18" ENTRY="Cont.Coin." LENGTH="10 "/>
    <textElement ID="I" KEY="H19" ENTRY="Usuário" LENGTH="10 "/>
    <textElement ID="I" KEY="H20" ENTRY="Dt.Cntgm." LENGTH="10 "/>
    <textElement ID="I" KEY="H21" ENTRY="Qtd. Sist." LENGTH="10 "/>
    <textElement ID="I" KEY="H22" ENTRY="Cncd.Sist." LENGTH="10 "/>
    <textElement ID="I" KEY="H23" ENTRY="Hr. Cntgm." LENGTH="10 "/>
    <textElement ID="I" KEY="L01" ENTRY="Transação:" LENGTH="15 "/>
    <textElement ID="I" KEY="L02" ENTRY="Usuário:" LENGTH="10 "/>
    <textElement ID="I" KEY="L03" ENTRY="Data de execução" LENGTH="20 "/>
    <textElement ID="I" KEY="L04" ENTRY="às" LENGTH="2 "/>
    <textElement ID="I" KEY="L05" ENTRY="Número de registros encontrados:" LENGTH="35 "/>
    <textElement ID="I" KEY="P01" ENTRY="Recarregar dados" LENGTH="20 "/>
    <textElement ID="I" KEY="S01" ENTRY="Parâmetros Gerais de Seleção" LENGTH="35 "/>
    <textElement ID="I" KEY="S02" ENTRY="Parâmetros Específicos de Seleção" LENGTH="40 "/>
    <textElement ID="I" KEY="T01" ENTRY="WM - Relatório de inventário" LENGTH="35 "/>
    <textElement ID="R" ENTRY="WM - Relatório de inventário" LENGTH="70 "/>
    <textElement ID="S" KEY="P_LGNUM" ENTRY="D       ." LENGTH="24 "/>
    <textElement ID="S" KEY="S_IVNUM" ENTRY="D       ." LENGTH="24 "/>
    <textElement ID="S" KEY="S_LGPLA" ENTRY="D       ." LENGTH="19 "/>
    <textElement ID="S" KEY="S_PDATU" ENTRY="D       ." LENGTH="26 "/>
    <textElement ID="S" KEY="S_PRDCT" ENTRY="D       ." LENGTH="15 "/>
    <textElement ID="S" KEY="S_STGTY" ENTRY="D       ." LENGTH="20 "/>
    <textElement ID="S" KEY="S_STTON" ENTRY="D       ." LENGTH="33 "/>
   </language>
  </textPool>
  <source>INCLUDE: ziwm0005_top,  &quot;Definições globais
         ziwm0005_p01.  &quot;Implementações de classes

INITIALIZATION.
  &quot;data(gr_controller) = new lcl_controller(  ).
  CREATE OBJECT gr_controller.
  p_lgnum = zif_wm_lg_aut_inventory=&gt;mc_organization-warehouse_number.

START-OF-SELECTION.
  gr_controller-&gt;get_data( ).

END-OF-SELECTION.
  gr_controller-&gt;show_data( ).</source>
 </PROG>
 <PROG NAME="ZRWM0006" VARCL="X" DBAPL="S" SUBC="1" RMAND="100" FIXPT="X" LDBNAME="D$S" UCCHECK="X">
  <textPool>
   <language SPRAS="E">
    <textElement ID="S" KEY="S_IVNUM" ENTRY="D       ." LENGTH="9 "/>
    <textElement ID="S" KEY="S_LGNUM" ENTRY="D       ." LENGTH="9 "/>
    <textElement ID="S" KEY="S_LGPLA" ENTRY="D       ." LENGTH="9 "/>
    <textElement ID="S" KEY="S_PDATU" ENTRY="D       ." LENGTH="9 "/>
   </language>
   <language SPRAS="P">
    <textElement ID="I" KEY="H01" ENTRY="janeiro/" LENGTH="10 "/>
    <textElement ID="I" KEY="H02" ENTRY="fevereiro/" LENGTH="10 "/>
    <textElement ID="I" KEY="H03" ENTRY="março/" LENGTH="10 "/>
    <textElement ID="I" KEY="H04" ENTRY="abril/" LENGTH="10 "/>
    <textElement ID="I" KEY="H05" ENTRY="maio/" LENGTH="10 "/>
    <textElement ID="I" KEY="H06" ENTRY="junho/" LENGTH="10 "/>
    <textElement ID="I" KEY="H07" ENTRY="julho/" LENGTH="10 "/>
    <textElement ID="I" KEY="H08" ENTRY="agosto/" LENGTH="10 "/>
    <textElement ID="I" KEY="H09" ENTRY="setembro/" LENGTH="10 "/>
    <textElement ID="I" KEY="H10" ENTRY="outubro/" LENGTH="10 "/>
    <textElement ID="I" KEY="H11" ENTRY="novembro/" LENGTH="10 "/>
    <textElement ID="I" KEY="H12" ENTRY="dezembro/" LENGTH="10 "/>
    <textElement ID="I" KEY="H14" ENTRY="Real" LENGTH="4 "/>
    <textElement ID="I" KEY="H15" ENTRY="Orçamento" LENGTH="9 "/>
    <textElement ID="I" KEY="H16" ENTRY="Reforecast" LENGTH="10 "/>
    <textElement ID="I" KEY="H17" ENTRY="Orçamento x Real (%)" LENGTH="20 "/>
    <textElement ID="I" KEY="H18" ENTRY="Reforecast x Real (%)" LENGTH="21 "/>
    <textElement ID="R" ENTRY="Opex - Relatório Real x Forecast" LENGTH="32 "/>
    <textElement ID="S" KEY="P_MONTH" ENTRY="        Mês" LENGTH="24 "/>
    <textElement ID="S" KEY="P_YEAR" ENTRY="D       ." LENGTH="17 "/>
    <textElement ID="S" KEY="S_CSTC" ENTRY="D       ." LENGTH="20 "/>
   </language>
  </textPool>
  <pfstatus>
   <pfstatus_sta CODE="STANDARD_FULLSCREEN" MODAL="D" ACTCODE="000001" PFKCODE="000001" BUTCODE="0001" INT_NOTE="Standard für allgemeine Listausgabe im Fullscreen Grid"/>
   <pfstatus_fun CODE="%ML" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="Pasta" PATH="A"/>
   <pfstatus_fun CODE="%PC" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_EXPORT" ICON_ID="@49@" FUN_TEXT="File local..." PATH="F"/>
   <pfstatus_fun CODE="%SC" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_SEARCH" ICON_ID="@13@" FUN_TEXT="Procurar" PATH="U"/>
   <pfstatus_fun CODE="%SC+" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_SEARCH_NEXT" ICON_ID="@4E@" FUN_TEXT="Continuar procurando" PATH="W"/>
   <pfstatus_fun CODE="%SL" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_MAIL" ICON_ID="@1S@" FUN_TEXT="Destinatário do e-mail" PATH="M"/>
   <pfstatus_fun CODE="&amp;ABC" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_ABC" ICON_ID="@DL@" FUN_TEXT="Análise ABC" PATH="A"/>
   <pfstatus_fun CODE="&amp;ALL" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_SELECT_ALL" ICON_ID="@4B@" FUN_TEXT="Marcar tudo" PATH="M"/>
   <pfstatus_fun CODE="&amp;AQW" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_WORD_PROCESSING" ICON_ID="@DK@" FUN_TEXT="Processamento de texto..." PATH="T"/>
   <pfstatus_fun CODE="&amp;AUF" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="Determinar lista expandida de totais..." PATH="S"/>
   <pfstatus_fun CODE="&amp;AVE" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="Gravar..." PATH="G"/>
   <pfstatus_fun CODE="&amp;AVE" TEXTNO="002" TEXT_TYPE="S" TEXT_NAME="ICON_ALV_VARIANT_SAVE" ICON_ID="@DN@" FUN_TEXT="Gravar layout..."/>
   <pfstatus_fun CODE="&amp;AVR" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="Valor médio" PATH="M"/>
   <pfstatus_fun CODE="&amp;CDF" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="Liberar colunas" PATH="I"/>
   <pfstatus_fun CODE="&amp;CFI" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="Fixar até coluna" PATH="F"/>
   <pfstatus_fun CODE="&amp;COUNT" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="Contar" PATH="C"/>
   <pfstatus_fun CODE="&amp;DATA_SAVE" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_SYSTEM_SAVE" ICON_ID="@2L@" FUN_TEXT="Gravar"/>
   <pfstatus_fun CODE="&amp;EB9" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_TABLE_SETTINGS" ICON_ID="@36@" FUN_TEXT="Chamar relatório..." PATH="B"/>
   <pfstatus_fun CODE="&amp;ELP" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_SYSTEM_HELP" ICON_ID="@35@" FUN_TEXT="Ajuda"/>
   <pfstatus_fun CODE="&amp;ERW" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="Administrar..." PATH="A"/>
   <pfstatus_fun CODE="&amp;ETA" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_SELECT_DETAIL" ICON_ID="@16@" FUN_TEXT="Detalhes"/>
   <pfstatus_fun CODE="&amp;F03" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="Voltar" PATH="L"/>
   <pfstatus_fun CODE="&amp;F12" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_CANCEL" ICON_ID="@0W@" FUN_TEXT="Cancelar" PATH="O"/>
   <pfstatus_fun CODE="&amp;F15" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="Encerrar" PATH="E"/>
   <pfstatus_fun CODE="&amp;F4" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="Entradas possíveis"/>
   <pfstatus_fun CODE="&amp;GRAPH" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_GRAPHICS" ICON_ID="@0N@" FUN_TEXT="Gráfico" PATH="G"/>
   <pfstatus_fun CODE="&amp;IC1" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_SELECT_DETAIL" ICON_ID="@16@" FUN_TEXT="Selecionar"/>
   <pfstatus_fun CODE="&amp;ILD" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_FILTER_UNDO" ICON_ID="@GD@" FUN_TEXT="Eliminar filtro" PATH="L"/>
   <pfstatus_fun CODE="&amp;ILT" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_FILTER" ICON_ID="@4G@" FUN_TEXT="Definir filtro" PATH="F"/>
   <pfstatus_fun CODE="&amp;INFO" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_INFORMATION" ICON_ID="@0S@" FUN_TEXT="Informação"/>
   <pfstatus_fun CODE="&amp;MAX" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="Máximo" PATH="Á"/>
   <pfstatus_fun CODE="&amp;MIN" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="Mínimo" PATH="I"/>
   <pfstatus_fun CODE="&amp;OAD" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="Selecionar..." PATH="E"/>
   <pfstatus_fun CODE="&amp;OAD" TEXTNO="002" TEXT_TYPE="S" TEXT_NAME="ICON_ALV_VARIANT_CHOOSE" ICON_ID="@DM@" FUN_TEXT="Selecionar layout..."/>
   <pfstatus_fun CODE="&amp;ODN" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_SORT_DOWN" ICON_ID="@3F@" FUN_TEXT="Ordenar em ordem decrescente" PATH="D"/>
   <pfstatus_fun CODE="&amp;OL0" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_ALV_VARIANTS" ICON_ID="@LZ@" FUN_TEXT="Modificar layout..."/>
   <pfstatus_fun CODE="&amp;OLX" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_VARIANTS" ICON_ID="@0R@" FUN_TEXT="Modificar..." PATH="M"/>
   <pfstatus_fun CODE="&amp;OPT" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="Largura otimizada" PATH="L"/>
   <pfstatus_fun CODE="&amp;OUP" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_SORT_UP" ICON_ID="@3E@" FUN_TEXT="Ordenar em ordem crescente" PATH="R"/>
   <pfstatus_fun CODE="&amp;REFRESH" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_REFRESH" ICON_ID="@42@" FUN_TEXT="Renovar"/>
   <pfstatus_fun CODE="&amp;RNT" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_PRINT" ICON_ID="@0X@" FUN_TEXT="Imprimir" PATH="I"/>
   <pfstatus_fun CODE="&amp;RNT_PREV" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_LAYOUT_CONTROL" ICON_ID="@3G@" FUN_TEXT="Visualização" PATH="V"/>
   <pfstatus_fun CODE="&amp;SAL" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_DESELECT_ALL" ICON_ID="@4D@" FUN_TEXT="Desmarcar tudo" PATH="K"/>
   <pfstatus_fun CODE="&amp;SUM" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_INTERMEDIATE_SUM" ICON_ID="@5V@" FUN_TEXT="Subtotais..." PATH="S"/>
   <pfstatus_fun CODE="&amp;UMC" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_SUM" ICON_ID="@3Z@" FUN_TEXT="Total" PATH="T"/>
   <pfstatus_fun CODE="&amp;VCRYSTAL" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="Crystal Reports" PATH="C"/>
   <pfstatus_fun CODE="&amp;VEXCEL" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_XLS" ICON_ID="@J2@" FUN_TEXT="Microsoft Excel" PATH="M"/>
   <pfstatus_fun CODE="&amp;VGRID" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="SAP List Viewer" PATH="S"/>
   <pfstatus_fun CODE="&amp;VLOTUS" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="Lotus 1-2-3" PATH="L"/>
   <pfstatus_fun CODE="&amp;XINT" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="Arquivo ampliado da SAP Query" PATH="E"/>
   <pfstatus_fun CODE="&amp;XXL" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_XXL" ICON_ID="@DJ@" FUN_TEXT="Planilha eletrônica..." PATH="A"/>
   <pfstatus_men CODE="000001" NO="01" REF_TYPE="F" REF_CODE="&amp;RNT_PREV" REF_NO="001"/>
   <pfstatus_men CODE="000001" NO="02" REF_TYPE="F" REF_CODE="&amp;RNT" REF_NO="001"/>
   <pfstatus_men CODE="000001" NO="03" REF_TYPE="S"/>
   <pfstatus_men CODE="000001" NO="04" REF_TYPE="M" REF_CODE="000002"/>
   <pfstatus_men CODE="000001" NO="05" REF_TYPE="M" REF_CODE="000003"/>
   <pfstatus_men CODE="000001" NO="06" REF_TYPE="S"/>
   <pfstatus_men CODE="000001" NO="07" REF_TYPE="F" REF_CODE="&amp;F15" REF_NO="001"/>
   <pfstatus_men CODE="000002" NO="01" REF_TYPE="F" REF_CODE="&amp;AQW" REF_NO="001"/>
   <pfstatus_men CODE="000002" NO="02" REF_TYPE="F" REF_CODE="&amp;XXL" REF_NO="001"/>
   <pfstatus_men CODE="000002" NO="03" REF_TYPE="F" REF_CODE="%PC" REF_NO="001"/>
   <pfstatus_men CODE="000002" NO="04" REF_TYPE="F" REF_CODE="&amp;XINT" REF_NO="001"/>
   <pfstatus_men CODE="000003" NO="01" REF_TYPE="F" REF_CODE="%SL" REF_NO="001"/>
   <pfstatus_men CODE="000003" NO="02" REF_TYPE="F" REF_CODE="%ML" REF_NO="001"/>
   <pfstatus_men CODE="000004" NO="01" REF_TYPE="F" REF_CODE="&amp;ALL" REF_NO="001"/>
   <pfstatus_men CODE="000004" NO="02" REF_TYPE="F" REF_CODE="&amp;SAL" REF_NO="001"/>
   <pfstatus_men CODE="000004" NO="03" REF_TYPE="S"/>
   <pfstatus_men CODE="000004" NO="04" REF_TYPE="F" REF_CODE="&amp;ILT" REF_NO="001"/>
   <pfstatus_men CODE="000004" NO="05" REF_TYPE="F" REF_CODE="&amp;ILD" REF_NO="001"/>
   <pfstatus_men CODE="000004" NO="06" REF_TYPE="S"/>
   <pfstatus_men CODE="000004" NO="07" REF_TYPE="F" REF_CODE="&amp;OUP" REF_NO="001"/>
   <pfstatus_men CODE="000004" NO="08" REF_TYPE="F" REF_CODE="&amp;ODN" REF_NO="001"/>
   <pfstatus_men CODE="000004" NO="09" REF_TYPE="S"/>
   <pfstatus_men CODE="000004" NO="10" REF_TYPE="M" REF_CODE="000005"/>
   <pfstatus_men CODE="000004" NO="11" REF_TYPE="F" REF_CODE="&amp;SUM" REF_NO="001"/>
   <pfstatus_men CODE="000004" NO="12" REF_TYPE="S"/>
   <pfstatus_men CODE="000004" NO="13" REF_TYPE="F" REF_CODE="%SC" REF_NO="001"/>
   <pfstatus_men CODE="000004" NO="14" REF_TYPE="S"/>
   <pfstatus_men CODE="000004" NO="15" REF_TYPE="F" REF_CODE="&amp;F12" REF_NO="001"/>
   <pfstatus_men CODE="000005" NO="01" REF_TYPE="F" REF_CODE="&amp;UMC" REF_NO="001"/>
   <pfstatus_men CODE="000005" NO="02" REF_TYPE="F" REF_CODE="&amp;AVR" REF_NO="001"/>
   <pfstatus_men CODE="000005" NO="03" REF_TYPE="F" REF_CODE="&amp;MIN" REF_NO="001"/>
   <pfstatus_men CODE="000005" NO="04" REF_TYPE="F" REF_CODE="&amp;MAX" REF_NO="001"/>
   <pfstatus_men CODE="000005" NO="05" REF_TYPE="F" REF_CODE="&amp;COUNT" REF_NO="001"/>
   <pfstatus_men CODE="000006" NO="01" REF_TYPE="F" REF_CODE="&amp;ABC" REF_NO="001"/>
   <pfstatus_men CODE="000006" NO="02" REF_TYPE="S"/>
   <pfstatus_men CODE="000006" NO="03" REF_TYPE="F" REF_CODE="&amp;F03" REF_NO="001"/>
   <pfstatus_men CODE="000007" NO="01" REF_TYPE="F" REF_CODE="&amp;VGRID" REF_NO="001"/>
   <pfstatus_men CODE="000007" NO="02" REF_TYPE="F" REF_CODE="&amp;VEXCEL" REF_NO="001"/>
   <pfstatus_men CODE="000007" NO="03" REF_TYPE="F" REF_CODE="&amp;VLOTUS" REF_NO="001"/>
   <pfstatus_men CODE="000007" NO="04" REF_TYPE="F" REF_CODE="&amp;VCRYSTAL" REF_NO="001"/>
   <pfstatus_men CODE="000007" NO="05" REF_TYPE="S"/>
   <pfstatus_men CODE="000007" NO="06" REF_TYPE="F" REF_CODE="&amp;GRAPH" REF_NO="001"/>
   <pfstatus_men CODE="000008" NO="01" REF_TYPE="M" REF_CODE="000009"/>
   <pfstatus_men CODE="000008" NO="02" REF_TYPE="M" REF_CODE="000010"/>
   <pfstatus_men CODE="000008" NO="03" REF_TYPE="F" REF_CODE="&amp;AUF" REF_NO="001"/>
   <pfstatus_men CODE="000009" NO="01" REF_TYPE="F" REF_CODE="&amp;OLX" REF_NO="001"/>
   <pfstatus_men CODE="000009" NO="02" REF_TYPE="F" REF_CODE="&amp;OAD" REF_NO="001"/>
   <pfstatus_men CODE="000009" NO="03" REF_TYPE="S"/>
   <pfstatus_men CODE="000009" NO="04" REF_TYPE="F" REF_CODE="&amp;AVE" REF_NO="001"/>
   <pfstatus_men CODE="000009" NO="05" REF_TYPE="S"/>
   <pfstatus_men CODE="000009" NO="06" REF_TYPE="F" REF_CODE="&amp;ERW" REF_NO="001"/>
   <pfstatus_men CODE="000010" NO="01" REF_TYPE="F" REF_CODE="&amp;OPT" REF_NO="001"/>
   <pfstatus_men CODE="000010" NO="02" REF_TYPE="S"/>
   <pfstatus_men CODE="000010" NO="03" REF_TYPE="F" REF_CODE="&amp;CFI" REF_NO="001"/>
   <pfstatus_men CODE="000010" NO="04" REF_TYPE="F" REF_CODE="&amp;CDF" REF_NO="001"/>
   <pfstatus_mtx CODE="000001" TEXT_TYPE="S" TEXT="Lista" PATH="L" INT_NOTE="STANDARD_FULLSCREEN Liste"/>
   <pfstatus_mtx CODE="000002" TEXT_TYPE="S" TEXT="Exportar" PATH="X" INT_NOTE="STANDARD Sichern"/>
   <pfstatus_mtx CODE="000003" TEXT_TYPE="S" TEXT="Enviar a" PATH="N"/>
   <pfstatus_mtx CODE="000004" TEXT_TYPE="S" TEXT="Processar" PATH="E" INT_NOTE="STANDARD"/>
   <pfstatus_mtx CODE="000005" TEXT_TYPE="S" TEXT="Calcular" PATH="C"/>
   <pfstatus_mtx CODE="000006" TEXT_TYPE="S" TEXT="Ir para" PATH="G" INT_NOTE="STANDARD"/>
   <pfstatus_mtx CODE="000007" TEXT_TYPE="S" TEXT="Visões" PATH="I"/>
   <pfstatus_mtx CODE="000008" TEXT_TYPE="S" TEXT="Configurações" PATH="C" INT_NOTE="STANDARD_FULLSCREEN"/>
   <pfstatus_mtx CODE="000009" TEXT_TYPE="S" TEXT="Layout" PATH="A" INT_NOTE="Sub STANDARD"/>
   <pfstatus_mtx CODE="000010" TEXT_TYPE="S" TEXT="Colunas" PATH="C"/>
   <pfstatus_act CODE="000001" NO="01" MENUCODE="000001"/>
   <pfstatus_act CODE="000001" NO="02" MENUCODE="000004"/>
   <pfstatus_act CODE="000001" NO="03" MENUCODE="000006"/>
   <pfstatus_act CODE="000001" NO="04" MENUCODE="000007"/>
   <pfstatus_act CODE="000001" NO="05" MENUCODE="000008"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="01" PFNO="39"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="02" PFNO="37"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="03" PFNO="08"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="04" PFNO="S"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="05" PFNO="05"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="06" PFNO="06"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="07" PFNO="S"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="08" PFNO="28"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="09" PFNO="40"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="10" PFNO="29"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="11" PFNO="38"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="12" PFNO="S"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="13" PFNO="30"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="14" PFNO="42"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="15" PFNO="S"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="16" PFNO="46"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="17" PFNO="S"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="18" PFNO="43"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="19" PFNO="44"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="20" PFNO="45"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="21" PFNO="31"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="22" PFNO="25"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="23" PFNO="47"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="24" PFNO="S"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="25" PFNO="32"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="26" PFNO="33"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="27" PFNO="34"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="28" PFNO="S"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="29" PFNO="36"/>
   <pfstatus_pfk CODE="000001" PFNO="01" FUNCODE="&amp;ELP" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="02" FUNCODE="&amp;IC1" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="03" FUNCODE="&amp;F03" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="04" FUNCODE="&amp;F4" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="05" FUNCODE="&amp;ALL" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="06" FUNCODE="&amp;SAL" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="08" FUNCODE="&amp;REFRESH" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="11" FUNCODE="&amp;DATA_SAVE" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="12" FUNCODE="&amp;F12" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="15" FUNCODE="&amp;F15" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="25" FUNCODE="&amp;ABC" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="28" FUNCODE="&amp;OUP" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="29" FUNCODE="&amp;ILT" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="30" FUNCODE="&amp;UMC" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="31" FUNCODE="%SL" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="32" FUNCODE="&amp;OL0" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="33" FUNCODE="&amp;OAD" FUNNO="002"/>
   <pfstatus_pfk CODE="000001" PFNO="34" FUNCODE="&amp;AVE" FUNNO="002"/>
   <pfstatus_pfk CODE="000001" PFNO="36" FUNCODE="&amp;INFO" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="37" FUNCODE="&amp;EB9" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="38" FUNCODE="&amp;ILD" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="39" FUNCODE="&amp;ETA" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="40" FUNCODE="&amp;ODN" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="41" FUNCODE="&amp;VGRID" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="42" FUNCODE="&amp;SUM" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="43" FUNCODE="&amp;VEXCEL" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="44" FUNCODE="&amp;AQW" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="45" FUNCODE="%PC" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="46" FUNCODE="&amp;RNT_PREV" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="47" FUNCODE="&amp;GRAPH" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="48" FUNCODE="&amp;VCRYSTAL" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="71" FUNCODE="%SC" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="84" FUNCODE="%SC+" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="86" FUNCODE="&amp;RNT" FUNNO="001"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="%CH"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="%ML"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="%PC"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="%SC"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="%SC+"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="%SL"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;ABC"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;ALL"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;AQW"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;AUF"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;AVE"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;AVR"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;BS"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;BS+"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;BS-"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;CDF"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;CFI"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;COUNT"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;CRB"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;CRBATCH"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;CRDESIG"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;CRE"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;CRL"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;CRR"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;CRTEMPL"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;CRYSTAL"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;DATA_SAVE"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;DAU"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;DOF"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;DON"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;EB3"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;EB9"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;ELP"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;ERW"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;ETA"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;F03"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;F12"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;F15"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;F4"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;GRAPH"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;IC1"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;ILD"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;ILT"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;INFO"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;KOM"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;LFO"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;LIS"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;MAX"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;MIN"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;NFO"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;NTE"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;OAD"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;ODN"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;OL0"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;OLX"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;OMP"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;OPT"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;OUP"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;REFRESH"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;RNT"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;RNT_PREV"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;SAL"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;SAVE"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;SUM"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;UMC"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;URL"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;VCRYSTAL"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;VEXCEL"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;VGRID"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;VLOTUS"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;XML"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;XPA"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;XXL"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="BAC1"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="BACK"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="BEB1"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="BEB2"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="BEB3"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="BEB9"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="BEBN"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="COL0"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="COLX"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="DETA"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="DRUK"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="DSAL"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="ENTE"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="EXIT"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="EXPA"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="FILD"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="FILT"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="GLIS"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="HELP"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="INFO"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="KOMP"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="P+"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="P++"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="P-"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="P--"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="PF09"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="PF13"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="PIC1"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="PICK"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="PRI"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="PRIN"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="PRNT"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="RW"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="SALL"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="SAUF"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="SAVE"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="SCRB"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="SCRE"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="SCRL"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="SCRR"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="SKOM"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="SODN"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="SOUP"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="SUMC"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="ZSUM"/>
   <pfstatus_doc OBJ_TYPE="A" OBJ_CODE="000001" MODAL="D" INT_NOTE="Standardoberfläche              STANDARD_FULLSCREEN"/>
   <pfstatus_doc OBJ_TYPE="P" OBJ_CODE="000001" MODAL="D" NORM="X" INT_NOTE="Standard maximale Interaktion STANDARD_FULLSCREEN"/>
   <pfstatus_doc OBJ_TYPE="B" OBJ_CODE="000001" SUB_CODE="0001" INT_NOTE="STANDARD_FULLSCREEN"/>
  </pfstatus>
  <source>INCLUDE: ziwm0006_top, &quot;Definições globais
         ziwm0006_p01. &quot;Implementações de classes

INITIALIZATION.
  &quot;DATA(gr_controller) = NEW lcl_controller(  ).
  CREATE OBJECT gr_controller.

START-OF-SELECTION.
  gr_controller-&gt;get_data( ).

END-OF-SELECTION.
  gr_controller-&gt;show_data( ).</source>
 </PROG>
 <PROG NAME="MZWM0017_I01" VARCL="X" DBAPL="S" DBNA="D$" SUBC="I" RMAND="100" FIXPT="X" LDBNAME="D$S" UCCHECK="X">
  <textPool>
   <language SPRAS="E">
    <textElement ID="R" ENTRY="Inventory counting - PAI modules" LENGTH="32 "/>
   </language>
  </textPool>
  <source>*&amp;---------------------------------------------------------------------*
*&amp;  Include  mzwm0017_i01
*&amp;---------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*&amp;      Module  USER_COMMAND_9000  INPUT
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_9000 INPUT.

  g_okcode = gr_controller-&gt;execute_9000(
      i_storage_bin = g_storage_bin
      i_okcode      = g_okcode
  ).
ENDMODULE.                 &quot; USER_COMMAND_9000  INPUT
*&amp;---------------------------------------------------------------------*
*&amp;      Module  USER_COMMAND_9001  INPUT
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_9001 INPUT.

  g_okcode = gr_controller-&gt;execute_9001(
      i_product = g_product
      i_okcode  = g_okcode
  ).
ENDMODULE.                 &quot; USER_COMMAND_9001  INPUT
*&amp;---------------------------------------------------------------------*
*&amp;      Module  USER_COMMAND_9002  INPUT
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_9002 INPUT.

  g_okcode = gr_controller-&gt;execute_9002(
      i_storage_unit = g_storage_unit
      i_product      = g_product
      i_quantity     = g_quantity
      i_okcode       = g_okcode
  ).
ENDMODULE.                 &quot; USER_COMMAND_9002  INPUT</source>
 </PROG>
 <PROG NAME="MZWM0017_O01" VARCL="X" DBAPL="S" DBNA="D$" SUBC="I" RMAND="100" FIXPT="X" LDBNAME="D$S" UCCHECK="X">
  <textPool>
   <language SPRAS="E">
    <textElement ID="R" ENTRY="Inventory counting - PBO modules" LENGTH="36 "/>
   </language>
  </textPool>
  <source>*&amp;---------------------------------------------------------------------*
*&amp;  Include  mzwm0017_o01
*&amp;---------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*&amp;      Module  STATUS_9000  OUTPUT
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE status_9000 OUTPUT.
*  SET PF-STATUS &apos;xxxxxxxx&apos;.
*  SET TITLEBAR &apos;xxx&apos;.

  IF gr_controller IS INITIAL.
    CREATE OBJECT gr_controller.
  ENDIF.

  gr_controller-&gt;check_user( ).
  gr_controller-&gt;get_9000_data(
    IMPORTING
      e_storage_bin = g_storage_bin
  ).

  SET PF-STATUS &apos;STATUS_9000&apos;.

ENDMODULE.                 &quot; STATUS_9000  OUTPUT
*&amp;---------------------------------------------------------------------*
*&amp;      Module  STATUS_9001  OUTPUT
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE status_9001 OUTPUT.
*  SET PF-STATUS &apos;xxxxxxxx&apos;.
*  SET TITLEBAR &apos;xxx&apos;.

  gr_controller-&gt;get_9001_data(
    IMPORTING
      e_storage_type  = g_storage_type
      e_storage_bin   = g_storage_bin
      e_product       = g_product
      e_units_counter = g_units_counter
  ).

  SET PF-STATUS &apos;STATUS_9001&apos; EXCLUDING gr_controller-&gt;mt_excluded_functions.

  LOOP AT SCREEN.
    IF screen-name = &apos;BTN_RESET&apos;.
      READ TABLE gr_controller-&gt;mt_excluded_functions
       WITH KEY table_line = &apos;RESET&apos;
       TRANSPORTING NO FIELDS.
      IF sy-subrc = 0.
        screen-active = zif_wm_lg_aut_inventory=&gt;mc_binary_status-off.
        screen-invisible = zif_wm_lg_aut_inventory=&gt;mc_binary_status-on.
      ELSE.
        screen-active = zif_wm_lg_aut_inventory=&gt;mc_binary_status-on.
        screen-invisible = zif_wm_lg_aut_inventory=&gt;mc_binary_status-off.
      ENDIF.

      MODIFY SCREEN.
    ENDIF.

    IF screen-name = &apos;BTN_FINISH&apos;.
      READ TABLE gr_controller-&gt;mt_excluded_functions
       WITH KEY table_line = &apos;FINISH&apos;
       TRANSPORTING NO FIELDS.
      IF sy-subrc = 0.
        screen-active = zif_wm_lg_aut_inventory=&gt;mc_binary_status-off.
        screen-invisible = zif_wm_lg_aut_inventory=&gt;mc_binary_status-on.
      ELSE.
        screen-active = zif_wm_lg_aut_inventory=&gt;mc_binary_status-on.
        screen-invisible = zif_wm_lg_aut_inventory=&gt;mc_binary_status-off.
      ENDIF.

      MODIFY SCREEN.
    ENDIF.
  ENDLOOP.

ENDMODULE.                 &quot; STATUS_9001  OUTPUT
*&amp;---------------------------------------------------------------------*
*&amp;      Module  STATUS_9002  OUTPUT
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE status_9002 OUTPUT.
*  SET PF-STATUS &apos;xxxxxxxx&apos;.
*  SET TITLEBAR &apos;xxx&apos;.

  gr_controller-&gt;get_9002_data(
    IMPORTING
      e_storage_bin   = g_storage_bin
      e_storage_unit  = g_storage_unit
      e_su_read       = g_su_read
      e_product       = g_product
      e_prod_descr    = g_prod_descr
      e_unit          = g_unit
      e_quantity      = g_quantity
  ).

  SET PF-STATUS &apos;STATUS_9002&apos; EXCLUDING gr_controller-&gt;mt_excluded_functions.

  LOOP AT SCREEN.
    IF screen-name CP &apos;*G_STORAGE_UNIT*&apos;.
      IF g_su_read IS NOT INITIAL.
        screen-active = zif_wm_lg_aut_inventory=&gt;mc_binary_status-off.
        screen-invisible = zif_wm_lg_aut_inventory=&gt;mc_binary_status-on.
      ELSE.
        screen-active = zif_wm_lg_aut_inventory=&gt;mc_binary_status-on.
        screen-invisible = zif_wm_lg_aut_inventory=&gt;mc_binary_status-off.
      ENDIF.

      MODIFY SCREEN.
    ENDIF.
    IF screen-name CP &apos;*PRODUCT*&apos;.
      IF g_su_read IS INITIAL.
        screen-active = zif_wm_lg_aut_inventory=&gt;mc_binary_status-off.
        screen-invisible = zif_wm_lg_aut_inventory=&gt;mc_binary_status-on.
      ELSE.
        screen-active = zif_wm_lg_aut_inventory=&gt;mc_binary_status-on.
        screen-invisible = zif_wm_lg_aut_inventory=&gt;mc_binary_status-off.
        IF g_prod_descr IS NOT INITIAL.
          screen-input = zif_wm_lg_aut_inventory=&gt;mc_binary_status-off.
        ELSE.
          screen-input = zif_wm_lg_aut_inventory=&gt;mc_binary_status-on.
        ENDIF.
      ENDIF.

      MODIFY SCREEN.
    ENDIF.
    IF screen-name CP &apos;*PROD_DESCR*&apos;.
      IF g_su_read IS INITIAL OR g_prod_descr IS INITIAL.
        screen-active = zif_wm_lg_aut_inventory=&gt;mc_binary_status-off.
        screen-invisible = zif_wm_lg_aut_inventory=&gt;mc_binary_status-on.
      ELSE.
        screen-active = zif_wm_lg_aut_inventory=&gt;mc_binary_status-on.
        screen-invisible = zif_wm_lg_aut_inventory=&gt;mc_binary_status-off.

        MODIFY SCREEN.
      ENDIF.
    ENDIF.
    IF screen-name CP &apos;*QUANTITY*&apos; OR
       screen-name CP &apos;*G_UNIT*&apos;.
      IF g_product IS INITIAL.
        screen-active = zif_wm_lg_aut_inventory=&gt;mc_binary_status-off.
        screen-invisible = zif_wm_lg_aut_inventory=&gt;mc_binary_status-on.
      ELSE.
        screen-active = zif_wm_lg_aut_inventory=&gt;mc_binary_status-on.
        screen-invisible = zif_wm_lg_aut_inventory=&gt;mc_binary_status-off.
      ENDIF.

      MODIFY SCREEN.
    ENDIF.
    IF screen-name = &apos;BTN_RESET&apos;.
      READ TABLE gr_controller-&gt;mt_excluded_functions
       WITH KEY table_line = &apos;RESET&apos;
       TRANSPORTING NO FIELDS.
      IF sy-subrc = 0.
        screen-active = zif_wm_lg_aut_inventory=&gt;mc_binary_status-off.
        screen-invisible = zif_wm_lg_aut_inventory=&gt;mc_binary_status-on.
      ELSE.
        screen-active = zif_wm_lg_aut_inventory=&gt;mc_binary_status-on.
        screen-invisible = zif_wm_lg_aut_inventory=&gt;mc_binary_status-off.
      ENDIF.

      MODIFY SCREEN.
    ENDIF.
  ENDLOOP.
ENDMODULE.                 &quot; STATUS_9002  OUTPUT</source>
 </PROG>
 <PROG NAME="SAPMZWM0017" VARCL="X" DBAPL="S" SUBC="1" RMAND="100" FIXPT="X" LDBNAME="D$S" UCCHECK="X">
  <textPool>
   <language SPRAS="E">
    <textElement ID="R" ENTRY="Inventory counting" LENGTH="18 "/>
   </language>
  </textPool>
  <dynpros>
   <dynpro PROG="SAPMZWM0017" DNUM="9000" FNUM="9000" BZMX="16 " BZBR="24 " MILI="192 " MICO="37 " MALI="0 " MACO="0 " NOLI="16 " NOCO="24 " VALP="0 " CUAN="G" SPRA="E" DTEXT="Storage bin">
    <dynprofield FNAM="TTL_9000" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="0F" LINE="01" COLN="08" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="0" AGLT="00" ADEZ="00" STXT="Inventory"/>
    <dynprofield FNAM="LBL_" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="14" LINE="06" COLN="04" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="0" AGLT="00" ADEZ="00" STXT="Read the storage bin"/>
    <dynprofield FNAM="G_STORAGE_BIN" DIDX="0000" FLG1="80" FLG2="00" FLG3="80" FMB1="00" FMB2="00" LENG="0A" LINE="07" COLN="09" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="__________"/>
    <dynprofield FNAM="BOX_9000" DIDX="0003" FLG1="00" FLG2="00" FLG3="00" FILL="R" FMB1="30" FMB2="00" LENG="18" LINE="0E" COLN="02" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="101" AGLT="00" ADEZ="00"/>
    <dynprofield FNAM="BTN_BACK" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FILL="P" FMB1="30" FMB2="00" LENG="0A" LINE="0F" COLN="03" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="102" AGLT="00" ADEZ="00" STXT="F3 - BACK" RES1="                                                                                                                                                                        BACK"/>
    <dynprofield FNAM="BTN_CLEAR" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FILL="P" FMB1="30" FMB2="00" LENG="0A" LINE="0F" COLN="0E" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="103" AGLT="00" ADEZ="00" STXT="F5 - CLEAR" RES1="                                                                                                                                                                        CLEAR"/>
    <dynprofield FNAM="G_OKCODE" DIDX="0000" FLG1="80" FLG2="10" FLG3="00" FMB1="00" FMB2="00" LENG="14" LINE="FF" COLN="01" LTYP="O" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="____________________"/>
    <dynproflowsource>PROCESS BEFORE OUTPUT.
 MODULE STATUS_9000.
*
PROCESS AFTER INPUT.
 MODULE USER_COMMAND_9000.</dynproflowsource>
   </dynpro>
   <dynpro PROG="SAPMZWM0017" DNUM="9001" FNUM="9001" BZMX="16 " BZBR="24 " MILI="192 " MICO="37 " MALI="0 " MACO="0 " NOLI="16 " NOCO="24 " VALP="0 " CUAN="G" SPRA="E" DTEXT="Product count">
    <dynprofield FNAM="TTL_9001" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="0F" LINE="01" COLN="08" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="0" AGLT="00" ADEZ="00" STXT="Inventory"/>
    <dynprofield FNAM="LBL_STORAGE_TYPE" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="10" LINE="02" COLN="03" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="0" AGLT="00" ADEZ="00" STXT="Storage Type"/>
    <dynprofield FNAM="G_STORAGE_TYPE" DIDX="0000" FLG1="80" FLG2="00" FLG3="80" FMB1="31" FMB2="00" LENG="04" LINE="02" COLN="16" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="____"/>
    <dynprofield FNAM="LBL_STORAGE_BIN" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="0B" LINE="03" COLN="03" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="0" AGLT="00" ADEZ="00" STXT="Storage bin"/>
    <dynprofield FNAM="G_STORAGE_BIN" DIDX="0000" FLG1="80" FLG2="00" FLG3="80" FMB1="31" FMB2="00" LENG="0A" LINE="03" COLN="10" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="__________"/>
    <dynprofield FNAM="LBL_PRODUCT" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="10" LINE="06" COLN="06" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="0" AGLT="00" ADEZ="00" STXT="Read the product"/>
    <dynprofield FNAM="G_PRODUCT" DIDX="0000" FLG1="80" FLG2="00" FLG3="80" FMB1="00" FMB2="00" LENG="12" LINE="07" COLN="05" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="__________________"/>
    <dynprofield FNAM="LBL_UNITS_COUNTER" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="11" LINE="0A" COLN="02" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="0" AGLT="00" ADEZ="00" STXT="Number units read"/>
    <dynprofield FNAM="G_UNITS_COUNTER" DIDX="0000" FLG1="80" FLG2="00" FLG3="80" FMB1="31" FMB2="00" LENG="05" LINE="0A" COLN="15" LANF="00" LBLK="00" LREP="00" TYPE="NUMC" ITYP="C" AGLT="00" ADEZ="00" STXT="_____"/>
    <dynprofield DIDX="0004" FLG1="00" FLG2="00" FLG3="00" FILL="R" FMB1="30" FMB2="00" LENG="18" LINE="0D" COLN="02" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="101" AGLT="00" ADEZ="00"/>
    <dynprofield FNAM="BTN_BACK" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FILL="P" FMB1="30" FMB2="00" LENG="0A" LINE="0E" COLN="03" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="102" AGLT="00" ADEZ="00" STXT="F3 - BACK" RES1="                                                                                                                                                                        BACK"/>
    <dynprofield FNAM="BTN_CLEAR" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FILL="P" FMB1="30" FMB2="00" LENG="0A" LINE="0E" COLN="0E" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="103" AGLT="00" ADEZ="00" STXT="F5 - CLEAR" RES1="                                                                                                                                                                        CLEAR"/>
    <dynprofield FNAM="BTN_RESET" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FILL="P" FMB1="30" FMB2="00" LENG="0A" LINE="0F" COLN="03" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="104" AGLT="00" ADEZ="00" STXT="F6 - RESET" RES1="                                                                                                                                                                        RESET"/>
    <dynprofield FNAM="BTN_FINISH" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FILL="P" FMB1="30" FMB2="00" LENG="0A" LINE="0F" COLN="0E" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="105" AGLT="00" ADEZ="00" STXT="F8- FINISH" RES1="                                                                                                                                                                        FINISH"/>
    <dynprofield FNAM="G_OKCODE" DIDX="0000" FLG1="80" FLG2="10" FLG3="00" FMB1="00" FMB2="00" LENG="14" LINE="FF" COLN="01" LTYP="O" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="____________________"/>
    <dynproflowsource>PROCESS BEFORE OUTPUT.
 MODULE STATUS_9001.
*
PROCESS AFTER INPUT.
 MODULE USER_COMMAND_9001.</dynproflowsource>
   </dynpro>
   <dynpro PROG="SAPMZWM0017" DNUM="9002" FNUM="9002" BZMX="16 " BZBR="24 " MILI="192 " MICO="37 " MALI="0 " MACO="0 " NOLI="16 " NOCO="24 " VALP="0 " CUAN="G" SPRA="E" DTEXT="Count of Storage unit">
    <dynprofield FNAM="TTL_9002" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="0F" LINE="01" COLN="08" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="0" AGLT="00" ADEZ="00" STXT="Inventory"/>
    <dynprofield FNAM="LBL_STORAGE_BIN" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="0B" LINE="02" COLN="03" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="0" AGLT="00" ADEZ="00" STXT="Storage bin"/>
    <dynprofield FNAM="G_STORAGE_BIN" DIDX="0000" FLG1="80" FLG2="00" FLG3="80" FMB1="31" FMB2="00" LENG="0A" LINE="02" COLN="10" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="__________" RES1="                                       00"/>
    <dynprofield FNAM="LBL_STORAGE_UNIT" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="0D" LINE="03" COLN="05" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="0" AGLT="00" ADEZ="00" STXT="SU read"/>
    <dynprofield FNAM="G_STORAGE_UNIT" DIDX="0000" FLG1="80" FLG2="00" FLG3="80" FMB1="00" FMB2="00" LENG="12" LINE="04" COLN="05" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="__________________"/>
    <dynprofield FNAM="LBL_SU_READ" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="02" LINE="05" COLN="03" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="0" AGLT="00" ADEZ="00" STXT="SU"/>
    <dynprofield FNAM="G_SU_READ" DIDX="0000" FLG1="80" FLG2="00" FLG3="80" FMB1="31" FMB2="00" LENG="14" LINE="05" COLN="06" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="____________________"/>
    <dynprofield FNAM="LBL_PRODUCT" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="10" LINE="07" COLN="06" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="0" AGLT="00" ADEZ="00" STXT="Read the product"/>
    <dynprofield FNAM="G_PRODUCT" DIDX="0000" FLG1="80" FLG2="00" FLG3="80" FMB1="00" FMB2="00" LENG="12" LINE="08" COLN="05" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="__________________"/>
    <dynprofield FNAM="G_PROD_DESCR" DIDX="0018" FLG1="81" FLG2="00" FLG3="80" FMB1="31" FMB2="00" LENG="28" LINE="09" COLN="02" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="________________________________________"/>
    <dynprofield FNAM="LBL_QUANTITY" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FMB1="30" FMB2="00" LENG="0C" LINE="0B" COLN="02" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="0" AGLT="00" ADEZ="00" STXT="Type Qty" RES1="                                                                                                                                                                                                                                                        X"/>
    <dynprofield FNAM="G_QUANTITY" DIDX="0000" FLG1="80" FLG2="00" FLG3="80" FMB1="00" FMB2="00" LENG="06" LINE="0B" COLN="0F" LANF="00" LBLK="00" LREP="00" TYPE="NUMC" ITYP="C" AGLT="00" ADEZ="00" STXT="______" RES1="                                       00"/>
    <dynprofield FNAM="G_UNIT" DIDX="0000" FLG1="80" FLG2="00" FLG3="80" FMB1="31" FMB2="00" LENG="04" LINE="0B" COLN="16" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" ITYP="C" AGLT="00" ADEZ="00" STXT="____"/>
    <dynprofield DIDX="0005" FLG1="00" FLG2="00" FLG3="00" FILL="R" FMB1="30" FMB2="00" LENG="18" LINE="0C" COLN="02" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="101" AGLT="00" ADEZ="00"/>
    <dynprofield FNAM="BTN_BACK" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FILL="P" FMB1="30" FMB2="00" LENG="0A" LINE="0D" COLN="03" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="102" AGLT="00" ADEZ="00" STXT="F3 - BACK" RES1="                                                                                                                                                                        BACK"/>
    <dynprofield FNAM="BTN_CLEAR" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FILL="P" FMB1="30" FMB2="00" LENG="0A" LINE="0D" COLN="0E" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="103" AGLT="00" ADEZ="00" STXT="F5 - CLEAR" RES1="                                                                                                                                                                        CLEAR"/>
    <dynprofield FNAM="BTN_RESET" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FILL="P" FMB1="30" FMB2="00" LENG="0A" LINE="0E" COLN="08" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="104" AGLT="00" ADEZ="00" STXT="F6 - RESET" RES1="                                                                                                                                                                        RESET"/>
    <dynprofield FNAM="BTN_SU_FINISH" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FILL="P" FMB1="30" FMB2="00" LENG="0A" LINE="0F" COLN="03" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="105" AGLT="00" ADEZ="00" STXT="F7-SU FIN" RES1="                                                                                                                                                                        SUFINISH"/>
    <dynprofield FNAM="BTN_FINISH" DIDX="0000" FLG1="00" FLG2="00" FLG3="00" FILL="P" FMB1="30" FMB2="00" LENG="0A" LINE="0F" COLN="0E" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="106" AGLT="00" ADEZ="00" STXT="F8- FINISH" RES1="                                                                                                                                                                        FINISH"/>
    <dynprofield FNAM="G_OKCODE" DIDX="0000" FLG1="80" FLG2="10" FLG3="00" FMB1="00" FMB2="00" LENG="14" LINE="FF" COLN="01" LTYP="O" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="____________________"/>
    <dynproflowsource>PROCESS BEFORE OUTPUT.
 MODULE STATUS_9002.
*
PROCESS AFTER INPUT.
 MODULE USER_COMMAND_9002.</dynproflowsource>
   </dynpro>
  </dynpros>
  <pfstatus>
   <pfstatus_sta CODE="STATUS_9000" MODAL="D" ACTCODE="000001" PFKCODE="000001" BUTCODE="0001" INT_NOTE="Storage bin reading"/>
   <pfstatus_sta CODE="STATUS_9001" MODAL="D" ACTCODE="000001" PFKCODE="000002" BUTCODE="0001" INT_NOTE="Product count"/>
   <pfstatus_sta CODE="STATUS_9002" MODAL="D" ACTCODE="000001" PFKCODE="000002" BUTCODE="0001" INT_NOTE="Storage unit count"/>
   <pfstatus_fun CODE="BACK" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="Back" PATH="B"/>
   <pfstatus_fun CODE="CLEAR" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="Clear"/>
   <pfstatus_fun CODE="ENTER" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="Ok"/>
   <pfstatus_fun CODE="FINISH" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="Finish count"/>
   <pfstatus_fun CODE="LIST" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="List"/>
   <pfstatus_fun CODE="RESET" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="Reset"/>
   <pfstatus_fun CODE="RESTART" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="Restart"/>
   <pfstatus_fun CODE="SUFINISH" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="Finish SU"/>
   <pfstatus_pfk CODE="000001" PFNO="00" FUNCODE="ENTER" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="03" FUNCODE="BACK" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="05" FUNCODE="CLEAR" FUNNO="001"/>
   <pfstatus_pfk CODE="000002" PFNO="00" FUNCODE="ENTER" FUNNO="001"/>
   <pfstatus_pfk CODE="000002" PFNO="03" FUNCODE="BACK" FUNNO="001"/>
   <pfstatus_pfk CODE="000002" PFNO="05" FUNCODE="CLEAR" FUNNO="001"/>
   <pfstatus_pfk CODE="000002" PFNO="06" FUNCODE="RESET" FUNNO="001"/>
   <pfstatus_pfk CODE="000002" PFNO="07" FUNCODE="SUFINISH" FUNNO="001"/>
   <pfstatus_pfk CODE="000002" PFNO="08" FUNCODE="FINISH" FUNNO="001"/>
   <pfstatus_set STATUS="STATUS_9000" FUNCTION="BACK"/>
   <pfstatus_set STATUS="STATUS_9000" FUNCTION="CLEAR"/>
   <pfstatus_set STATUS="STATUS_9000" FUNCTION="ENTER"/>
   <pfstatus_set STATUS="STATUS_9000" FUNCTION="OK"/>
   <pfstatus_set STATUS="STATUS_9001" FUNCTION="BACK"/>
   <pfstatus_set STATUS="STATUS_9001" FUNCTION="CLEAR"/>
   <pfstatus_set STATUS="STATUS_9001" FUNCTION="ENTER"/>
   <pfstatus_set STATUS="STATUS_9001" FUNCTION="FINISH"/>
   <pfstatus_set STATUS="STATUS_9001" FUNCTION="OK"/>
   <pfstatus_set STATUS="STATUS_9001" FUNCTION="RESET"/>
   <pfstatus_set STATUS="STATUS_9001" FUNCTION="RESTART"/>
   <pfstatus_set STATUS="STATUS_9002" FUNCTION="BACK"/>
   <pfstatus_set STATUS="STATUS_9002" FUNCTION="CLEAR"/>
   <pfstatus_set STATUS="STATUS_9002" FUNCTION="ENTER"/>
   <pfstatus_set STATUS="STATUS_9002" FUNCTION="FINISH"/>
   <pfstatus_set STATUS="STATUS_9002" FUNCTION="OK"/>
   <pfstatus_set STATUS="STATUS_9002" FUNCTION="RESET"/>
   <pfstatus_set STATUS="STATUS_9002" FUNCTION="RESTART"/>
   <pfstatus_set STATUS="STATUS_9002" FUNCTION="SUFINISH"/>
   <pfstatus_doc OBJ_TYPE="A" OBJ_CODE="000001" MODAL="D" INT_NOTE="SU count"/>
   <pfstatus_doc OBJ_TYPE="P" OBJ_CODE="000001" MODAL="D" INT_NOTE="Product count"/>
   <pfstatus_doc OBJ_TYPE="B" OBJ_CODE="000001" SUB_CODE="0001" MODAL="D" INT_NOTE="Product count"/>
   <pfstatus_doc OBJ_TYPE="P" OBJ_CODE="000002" MODAL="D" INT_NOTE="SU count"/>
   <pfstatus_doc OBJ_TYPE="B" OBJ_CODE="000002" SUB_CODE="0001" MODAL="D" INT_NOTE="SU count"/>
  </pfstatus>
  <source>*&amp;---------------------------------------------------------------------*
*&amp; Program  sapmzwm0017
*&amp;
*&amp;---------------------------------------------------------------------*
*&amp; Inventory counting - Contagem de inventário
*&amp;
*&amp;---------------------------------------------------------------------*

INCLUDE: mzwm0017_top                             ,  &quot; global Data
         mzwm0017_o01                             ,  &quot; PBO-Modules
         mzwm0017_i01                             .  &quot; PAI-Modules
* INCLUDE MZWM0017_F01                            .  &quot; FORM-Routines</source>
 </PROG>
</nugget>
