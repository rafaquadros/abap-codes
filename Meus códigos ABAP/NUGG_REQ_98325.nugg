<?xml version="1.0" encoding="utf-8"?>
<nugget name="REQ_98325">
 <CLAS CLSNAME="ZUSFPCO_SI_GET_RAW_MATERIAL_IN" VERSION="1" LANGU="E" DESCRIPT="Proxy Class (generated)" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSCCINCL="X" FIXPT="X" UNICODE="X" RSTAT="P" CLSBCCAT="00" CLSPROXY="X" DURATION_TYPE="0 " RISK_LEVEL="0 " ZSAPLINK_PLUGIN_MAJOR_VERSION="0 " ZSAPLINK_PLUGIN_MINOR_VERSION="1 " ZSAPLINK_PLUGIN_BUILD_VERSION="0 " ZSAPLINK_PLUGIN_INFO1="ZSAPLINK_CLASS is part of the main ZSAPLINK project --&gt; This plugin found there instead of ZSAPLINK_PLUGINS projects" ZSAPLINK_PLUGIN_INFO2="SAPLINK homepage: https://www.assembla.com/spaces/saplink/wiki" ZSAPLINK_PLUGIN_INFO3="Download from https://www.assembla.com/code/saplink/subversion/nodes" ZSAPLINK_PLUGIN_INFO4="and navigate to:  trunk -&gt; core -&gt; ZSAPLINK -&gt; CLAS -&gt; ZSAPLINK_CLASS.slnk" REFCLSNAME="CL_PROXY_CLIENT">
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros></localMacros>
  <inheritance CLSNAME="ZUSFPCO_SI_GET_RAW_MATERIAL_IN" REFCLSNAME="CL_PROXY_CLIENT" VERSION="1" STATE="1"/>
  <method CLSNAME="ZUSFPCO_SI_GET_RAW_MATERIAL_IN" CMPNAME="CONSTRUCTOR" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="2" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZUSFPCO_SI_GET_RAW_MATERIAL_IN" CMPNAME="CONSTRUCTOR" SCONAME="LOGICAL_PORT_NAME" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="2" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="PRX_LOGICAL_PORT_NAME" PAROPTIONL="X"/>
   <exception CLSNAME="ZUSFPCO_SI_GET_RAW_MATERIAL_IN" CMPNAME="CONSTRUCTOR" SCONAME="CX_AI_SYSTEM_FAULT" VERSION="1" LANGU="E" MTDTYPE="2" EDITORDER="1 "/>
   <source>method CONSTRUCTOR.

  super-&gt;constructor(
    class_name          = &apos;ZUSFPCO_SI_GET_RAW_MATERIAL_IN&apos;
    logical_port_name   = logical_port_name
  ).

  endmethod.</source>
  </method>
  <method CLSNAME="ZUSFPCO_SI_GET_RAW_MATERIAL_IN" CMPNAME="SI_GET_RAW_MATERIAL_INVENTORYO" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZUSFPCO_SI_GET_RAW_MATERIAL_IN" CMPNAME="SI_GET_RAW_MATERIAL_INVENTORYO" SCONAME="OUTPUT" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZUSFPMT_GET_RAW_MATERIAL_SAP"/>
   <parameter CLSNAME="ZUSFPCO_SI_GET_RAW_MATERIAL_IN" CMPNAME="SI_GET_RAW_MATERIAL_INVENTORYO" SCONAME="INPUT" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="ZUSFPMT_GET_RAW_MATERIAL_SAP_R"/>
   <exception CLSNAME="ZUSFPCO_SI_GET_RAW_MATERIAL_IN" CMPNAME="SI_GET_RAW_MATERIAL_INVENTORYO" SCONAME="CX_AI_SYSTEM_FAULT" VERSION="1" LANGU="E" DESCRIPT="Communication Error" MTDTYPE="0" EDITORDER="1 "/>
   <source>method SI_GET_RAW_MATERIAL_INVENTORYO.

  data:
    ls_parmbind type abap_parmbind,
    lt_parmbind type abap_parmbind_tab.

  ls_parmbind-name = &apos;OUTPUT&apos;.
  ls_parmbind-kind = cl_abap_objectdescr=&gt;importing.
  get reference of OUTPUT into ls_parmbind-value.
  insert ls_parmbind into table lt_parmbind.

  ls_parmbind-name = &apos;INPUT&apos;.
  ls_parmbind-kind = cl_abap_objectdescr=&gt;exporting.
  get reference of INPUT into ls_parmbind-value.
  insert ls_parmbind into table lt_parmbind.

  if_proxy_client~execute(
    exporting
      method_name = &apos;SI_GET_RAW_MATERIAL_INVENTORYO&apos;
    changing
      parmbind_tab = lt_parmbind
  ).

  endmethod.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZCA_USFP_T_ASA_STKUP" VERSION="1" LANGU="E" DESCRIPT="Agent Persistence layer for table ZUSFPT_ASA_STKUP" CATEGORY="00" EXPOSURE="0" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " ZSAPLINK_PLUGIN_MAJOR_VERSION="0 " ZSAPLINK_PLUGIN_MINOR_VERSION="1 " ZSAPLINK_PLUGIN_BUILD_VERSION="0 " ZSAPLINK_PLUGIN_INFO1="ZSAPLINK_CLASS is part of the main ZSAPLINK project --&gt; This plugin found there instead of ZSAPLINK_PLUGINS projects" ZSAPLINK_PLUGIN_INFO2="SAPLINK homepage: https://www.assembla.com/spaces/saplink/wiki" ZSAPLINK_PLUGIN_INFO3="Download from https://www.assembla.com/code/saplink/subversion/nodes" ZSAPLINK_PLUGIN_INFO4="and navigate to:  trunk -&gt; core -&gt; ZSAPLINK -&gt; CLAS -&gt; ZSAPLINK_CLASS.slnk" REFCLSNAME="ZCB_USFP_T_ASA_STKUP">
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <attribute CLSNAME="ZCA_USFP_T_ASA_STKUP" CMPNAME="AGENT" VERSION="1" LANGU="E" DESCRIPT="Class Agent - Singleton" EXPOSURE="2" STATE="1" EDITORDER="0 " ATTDECLTYP="1" ATTRDONLY="X" ATTEXPVIRT="0" TYPTYPE="3" TYPE="ZCA_USFP_T_ASA_STKUP" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <inheritance CLSNAME="ZCA_USFP_T_ASA_STKUP" REFCLSNAME="ZCB_USFP_T_ASA_STKUP" VERSION="1" STATE="1"/>
  <method CLSNAME="ZCA_USFP_T_ASA_STKUP" CMPNAME="CLASS_CONSTRUCTOR" VERSION="1" LANGU="E" DESCRIPT="Class Constructor" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="2" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CLASS_CONSTRUCTOR.
***BUILD 090501
************************************************************************
* Purpose        : Initialize the &apos;class&apos;.
*
* Version        : 2.0
*
* Precondition   : -
*
* Postcondition  : Singleton is created.
*
* OO Exceptions  : -
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 1999-09-20   : (OS) Initial Version
* - 2000-03-06   : (BGR) 2.0 modified REGISTER_CLASS_AGENT
************************************************************************
* GENERATED: Do not modify
************************************************************************

  create object AGENT.

  call method AGENT-&gt;REGISTER_CLASS_AGENT
    exporting
      I_CLASS_NAME          = &apos;ZCL_USFP_T_ASA_STKUP&apos;
      I_CLASS_AGENT_NAME    = &apos;ZCA_USFP_T_ASA_STKUP&apos;
      I_CLASS_GUID          = &apos;FE129FACED021ED5B5BAB46E95400FB8&apos;
      I_CLASS_AGENT_GUID    = &apos;FE129FACED021ED5B5BAB4B556C90FB8&apos;
      I_AGENT               = AGENT
      I_STORAGE_LOCATION    = &apos;ZUSFPT_ASA_STKUP&apos;
      I_CLASS_AGENT_VERSION = &apos;2.0&apos;.

           &quot;CLASS_CONSTRUCTOR
  endmethod.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZCB_USFP_T_ASA_STKUP" VERSION="1" LANGU="E" DESCRIPT="Base agent Persistence layer for table ZUSFPT_ASA_STKUP" CATEGORY="11" EXPOSURE="2" STATE="1" RELEASE="0" CLSABSTRCT="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " ZSAPLINK_PLUGIN_MAJOR_VERSION="0 " ZSAPLINK_PLUGIN_MINOR_VERSION="1 " ZSAPLINK_PLUGIN_BUILD_VERSION="0 " ZSAPLINK_PLUGIN_INFO1="ZSAPLINK_CLASS is part of the main ZSAPLINK project --&gt; This plugin found there instead of ZSAPLINK_PLUGINS projects" ZSAPLINK_PLUGIN_INFO2="SAPLINK homepage: https://www.assembla.com/spaces/saplink/wiki" ZSAPLINK_PLUGIN_INFO3="Download from https://www.assembla.com/code/saplink/subversion/nodes" ZSAPLINK_PLUGIN_INFO4="and navigate to:  trunk -&gt; core -&gt; ZSAPLINK -&gt; CLAS -&gt; ZSAPLINK_CLASS.slnk" REFCLSNAME="CL_OS_CA_COMMON">
  <types CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="TYP_OID" VERSION="1" LANGU="E" DESCRIPT="Type of Generic Object Identifier" EXPOSURE="1" STATE="1" EDITORDER="0 " TYPTYPE="1" TYPE="OS_GUID" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <types CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="TYP_TYPE" VERSION="1" LANGU="E" DESCRIPT="Type of Type Identifier" EXPOSURE="1" STATE="1" EDITORDER="0 " TYPTYPE="1" TYPE="OS_GUID" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <types CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="TYP_OBJECT_REF" VERSION="1" LANGU="E" DESCRIPT="Type of Managed Object" EXPOSURE="1" STATE="1" EDITORDER="1 " TYPTYPE="3" TYPE="ZCL_USFP_T_ASA_STKUP" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <types CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="TYP_BUSINESS_KEY" VERSION="1" LANGU="E" DESCRIPT="Business Key" EXPOSURE="1" STATE="1" EDITORDER="2 " TYPTYPE="4" SRCROW1="7 " SRCCOLUMN1="4 " SRCROW2="10 " SRCCOLUMN2="26 " TYPESRC_LENG="0 " TYPESRC="begin of TYP_BUSINESS_KEY ,
      AEDAT type RSCRMTSTMP ,
      UNAME type UNAME ,
    end of TYP_BUSINESS_KEY
"/>
  <types CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="TYP_BUSINESS_KEY_TAB" VERSION="1" LANGU="E" DESCRIPT="Table Type Object Reference" EXPOSURE="1" STATE="1" EDITORDER="3 " TYPTYPE="4" TYPE="TYP_BUSINESS_KEY" SRCROW1="12 " SRCCOLUMN1="4 " SRCROW2="13 " SRCCOLUMN2="49 " TYPESRC_LENG="0 " TYPESRC="TYP_BUSINESS_KEY_TAB type standard table of
      TYP_BUSINESS_KEY with non-unique default key
"/>
  <types CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="TYP_DB_DATA" VERSION="1" LANGU="E" DESCRIPT="Line-Type Persistent Object Data" EXPOSURE="1" STATE="1" EDITORDER="4 " TYPTYPE="4" SRCROW1="15 " SRCCOLUMN1="4 " SRCROW2="22 " SRCCOLUMN2="21 " TYPESRC_LENG="0 " TYPESRC="begin of TYP_DB_DATA ,
      AEDAT type RSCRMTSTMP ,
      UNAME type UNAME ,
      UTZON type SUIDTZONE ,
      ADATA type ZUSFP_ASA_STOCK_UPD_DATA ,
      UMETH type ZUSFP_ASA_UPD_STK_METHOD ,
      LGHDL type BALLOGHNDL ,
    end of TYP_DB_DATA
"/>
  <types CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="TYP_DB_DATA_TAB" VERSION="1" LANGU="E" DESCRIPT="Table-Type Persistent Object Data" EXPOSURE="1" STATE="1" EDITORDER="5 " TYPTYPE="4" TYPE="TYP_DB_DATA" SRCROW1="24 " SRCCOLUMN1="4 " SRCROW2="25 " SRCCOLUMN2="44 " TYPESRC_LENG="0 " TYPESRC="TYP_DB_DATA_TAB type standard table of
      TYP_DB_DATA with non-unique default key
"/>
  <types CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="TYP_OID_TAB" VERSION="1" LANGU="E" DESCRIPT="Table Type Object Identifier" EXPOSURE="1" STATE="1" EDITORDER="5 " TYPTYPE="4" TYPE="TYP_OID" SRCROW1="27 " SRCCOLUMN1="4 " SRCROW2="28 " SRCCOLUMN2="40 " TYPESRC_LENG="0 " TYPESRC="TYP_OID_TAB type standard table of
      TYP_OID with non-unique default key
"/>
  <types CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="TYP_OBJECT_REF_TAB" VERSION="1" LANGU="E" DESCRIPT="Table Type Object Reference" EXPOSURE="1" STATE="1" EDITORDER="6 " TYPTYPE="4" TYPE="TYP_OBJECT_REF" SRCROW1="30 " SRCCOLUMN1="4 " SRCROW2="31 " SRCCOLUMN2="47 " TYPESRC_LENG="0 " TYPESRC="TYP_OBJECT_REF_TAB type standard table of
      TYP_OBJECT_REF with non-unique default key
"/>
  <types CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="TYP_SPECIAL_OBJECT_INFO" VERSION="1" LANGU="E" DESCRIPT="Line Type Class-Specific Object Data" EXPOSURE="1" STATE="1" EDITORDER="7 " TYPTYPE="4" SRCROW1="33 " SRCCOLUMN1="4 " SRCROW2="37 " SRCCOLUMN2="33 " TYPESRC_LENG="0 " TYPESRC="begin of TYP_SPECIAL_OBJECT_INFO ,
      OBJECT_ID type TYP_INTERNAL_OID ,
      ID_STATUS type TYP_ID_STATUS ,
      BUSINESS_KEY type TYP_BUSINESS_KEY ,
    end of TYP_SPECIAL_OBJECT_INFO
"/>
  <types CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="TYP_SPECIAL_OBJECT_INFO_TAB" VERSION="1" LANGU="E" DESCRIPT="Table Type Class-Specific Object Data" EXPOSURE="1" STATE="1" EDITORDER="8 " TYPTYPE="4" TYPE="TYP_SPECIAL_OBJECT_INFO" SRCROW1="39 " SRCCOLUMN1="4 " SRCROW2="41 " SRCCOLUMN2="14 " TYPESRC_LENG="0 " TYPESRC="TYP_SPECIAL_OBJECT_INFO_TAB type sorted table of
      TYP_SPECIAL_OBJECT_INFO with unique key
      OBJECT_ID
"/>
  <types CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="TYP_SPECIAL_BKEY_TAB" VERSION="1" LANGU="E" DESCRIPT="Table Type Search Table Business Keys" EXPOSURE="1" STATE="1" EDITORDER="9 " TYPTYPE="4" TYPE="TYP_SPECIAL_OBJECT_INFO" SRCROW1="43 " SRCCOLUMN1="4 " SRCROW2="45 " SRCCOLUMN2="17 " TYPESRC_LENG="0 " TYPESRC="TYP_SPECIAL_BKEY_TAB type sorted table of
      TYP_SPECIAL_OBJECT_INFO with unique key
      BUSINESS_KEY
"/>
  <types CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="TYP_DB_DELETE_TAB" VERSION="1" LANGU="E" DESCRIPT="Table Type Identifiers to Delete" EXPOSURE="1" STATE="1" EDITORDER="10 " TYPTYPE="4" TYPE="TYP_SPECIAL_OBJECT_INFO" SRCROW1="47 " SRCCOLUMN1="4 " SRCROW2="48 " SRCCOLUMN2="56 " TYPESRC_LENG="0 " TYPESRC="TYP_DB_DELETE_TAB type standard table of
      TYP_SPECIAL_OBJECT_INFO with non-unique default key
"/>
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <attribute CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="CURRENT_SPECIAL_OBJECT_INFO" VERSION="1" LANGU="E" DESCRIPT="Current Class-Specific Object Data" EXPOSURE="1" STATE="1" EDITORDER="0 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="TYP_SPECIAL_OBJECT_INFO" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="MAP_ATT_INFO_TAB" VERSION="1" LANGU="E" DESCRIPT="Query: Mapping Metadata for Attributes" EXPOSURE="1" STATE="1" EDITORDER="0 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="OSTYP_RT_MAP_ATT_INFO_SRT_TAB" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="SPECIAL_BKEY_TAB" VERSION="1" LANGU="E" DESCRIPT="Class-Specific: Search Table Business Keys" EXPOSURE="1" STATE="1" EDITORDER="0 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="TYP_SPECIAL_BKEY_TAB" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="SPECIAL_OBJECT_INFO" VERSION="1" LANGU="E" DESCRIPT="Class-Specific Object Data" EXPOSURE="1" STATE="1" EDITORDER="0 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="TYP_SPECIAL_OBJECT_INFO_TAB" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <inheritance CLSNAME="ZCB_USFP_T_ASA_STKUP" REFCLSNAME="CL_OS_CA_COMMON" VERSION="1" STATE="1">
   <redefinition CLSNAME="ZCB_USFP_T_ASA_STKUP" REFCLSNAME="CL_OS_CA_COMMON" VERSION="1" MTDNAME="DELETE_SPECIAL_OBJECT_INFO" EXPOSURE="1"/>
   <redefinition CLSNAME="ZCB_USFP_T_ASA_STKUP" REFCLSNAME="CL_OS_CA_COMMON" VERSION="1" MTDNAME="IF_OS_CA_PERSISTENCY~GET_PERSISTENT_BY_KEY" EXPOSURE="0"/>
   <redefinition CLSNAME="ZCB_USFP_T_ASA_STKUP" REFCLSNAME="CL_OS_CA_COMMON" VERSION="1" MTDNAME="IF_OS_CA_PERSISTENCY~GET_PERSISTENT_BY_KEY_TAB" EXPOSURE="0"/>
   <redefinition CLSNAME="ZCB_USFP_T_ASA_STKUP" REFCLSNAME="CL_OS_CA_COMMON" VERSION="1" MTDNAME="IF_OS_CA_PERSISTENCY~GET_PERSISTENT_BY_QUERY" EXPOSURE="0"/>
   <redefinition CLSNAME="ZCB_USFP_T_ASA_STKUP" REFCLSNAME="CL_OS_CA_COMMON" VERSION="1" MTDNAME="IF_OS_CA_SERVICE~SAVE" EXPOSURE="0"/>
   <redefinition CLSNAME="ZCB_USFP_T_ASA_STKUP" REFCLSNAME="CL_OS_CA_COMMON" VERSION="1" MTDNAME="IF_OS_CA_SERVICE~SAVE_IN_UPDATE_TASK" EXPOSURE="0"/>
   <redefinition CLSNAME="ZCB_USFP_T_ASA_STKUP" REFCLSNAME="CL_OS_CA_COMMON" VERSION="1" MTDNAME="IF_OS_FACTORY~CREATE_PERSISTENT_BY_KEY" EXPOSURE="0"/>
   <redefinition CLSNAME="ZCB_USFP_T_ASA_STKUP" REFCLSNAME="CL_OS_CA_COMMON" VERSION="1" MTDNAME="IF_OS_FACTORY~CREATE_TRANSIENT_BY_KEY" EXPOSURE="0"/>
   <redefinition CLSNAME="ZCB_USFP_T_ASA_STKUP" REFCLSNAME="CL_OS_CA_COMMON" VERSION="1" MTDNAME="LOAD_SPECIAL_OBJECT_INFO" EXPOSURE="1"/>
   <redefinition CLSNAME="ZCB_USFP_T_ASA_STKUP" REFCLSNAME="CL_OS_CA_COMMON" VERSION="1" MTDNAME="MAP_INVALIDATE" EXPOSURE="1"/>
   <redefinition CLSNAME="ZCB_USFP_T_ASA_STKUP" REFCLSNAME="CL_OS_CA_COMMON" VERSION="1" MTDNAME="OS_PM_DELETE_PERSISTENT" EXPOSURE="1"/>
   <redefinition CLSNAME="ZCB_USFP_T_ASA_STKUP" REFCLSNAME="CL_OS_CA_COMMON" VERSION="1" MTDNAME="PM_LOAD" EXPOSURE="1"/>
   <redefinition CLSNAME="ZCB_USFP_T_ASA_STKUP" REFCLSNAME="CL_OS_CA_COMMON" VERSION="1" MTDNAME="SAVE_SPECIAL_OBJECT_INFO" EXPOSURE="1"/>
  </inheritance>
  <interfaceMethod CLSNAME="ZCB_USFP_T_ASA_STKUP" CPDNAME="IF_OS_CA_PERSISTENCY~GET_PERSISTENT_BY_KEY">
   <source>method IF_OS_CA_PERSISTENCY~GET_PERSISTENT_BY_KEY.
***BUILD 093901
*      importing I_KEY type any
*      returning result type ref to object
************************************************************************
* Purpose        : Get a persistent object identified by the
*                  given business key
*
* Version        : 2.0
*
* Precondition   : The object exists with the given business key,
*                  either in memory or on database.
*
* Postcondition  : The object exists in memory, RESULT is the reference
*
* OO Exceptions  : propagates GET_PERSISTENT
*
* Implementation : call GET_PERSISTENT
*
************************************************************************
* Changelog:
* - 2000-03-06   : (BGR) Initial Version 2.0
* - 2000-08-02   : (SB)  OO Exceptions
************************************************************************

  data: BUSINESS_KEY             type TYP_BUSINESS_KEY.

  BUSINESS_KEY = I_KEY.

*&lt; Generated from mapping:
  call method GET_PERSISTENT
       exporting I_AEDAT = BUSINESS_KEY-AEDAT
                 I_UNAME = BUSINESS_KEY-UNAME
       receiving RESULT = RESULT.
*&gt;

           &quot;IF_OS_CA_PERSISTENCY~GET_PERSISTENT_BY_KEY
  endmethod.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCB_USFP_T_ASA_STKUP" CPDNAME="IF_OS_CA_PERSISTENCY~GET_PERSISTENT_BY_KEY_TAB">
   <source>method IF_OS_CA_PERSISTENCY~GET_PERSISTENT_BY_KEY_TAB.
***BUILD 093901
      &quot;importing I_KEY_TAB type INDEX TABLE
      &quot;returning value(RESULT) type OSREFTAB
      &quot;raising   CX_OS_OBJECT_NOT_FOUND
************************************************************************
* Purpose        : Get persistent objects by Business Key table
*
* Version        : 2.0
*
* Precondition   : -
*
* Postcondition  : For each entry in the KEY table, there is a corres-
*                  ponding entry in the RESULT table. If the object was
*                  found in the cache or the database, then a reference
*                  to this object can be found in the RESULT table,
*                  if not, the reference is initial. The persistent
*                  objects are active.
*
* OO Exceptions  : CX_OS_OBJECT_NOT_FOUND
*                    (IS_TRANSIENT_BY_BKEY,DELETED_BY_BKEY)
*                  propagates PM_LOAD_AND_SET_ATTRIBUTES
*                  propagates OS_PM_LOADED_PERISISTENT
*
* Implementation : 1. Look for object in SPECIAL_OBJECT_INFO. If found,
*                     check if it is still valid
*                  2. Object found: Check PM_STATUS
*                     2a. If Status is TRANSIENT or DELETED, error!
*                     2b. If Status is NOT_LOADED, continue with 3.
*                     2c. If Status is NEW, LOADED or CHANGED, success!
*                  3. Load object data from database and set object
*                     3.a Completion in super class
*                  4. clean up
*
************************************************************************
* Changelog:
* - 2004-01-07   : (SB)  Initial version
************************************************************************

  types: begin of TYP_BUSINESS_KEY_INDEX,
           BUSINESS_KEY     type TYP_BUSINESS_KEY,
           INDEX            type SY-TABIX,
         end of TYP_BUSINESS_KEY_INDEX,
         TYP_BUSINESS_KEY_INDEX_TAB type sorted table
           of TYP_BUSINESS_KEY_INDEX with non-unique key BUSINESS_KEY.

  data: FLAG_NOT_LOADED        type OS_BOOLEAN,
        BKEY_STRING            type STRING,
        TEMP_OBJECT_REF        type TYP_OBJECT_REF,
        BUSINESS_KEY           type TYP_BUSINESS_KEY,
        BUSINESS_KEY_TAB       type TYP_BUSINESS_KEY_TAB,
        OBJECT_DATA_TAB        type TYP_DB_DATA_TAB,
        BUSINESS_KEY_INDEX     type TYP_BUSINESS_KEY_INDEX,
        BUSINESS_KEY_INDEX_TAB type TYP_BUSINESS_KEY_INDEX_TAB,
        NEXT_INDEX             type SY-TABIX.

  data: TEMP_CURRENT_OBJECT_IREF type ref to OBJECT.

  field-symbols: &lt;FS_OBJECT_DATA&gt;  type TYP_DB_DATA,
                 &lt;FS_BUSINESS_KEY&gt; type TYP_BUSINESS_KEY,
                 &lt;FS_BUSINESS_KEY_INDEX&gt; type TYP_BUSINESS_KEY_INDEX.

* * 1. Look for objects in SPECIAL_OBJECT_INFO. If found, check if they
* * are still valid

  loop at I_KEY_TAB assigning &lt;FS_BUSINESS_KEY&gt;. &quot;#EC GEN_OK

    clear CURRENT_OBJECT_IREF.

    read table SPECIAL_BKEY_TAB into CURRENT_SPECIAL_OBJECT_INFO
       with table key BUSINESS_KEY = &lt;FS_BUSINESS_KEY&gt;.

    if ( SY-SUBRC = 0 ).

      read table SPECIAL_OBJECT_INFO into CURRENT_SPECIAL_OBJECT_INFO
           with table key
           OBJECT_ID = CURRENT_SPECIAL_OBJECT_INFO-OBJECT_ID.
      call method OS_LOAD_AND_VALIDATE_CURRENT
           exporting I_INDEX = SY-TABIX.

    endif.

    if ( not CURRENT_OBJECT_IREF is initial ).

*   * 2. Object found: Check PM_STATUS

      case CURRENT_OBJECT_INFO-PM_STATUS.

*     * 2a. If Status is TRANSIENT or DELETED, error!
      when OSCON_OSTATUS_DELETED.

*!!!!!!! Error: Object activation failed - Object marked for deletion
        TEMP_CURRENT_OBJECT_IREF = CURRENT_OBJECT_IREF.
        BKEY_STRING  = MAP_SERIALIZE_BKEY( &lt;FS_BUSINESS_KEY&gt; ).
        call method OS_CLEAR_CURRENT.
        clear CURRENT_SPECIAL_OBJECT_INFO.
        class CX_OS_OBJECT_NOT_FOUND definition load.
        raise exception type CX_OS_OBJECT_NOT_FOUND
          exporting
            OBJECT = TEMP_CURRENT_OBJECT_IREF
            BKEY   = BKEY_STRING
            TEXTID = CX_OS_OBJECT_NOT_FOUND=&gt;DELETED_BY_BKEY.

      when OSCON_OSTATUS_TRANSIENT.

*!!!!!!! Error: Object activation failed - Object is transient
        TEMP_CURRENT_OBJECT_IREF = CURRENT_OBJECT_IREF.
        BKEY_STRING  = MAP_SERIALIZE_BKEY( &lt;FS_BUSINESS_KEY&gt; ).
        call method OS_CLEAR_CURRENT.
        clear CURRENT_SPECIAL_OBJECT_INFO.
        class CX_OS_OBJECT_NOT_FOUND definition load.
        raise exception type CX_OS_OBJECT_NOT_FOUND
          exporting
            OBJECT = TEMP_CURRENT_OBJECT_IREF
            BKEY   = BKEY_STRING
            TEXTID = CX_OS_OBJECT_NOT_FOUND=&gt;IS_TRANSIENT_BY_BKEY.

*     * 2b. If Status is NOT_LOADED, continue with 3.
      when OSCON_OSTATUS_NOT_LOADED.

        FLAG_NOT_LOADED = OSCON_TRUE.

*     * 2c. If Status is NEW, LOADED or CHANGED, success!
      when others.

        FLAG_NOT_LOADED = OSCON_FALSE.

      endcase.

    else.&quot; ( CURRENT_OBJECT_IREF is initial )

      FLAG_NOT_LOADED = OSCON_TRUE.

    endif.

    if ( FLAG_NOT_LOADED = OSCON_TRUE ).

      append &lt;FS_BUSINESS_KEY&gt; to BUSINESS_KEY_TAB.

    endif.

    TEMP_OBJECT_REF ?= CURRENT_OBJECT_IREF.
    append TEMP_OBJECT_REF to RESULT.

    call method OS_CLEAR_CURRENT.

  endloop.

* * 3. Load object data from database and set objects

  if ( BUSINESS_KEY_TAB is not initial ).

*   * internal Undo
    append INTERNAL_NEXT_UNDO_INFO to INTERNAL_TRANSACTION_STACK.
    INTERNAL_CURRENT_TRANSACTION = SY-TABIX.

    try.
        call method MAP_LOAD_FROM_DATABASE_KEY
             exporting I_BUSINESS_KEY_TAB = BUSINESS_KEY_TAB
             receiving result = OBJECT_DATA_TAB.
      catch CX_OS_DB_SELECT.
        clear OBJECT_DATA_TAB.
    endtry.

    loop at I_KEY_TAB assigning &lt;FS_BUSINESS_KEY&gt;. &quot;EC GEN_OK
      BUSINESS_KEY_INDEX-BUSINESS_KEY = &lt;FS_BUSINESS_KEY&gt;.
      BUSINESS_KEY_INDEX-INDEX = SY-TABIX.
      insert BUSINESS_KEY_INDEX into table BUSINESS_KEY_INDEX_TAB.
    endloop.

    try.

        loop at OBJECT_DATA_TAB assigning &lt;FS_OBJECT_DATA&gt;.

          call method MAP_EXTRACT_IDENTIFIER
               exporting I_DB_DATA  = &lt;FS_OBJECT_DATA&gt;
               importing E_BUSINESS_KEY = BUSINESS_KEY.

          clear CURRENT_OBJECT_IREF.

          call method PM_CHECK_AND_SET_ATTRIBUTES
               exporting I_OBJECT_DATA  = &lt;FS_OBJECT_DATA&gt;
                         I_ID_PROVIDED  = ID_STATUS_NONE.

          TEMP_OBJECT_REF ?= CURRENT_OBJECT_IREF.

          read table BUSINESS_KEY_INDEX_TAB
               with key BUSINESS_KEY = BUSINESS_KEY
               assigning &lt;FS_BUSINESS_KEY_INDEX&gt;.

          while ( ( SY-SUBRC = 0 ) and
                  ( &lt;FS_BUSINESS_KEY_INDEX&gt;-BUSINESS_KEY =
                    BUSINESS_KEY ) ).

            NEXT_INDEX = SY-TABIX + 1.

            modify RESULT from TEMP_OBJECT_REF
                          index &lt;FS_BUSINESS_KEY_INDEX&gt;-INDEX.

            read table BUSINESS_KEY_INDEX_TAB
                 index NEXT_INDEX
                 assigning &lt;FS_BUSINESS_KEY_INDEX&gt;.

          endwhile.

*         * 3.a. Completion in super class
          call method OS_PM_LOADED_PERSISTENT.

          clear CURRENT_SPECIAL_OBJECT_INFO.

        endloop.

      cleanup.
        call method OS_INTERNAL_UNDO.
        call method OS_CLEAR_CURRENT.
        clear CURRENT_SPECIAL_OBJECT_INFO.
    endtry.

*   * Clean-up internal Undo
    delete INTERNAL_TRANSACTION_STACK
           index INTERNAL_CURRENT_TRANSACTION.
    add -1 to INTERNAL_CURRENT_TRANSACTION.
    if ( INTERNAL_TRANSACTION_STACK is initial ).
      clear INTERNAL_UNDO_INFO.
      INTERNAL_NEXT_UNDO_INFO = 1.
    endif. &quot;( INTERNAL_TRANSACTION_STACK is initial? )

  endif.

* * 4. clean up

  clear CURRENT_SPECIAL_OBJECT_INFO.


           &quot;IF_OS_CA_PERSISTENCY~GET_PERSISTENT_BY_KEY_TAB
  endmethod.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCB_USFP_T_ASA_STKUP" CPDNAME="IF_OS_CA_PERSISTENCY~GET_PERSISTENT_BY_QUERY">
   <source>method IF_OS_CA_PERSISTENCY~GET_PERSISTENT_BY_QUERY.
***BUILD 093901
     &quot; importing I_QUERY type ref to IF_OS_QUERY
     &quot;           I_PARAMETER_TAB type OSTYP_DREF_TAB optional
     &quot;           I_PAR1 type ANY optional
     &quot;           I_PAR2 type ANY optional
     &quot;           I_PAR3 type ANY optional
     &quot;           I_SUBCLASSES type OS_BOOLEAN default OSCON_FALSE
     &quot;           I_UPTO type I default 0
     &quot;           I_OPTIONS type IF_OS_QUERY_OPTIONS default
     &quot;             IF_OS_QUERY_OPTIONS=&gt;DEFAULT_OPTIONS
     &quot; returning value(RESULT) type OSREFTAB
     &quot; raising   CX_OS_OBJECT_NOT_FOUND
     &quot;           CX_OS_QUERY_ERROR
************************************************************************
* Purpose        : Get persistent objects by Query
*
* Version        : 2.0
*
* Precondition   : --
*
* Postcondition  : For each instance that satifies the filter
*                  expression, there is a corresponding entry in the
*                  RESULT table. The persistent objects are active.
*
* OO Exceptions  : CX_OS_OBJECT_NOT_FOUND
*                    (DELETED_BY_BKEY,TRANSIENT_BY_BKEY)
*                  propagates PM_CHECK_AND_SET_ATTRIBUTES
*                  propagates OS_PM_LOADED_PERISISTENT
*
* Implementation : 1. Load data by query
*                  2. Set objects from data
*                  2a. Object found: Check PM_STATUS
*                  2b. Object not found, replace
*                  2c. Set attributes
*                  2d. Completion in super class
*                  3. clean up
*
************************************************************************
* Changelog:
* - 2004-03-25   : (SB)  Initial version
************************************************************************

  data: FLAG_NOT_LOADED  type OS_BOOLEAN,
        BKEY_STRING      type STRING,
        TEMP_OBJECT_REF  type TYP_OBJECT_REF,
        BUSINESS_KEY     type TYP_BUSINESS_KEY,
        OBJECT_DATA_TAB  type TYP_DB_DATA_TAB,
        QUERY            type ref to IF_OS_QRY_SERVICE,
        WHERE_CLAUSE     type STRING,
        ORDER_BY_CLAUSE  type STRING.

  data: TEMP_CURRENT_OBJECT_IREF type ref to OBJECT.

  field-symbols: &lt;FS_OBJECT_DATA&gt;  type TYP_DB_DATA.

* * 1. Load data with query

  try.
      call method MAP_INITIALIZE_METADATA.

      QUERY ?= I_QUERY.

      call method QUERY-&gt;MAP
           exporting I_CLASS_AGENT = ME
                     I_MAP_ATT_TAB = MAP_ATT_INFO_TAB.

      call method QUERY-&gt;GET_ORDER_BY_CLAUSE
           receiving RESULT = ORDER_BY_CLAUSE.

      if ( I_PARAMETER_TAB is supplied ).

        if ( ( I_PAR1 is supplied ) or
             ( I_PAR2 is supplied ) or
             ( I_PAR3 is supplied ) ).

          raise exception type CX_OS_QUERY_PARAMETER_ERROR
            exporting TEXTID = CX_OS_QUERY_PARAMETER_ERROR=&gt;CALL_ERROR.

        endif.

        call method QUERY-&gt;GET_WHERE_CLAUSE
             exporting I_PARAMETER_TAB = I_PARAMETER_TAB
             receiving RESULT = WHERE_CLAUSE.

        call method MAP_LOAD_FROM_DATABASE
             exporting I_WHERE_CLAUSE    = WHERE_CLAUSE
                       I_ORDER_BY_CLAUSE = ORDER_BY_CLAUSE
                       I_SUBCLASSES      = I_SUBCLASSES
                       I_UPTO            = I_UPTO
             receiving result = OBJECT_DATA_TAB.

      else.

        call method QUERY-&gt;GET_WHERE_CLAUSE
             receiving RESULT = WHERE_CLAUSE.

        call method MAP_LOAD_FROM_DATABASE
             exporting I_WHERE_CLAUSE    = WHERE_CLAUSE
                       I_ORDER_BY_CLAUSE = ORDER_BY_CLAUSE
                       I_SUBCLASSES      = I_SUBCLASSES
                       I_UPTO            = I_UPTO
                       PAR1              = I_PAR1
                       PAR2              = I_PAR2
                       PAR3              = I_PAR3
             receiving result = OBJECT_DATA_TAB.

      endif.
    catch CX_OS_DB_SELECT.
      clear OBJECT_DATA_TAB.
  endtry.

* * 2. Set objects from data

  try.

*     * internal Undo
      append INTERNAL_NEXT_UNDO_INFO to INTERNAL_TRANSACTION_STACK.
      INTERNAL_CURRENT_TRANSACTION = SY-TABIX.

      loop at OBJECT_DATA_TAB assigning &lt;FS_OBJECT_DATA&gt;.

        call method MAP_EXTRACT_IDENTIFIER
             exporting I_DB_DATA  = &lt;FS_OBJECT_DATA&gt;
             importing E_BUSINESS_KEY = BUSINESS_KEY.

        clear CURRENT_OBJECT_IREF.

        read table SPECIAL_BKEY_TAB into CURRENT_SPECIAL_OBJECT_INFO
           with table key BUSINESS_KEY = BUSINESS_KEY.

        if ( SY-SUBRC = 0 ).

          read table SPECIAL_OBJECT_INFO
               into CURRENT_SPECIAL_OBJECT_INFO
               with table key
               OBJECT_ID = CURRENT_SPECIAL_OBJECT_INFO-OBJECT_ID.
          call method OS_LOAD_AND_VALIDATE_CURRENT
               exporting I_INDEX = SY-TABIX.

        endif.

        if ( not CURRENT_OBJECT_IREF is initial ).

*       * 2a. Object found: Check PM_STATUS

          case CURRENT_OBJECT_INFO-PM_STATUS.

*         * 2a1. If Status is DELETED, ignore or raise exception!
          when OSCON_OSTATUS_DELETED.

            if ( I_OPTIONS-DATABASE_QUERY_OPTIONS O
                 IF_OS_QUERY_OPTIONS=&gt;IGNORE_DELETED ).

              call method OS_CLEAR_CURRENT.
              continue.

            endif.

* !!!!!!!! Error: Object activation failed - Object marked for deletion
            TEMP_CURRENT_OBJECT_IREF = CURRENT_OBJECT_IREF.
            BKEY_STRING  = MAP_SERIALIZE_BKEY( BUSINESS_KEY ).
            call method OS_CLEAR_CURRENT.
            clear CURRENT_SPECIAL_OBJECT_INFO.
            class CX_OS_OBJECT_NOT_FOUND definition load.
            raise exception type CX_OS_OBJECT_NOT_FOUND
              exporting
                OBJECT = TEMP_CURRENT_OBJECT_IREF
                BKEY   = BKEY_STRING
                TEXTID = CX_OS_OBJECT_NOT_FOUND=&gt;DELETED_BY_BKEY.

*         * 2a2. If Status is TRANSIENT, error!
          when OSCON_OSTATUS_TRANSIENT.

* !!!!!!!!!! Error: Object activation failed - Object is transient
            TEMP_CURRENT_OBJECT_IREF = CURRENT_OBJECT_IREF.
            BKEY_STRING  = MAP_SERIALIZE_BKEY( BUSINESS_KEY ).
            call method OS_CLEAR_CURRENT.
            clear CURRENT_SPECIAL_OBJECT_INFO.
            class CX_OS_OBJECT_NOT_FOUND definition load.
            raise exception type CX_OS_OBJECT_NOT_FOUND
              exporting
                OBJECT = TEMP_CURRENT_OBJECT_IREF
                BKEY   = BKEY_STRING
                TEXTID = CX_OS_OBJECT_NOT_FOUND=&gt;IS_TRANSIENT_BY_BKEY.

*         * 2a3. If Status is CHANGED, don&apos;t replace or raise exception!
          when OSCON_OSTATUS_CHANGED.

            if ( I_OPTIONS-DATABASE_QUERY_OPTIONS O
                 IF_OS_QUERY_OPTIONS=&gt;REJECT_CHANGED ).

* !!!!!!!! Error: Object activation failed - Object marked as changed
            TEMP_CURRENT_OBJECT_IREF = CURRENT_OBJECT_IREF.
            BKEY_STRING  = MAP_SERIALIZE_BKEY( BUSINESS_KEY ).
            call method OS_CLEAR_CURRENT.
            clear CURRENT_SPECIAL_OBJECT_INFO.
            class CX_OS_OBJECT_NOT_FOUND definition load.
            raise exception type CX_OS_OBJECT_NOT_FOUND
              exporting
                OBJECT = TEMP_CURRENT_OBJECT_IREF
                BKEY   = BKEY_STRING
                TEXTID = CX_OS_OBJECT_NOT_FOUND=&gt;CHANGED_BY_BKEY.

            endif.

            FLAG_NOT_LOADED = OSCON_FALSE.

*         * 2a4. If Status is NOT_LOADED, replace
          when OSCON_OSTATUS_NOT_LOADED.

            FLAG_NOT_LOADED = OSCON_TRUE.

*         * 2a5. If Status is NEW or LOADED, don&apos;t replace
          when others.

            FLAG_NOT_LOADED = OSCON_FALSE.

          endcase.

        else.&quot; ( CURRENT_OBJECT_IREF is initial )

*       * 2b. Object not found, replace

          FLAG_NOT_LOADED = OSCON_TRUE.

        endif.

        TEMP_OBJECT_REF ?= CURRENT_OBJECT_IREF.

        if ( FLAG_NOT_LOADED = OSCON_TRUE ).

*         * 2c. Set attributes
          call method PM_CHECK_AND_SET_ATTRIBUTES
               exporting I_OBJECT_DATA  = &lt;FS_OBJECT_DATA&gt;
                         I_ID_PROVIDED  = ID_STATUS_NONE.

          TEMP_OBJECT_REF ?= CURRENT_OBJECT_IREF.

*         * 2d. Completion in super class
          call method OS_PM_LOADED_PERSISTENT.

        endif.

        append TEMP_OBJECT_REF to RESULT.

        call method OS_CLEAR_CURRENT.

      endloop.

*     * Clean-up internal Undo
      delete INTERNAL_TRANSACTION_STACK
             index INTERNAL_CURRENT_TRANSACTION.
      add -1 to INTERNAL_CURRENT_TRANSACTION.
      if ( INTERNAL_TRANSACTION_STACK is initial ).
        clear INTERNAL_UNDO_INFO.
        INTERNAL_NEXT_UNDO_INFO = 1.
      endif. &quot;( INTERNAL_TRANSACTION_STACK is initial? )

    cleanup.
      call method OS_INTERNAL_UNDO.
      call method OS_CLEAR_CURRENT.
      clear CURRENT_SPECIAL_OBJECT_INFO.
  endtry.

* * 3. clean up

  clear CURRENT_SPECIAL_OBJECT_INFO.


           &quot;IF_OS_CA_PERSISTENCY~GET_PERSISTENT_BY_QUERY
  endmethod.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCB_USFP_T_ASA_STKUP" CPDNAME="IF_OS_CA_SERVICE~SAVE">
   <source>method IF_OS_CA_SERVICE~SAVE.
***BUILD 090501
************************************************************************
* Purpose        : Prepare data for database (buffer) transfer
*
* Version        : 2.0
*
* Precondition   : --
*
* Postcondition  : data is prepared for saving
*                  if UPDATE_MODE is direct, it is saved to DB
*                  if UPDATE_MODE is LOCAL or UPDATE_TASK,
*                    the corresponding function call is registered
*
* OO Exceptions  : propagates MAP_SAVE_TO_DATABASE
*                  propagates MAP_GET_ATTRIBUTES.
*
* Implementation :
*
************************************************************************
* Changelog:
* - 2000-03-02   : (BGR) Initial Version
* - 2000-08-02   : (SB) OO Exceptions
* - 2001-01-06   : (SB) Update with EXPORT TO DATA BUFFER
* - 2003-03-20   : (SB) post only if there dirty instances
************************************************************************

  data: NEW_OBJECT_REF_TAB       type TYP_OBJECT_REF_TAB,
        CHANGED_OBJECT_REF_TAB   type TYP_OBJECT_REF_TAB,
        INSERT_DATA_TAB          type TYP_DB_DATA_TAB ,
        INSERT_KEY_TAB           type TYP_BUSINESS_KEY_TAB,
        UPDATE_DATA_TAB          type TYP_DB_DATA_TAB ,
        UPDATE_KEY_TAB           type TYP_BUSINESS_KEY_TAB,
        DELETE_TAB               type TYP_DB_DELETE_TAB ,
        UPDATE_MODE              type OS_DMODE,
        OBJECT_REF               type TYP_OBJECT_REF,
        OBJECT_INDEX             type TYP_INDEX,
        XCONTAINER               type XSTRING.

  field-symbols:
          &lt;FS_OBJECT_INFO_ITEM&gt;         type TYP_OBJECT_INFO,
          &lt;FS_SPECIAL_OBJECT_INFO_ITEM&gt; type TYP_SPECIAL_OBJECT_INFO.

* * 1. get strong reference, BKey for all objects with status
* *    NEW, CHANGED or DELETED

  loop at OBJECT_INFO assigning &lt;FS_OBJECT_INFO_ITEM&gt; &quot;#EC CI_SORTSEQ
       where ( PM_STATUS = OSCON_OSTATUS_NEW or       &quot;#EC CI_SORTSEQ
               PM_STATUS = OSCON_OSTATUS_CHANGED or   &quot;#EC CI_SORTSEQ
               PM_STATUS = OSCON_OSTATUS_DELETED ) and &quot;#EC CI_SORTSEQ
               OM_IGNORE = OSCON_FALSE.               &quot;#EC CI_SORTSEQ

    OBJECT_INDEX = sy-tabix.

    case &lt;FS_OBJECT_INFO_ITEM&gt;-PM_STATUS.

      when OSCON_OSTATUS_NEW.

        read table SPECIAL_OBJECT_INFO
             assigning &lt;FS_SPECIAL_OBJECT_INFO_ITEM&gt;
             index OBJECT_INDEX.

        OBJECT_REF ?= &lt;FS_OBJECT_INFO_ITEM&gt;-OBJECT_IREF.
        append OBJECT_REF
            to NEW_OBJECT_REF_TAB.
        append &lt;FS_SPECIAL_OBJECT_INFO_ITEM&gt;-BUSINESS_KEY
            to INSERT_KEY_TAB.

      when OSCON_OSTATUS_CHANGED.

        read table SPECIAL_OBJECT_INFO
             assigning &lt;FS_SPECIAL_OBJECT_INFO_ITEM&gt;
             index OBJECT_INDEX.

        OBJECT_REF ?= &lt;FS_OBJECT_INFO_ITEM&gt;-OBJECT_IREF.
        append OBJECT_REF
            to CHANGED_OBJECT_REF_TAB.
        append &lt;FS_SPECIAL_OBJECT_INFO_ITEM&gt;-BUSINESS_KEY
            to UPDATE_KEY_TAB.

      when OSCON_OSTATUS_DELETED.

        read table SPECIAL_OBJECT_INFO
             assigning &lt;FS_SPECIAL_OBJECT_INFO_ITEM&gt;
             index OBJECT_INDEX.

        append &lt;FS_SPECIAL_OBJECT_INFO_ITEM&gt; to DELETE_TAB.

    endcase.&quot; Status

  endloop. &quot;at OBJECT_INFO


* * 2. get attributes for new and changed objects

* * New Objects
  if ( not NEW_OBJECT_REF_TAB is initial ).

    call method MAP_GET_ATTRIBUTES
         exporting I_OBJECT_REF_TAB  = NEW_OBJECT_REF_TAB
         importing E_OBJECT_DATA_TAB = INSERT_DATA_TAB.

    call method MAP_MERGE_IDENTIFIER
         exporting I_BUSINESS_KEY_TAB = INSERT_KEY_TAB
         changing  C_DB_DATA_TAB      = INSERT_DATA_TAB.

  endif. &quot;( not NEW_OBJECT_REF_TAB is initial ).

* * Changed Objects
  if ( not CHANGED_OBJECT_REF_TAB is initial ).

    call method MAP_GET_ATTRIBUTES
         exporting I_OBJECT_REF_TAB  = CHANGED_OBJECT_REF_TAB
         importing E_OBJECT_DATA_TAB = UPDATE_DATA_TAB.

    call method MAP_MERGE_IDENTIFIER
         exporting I_BUSINESS_KEY_TAB = UPDATE_KEY_TAB
         changing  C_DB_DATA_TAB      = UPDATE_DATA_TAB.

  endif. &quot;( not CHANGED_OBJECT_REF_TAB is initial ).

* * 3. perform or subscribe DB operations

  if ( ( INSERT_DATA_TAB is not initial ) or
       ( UPDATE_DATA_TAB is not initial ) or
       ( DELETE_TAB is not initial ) ).

    UPDATE_MODE = PERSISTENCY_MANAGER-&gt;GET_UPDATE_MODE(  ).
    if ( UPDATE_MODE = DMODE_DIRECT ).

*     * Direct DB operations
      call method MAP_SAVE_TO_DATABASE
           exporting I_INSERTS = INSERT_DATA_TAB
                     I_UPDATES = UPDATE_DATA_TAB
                     I_DELETES = DELETE_TAB.

    else.&quot; ( Update task )

*     * export data to be saved to DB to data buffer
      export
        INSERT_DATA_TAB = INSERT_DATA_TAB
        UPDATE_DATA_TAB = UPDATE_DATA_TAB
        DELETE_TAB      = DELETE_TAB
          to data buffer XCONTAINER.

*     * call update function in update task. this function
*     * calls the method if_os_ca_service~save_in_update_task
*     * of this class agent.
      call function &apos;OS_UPDATE_CLASS&apos; in update task
        exporting
          CLASSNAME = CLASS_INFO-CLASS_AGENT_NAME
          XCONTAINER = XCONTAINER.

    endif.&quot; (Update mode?)

  endif.&quot; (something to post?)

           &quot;IF_OS_CA_SERVICE~SAVE
  endmethod.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCB_USFP_T_ASA_STKUP" CPDNAME="IF_OS_CA_SERVICE~SAVE_IN_UPDATE_TASK">
   <source>method IF_OS_CA_SERVICE~SAVE_IN_UPDATE_TASK.
***BUILD 090501
     &quot; importing XCONTAINER type XSTRING optional
************************************************************************
* Purpose        : save object data to DB when running in update task
*                  mode.
*
* Version        : 2.0
*
* Precondition   : no object service environment is set, no objects
*                  exist in update task
*
* Postcondition  : data has been saved to DB
*
* OO Exceptions  : propagates MAP_SAVE_TO_DATABASE
*
* Implementation :
*
************************************************************************
* Changelog:
* - 2000-03-02   : (BGR) Initial Version
* - 2000-08-02   : (SB) OO Exceptions
* - 2001-01-06   : (SB) Update with EXPORT TO DATA BUFFER
************************************************************************

  data: INSERT_DATA_TAB       type TYP_DB_DATA_TAB ,
        UPDATE_DATA_TAB       type TYP_DB_DATA_TAB ,
        DELETE_TAB            type TYP_DB_DELETE_TAB .

* * import data to be saved to DB from data buffer
  import
    INSERT_DATA_TAB = INSERT_DATA_TAB
    UPDATE_DATA_TAB = UPDATE_DATA_TAB
    DELETE_TAB      = DELETE_TAB
      from data buffer XCONTAINER.

* * store them to DB
  call method MAP_SAVE_TO_DATABASE
       exporting I_INSERTS = INSERT_DATA_TAB
                 I_UPDATES = UPDATE_DATA_TAB
                 I_DELETES = DELETE_TAB.

           &quot;IF_OS_CA_SERVICE~SAVE_IN_UPDATE_TASK
  endmethod.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCB_USFP_T_ASA_STKUP" CPDNAME="IF_OS_FACTORY~CREATE_PERSISTENT_BY_KEY">
   <source>method IF_OS_FACTORY~CREATE_PERSISTENT_BY_KEY.
***BUILD 093901
*      importing I_KEY type any
*      returning result type ref to object
************************************************************************
* Purpose        : Create a new persistent object identified by the
*                  given business key
*
* Version        : 2.0
*
* Precondition   : No object exists with the given business key, neither
*                  in memory nor on database.
*
* Postcondition  : The object exists in memory and will result in a
*                  new entry on database when the top transaction is
*                  closed.
*
* OO Exceptions  : propagates CREATE_PERSISTENT
*
* Implementation : call CREATE_PERSISTENT
*
************************************************************************
* Changelog:
* - 2000-03-06   : (BGR) Initial Version 2.0
* - 2000-08-02   : (SB)  OO Exceptions
************************************************************************

  data: BUSINESS_KEY             type TYP_BUSINESS_KEY.

  BUSINESS_KEY = I_KEY.

*&lt; Generated from mapping:
  call method CREATE_PERSISTENT
       exporting I_AEDAT = BUSINESS_KEY-AEDAT
                 I_UNAME = BUSINESS_KEY-UNAME
       receiving RESULT = RESULT.
*&gt;

           &quot;IF_OS_FACTORY~CREATE_PERSISTENT_BY_KEY
  endmethod.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCB_USFP_T_ASA_STKUP" CPDNAME="IF_OS_FACTORY~CREATE_TRANSIENT_BY_KEY">
   <source>method IF_OS_FACTORY~CREATE_TRANSIENT_BY_KEY.
***BUILD 093901
*      importing I_KEY type any
*      returning result type ref to object
************************************************************************
* Purpose        : Create a new transient object identified by the
*                  given business key
*
* Version        : 2.0
*
* Precondition   : No object exists with the given business key
*
* Postcondition  : The object exists in memory
*
* OO Exceptions  : propagates CREATE_TRANSIENT
*
* Implementation : call CREATE_TRANSIENT
*
************************************************************************
* Changelog:
* - 2001-01-01   : (SB)  Initial Version 2.0
************************************************************************

  data: BUSINESS_KEY             type TYP_BUSINESS_KEY.

  BUSINESS_KEY = I_KEY.

*&lt; Generated from mapping:
  call method CREATE_TRANSIENT
       exporting I_AEDAT = BUSINESS_KEY-AEDAT
                 I_UNAME = BUSINESS_KEY-UNAME
       receiving RESULT = RESULT.
*&gt;

           &quot;IF_OS_FACTORY~CREATE_TRANSIENT_BY_KEY
  endmethod.</source>
  </interfaceMethod>
  <method CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="CREATE_PERSISTENT" VERSION="1" LANGU="E" DESCRIPT="Generate New Persistent Object with Key" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="CREATE_PERSISTENT" SCONAME="I_AEDAT" VERSION="1" LANGU="E" DESCRIPT="Business Key" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="RSCRMTSTMP"/>
   <parameter CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="CREATE_PERSISTENT" SCONAME="I_UNAME" VERSION="1" LANGU="E" DESCRIPT="Business Key" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="UNAME"/>
   <parameter CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="CREATE_PERSISTENT" SCONAME="RESULT" VERSION="1" LANGU="E" DESCRIPT="Newly Generated Persistent Object" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_USFP_T_ASA_STKUP"/>
   <exception CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="CREATE_PERSISTENT" SCONAME="CX_OS_OBJECT_EXISTING" VERSION="1" LANGU="E" DESCRIPT="Object Services Exception" MTDTYPE="0" EDITORDER="0 "/>
   <source>method CREATE_PERSISTENT.
***BUILD 093901
*      IMPORTING I_AEDAT TYPE RSCRMTSTMP
*      IMPORTING I_UNAME TYPE UNAME
*      RETURNING RESULT TYPE REF TO ZCL_USFP_T_ASA_STKUP
************************************************************************
* Purpose        : Create a new persistent object identified by the
*                  given business key
*
* Version        : 2.0
*
* Precondition   : No object exists with the given business key, neither
*                  in memory nor on database.
*
* Postcondition  : The object exists in memory and will result in a
*                  new entry on database when the top transaction is
*                  closed.
*
* OO Exceptions  : CX_OS_OBJECT_EXISTING(
*                            PERSISTENT_CREATING_PERSISTENT,
*                            TRANSIENT_CREATING_PERSISTENT)
*                  propagates OS_PM_CREATED_PERSISTENT
*
* Implementation : 1. Check if there is already an object with the
*                     same key
*                  2. If there is one, let OS_PM_HANDLE_CREATE_ON_EXIST
*                     decide if it is allowed to re-use the object
*                  3. If there is none, create a new object
*                  4. Set Attributes
*                  5. Register the object as NEW and initialize it
*                  6. Clean up
*
************************************************************************
* Changelog:
* - 2000-03-06   : (BGR) Initial Version 2.0
* - 2000-08-03   : (SB)  OO Exceptions
* - 2001-01-10   : (SB)  persistent attributes as optional parameters
* - 2001-10-30   : (SB)  type mapping
* - 2002-01-17   : (SB)  private attributes in super classes
* - 2003-04-28   : (SB)  reuse of instances reimplemented
************************************************************************

  data: THE_OBJECT   type        TYP_OBJECT_REF,
        BUSINESS_KEY type        TYP_BUSINESS_KEY,
        BKEY_STRING  type        STRING.

  data: TEMP_CURRENT_OBJECT_IREF type ref to object.

  clear CURRENT_OBJECT_IREF.

*&lt; Generated from mapping:
  BUSINESS_KEY-AEDAT = I_AEDAT.
  BUSINESS_KEY-UNAME = I_UNAME.
*&gt;

* * 1. Check if there is already an object with this key
  read table SPECIAL_BKEY_TAB into CURRENT_SPECIAL_OBJECT_INFO
       with table key BUSINESS_KEY = BUSINESS_KEY.

  if ( SY-SUBRC = 0 ).

    read table SPECIAL_OBJECT_INFO into CURRENT_SPECIAL_OBJECT_INFO
         with table key
         OBJECT_ID = CURRENT_SPECIAL_OBJECT_INFO-OBJECT_ID.
    call method OS_LOAD_AND_VALIDATE_CURRENT
         exporting I_INDEX = SY-TABIX.

  endif. &quot;( entry found )

  if ( not CURRENT_OBJECT_IREF is initial ).

*   * 2. Found an entry. Check if it is allowed to re-use it
    THE_OBJECT ?= CURRENT_OBJECT_IREF.

    case CURRENT_OBJECT_INFO-PM_STATUS.

    when OSCON_OSTATUS_DELETED or
        OSCON_OSTATUS_NOT_LOADED.

      try.

*&lt;  Generated from mapping:
          THE_OBJECT-&gt;AEDAT = I_AEDAT.
          THE_OBJECT-&gt;UNAME = I_UNAME.
*&gt;

          call method OS_PM_HANDLE_CREATE_ON_EXIST
               exporting I_TRANSIENT = OSCON_FALSE.

        cleanup.
          clear CURRENT_SPECIAL_OBJECT_INFO.
          call method OS_CLEAR_CURRENT.
      endtry.

    when OSCON_OSTATUS_TRANSIENT.

      TEMP_CURRENT_OBJECT_IREF = CURRENT_OBJECT_IREF.
      BKEY_STRING  = MAP_SERIALIZE_BKEY( BUSINESS_KEY ).
      call method OS_CLEAR_CURRENT.
      clear CURRENT_SPECIAL_OBJECT_INFO.
      class CX_OS_OBJECT_EXISTING definition load.
      raise exception type CX_OS_OBJECT_EXISTING
        exporting
          OBJECT = TEMP_CURRENT_OBJECT_IREF
          BKEY   = BKEY_STRING
          TEXTID =
            CX_OS_OBJECT_EXISTING=&gt;TRANSIENT_CREATING_PERSISTENT.

    when others.

      TEMP_CURRENT_OBJECT_IREF = CURRENT_OBJECT_IREF.
      BKEY_STRING  = MAP_SERIALIZE_BKEY( BUSINESS_KEY ).
      call method OS_CLEAR_CURRENT.
      clear CURRENT_SPECIAL_OBJECT_INFO.
      class CX_OS_OBJECT_EXISTING definition load.
      raise exception type CX_OS_OBJECT_EXISTING
        exporting
          OBJECT = TEMP_CURRENT_OBJECT_IREF
          BKEY   = BKEY_STRING
          TEXTID =
            CX_OS_OBJECT_EXISTING=&gt;PERSISTENT_CREATING_PERSISTENT.

    endcase.

  else. &quot;( No entry found )

*   * 3. Create a new object
    THE_OBJECT = PM_CREATE_REPRESENTANT(
                   I_BUSINESS_KEY = BUSINESS_KEY ).

*   * 4. Set attributes
*&lt;   Generated from mapping:
*&gt;

*   * 5. register object as &apos;NEW&apos; and initialize it.
    call method OS_PM_CREATED_PERSISTENT.

  endif. &quot;( Eintrag vorhanden )

* * 6. Clean-up
  clear CURRENT_SPECIAL_OBJECT_INFO.
  RESULT = THE_OBJECT.

           &quot;CREATE_PERSISTENT
  endmethod.</source>
  </method>
  <method CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="CREATE_TRANSIENT" VERSION="1" LANGU="E" DESCRIPT="Generate Transient Object with Key" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="CREATE_TRANSIENT" SCONAME="I_AEDAT" VERSION="1" LANGU="E" DESCRIPT="Business Key" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="RSCRMTSTMP"/>
   <parameter CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="CREATE_TRANSIENT" SCONAME="I_UNAME" VERSION="1" LANGU="E" DESCRIPT="Business Key" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="UNAME"/>
   <parameter CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="CREATE_TRANSIENT" SCONAME="RESULT" VERSION="1" LANGU="E" DESCRIPT="Newly Generated Transient Object" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_USFP_T_ASA_STKUP"/>
   <exception CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="CREATE_TRANSIENT" SCONAME="CX_OS_OBJECT_EXISTING" VERSION="1" LANGU="E" DESCRIPT="Object Services Exception" MTDTYPE="0" EDITORDER="0 "/>
   <source>method CREATE_TRANSIENT.
***BUILD 093901
*      IMPORTING I_AEDAT TYPE RSCRMTSTMP
*      IMPORTING I_UNAME TYPE UNAME
*      RETURNING RESULT TYPE REF TO ZCL_USFP_T_ASA_STKUP
************************************************************************
* Purpose        : Create a new transient object identified by the
*                  given business key
*
* Version        : 2.0
*
* Precondition   : No object exists with the given business key, neither
*                  in memory nor on database.
*
* Postcondition  : The object exists in memory until it is RELEASEd
*
* OO Exceptions  : CX_OS_OBJECT_EXISTING(
*                            PERSISTENT_CREATING_TRANSIENT,
*                            TRANSIENT_CREATING_TRANSIENT)
*                  propagates OS_PM_CREATED_TRANSIENT
*
* Implementation : 1. Check if there is already an object with the
*                     same key
*                  2. If there is one, let OS_PM_HANDLE_CREATE_ON_EXIST
*                     decide if it is allowed to re-use the object
*                  3. If there is none, create a new object
*                  4. Set Attributes
*                  5. Register the object as TRANSIENT and initialize it
*                  6. Clean up
*
************************************************************************
* Changelog:
* - 2000-03-06   : (BGR) Initial Version 2.0
* - 2000-08-02   : (SB)  OO Exceptions
* - 2001-01-10   : (SB)  persistent attributes as optional parameters
* - 2001-10-30   : (SB)  type mapping
* - 2002-01-17   : (SB)  private attributes in super classes
* - 2003-04-28   : (SB)  reuse of instances reimplemented
************************************************************************

  data: THE_OBJECT   type        TYP_OBJECT_REF,
        BUSINESS_KEY type        TYP_BUSINESS_KEY,
        BKEY_STRING  type        STRING.

  data: TEMP_CURRENT_OBJECT_IREF type ref to object.

  clear CURRENT_OBJECT_IREF.

*&lt; Generated from mapping:
  BUSINESS_KEY-AEDAT = I_AEDAT.
  BUSINESS_KEY-UNAME = I_UNAME.
*&gt;

* * 1. Check if there is already an object with the same key

  read table SPECIAL_BKEY_TAB into CURRENT_SPECIAL_OBJECT_INFO
       with table key BUSINESS_KEY = BUSINESS_KEY.

  if ( SY-SUBRC = 0 ).

    read table SPECIAL_OBJECT_INFO into CURRENT_SPECIAL_OBJECT_INFO
         with table key
         OBJECT_ID = CURRENT_SPECIAL_OBJECT_INFO-OBJECT_ID.
    call method OS_LOAD_AND_VALIDATE_CURRENT
         exporting I_INDEX = SY-TABIX.

  endif. &quot;( entry found )

  if ( not CURRENT_OBJECT_IREF is initial ).

*   * 2. Found an entry. Check if it is allowed to re-use it
    THE_OBJECT ?= CURRENT_OBJECT_IREF.

    case CURRENT_OBJECT_INFO-PM_STATUS.

    when OSCON_OSTATUS_DELETED or
        OSCON_OSTATUS_NOT_LOADED.

      try.

*&lt;  Generated from mapping:
          THE_OBJECT-&gt;AEDAT = I_AEDAT.
          THE_OBJECT-&gt;UNAME = I_UNAME.
*&gt;

          call method OS_PM_HANDLE_CREATE_ON_EXIST
               exporting I_TRANSIENT = OSCON_TRUE.

        cleanup.
          clear CURRENT_SPECIAL_OBJECT_INFO.
          call method OS_CLEAR_CURRENT.
      endtry.

    when OSCON_OSTATUS_TRANSIENT.

      TEMP_CURRENT_OBJECT_IREF = CURRENT_OBJECT_IREF.
      BKEY_STRING  = MAP_SERIALIZE_BKEY( BUSINESS_KEY ).
      call method OS_CLEAR_CURRENT.
      clear CURRENT_SPECIAL_OBJECT_INFO.
      class CX_OS_OBJECT_EXISTING definition load.
      raise exception type CX_OS_OBJECT_EXISTING
        exporting
          OBJECT = TEMP_CURRENT_OBJECT_IREF
          BKEY   = BKEY_STRING
          TEXTID =
            CX_OS_OBJECT_EXISTING=&gt;TRANSIENT_CREATING_TRANSIENT.

    when others.

      TEMP_CURRENT_OBJECT_IREF = CURRENT_OBJECT_IREF.
      BKEY_STRING  = MAP_SERIALIZE_BKEY( BUSINESS_KEY ).
      call method OS_CLEAR_CURRENT.
      clear CURRENT_SPECIAL_OBJECT_INFO.
      class CX_OS_OBJECT_EXISTING definition load.
      raise exception type CX_OS_OBJECT_EXISTING
        exporting
          OBJECT = TEMP_CURRENT_OBJECT_IREF
          BKEY   = BKEY_STRING
          TEXTID =
            CX_OS_OBJECT_EXISTING=&gt;PERSISTENT_CREATING_TRANSIENT.

    endcase.

  else. &quot;( Noch kein Eintrag )

*   * 3. If there is none, create a new object
    THE_OBJECT = PM_CREATE_REPRESENTANT(
                   I_BUSINESS_KEY = BUSINESS_KEY ).

*   * 4. Set attributes
*&lt;   Generated from mapping:
*&gt;

*   * 5. Register the object as TRANSIENT and initialize it
    call method OS_PM_CREATED_TRANSIENT.

  endif. &quot;( Eintrag vorhanden )

* * 6. Clean up
  clear CURRENT_SPECIAL_OBJECT_INFO.
  RESULT = THE_OBJECT.

           &quot;CREATE_TRANSIENT
  endmethod.</source>
  </method>
  <method CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="DELETE_PERSISTENT" VERSION="1" LANGU="E" DESCRIPT="Deletes Persistent Object with Key" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="DELETE_PERSISTENT" SCONAME="I_AEDAT" VERSION="1" LANGU="E" DESCRIPT="Business Key" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="RSCRMTSTMP"/>
   <parameter CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="DELETE_PERSISTENT" SCONAME="I_UNAME" VERSION="1" LANGU="E" DESCRIPT="Business Key" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="UNAME"/>
   <exception CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="DELETE_PERSISTENT" SCONAME="CX_OS_OBJECT_NOT_EXISTING" VERSION="1" LANGU="E" DESCRIPT="Object Services Exception" MTDTYPE="0" EDITORDER="0 "/>
   <source>method DELETE_PERSISTENT.
***BUILD 093901
*      IMPORTING I_AEDAT TYPE RSCRMTSTMP.
*      IMPORTING I_UNAME TYPE UNAME.
*      raising   CX_OS_OBJECT_NOT_EXISTING
************************************************************************
* Purpose        : Delete persistent object. It is marked DELETED in
*                  memory and removed from DB when the top transaction
*                  is closed.
*
* Version        : 2.0
*
* Precondition   : The object is persistent (not transient)
*
* Postcondition  : Instance is marked for deletion.
*
* OO Exceptions  : CX_OS_OBJECT_NOT_EXISTING(TRANSIENT_BY_BKEY,
*                  CREATED_AND_DELETED_BY_BKEY,BY_BKEY)
*                  ( propagates PM_LOAD_AND_SET_ATTRIBUTES )
*                  propagates PM_DELETE_PERSISTENT
*
* Implementation : 1. Check if there is already an object with that
*                     business key
*                  2. If not: create representative object and check
*                     if there is an entry on DB (Need to be sure that
*                     no other object exists with the OID that belongs
*                     to the given Business Key)
*                  3. If it already exists: call PM_DELETE_PERSISTENT
*
************************************************************************
* Changelog:
* - 1999-09-21   : (OS)  Initial Version
* - 2000-03-06   : (BGR) Version 2.0
* - 2000-08-03   : (SB)  OO Exceptions
* - 2000-10-30   : (SB)  Type Mapping
************************************************************************

  data: BUSINESS_KEY type TYP_BUSINESS_KEY .
  data: EX_OS_OBJECT_NOT_FOUND type ref to CX_OS_OBJECT_NOT_FOUND.
  data: EX_OS_OBJECT_STATE type ref to CX_OS_OBJECT_STATE.
  data: BKEY_STRING type STRING.

* 1. Check if there is already an object with that business key

  clear: CURRENT_OBJECT_IREF,
         CURRENT_SPECIAL_OBJECT_INFO.

*&lt; Generated from mapping:
  BUSINESS_KEY-AEDAT = I_AEDAT.
  BUSINESS_KEY-UNAME = I_UNAME.
*&gt;

  read table SPECIAL_BKEY_TAB into CURRENT_SPECIAL_OBJECT_INFO
       with table key BUSINESS_KEY = BUSINESS_KEY.

  if ( SY-SUBRC = 0 ).

    read table SPECIAL_OBJECT_INFO into CURRENT_SPECIAL_OBJECT_INFO
         with table key
         OBJECT_ID = CURRENT_SPECIAL_OBJECT_INFO-OBJECT_ID.
    call method OS_LOAD_AND_VALIDATE_CURRENT
         exporting I_INDEX = SY-TABIX.

  endif.

  if ( CURRENT_OBJECT_IREF is initial ).

*   * 2. If not: create representative object and check
*   *    if there is an entry on DB (Need to be sure that
*   *    no other object exists with the OID that belongs
*   *    to the given Business Key)

    try.

        call method PM_LOAD_AND_SET_ATTRIBUTES
             exporting I_BUSINESS_KEY = BUSINESS_KEY.

      catch CX_OS_OBJECT_NOT_FOUND into EX_OS_OBJECT_NOT_FOUND.
*       * If the object is not found by key - raise object not existing
*       * by key. If a reference has a illegal class GUID (i.e. object
*       * not found by ref error) - ignore.
        if ( EX_OS_OBJECT_NOT_FOUND-&gt;TEXTID =
             CX_OS_OBJECT_NOT_FOUND=&gt;BY_BKEY ).
          call method OS_CLEAR_CURRENT.
          class CX_OS_OBJECT_NOT_EXISTING definition load.
          raise exception type CX_OS_OBJECT_NOT_EXISTING
            exporting
              BKEY   = EX_OS_OBJECT_NOT_FOUND-&gt;BKEY
              TABLE  = EX_OS_OBJECT_NOT_FOUND-&gt;TABLE
              TEXTID = CX_OS_OBJECT_NOT_EXISTING=&gt;BY_BKEY.
        endif.

      cleanup.
        call method OS_CLEAR_CURRENT.

    endtry.



  endif.&quot; ( No Entry in administrative data? )


* * 3. If it already exists: call PM_DELETE_PERSISTENT
  if not ( CURRENT_OBJECT_IREF is initial ).

    try.

        call method PM_DELETE_PERSISTENT.

      catch CX_OS_OBJECT_STATE into EX_OS_OBJECT_STATE.
      if ( EX_OS_OBJECT_STATE-&gt;TEXTID =
           CX_OS_OBJECT_STATE=&gt;TRANSIENT ).
        BKEY_STRING  = MAP_SERIALIZE_BKEY( BUSINESS_KEY ).
        class CX_OS_OBJECT_NOT_EXISTING definition load.
        raise exception type CX_OS_OBJECT_NOT_EXISTING
          exporting
            BKEY   = BKEY_STRING
            TEXTID = CX_OS_OBJECT_NOT_EXISTING=&gt;TRANSIENT_BY_BKEY.
      endif.

      if ( EX_OS_OBJECT_STATE-&gt;TEXTID =
           CX_OS_OBJECT_STATE=&gt;CREATED_AND_DELETED ).
        BKEY_STRING  = MAP_SERIALIZE_BKEY( BUSINESS_KEY ).
        class CX_OS_OBJECT_NOT_EXISTING definition load.
        raise exception type CX_OS_OBJECT_NOT_EXISTING
          exporting
            BKEY   = BKEY_STRING
            TEXTID =
              CX_OS_OBJECT_NOT_EXISTING=&gt;CREATED_AND_DELETED_BY_BKEY.
      endif.

    endtry.

  endif.
           &quot;DELETE_PERSISTENT
  endmethod.</source>
  </method>
  <method CLSNAME="CL_OS_CA_COMMON" CMPNAME="DELETE_SPECIAL_OBJECT_INFO" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method DELETE_SPECIAL_OBJECT_INFO.
***BUILD 090501
************************************************************************
* Purpose        : Delete current entry SPECIAL_OBJECT_INFO
*
* Version        : 2.0
*
* Precondition   : Index is set in CURRENT_OBJECT_INDEX
*
* Postcondition  : entry is deleted
*
* OO Exceptions  : --
*
* Implementation :
*
************************************************************************
* Changelog:
* - 2000-03-02   : (BGR) Initial Version
* - 2001-10-30   : (SB)  Type Mapping
************************************************************************

  read table SPECIAL_OBJECT_INFO into CURRENT_SPECIAL_OBJECT_INFO
       index CURRENT_OBJECT_INDEX.

  delete table SPECIAL_BKEY_TAB
    with table key
      BUSINESS_KEY = CURRENT_SPECIAL_OBJECT_INFO-BUSINESS_KEY.

  delete SPECIAL_OBJECT_INFO index CURRENT_OBJECT_INDEX.
  clear CURRENT_SPECIAL_OBJECT_INFO.

           &quot;DELETE_SPECIAL_OBJECT_INFO
  endmethod.</source>
  </method>
  <method CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="GET_PERSISTENT" VERSION="1" LANGU="E" DESCRIPT="Get Persistent Object with Key" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="GET_PERSISTENT" SCONAME="I_AEDAT" VERSION="1" LANGU="E" DESCRIPT="Business Key" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="RSCRMTSTMP"/>
   <parameter CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="GET_PERSISTENT" SCONAME="I_UNAME" VERSION="1" LANGU="E" DESCRIPT="Business Key" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="UNAME"/>
   <parameter CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="GET_PERSISTENT" SCONAME="RESULT" VERSION="1" LANGU="E" DESCRIPT="Persistent Object" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_USFP_T_ASA_STKUP"/>
   <exception CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="GET_PERSISTENT" SCONAME="CX_OS_OBJECT_NOT_FOUND" VERSION="1" LANGU="E" DESCRIPT="Object Services Exception" MTDTYPE="0" EDITORDER="0 "/>
   <source>method GET_PERSISTENT.
***BUILD 093901
*      importing I_AEDAT TYPE RSCRMTSTMP.
*      importing I_UNAME TYPE UNAME.
*      returning RESULT TYPE REF TO ZCL_USFP_T_ASA_STKUP
*       raising   CX_OS_OBJECT_NOT_FOUND
************************************************************************
* Purpose        : Get reference of an persistent object.
*
* Version        : 2.0
*
* Precondition   : --
*
* Postcondition  : Persistent object is active
*
* OO Exceptions  : CX_OS_OBJECT_NOT_FOUND
*                    (IS_TRANSIENT_BY_BKEY,DELETED_BY_BKEY)
*                  propagates PM_LOAD_AND_SET_ATTRIBUTES
*                  propagates OS_PM_LOADED_PERISISTENT
*
* Implementation : 1. Look for object in SPECIAL_OBJECT_INFO. If found,
*                     check if it is still valid
*                  2. Object found: Check PM_STATUS
*                     2a. If Status is TRANSIENT or DELETED, error!
*                     2b. If Status is NOT_LOADED, continue with 3.
*                     2c. If Status is NEW, LOADED or CHANGED, success!
*                  3. Load object data from database and set object
*                  3.a. Completion in super class
*                  4. clean up
*
************************************************************************
* Changelog:
* - 1999-09-21   : (OS)  Initial Version
* - 2000-03-07   : (BGR) Version 2.0 - Common Superclass
* - 2000-08-02   : (SB)  OO Exceptions
* - 2000-10-30   : (SB)  Type Mapping
* - 2004-01-21   : (SB)  Type Mapping Refactoring
************************************************************************

  data: BUSINESS_KEY    type TYP_BUSINESS_KEY,
        FLAG_NOT_LOADED type OS_BOOLEAN,
        BKEY_STRING     type STRING.

  data: TEMP_CURRENT_OBJECT_IREF type ref to OBJECT.

* * 1. Look for object in SPECIAL_OBJECT_INFO. If found, check if it
* * is still valid

  clear:  CURRENT_OBJECT_IREF.

*&lt; Generated from mapping:
  BUSINESS_KEY-AEDAT = I_AEDAT.
  BUSINESS_KEY-UNAME = I_UNAME.
*&gt;

  read table SPECIAL_BKEY_TAB into CURRENT_SPECIAL_OBJECT_INFO
       with table key BUSINESS_KEY = BUSINESS_KEY.

  if ( SY-SUBRC = 0 ).

    read table SPECIAL_OBJECT_INFO into CURRENT_SPECIAL_OBJECT_INFO
         with table key
         OBJECT_ID = CURRENT_SPECIAL_OBJECT_INFO-OBJECT_ID.
    call method OS_LOAD_AND_VALIDATE_CURRENT
         exporting I_INDEX = SY-TABIX.

  endif.

  if ( not CURRENT_OBJECT_IREF is initial ).

* * 2. Object found: Check PM_STATUS

    case CURRENT_OBJECT_INFO-PM_STATUS.

*   * 2a. If Status is TRANSIENT or DELETED, error!
    when OSCON_OSTATUS_DELETED.

*!!!!! Error: Object activation failed - Object marked for deletion
      TEMP_CURRENT_OBJECT_IREF = CURRENT_OBJECT_IREF.
      BKEY_STRING  = MAP_SERIALIZE_BKEY( BUSINESS_KEY ).
      call method OS_CLEAR_CURRENT.
      clear CURRENT_SPECIAL_OBJECT_INFO.
      class CX_OS_OBJECT_NOT_FOUND definition load.
      raise exception type CX_OS_OBJECT_NOT_FOUND
        exporting
          OBJECT = TEMP_CURRENT_OBJECT_IREF
          BKEY   = BKEY_STRING
          TEXTID = CX_OS_OBJECT_NOT_FOUND=&gt;DELETED_BY_BKEY.

    when OSCON_OSTATUS_TRANSIENT.

*!!!!! Error: Object activation failed - Object is transient
      TEMP_CURRENT_OBJECT_IREF = CURRENT_OBJECT_IREF.
      BKEY_STRING  = MAP_SERIALIZE_BKEY( BUSINESS_KEY ).
      call method OS_CLEAR_CURRENT.
      clear CURRENT_SPECIAL_OBJECT_INFO.
      class CX_OS_OBJECT_NOT_FOUND definition load.
      raise exception type CX_OS_OBJECT_NOT_FOUND
        exporting
          OBJECT = TEMP_CURRENT_OBJECT_IREF
          BKEY   = BKEY_STRING
          TEXTID = CX_OS_OBJECT_NOT_FOUND=&gt;IS_TRANSIENT_BY_BKEY.


*   * 2b. If Status is NOT_LOADED, continue with 3.
    when OSCON_OSTATUS_NOT_LOADED.

      FLAG_NOT_LOADED      = OSCON_TRUE.

*   * 2c. If Status is NEW, LOADED or CHANGED, success!
    when others.

      FLAG_NOT_LOADED      = OSCON_FALSE.

    endcase. &quot;PM_STATUS

  else.&quot; ( CURRENT_OBJECT_IREF is initial ).

    FLAG_NOT_LOADED      = OSCON_TRUE.

  endif.&quot; ( Entry in administrative data? )

* * 3. Load object data from database and set object

  if (  FLAG_NOT_LOADED = OSCON_TRUE ).

*   * internal Undo
    append INTERNAL_NEXT_UNDO_INFO to INTERNAL_TRANSACTION_STACK.
    INTERNAL_CURRENT_TRANSACTION = SY-TABIX.

    try.
        call method PM_LOAD_AND_SET_ATTRIBUTES
             exporting I_BUSINESS_KEY = BUSINESS_KEY.

        result ?= CURRENT_OBJECT_IREF.

*       * 3.a. Completion in super class
        call method OS_PM_LOADED_PERSISTENT.

      cleanup.
        call method OS_INTERNAL_UNDO.
        call method OS_CLEAR_CURRENT.
        clear CURRENT_SPECIAL_OBJECT_INFO.
    endtry.

*   * Clean-up internal Undo
    delete INTERNAL_TRANSACTION_STACK
           index INTERNAL_CURRENT_TRANSACTION.
    add -1 to INTERNAL_CURRENT_TRANSACTION.
    if ( INTERNAL_TRANSACTION_STACK is initial ).
      clear INTERNAL_UNDO_INFO.
      INTERNAL_NEXT_UNDO_INFO = 1.
    endif. &quot;( INTERNAL_TRANSACTION_STACK is initial? )

  else. &quot;( Object already loaded )

    RESULT ?= CURRENT_OBJECT_IREF.
    call method OS_CLEAR_CURRENT.

  endif. &quot;( Loading necessesary? )

* * 4. clean up

  clear  CURRENT_SPECIAL_OBJECT_INFO.


           &quot;GET_PERSISTENT
  endmethod.</source>
  </method>
  <method CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="GET_TRANSIENT" VERSION="1" LANGU="E" DESCRIPT="Get Transient Object with Key" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="GET_TRANSIENT" SCONAME="I_AEDAT" VERSION="1" LANGU="E" DESCRIPT="Business Key" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="RSCRMTSTMP"/>
   <parameter CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="GET_TRANSIENT" SCONAME="I_UNAME" VERSION="1" LANGU="E" DESCRIPT="Business Key" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="UNAME"/>
   <parameter CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="GET_TRANSIENT" SCONAME="RESULT" VERSION="1" LANGU="E" DESCRIPT="Transient Object" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_USFP_T_ASA_STKUP"/>
   <exception CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="GET_TRANSIENT" SCONAME="CX_OS_OBJECT_NOT_FOUND" VERSION="1" LANGU="E" DESCRIPT="Object Services Exception" MTDTYPE="0" EDITORDER="0 "/>
   <source>method GET_TRANSIENT.
***BUILD 093901
*      IMPORTING I_AEDAT TYPE RSCRMTSTMP.
*      IMPORTING I_UNAME TYPE UNAME.
*      RETURNING RESULT TYPE REF TO ZCL_USFP_T_ASA_STKUP
*       raising   CX_OS_OBJECT_NOT_FOUND
************************************************************************
* Purpose        : Get reference of an transient object.
*
* Version        : 2.0
*
* Precondition   : object has been created transient
*
* Postcondition  : --
*
* OO Exceptions  : CX_OS_OBJECT_NOT_FOUND
*                  (TRANSIENT_BY_BKEY, IS_PERSISTENT_BY_BKEY)
*
* Implementation : 1. look for entry in SPECIAL_OBJECT_INFO and check
*                     if it is still valid
*                  2. If it not valid or no object found: Error
*                  3. If it is valid: Check state
*                    3a. Not Transient: Error!
*                    3b. Transient: Success!
*
************************************************************************
* Changelog:
* - 2000-03-07   : (BGR) Initial Version
* - 2000-08-03   : (SB)  OO Exceptions
* - 2000-10-30   : (SB)  Type Mapping
************************************************************************

  data: BUSINESS_KEY type TYP_BUSINESS_KEY,
        BKEY_STRING  type STRING .

  data: TEMP_CURRENT_OBJECT_IREF type ref to OBJECT.

* * 1. look for entry in SPECIAL_OBJECT_INFO and check if it is
* *    still valid

  clear CURRENT_OBJECT_IREF.

*&lt; Generated from mapping:
  BUSINESS_KEY-AEDAT = I_AEDAT.
  BUSINESS_KEY-UNAME = I_UNAME.
*&gt;

  read table SPECIAL_BKEY_TAB into CURRENT_SPECIAL_OBJECT_INFO
       with table KEY BUSINESS_KEY = BUSINESS_KEY.

  if ( SY-SUBRC = 0 ).

    read table SPECIAL_OBJECT_INFO into CURRENT_SPECIAL_OBJECT_INFO
         with table key
         OBJECT_ID = CURRENT_SPECIAL_OBJECT_INFO-OBJECT_ID.
    call method OS_LOAD_AND_VALIDATE_CURRENT
         exporting I_INDEX = SY-TABIX.

  endif.

* * 2. If it not valid or no object found: Error
  if ( CURRENT_OBJECT_IREF is initial ).

*!!! Error: Object activation failed - no entry in administrative data
    BKEY_STRING  = MAP_SERIALIZE_BKEY( BUSINESS_KEY ).
    clear CURRENT_SPECIAL_OBJECT_INFO.
    class CX_OS_OBJECT_NOT_FOUND definition load.
    raise exception type CX_OS_OBJECT_NOT_FOUND
      exporting
        BKEY   = BKEY_STRING
        TEXTID = CX_OS_OBJECT_NOT_FOUND=&gt;TRANSIENT_BY_BKEY.

  else. &quot;( Entry exists )

*   * 3. If it is valid: Check state
    if ( CURRENT_OBJECT_INFO-PM_STATUS &lt;&gt; OSCON_OSTATUS_TRANSIENT ).

*     * 3a. Not Transient: Error!
*!!!!! Error: Object is not transient
      TEMP_CURRENT_OBJECT_IREF = CURRENT_OBJECT_IREF.
      BKEY_STRING  = MAP_SERIALIZE_BKEY( BUSINESS_KEY ).
      call method OS_CLEAR_CURRENT.
      clear CURRENT_SPECIAL_OBJECT_INFO.
      class CX_OS_OBJECT_NOT_FOUND definition load.
      raise exception type CX_OS_OBJECT_NOT_FOUND
        exporting
          OBJECT = TEMP_CURRENT_OBJECT_IREF
          BKEY   = BKEY_STRING
          TEXTID = CX_OS_OBJECT_NOT_FOUND=&gt;IS_PERSISTENT_BY_BKEY.

    endif. &quot;( PM_STATUS &lt;&gt; transient )

  endif.&quot; ( Entry in administrative data? )

* * 3b. Transient: Success!
  RESULT ?= CURRENT_OBJECT_IREF.
  call method OS_CLEAR_CURRENT.
  clear CURRENT_SPECIAL_OBJECT_INFO.

           &quot;GET_TRANSIENT
  endmethod.</source>
  </method>
  <method CLSNAME="CL_OS_CA_COMMON" CMPNAME="LOAD_SPECIAL_OBJECT_INFO" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method LOAD_SPECIAL_OBJECT_INFO.
***BUILD 090501
************************************************************************
* Purpose        : Load CURRENT_SPECIAL_OBJECT_INFO from
*                  SPECIAL_OBJECT_INFO
*
* Version        : 2.0
*
* Precondition   : Index is set in CURRENT_OBJECT_INDEX
*
* Postcondition  : entry is loaded
*
* OO Exceptions  : -
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 2000-03-02   : (BGR) Initial Version
************************************************************************

  read table SPECIAL_OBJECT_INFO into CURRENT_SPECIAL_OBJECT_INFO
       index CURRENT_OBJECT_INDEX.

           &quot;LOAD_SPECIAL_OBJECT_INFO
  endmethod.</source>
  </method>
  <method CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="MAP_EXTRACT_IDENTIFIER" VERSION="1" LANGU="E" DESCRIPT="Extracts BKey from Database Data" EXPOSURE="1" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="MAP_EXTRACT_IDENTIFIER" SCONAME="I_DB_DATA" VERSION="1" LANGU="E" DESCRIPT="Object Data Read from DB" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TYP_DB_DATA"/>
   <parameter CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="MAP_EXTRACT_IDENTIFIER" SCONAME="E_BUSINESS_KEY" VERSION="1" LANGU="E" DESCRIPT="Business Key Extracted from Database Data" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="0" TYPTYPE="1" TYPE="TYP_BUSINESS_KEY"/>
   <source>method MAP_EXTRACT_IDENTIFIER.
***BUILD 093901
     &quot; importing I_DB_DATA type TYP_DB_DATA
     &quot; exporting E_BUSINESS_KEY type TYP_BUSINESS_KEY
************************************************************************
* Purpose        : Extract Business Key from given DB_DATA
*
* Version        : 2.0
*
* Precondition   : DB_DATA is a structure with object data read from
*                  DB including Keys and GUID
*
* Postcondition  : E_BUSINESS_KEY is the business key extracted from
*                  I_DB_DATA
*
* OO Exceptions  : --
*
* Implementation :
*
************************************************************************
* Changelog:
* - 2000-03-06   : (BGR) Initial Version
* - 2000-08-02   : (SB) OO Exceptions
************************************************************************
* Generated! Do not modify!
************************************************************************

*&lt;Generated from mapping:
  E_BUSINESS_KEY-AEDAT  = I_DB_DATA-AEDAT.
  E_BUSINESS_KEY-UNAME  = I_DB_DATA-UNAME.
*&gt;

           &quot;MAP_EXTRACT_IDENTIFIER
  endmethod.</source>
  </method>
  <method CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="MAP_GET_ATTRIBUTES" VERSION="1" LANGU="E" DESCRIPT="Reads Persistent Attributes from Object" EXPOSURE="1" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="MAP_GET_ATTRIBUTES" SCONAME="I_OBJECT_REF_TAB" VERSION="1" LANGU="E" DESCRIPT="List of Objects Affected" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TYP_OBJECT_REF_TAB"/>
   <parameter CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="MAP_GET_ATTRIBUTES" SCONAME="E_OBJECT_DATA_TAB" VERSION="1" LANGU="E" DESCRIPT="Object Data Read" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="0" TYPTYPE="1" TYPE="TYP_DB_DATA_TAB"/>
   <source>method MAP_GET_ATTRIBUTES.
***BUILD 093901
     &quot; importing I_OBJECT_REF_TAB  type TYP_OBJECT_REF_TAB
     &quot; exporting value(E_OBJECT_DATA_TAB) type TYP_DB_DATA_TAB
************************************************************************
* Purpose        : Get object data from objects
*
* Version        : 2.0
*
* Precondition   : I_OBJECT_REF_TAB is a list of objects that have a
*                  valid state (new, changed)
*
* Postcondition  : E_OBJECT_DATA_TAB contains all object data of the
*                  given objects. It is a table of the same size like
*                  I_OBJECT_REF_TAB with corresponding entries.
*                  GUID (and Business Key) will be added later.
*
* OO Exceptions  : CX_OS_OBJECT_REFERENCE collects GET_OID_BY_REF
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 2000-03-06   : (BGR) Initial Version
* - 2000-08-03   : (SB)  OO Exceptions
* - 2002-01-17   : (SB)  private attributes in super classes
************************************************************************
* Generated! Do not modify!
************************************************************************

  data: THE_OBJECT type ref to ZCL_USFP_T_ASA_STKUP,
        OBJECT_DATA_ITEM type TYP_DB_DATA,
        PM_SERVICE       type ref to IF_OS_PM_SERVICE. &quot;#EC NEEDED

  data: EX     type ref to CX_OS_ERROR, &quot;#EC NEEDED
        EX_SYS type ref to CX_OS_SYSTEM_ERROR, &quot;#EC NEEDED
        EX_TAB type OSTABLEREF.

  PM_SERVICE ?= PERSISTENCY_MANAGER.

  loop at I_OBJECT_REF_TAB into THE_OBJECT.

    clear OBJECT_DATA_ITEM.

*&lt;  Generated from mapping:
    OBJECT_DATA_ITEM-AEDAT = THE_OBJECT-&gt;AEDAT.
    OBJECT_DATA_ITEM-UNAME = THE_OBJECT-&gt;UNAME.
    OBJECT_DATA_ITEM-UTZON = THE_OBJECT-&gt;UTZON.
    OBJECT_DATA_ITEM-ADATA = THE_OBJECT-&gt;ADATA.
    OBJECT_DATA_ITEM-UMETH = THE_OBJECT-&gt;UMETH.
    OBJECT_DATA_ITEM-LGHDL = THE_OBJECT-&gt;LGHDL.
*&gt;

    APPEND OBJECT_DATA_ITEM TO E_OBJECT_DATA_TAB.

  endloop.&quot;at I_OBJECT_REF_TAB

  if ( not EX_TAB is initial ).
    raise exception type CX_OS_OBJECT_REFERENCE
          exporting EXCEPTION_TAB = EX_TAB.
  endif.

           &quot;MAP_GET_ATTRIBUTES
endmethod.
&quot;#EC CI_VALPAR</source>
  </method>
  <method CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="MAP_INITIALIZE_METADATA" VERSION="1" LANGU="E" DESCRIPT="Initializes Metadata Table for Attributes" EXPOSURE="1" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <source>method MAP_INITIALIZE_METADATA.
***BUILD 093901
************************************************************************
* Purpose        : Initialize the mapping metadata,
*
* Version        : 2.0
*
* Precondition   : -
*
* Postcondition  : The mapping metadata table MAP_ATT_INFO_TAB
*                  contains an entry for all persistent attributes
*                  accessible from a query expression
*
* OO Exceptions  : -
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 2004-03-25   : (SB)  Initial Version
************************************************************************


  data: MAP_ATT_INFO type OSTYP_RT_MAP_ATT_INFO.

  if MAP_ATT_INFO_TAB is initial.

    clear MAP_ATT_INFO.
    MAP_ATT_INFO-NAME = &apos;AEDAT&apos;.
    MAP_ATT_INFO-EXPOSURE = &apos;2&apos;.
    MAP_ATT_INFO-RECORDNAME = &apos;ZUSFPT_ASA_STKUP&apos;.
    MAP_ATT_INFO-FIELD_NAME1  = &apos;AEDAT&apos;.
    insert MAP_ATT_INFO into table MAP_ATT_INFO_TAB.

    clear MAP_ATT_INFO.
    MAP_ATT_INFO-NAME = &apos;UNAME&apos;.
    MAP_ATT_INFO-EXPOSURE = &apos;2&apos;.
    MAP_ATT_INFO-RECORDNAME = &apos;ZUSFPT_ASA_STKUP&apos;.
    MAP_ATT_INFO-FIELD_NAME1  = &apos;UNAME&apos;.
    insert MAP_ATT_INFO into table MAP_ATT_INFO_TAB.

    clear MAP_ATT_INFO.
    MAP_ATT_INFO-NAME = &apos;UTZON&apos;.
    MAP_ATT_INFO-EXPOSURE = &apos;2&apos;.
    MAP_ATT_INFO-RECORDNAME = &apos;ZUSFPT_ASA_STKUP&apos;.
    MAP_ATT_INFO-FIELD_NAME1  = &apos;UTZON&apos;.
    insert MAP_ATT_INFO into table MAP_ATT_INFO_TAB.

    clear MAP_ATT_INFO.
    MAP_ATT_INFO-NAME = &apos;ADATA&apos;.
    MAP_ATT_INFO-EXPOSURE = &apos;2&apos;.
    MAP_ATT_INFO-RECORDNAME = &apos;ZUSFPT_ASA_STKUP&apos;.
    MAP_ATT_INFO-FIELD_NAME1  = &apos;ADATA&apos;.
    insert MAP_ATT_INFO into table MAP_ATT_INFO_TAB.

    clear MAP_ATT_INFO.
    MAP_ATT_INFO-NAME = &apos;UMETH&apos;.
    MAP_ATT_INFO-EXPOSURE = &apos;2&apos;.
    MAP_ATT_INFO-RECORDNAME = &apos;ZUSFPT_ASA_STKUP&apos;.
    MAP_ATT_INFO-FIELD_NAME1  = &apos;UMETH&apos;.
    insert MAP_ATT_INFO into table MAP_ATT_INFO_TAB.

    clear MAP_ATT_INFO.
    MAP_ATT_INFO-NAME = &apos;LGHDL&apos;.
    MAP_ATT_INFO-EXPOSURE = &apos;2&apos;.
    MAP_ATT_INFO-RECORDNAME = &apos;ZUSFPT_ASA_STKUP&apos;.
    MAP_ATT_INFO-FIELD_NAME1  = &apos;LGHDL&apos;.
    insert MAP_ATT_INFO into table MAP_ATT_INFO_TAB.

  endif.

           &quot;MAP_INITIALIZE_METADATA
  endmethod.</source>
  </method>
  <method CLSNAME="CL_OS_CA_COMMON" CMPNAME="MAP_INVALIDATE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method MAP_INVALIDATE.
***BUILD 093901
     &quot; importing I_OBJECT_IREF_TAB type TYP_OBJECT_TAB
************************************************************************
* Purpose        : Invalidate state of all objects in I_OBJECT_IREF_TAB
*
* Version        : 2.0
*
* Precondition   : Objects in I_OBJECT_IREF_TAB exist
*
* Postcondition  : Their state in cleared
*
* OO Exceptions  : -
*
* Implementation : - call method IF_OS_STATE~INVALIDATE
*                  - clear object&apos;s (persistent) attributes
*
************************************************************************
* Changelog:
* - 2000-04-17   : (BGR) Initial Version
* - 2000-08-02   : (SB)  OO Exceptions
* - 2002-01-17   : (SB)  private attributes in super classes
************************************************************************

  data: OBJECT_IREF type TYP_OBJECT_IREF,
        THE_OBJECT  type ref TO ZCL_USFP_T_ASA_STKUP.

  loop at I_OBJECT_IREF_TAB into OBJECT_IREF.

    if ( not OBJECT_IREF is initial ).

      call method OBJECT_IREF-&gt;INVALIDATE.

      THE_OBJECT ?= OBJECT_IREF.

*&lt;    Generated from Mapping:
      clear: THE_OBJECT-&gt;AEDAT,
             THE_OBJECT-&gt;UNAME,
             THE_OBJECT-&gt;UTZON,
             THE_OBJECT-&gt;ADATA,
             THE_OBJECT-&gt;UMETH,
             THE_OBJECT-&gt;LGHDL.
*&gt;

    endif. &quot;( not initial )

  endloop. &quot;at I_OBJECT_IREF_TAB

           &quot;MAP_INVALIDATE
  endmethod.</source>
  </method>
  <method CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="MAP_LOAD_FROM_DATABASE" VERSION="1" LANGU="E" DESCRIPT="Reads Identified Object Data from the DB Based on a Filter" EXPOSURE="0" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="MAP_LOAD_FROM_DATABASE" SCONAME="I_ORDER_BY_CLAUSE" VERSION="1" LANGU="E" DESCRIPT="ORDER BY Clause" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="MAP_LOAD_FROM_DATABASE" SCONAME="I_SUBCLASSES" VERSION="1" LANGU="E" DESCRIPT="Load Subclass Instances" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="OS_BOOLEAN" PARVALUE="OSCON_FALSE"/>
   <parameter CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="MAP_LOAD_FROM_DATABASE" SCONAME="I_UPTO" VERSION="1" LANGU="E" DESCRIPT="Max. No. Instances" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="I" PARVALUE="0"/>
   <parameter CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="MAP_LOAD_FROM_DATABASE" SCONAME="I_WHERE_CLAUSE" VERSION="1" LANGU="E" DESCRIPT="Where Clause" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="MAP_LOAD_FROM_DATABASE" SCONAME="PAR1" VERSION="1" LANGU="E" DESCRIPT="First Parameter for Query Execution" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ANY" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="MAP_LOAD_FROM_DATABASE" SCONAME="PAR2" VERSION="1" LANGU="E" DESCRIPT="Second Parameter for Query Execution" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ANY" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="MAP_LOAD_FROM_DATABASE" SCONAME="PAR3" VERSION="1" LANGU="E" DESCRIPT="Third Parameter for Query Execution" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ANY" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="MAP_LOAD_FROM_DATABASE" SCONAME="RESULT" VERSION="1" LANGU="E" DESCRIPT="Object Data Read from the Database" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="TYP_DB_DATA_TAB"/>
   <source>method MAP_LOAD_FROM_DATABASE.
***BUILD 093901
     &quot; importing I_WHERE_CLAUSE type STRING optional
     &quot;           I_ORDER_BY_CLAUSE type STRING optional
     &quot;           I_SUBCLASSES type OS_BOOLEAN default OSCON_FALSE
     &quot;           I_UPTO type I value 0
     &quot;           PAR1 type ANY optional
     &quot;           PAR2 type ANY optional
     &quot;           PAR3 type ANY optional
     &quot; returning value(RESULT) type TYP_DB_DATA_TAB
************************************************************************
* Purpose        : Load object data identified by I_WHERE_CLAUSE with
*                  PAR1, PAR2 and PAR3 from DB to DB_DATA Table
*
* Version        : 2.0
*
* Precondition   : I_WHERE_CLAUSE is valid where clause in Open-SQL
*
* Postcondition  : RESULT is the corresponding table of object
*                  attributes read from DB
*
* OO Exceptions  : CX_OS_DB_SELECT
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 2004-03-25   : (SB)  Initial Version
* - 2005-04-06   : (SB)  Single Table
************************************************************************


  data: DB_DATA           type TYP_DB_DATA.

*&lt; Generated from mapping:
  types: TYP_DB_DATA_LOCAL type ZUSFPT_ASA_STKUP.
*&gt;

  types:
    TYP_DB_DATA_LOCAL_TAB type standard table of
      TYP_DB_DATA_LOCAL with non-unique default key .

  data: DB_DATA_LOCAL_TAB type TYP_DB_DATA_LOCAL_TAB.

  field-symbols: &lt;FS_DB_DATA_LOCAL&gt; type TYP_DB_DATA_LOCAL.

*&lt; Generated from mapping:
  field-symbols: &lt;FS_DB_ZUSFPT_ASA_STKUP&gt; type ZUSFPT_ASA_STKUP.
*&gt;

*&lt; Generated from mapping:
  select * from ZUSFPT_ASA_STKUP
           up to I_UPTO rows
           into table DB_DATA_LOCAL_TAB
           where (I_WHERE_CLAUSE)
           order by (I_ORDER_BY_CLAUSE).
*&gt;

*   * error handling
  if ( SY-SUBRC &lt;&gt; 0 ).
    class CX_OS_DB_SELECT definition load.
    raise exception type CX_OS_DB_SELECT
         exporting TABLE  = &apos;ZUSFPT_ASA_STKUP&apos;
                   WHERE_CLAUSE = I_WHERE_CLAUSE
                   TEXTID = CX_OS_DB_SELECT=&gt;BY_QUERY.
  endif. &quot;( Error )

  loop at DB_DATA_LOCAL_TAB assigning &lt;FS_DB_DATA_LOCAL&gt;.

    assign &lt;FS_DB_DATA_LOCAL&gt; to &lt;FS_DB_ZUSFPT_ASA_STKUP&gt;.

*&lt; Generated from mapping:
    DB_DATA-AEDAT = &lt;FS_DB_ZUSFPT_ASA_STKUP&gt;-AEDAT.
    DB_DATA-UNAME = &lt;FS_DB_ZUSFPT_ASA_STKUP&gt;-UNAME.
    DB_DATA-UTZON = &lt;FS_DB_ZUSFPT_ASA_STKUP&gt;-UTZON.
    DB_DATA-ADATA = &lt;FS_DB_ZUSFPT_ASA_STKUP&gt;-ADATA.
    DB_DATA-UMETH = &lt;FS_DB_ZUSFPT_ASA_STKUP&gt;-UMETH.
    DB_DATA-LGHDL = &lt;FS_DB_ZUSFPT_ASA_STKUP&gt;-LGHDL.
*&gt;

    append DB_DATA to RESULT.

  endloop.&quot; at DB_TAB

           &quot;MAP_LOAD_FROM_DATABASE
endmethod.
&quot;#EC CI_VALPAR</source>
  </method>
  <method CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="MAP_LOAD_FROM_DATABASE_KEY" VERSION="1" LANGU="E" DESCRIPT="Reads Object Data Identified Using Bus. Key from Database" EXPOSURE="1" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="MAP_LOAD_FROM_DATABASE_KEY" SCONAME="I_BUSINESS_KEY_TAB" VERSION="1" LANGU="E" DESCRIPT="Business Key of the Data to Be Loaded" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TYP_BUSINESS_KEY_TAB"/>
   <parameter CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="MAP_LOAD_FROM_DATABASE_KEY" SCONAME="RESULT" VERSION="1" LANGU="E" DESCRIPT="Object Data Read from the Database" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="TYP_DB_DATA_TAB"/>
   <source>method MAP_LOAD_FROM_DATABASE_KEY.
***BUILD 093901
     &quot; importing I_BUSINESS_KEY_TAB type TYP_BUSINESS_KEY_TAB
     &quot; returning value(RESULT) type TYP_DB_DATA_TAB
************************************************************************
* Purpose        : Load object data identified by I_BUSINESS_KEY_TAB
*                  from DB to DB_DATA Table
*
* Version        : 2.0
*
* Precondition   : I_BUSINESS_KEY_TAB is a table of valid business keys
*
* Postcondition  : RESULT is the corresponding table of object
*                  attributes read from DB
*
* OO Exceptions  : CX_OS_DB_SELECT
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 1999-09-21   : (OS)  Initial Version
* - 2000-03-06   : (BGR) Version 2.0 - difference between loading 1 and
*                  many entries
* - 2000-06-15   : (BGR) Support for multi-table loading
* - 2000-08-03   : (SB)  OO Exceptions
* - 2001-03-27   : (MWI) Loading several objects (type mapping)
* - 2001-11-26   : (SB)  Refactoring Generation
* - 2002-01-17   : (SB)  Bugfix for tables with namespace
* - 2002-01-17   : (SB)  private attributes in super classes
* - 2004-01-07   : (SB)  Multi Access
* - 2005-02-22   : (SB)  Inner Joins
* - 2005-04-06   : (SB)  Single Table
************************************************************************


  data: DB_DATA           type TYP_DB_DATA.

*&lt; Generated from mapping:
  types: TYP_DB_DATA_LOCAL type ZUSFPT_ASA_STKUP.
*&gt;

  types:
    TYP_DB_DATA_LOCAL_TAB type standard table of
      TYP_DB_DATA_LOCAL with non-unique default key .

  data: DB_DATA_LOCAL_TAB type TYP_DB_DATA_LOCAL_TAB.

  field-symbols: &lt;FS_DB_DATA_LOCAL&gt; type TYP_DB_DATA_LOCAL.

*&lt; Generated from mapping:
  field-symbols: &lt;FS_DB_ZUSFPT_ASA_STKUP&gt; type ZUSFPT_ASA_STKUP.
*&gt;

*&lt; Generated from mapping:
  select * from ZUSFPT_ASA_STKUP
           into table DB_DATA_LOCAL_TAB
           for all entries in I_BUSINESS_KEY_TAB
           where ZUSFPT_ASA_STKUP~AEDAT = I_BUSINESS_KEY_TAB-AEDAT
             and ZUSFPT_ASA_STKUP~UNAME = I_BUSINESS_KEY_TAB-UNAME.
*&gt;

* * error handling
  if ( SY-SUBRC &lt;&gt; 0 ).
    class CX_OS_DB_SELECT definition load.
    raise exception type CX_OS_DB_SELECT
         exporting TABLE  = &apos;ZUSFPT_ASA_STKUP&apos;
                   TEXTID = CX_OS_DB_SELECT=&gt;BY_BKEYTAB.
  endif. &quot;( Error )

  loop at DB_DATA_LOCAL_TAB assigning &lt;FS_DB_DATA_LOCAL&gt;.

    assign &lt;FS_DB_DATA_LOCAL&gt; to &lt;FS_DB_ZUSFPT_ASA_STKUP&gt;.

*&lt; Generated from mapping:
    DB_DATA-AEDAT = &lt;FS_DB_ZUSFPT_ASA_STKUP&gt;-AEDAT.
    DB_DATA-UNAME = &lt;FS_DB_ZUSFPT_ASA_STKUP&gt;-UNAME.
    DB_DATA-UTZON = &lt;FS_DB_ZUSFPT_ASA_STKUP&gt;-UTZON.
    DB_DATA-ADATA = &lt;FS_DB_ZUSFPT_ASA_STKUP&gt;-ADATA.
    DB_DATA-UMETH = &lt;FS_DB_ZUSFPT_ASA_STKUP&gt;-UMETH.
    DB_DATA-LGHDL = &lt;FS_DB_ZUSFPT_ASA_STKUP&gt;-LGHDL.
*&gt;

    append DB_DATA to RESULT.

  endloop.&quot; at DB_DATA_LOCAL_TAB

           &quot;MAP_LOAD_FROM_DATABASE_KEY
endmethod.
&quot;#EC CI_VALPAR</source>
  </method>
  <method CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="MAP_MERGE_IDENTIFIER" VERSION="1" LANGU="E" DESCRIPT="Adds BKey to DB Data" EXPOSURE="1" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="MAP_MERGE_IDENTIFIER" SCONAME="I_BUSINESS_KEY_TAB" VERSION="1" LANGU="E" DESCRIPT="List of Business Keys" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TYP_BUSINESS_KEY_TAB"/>
   <parameter CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="MAP_MERGE_IDENTIFIER" SCONAME="C_DB_DATA_TAB" VERSION="1" LANGU="E" DESCRIPT="Object Data in Which Identifiers Are to Be Mixed" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="TYP_DB_DATA_TAB"/>
   <source>method MAP_MERGE_IDENTIFIER.
***BUILD 093901
     &quot; importing I_BUSINESS_KEY_TAB type TYP_BUSINESS_KEY_TAB
     &quot; changing C_DB_DATA_TAB type TYP_DB_DATA_TAB
************************************************************************
* Purpose        : Merge Table I_BUSINESS_KEY_TAB to C_DB_DATA_TAB.
*                  The result is a complete DB_DATA table to be stored
*                  in DB.
*
* Version        : 2.0
*
* Precondition   : C_DB_DATA is a Table filled with object data
*                  I_BUSINESS_KEY_TAB is a table of the same size with
*                  corresponding entries.
*
* Postcondition  : C_DB_DATA_TAB is complete
*
* OO Exceptions  : --
*
* Implementation :
*
************************************************************************
* Changelog:
* - 2000-03-06   : (BGR) Initial Version
************************************************************************
* Generated! Do not modify!
************************************************************************

  data: BUSINESS_KEY type TYP_BUSINESS_KEY.

  field-symbols &lt;FS_OBJECT_DATA&gt; type TYP_DB_DATA.

  loop at C_DB_DATA_TAB assigning &lt;FS_OBJECT_DATA&gt;.

    read table I_BUSINESS_KEY_TAB into BUSINESS_KEY
         index SY-TABIX.

*&lt;  Generated from mapping:
    &lt;FS_OBJECT_DATA&gt;-AEDAT = BUSINESS_KEY-AEDAT.
    &lt;FS_OBJECT_DATA&gt;-UNAME = BUSINESS_KEY-UNAME.
*&gt;


  endloop.&quot; at C_DB_DATA_TAB

           &quot;MAP_MERGE_IDENTIFIER
  endmethod.</source>
  </method>
  <method CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="MAP_SAVE_TO_DATABASE" VERSION="1" LANGU="E" DESCRIPT="Saves Object Data in Database" EXPOSURE="1" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="MAP_SAVE_TO_DATABASE" SCONAME="I_DELETES" VERSION="1" LANGU="E" DESCRIPT="Key of the Data to Be Deleted" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TYP_DB_DELETE_TAB"/>
   <parameter CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="MAP_SAVE_TO_DATABASE" SCONAME="I_INSERTS" VERSION="1" LANGU="E" DESCRIPT="Data to Be Created" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TYP_DB_DATA_TAB"/>
   <parameter CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="MAP_SAVE_TO_DATABASE" SCONAME="I_UPDATES" VERSION="1" LANGU="E" DESCRIPT="Data to Be Changed" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TYP_DB_DATA_TAB"/>
   <source>method MAP_SAVE_TO_DATABASE.
***BUILD 093901
     &quot; importing I_DELETES type TYP_DB_DELETE_TAB
     &quot;           I_INSERTS type TYP_DB_DATA_TAB
     &quot;           I_UPDATES type TYP_DB_DATA_TAB
************************************************************************
* Purpose        : Do database operations:
*                  Insert new object data from I_INSERTS,
*                  Update changed object data from I_UPDATES and
*                  Delete entries for deleted objects from I_DELETES
*
* Version        : 2.0
*
* Precondition   : I_DELETES,I_INSERTS and I_UPDATES contain ALL
*                  necessary information (Keys, Data)
*                  If this method is called in update task, there
*                  is NO MORE information, no objects exist anymore.
*
* Postcondition  : All database operations have been performed.
*
* OO Exceptions  : CX_OS_DB_INSERT, CX_OS_DB_UPDATE, CX_OS_DB_DELETE
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 1999-09-21   : (OS)  Initial Version
* - 2000-03-06   : (BGR) Version 2.0
* - 2001-11-26   : (SB)  Refactoring Generation
* - 2002-01-17   : (SB)  private attributes in super classes
************************************************************************

*&lt; Generated from mapping:

* * ZUSFPT_ASA_STKUP: internal tables for mass operation
  data DB_ITB_ZUSFPT_ASA_STKUP type STANDARD TABLE OF ZUSFPT_ASA_STKUP.
  data DB_UTB_ZUSFPT_ASA_STKUP type STANDARD TABLE OF ZUSFPT_ASA_STKUP.
  data DB_DTB_ZUSFPT_ASA_STKUP type STANDARD TABLE OF ZUSFPT_ASA_STKUP.

* * ZUSFPT_ASA_STKUP: headlines for tables
  data DB_ILN_ZUSFPT_ASA_STKUP type ZUSFPT_ASA_STKUP.
  data DB_ULN_ZUSFPT_ASA_STKUP type ZUSFPT_ASA_STKUP.
  data DB_DLN_ZUSFPT_ASA_STKUP type ZUSFPT_ASA_STKUP.

*&gt;

  field-symbols &lt;FS_INSERT&gt; type TYP_DB_DATA.
  field-symbols &lt;FS_UPDATE&gt; type TYP_DB_DATA.
  field-symbols &lt;FS_DELETE&gt; type TYP_SPECIAL_OBJECT_INFO.

* * Collect Inserts
  loop at I_INSERTS assigning &lt;FS_INSERT&gt;.

*&lt; Generated from mapping:



   DB_ILN_ZUSFPT_ASA_STKUP-UTZON = &lt;FS_INSERT&gt;-UTZON.
   DB_ILN_ZUSFPT_ASA_STKUP-ADATA = &lt;FS_INSERT&gt;-ADATA.
   DB_ILN_ZUSFPT_ASA_STKUP-UMETH = &lt;FS_INSERT&gt;-UMETH.
   DB_ILN_ZUSFPT_ASA_STKUP-LGHDL = &lt;FS_INSERT&gt;-LGHDL.


   DB_ILN_ZUSFPT_ASA_STKUP-AEDAT = &lt;FS_INSERT&gt;-AEDAT.
   DB_ILN_ZUSFPT_ASA_STKUP-UNAME = &lt;FS_INSERT&gt;-UNAME.
   append DB_ILN_ZUSFPT_ASA_STKUP to DB_ITB_ZUSFPT_ASA_STKUP.
*&gt;

  endloop. &quot;at I_INSERTS

* * Collect Updates
  loop at I_UPDATES assigning &lt;FS_UPDATE&gt;.

*&lt; Generated from mapping:



   DB_ULN_ZUSFPT_ASA_STKUP-UTZON = &lt;FS_UPDATE&gt;-UTZON.
   DB_ULN_ZUSFPT_ASA_STKUP-ADATA = &lt;FS_UPDATE&gt;-ADATA.
   DB_ULN_ZUSFPT_ASA_STKUP-UMETH = &lt;FS_UPDATE&gt;-UMETH.
   DB_ULN_ZUSFPT_ASA_STKUP-LGHDL = &lt;FS_UPDATE&gt;-LGHDL.


   DB_ULN_ZUSFPT_ASA_STKUP-AEDAT = &lt;FS_UPDATE&gt;-AEDAT.
   DB_ULN_ZUSFPT_ASA_STKUP-UNAME = &lt;FS_UPDATE&gt;-UNAME.
   append DB_ULN_ZUSFPT_ASA_STKUP TO DB_UTB_ZUSFPT_ASA_STKUP.
*&gt;

  endloop. &quot;at I_UPDATES

* * Collect Deletes
  loop at I_DELETES assigning &lt;FS_DELETE&gt;.

    DB_DLN_ZUSFPT_ASA_STKUP-AEDAT = &lt;FS_DELETE&gt;-BUSINESS_KEY-AEDAT.
    DB_DLN_ZUSFPT_ASA_STKUP-UNAME = &lt;FS_DELETE&gt;-BUSINESS_KEY-UNAME.

    append DB_DLN_ZUSFPT_ASA_STKUP TO DB_DTB_ZUSFPT_ASA_STKUP.

  endloop. &quot;at I_DELETES

* * Perform DB Operations:

*&lt; Generated from mapping:

* * DB Deletes
  delete ZUSFPT_ASA_STKUP FROM TABLE DB_DTB_ZUSFPT_ASA_STKUP.
  if SY-SUBRC &lt;&gt; 0.
    raise exception type CX_OS_DB_DELETE
      exporting
        TABLE = &apos;ZUSFPT_ASA_STKUP&apos;.
  endif.

* * DB Inserts
  insert ZUSFPT_ASA_STKUP FROM TABLE DB_ITB_ZUSFPT_ASA_STKUP
    accepting duplicate keys.
  if SY-SUBRC &lt;&gt; 0.
    raise exception type CX_OS_DB_INSERT
      exporting
        TABLE = &apos;ZUSFPT_ASA_STKUP&apos;.
  endif.

* * DB Updates
  update ZUSFPT_ASA_STKUP FROM TABLE DB_UTB_ZUSFPT_ASA_STKUP.
  if SY-SUBRC &lt;&gt; 0.
    raise exception type CX_OS_DB_UPDATE
      exporting
        TABLE = &apos;ZUSFPT_ASA_STKUP&apos;.
  endif.

*&gt;
           &quot;MAP_SAVE_TO_DATABASE
  endmethod.</source>
  </method>
  <method CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="MAP_SERIALIZE_BKEY" VERSION="1" LANGU="E" DESCRIPT="Serializes Business Key" EXPOSURE="1" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="MAP_SERIALIZE_BKEY" SCONAME="I_BUSINESS_KEY" VERSION="1" LANGU="E" DESCRIPT="Business Key" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TYP_BUSINESS_KEY"/>
   <parameter CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="MAP_SERIALIZE_BKEY" SCONAME="RESULT" VERSION="1" LANGU="E" DESCRIPT="Business Key as String" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="STRING"/>
   <source>method MAP_SERIALIZE_BKEY.
***BUILD 093901
     &quot; importing I_BUSINESS_KEY type TYP_BUSINESS_KEY
     &quot; returning value(RESULT) type STRING
************************************************************************
* Purpose        : Concatenate business keys into string.
*
* Version        : 2.0
*
* Precondition   : -
*
* Postcondition  : -
*
* OO Exceptions  : -
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 2000-11-23   : (SB)  initial versiuon
* - 2009-06-03   : (SB)  correct order if edit order is used
************************************************************************
* Generated! Do not modify!
************************************************************************

  data: COMP_STRING type STRING.

*&lt; Generated from mapping:
  COMP_STRING = I_BUSINESS_KEY-AEDAT.
  concatenate RESULT COMP_STRING into RESULT.
  COMP_STRING = I_BUSINESS_KEY-UNAME.
  concatenate RESULT COMP_STRING into RESULT.
*&gt;

           &quot; MAP_SERIALIZE_BKEY
  endmethod.</source>
  </method>
  <method CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="MAP_SET_ATTRIBUTES" VERSION="1" LANGU="E" DESCRIPT="Sets Persistent Attributes of an Object" EXPOSURE="1" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="MAP_SET_ATTRIBUTES" SCONAME="I_OBJECT_DATA" VERSION="1" LANGU="E" DESCRIPT="Object Data to Be Set" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TYP_DB_DATA"/>
   <parameter CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="MAP_SET_ATTRIBUTES" SCONAME="I_OBJECT_REF" VERSION="1" LANGU="E" DESCRIPT="Object Affected" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TYP_OBJECT_REF"/>
   <exception CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="MAP_SET_ATTRIBUTES" SCONAME="CX_OS_OBJECT_NOT_FOUND" VERSION="1" LANGU="E" DESCRIPT="Object Services Exception" MTDTYPE="0" EDITORDER="0 "/>
   <source>method MAP_SET_ATTRIBUTES.
***BUILD 093901
     &quot; importing I_OBJECT_DATA type TYP_DB_DATA
     &quot;           I_OBJECT_REF  type TYP_OBJECT_REF
     &quot; raising   CX_OS_OBJECT_NOT_FOUND
************************************************************************
* Purpose        : Set objects from given object data
*
* Version        : 2.0
*
* Precondition   : I_OBJECT_REF is a reference to the object that will
*                  be set with data from I_OBJECT_DATA
*
* Postcondition  : The object&apos;s attributes are set.
*
* OO Exceptions  : CX_OS_OBJECT_NOT_FOUND
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 2000-03-06   : (BGR) Initial Version
* - 2000-08-03   : (SB)  OO Exceptions
* - 2002-01-17   : (SB)  private attributes in super classes
************************************************************************
* Generated! Do not modify!
************************************************************************

  data: THE_OBJECT type ref to ZCL_USFP_T_ASA_STKUP,
        AN_OBJECT  type ref to object, &quot;#EC NEEDED
        PM_SERVICE type ref to IF_OS_PM_SERVICE. &quot;#EC NEEDED

  PM_SERVICE ?= PERSISTENCY_MANAGER.
  THE_OBJECT = I_OBJECT_REF.

*&lt;  Generated from mapping:
  THE_OBJECT-&gt;AEDAT = I_OBJECT_DATA-AEDAT.
  THE_OBJECT-&gt;UNAME = I_OBJECT_DATA-UNAME.
  THE_OBJECT-&gt;UTZON = I_OBJECT_DATA-UTZON.
  THE_OBJECT-&gt;ADATA = I_OBJECT_DATA-ADATA.
  THE_OBJECT-&gt;UMETH = I_OBJECT_DATA-UMETH.
  THE_OBJECT-&gt;LGHDL = I_OBJECT_DATA-LGHDL.
*&gt;

           &quot;MAP_SET_ATTRIBUTES
  endmethod.</source>
  </method>
  <method CLSNAME="CL_OS_CA_COMMON" CMPNAME="OS_PM_DELETE_PERSISTENT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method OS_PM_DELETE_PERSISTENT.
***BUILD 090501
************************************************************************
* Purpose        : Delete persistent object. It is marked DELETED in
*                  memory and removed from DB when the top transaction
*                  is closed.
*
* Version        : 2.0
*
* Precondition   : The object is persistent (not transient), CURRENT
*                  is set
*
* Postcondition  : Instance is marked for deletion.
*
* OO Exceptions  : propagates PM_DELETE_PERSISTENT
*
* Implementation : load special object info and
*                  call PM_DELETE_PERSISTENT
*
************************************************************************
* Changelog:
* - 2001-12-14   : (SB)  Initial Version
************************************************************************

  call method LOAD_SPECIAL_OBJECT_INFO( ).

  call method PM_DELETE_PERSISTENT( ).

           &quot;OS_PM_DELETE_PERSISTENT .
  endmethod.</source>
  </method>
  <method CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="PM_CHECK_AND_SET_ATTRIBUTES" VERSION="1" LANGU="E" DESCRIPT="Checks and Sets Persistent Attributes" EXPOSURE="1" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="PM_CHECK_AND_SET_ATTRIBUTES" SCONAME="I_BUSINESS_KEY" VERSION="1" LANGU="E" DESCRIPT="Business Key" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TYP_BUSINESS_KEY" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="PM_CHECK_AND_SET_ATTRIBUTES" SCONAME="I_ID_PROVIDED" VERSION="1" LANGU="E" DESCRIPT="With Which Identifiers Were Loading and Checking Performed" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TYP_ID_STATUS" PARVALUE="0" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="PM_CHECK_AND_SET_ATTRIBUTES" SCONAME="I_OBJECT_DATA" VERSION="1" LANGU="E" DESCRIPT="Data Loaded from Database" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TYP_DB_DATA"/>
   <exception CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="PM_CHECK_AND_SET_ATTRIBUTES" SCONAME="CX_OS_OBJECT_NOT_FOUND" VERSION="1" LANGU="E" DESCRIPT="Object Services Exception" MTDTYPE="0" EDITORDER="0 "/>
   <source>method PM_CHECK_AND_SET_ATTRIBUTES.
***BUILD 090501
     &quot; importing I_OBJECT_DATA  type TYP_DB_DATA
     &quot; importing I_BUSINESS_KEY type TYP_BUSINESS_KEY optional
     &quot;           I_ID_PROVIDED type TYP_ID_STATUS default ID_STATUS_NONE
************************************************************************
* Purpose        : check loaded object data of a persistent object and
*                  set object&apos;s attributes
*                  if CURRENT is clear, create new representant,
*                  if CURRENT is set, use this object to set the loaded
*                  data
*                  If I_ID_PROVIDED is set to ID_STATUS_NONE, Look for
*                  an entry in SPECIAL_OBJECT_INFO with the given
*                  Business Key
*
* Version        : 2.0
*
* Precondition   :
*
* Postcondition  : Persistent object data is checked and object
*                  attributes are set. CURRENT is set.
*
* OO Exception   : CX_OS_OBJECT_STATE(INTERNAL_CHANGED,INTERNAL_DELETED,
*                                     INTERNAL_TRANSIENT, INTERNAL_NEW)
*                  propagates MAP_SET_ATTRIBUTES
*
* Implementation : 1. If CURRENT is clear:
*                   1a. I_ID_PROVIDED = ID_STATUS_NONE?:
*                       Check if another object exists with this
*                       Business Key
*                   1b. I_ID_PROVIDED &lt;&gt; ID_STATUS_NONE or no entry
*                       found:
*                       Create a new Representative object
*                   1c. If an object has been found:
*                       Check if it is allowed to set it
*                  2. set PM_DBSTATUS EXISTING
*                  3. Temporarily save CURRENT_*
*                  4. set object attributes (resolving references)
*                  5. restore CURRENT_*
*
************************************************************************
* Changelog:
* - 2000-05-17   : (BGR) Initial Version 2.0
* - 2000-08-03   : (SB) OO Exceptions
************************************************************************

  data: LOADED_BUSINESS_KEY       type TYP_BUSINESS_KEY.

  data: TEMP_CURRENT_OBJECT_INFO  type TYP_OBJECT_INFO,
        TEMP_CURRENT_OBJECT_INDEX type TYP_INDEX,
        TEMP_CURRENT_SPECIAL_OI   type TYP_SPECIAL_OBJECT_INFO,
        TEMP_CURRENT_OBJECT_IREF  type TYP_OBJECT_IREF,
        INTERNAL_UNDO_INFO_ITEM   type TYP_INTERNAL_UNDO_INFO,
        TEMP_OBJECT_REF           type TYP_OBJECT_REF.

* * Get both Business Key from DB data
  call method MAP_EXTRACT_IDENTIFIER
       exporting I_DB_DATA      = I_OBJECT_DATA
       importing E_BUSINESS_KEY = LOADED_BUSINESS_KEY.

  if ( CURRENT_OBJECT_IREF is initial ).

*   * 1. If CURRENT is clear:

    if ( I_ID_PROVIDED = ID_STATUS_NONE ).

*   * 1a. Check if another object exists with this Business Key

      read table SPECIAL_BKEY_TAB into TEMP_CURRENT_SPECIAL_OI
           with table key BUSINESS_KEY = LOADED_BUSINESS_KEY.
      if ( sy-subrc = 0 ).

        read table SPECIAL_OBJECT_INFO into
             CURRENT_SPECIAL_OBJECT_INFO
             with table key
             OBJECT_ID = TEMP_CURRENT_SPECIAL_OI-OBJECT_ID.
        call method OS_LOAD_AND_VALIDATE_CURRENT
             exporting I_INDEX = sy-tabix.

      endif. &quot; ( Entry found for BKEY? )

    endif. &quot;( no ID Provided )

    if ( CURRENT_OBJECT_IREF is initial ).

*     * 1b. Create a new Representative object and a new entry
      call method PM_CREATE_REPRESENTANT
           exporting I_BUSINESS_KEY = LOADED_BUSINESS_KEY.

    else. &quot;( Found an entry for the business key )

*     * Now we know an entry exists on DB
      CURRENT_OBJECT_INFO-PM_DBSTATUS = OSCON_DBSTATUS_EXISTING.
      modify OBJECT_INFO from CURRENT_OBJECT_INFO
             index CURRENT_OBJECT_INDEX.

*     * 1c. Check if it is allowed to use the found object.
      case CURRENT_OBJECT_INFO-PM_STATUS.

*       * PM_STATUS = NOT_LOADED: re-use entry and object
        when OSCON_OSTATUS_NOT_LOADED.

*       * PM_STATUS = LOADED: re-use entry and object
        when OSCON_OSTATUS_LOADED.

*       *  other PM_STATUS: Error!
        when OSCON_OSTATUS_NEW.

*!!!!!!!!!! Error! Object already exists on DB
*         * This NEW object should be created on DB by the next
*         * COMMIT. Now an entry was found with the same key!
          class CX_OS_OBJECT_STATE definition load.
          raise exception type CX_OS_OBJECT_STATE
               exporting OBJECT = CURRENT_OBJECT_IREF
                         TEXTID = CX_OS_OBJECT_STATE=&gt;INTERNAL_NEW.

        when OSCON_OSTATUS_CHANGED.

*!!!!!!!!!!! Error: Object has a DB relevant status
          class CX_OS_OBJECT_STATE definition load.
          raise exception type CX_OS_OBJECT_STATE
               exporting OBJECT = CURRENT_OBJECT_IREF
                         TEXTID = CX_OS_OBJECT_STATE=&gt;INTERNAL_CHANGED.

        when OSCON_OSTATUS_DELETED.

*!!!!!!!!!!! Error: Object marked for deletion
          class CX_OS_OBJECT_STATE definition load.
          raise exception type CX_OS_OBJECT_STATE
               exporting OBJECT = CURRENT_OBJECT_IREF
                         TEXTID = CX_OS_OBJECT_STATE=&gt;INTERNAL_DELETED.

        when OSCON_OSTATUS_TRANSIENT.

*!!!!!!!!!!! Error: Object is transient
          class CX_OS_OBJECT_STATE definition load.
          raise exception type CX_OS_OBJECT_STATE
               exporting OBJECT = CURRENT_OBJECT_IREF
                        TEXTID = CX_OS_OBJECT_STATE=&gt;INTERNAL_TRANSIENT.

      endcase.

    endif. &quot;( CURRENT initial? )
  endif. &quot;( CURRENT initial? )

* * 2. set PM_DBSTATUS EXISTING
  CURRENT_OBJECT_INFO-PM_DBSTATUS          = OSCON_DBSTATUS_EXISTING.

* * internal Undo entry:
  INTERNAL_UNDO_INFO_ITEM-OBJECT_INDEX = CURRENT_OBJECT_INDEX.
  INTERNAL_UNDO_INFO_ITEM-OBJECT_INFO  = CURRENT_OBJECT_INFO.
  append INTERNAL_UNDO_INFO_ITEM to INTERNAL_UNDO_INFO.
  INTERNAL_NEXT_UNDO_INFO = sy-tabix + 1.

* * To avoid recursive loading of the same object (INIT method)
* * temporarily set status &apos;LOADING&apos;
  CURRENT_OBJECT_INFO-PM_STATUS = OSCON_OSTATUS_LOADING.
  modify OBJECT_INFO from CURRENT_OBJECT_INFO
         index CURRENT_OBJECT_INDEX.

* * 3. Temporarily save CURRENT_*
  TEMP_CURRENT_OBJECT_IREF  = CURRENT_OBJECT_IREF.
  TEMP_CURRENT_OBJECT_INFO  = CURRENT_OBJECT_INFO.
  TEMP_CURRENT_OBJECT_INDEX = CURRENT_OBJECT_INDEX.
  TEMP_CURRENT_SPECIAL_OI   = CURRENT_SPECIAL_OBJECT_INFO.

* * 4. set object attributes (resolving references)
  TEMP_OBJECT_REF ?= CURRENT_OBJECT_IREF .

  call method MAP_SET_ATTRIBUTES
       exporting I_OBJECT_DATA = I_OBJECT_DATA
                 I_OBJECT_REF  = TEMP_OBJECT_REF.

* * 5. restore CURRENT_*
  CURRENT_OBJECT_INFO          = TEMP_CURRENT_OBJECT_INFO.
  CURRENT_OBJECT_INDEX         = TEMP_CURRENT_OBJECT_INDEX.
  CURRENT_SPECIAL_OBJECT_INFO  = TEMP_CURRENT_SPECIAL_OI.
  CURRENT_OBJECT_IREF          = TEMP_CURRENT_OBJECT_IREF.

* * the method call get_ref_by_oid in map_set_attributes
* * eventually creates new entries in the
* * administrative data tables, it is necessary to
* * to recalculate the index
  read table OBJECT_INFO transporting no fields
     with table key OBJECT_ID = CURRENT_OBJECT_INFO-OBJECT_ID.
  CURRENT_OBJECT_INDEX = sy-tabix.

           &quot;PM_CHECK_AND_SET_ATTRIBUTES
  endmethod.</source>
  </method>
  <method CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="PM_CREATE_REPRESENTANT" VERSION="1" LANGU="E" DESCRIPT="Generate New Wrapper Object and Administration Entry" EXPOSURE="1" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="PM_CREATE_REPRESENTANT" SCONAME="I_BUSINESS_KEY" VERSION="1" LANGU="E" DESCRIPT="Business Key" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TYP_BUSINESS_KEY" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="PM_CREATE_REPRESENTANT" SCONAME="RESULT" VERSION="1" LANGU="E" DESCRIPT="Newly Generated Wrapper Object" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="TYP_OBJECT_REF"/>
   <source>method PM_CREATE_REPRESENTANT.
***BUILD 093901
     &quot; importing I_BUSINESS_KEY type TYP_BUSINESS_KEY
     &quot; returning result         type TYP_OBJECT_REF
************************************************************************
* Purpose        : Create a new representative object including a new
*                  entry in administrative data (OBJECT_INFO and
*                  SPECIAL_OBJECT_INFO)
*
* Version        : 2.0
*
* Precondition   : No object exists with the same Business Key
*
* Postcondition  : A new object exists, corresponding entries in
*                  OBJECT_INFO and SPECIAL_OBJECT_INFO have been
*                  inserted, CURRENT is set
*
* OO Exceptions  : --
*
* Implementation : 1. Create object and set BKey attributes
*                  2. Get internal OID for the new object
*                  3. Create new entry in SPECIAL_OBJECT_INFO
*                  4. Let super class create a new entry in OBJECT_INFO
*
************************************************************************
* Changelog:
* - 2000-03-07   : (BGR) Initial Version 2.0
* - 2000-08-02   : (SB)  OO Exceptions
* - 2001-10-30   : (SB)  Type Mapping
************************************************************************

  data: NEW_OBJECT type ref to ZCL_USFP_T_ASA_STKUP.

* * 1. Create object and set BKey attributes
  create object NEW_OBJECT.

* &lt; Generated from mapping:
  NEW_OBJECT-&gt;AEDAT = I_BUSINESS_KEY-AEDAT.
  NEW_OBJECT-&gt;UNAME = I_BUSINESS_KEY-UNAME.
* &gt;

* * 2. Get internal OID for the new object and set CURRENT_SPECIAL_OI
  clear CURRENT_SPECIAL_OBJECT_INFO.

  CURRENT_SPECIAL_OBJECT_INFO-OBJECT_ID =
      OS_GET_INTERNAL_OID_BY_REF( I_OBJECT = NEW_OBJECT ).
  CURRENT_SPECIAL_OBJECT_INFO-BUSINESS_KEY = I_BUSINESS_KEY.
  CURRENT_SPECIAL_OBJECT_INFO-ID_STATUS = ID_STATUS_COMPLETE.

* * 3. Create new entry in SPECIAL_OBJECT_INFO
  insert CURRENT_SPECIAL_OBJECT_INFO into table SPECIAL_OBJECT_INFO.
  insert CURRENT_SPECIAL_OBJECT_INFO into table SPECIAL_BKEY_TAB.

* * 4. Let super class create a new entry in OBJECT_INFO
  call method OS_CREATE_NEW_ENTRY_FOR_REPR
       exporting I_OBJECT = NEW_OBJECT
                 I_INTERNAL_OID = CURRENT_SPECIAL_OBJECT_INFO-OBJECT_ID.

  RESULT = NEW_OBJECT.

           &quot;PM_CREATE_REPRESENTANT
  endmethod.</source>
  </method>
  <method CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="PM_DELETE_PERSISTENT" VERSION="1" LANGU="E" DESCRIPT="Deletes Persistent Object from Database" EXPOSURE="1" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <source>method PM_DELETE_PERSISTENT.
***BUILD 090501
************************************************************************
* Purpose        : Delete persistent object. It is marked DELETED in
*                  memory and removed from DB when the top transaction
*                  is closed.
*
* Version        : 2.0
*
* Precondition   : The object is persistent (not transient), CURRENT
*                  is set
*
* Postcondition  : Instance is marked for deletion.
*
* OO Exception   : CX_OS_OBJECT_STATE(CREATED_AND_DELETED,TRANSIENT)
*                  propagates OS_PM_DELETED_PERSISTENT
*                  ( propagates MAP_LOAD_FROM_DATABASE_KEY )
*
* Implementation : 1. Check the state of the object:
*                    1a. Object is already deleted - done
*                    1b. Object is transient - Error
*                    1c. Object is new, loaded or changed - continue
*                    1d. Object is not_loaded:
*                        Check DBSTATUS:
*                       1d1. DBSTATUS Unknown/Existing - continue
*                       1d2. DBSTATUS Not existing - Error
*                   2. Completion: call OS_PM_DELETED_PERSISTENT
*
************************************************************************
* Changelog:
* - 2000-03-06   : (BGR) Initial Version 2.0
* - 2000-08-03   : (SB) OO Exceptions
************************************************************************

  data: TEMP_CURRENT_OBJECT_IREF type TYP_OBJECT_IREF .

* * 1. Check the state of the object:
  case CURRENT_OBJECT_INFO-PM_STATUS.

  when OSCON_OSTATUS_DELETED.

*   * 1a. Object is already deleted - done
    call method OS_CLEAR_CURRENT.
    clear CURRENT_SPECIAL_OBJECT_INFO.
    exit.


  when OSCON_OSTATUS_TRANSIENT.

*   * 1b. Object is transient - Error
*!! error: object already exists transient
    TEMP_CURRENT_OBJECT_IREF = CURRENT_OBJECT_IREF.
    call method OS_CLEAR_CURRENT.
    clear CURRENT_SPECIAL_OBJECT_INFO.
    class CX_OS_OBJECT_STATE definition load.
    raise exception type CX_OS_OBJECT_STATE
         exporting OBJECT = TEMP_CURRENT_OBJECT_IREF
                   TEXTID = CX_OS_OBJECT_STATE=&gt;TRANSIENT.


  when OSCON_OSTATUS_NEW     or
       OSCON_OSTATUS_CHANGED or
       OSCON_OSTATUS_LOADED.

*   * 1c. Object is new, loaded or changed - continue


  when OSCON_OSTATUS_NOT_LOADED.

*   * 1d. Object is not_loaded: Check DBSTATUS:
    case CURRENT_OBJECT_INFO-PM_DBSTATUS.


    when OSCON_DBSTATUS_EXISTING
      or OSCON_DBSTATUS_UNKNOWN.

*     * 1d1. DBSTATUS Existing/Unknown - continue


    when OSCON_DBSTATUS_NOT_EXISTING.
*     * 1d2. DBSTATUS Not existing - Error
*!!!! error: No DB entry for the object
      TEMP_CURRENT_OBJECT_IREF = CURRENT_OBJECT_IREF.
      call method OS_CLEAR_CURRENT.
      clear CURRENT_SPECIAL_OBJECT_INFO.
      class CX_OS_OBJECT_STATE definition load.
      raise exception type CX_OS_OBJECT_STATE
           exporting OBJECT = TEMP_CURRENT_OBJECT_IREF
                     TEXTID = CX_OS_OBJECT_STATE=&gt;CREATED_AND_DELETED.

    endcase. &quot;PM_DBSTATUS
  endcase. &quot;PM_STATUS

* * 2. Completion: call OS_PM_DELETED_PERSISTENT
  call method OS_PM_DELETED_PERSISTENT.

  clear CURRENT_SPECIAL_OBJECT_INFO.

           &quot;PM_DELETE_PERSISTENT
  endmethod.</source>
  </method>
  <method CLSNAME="CL_OS_CA_COMMON" CMPNAME="PM_LOAD" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method PM_LOAD.
***BUILD 090501
************************************************************************
* Purpose        : Load data from DB into Object specified by CURRENT
*
* Version        : 2.0
*
* Precondition   : CURRENT_* is set
*
* Postcondition  : object is loaded or exceptions is raised
*
* OO Exceptions  : propagates PM_LOAD_AND_SET_ATTRIBUTES
*
* Implementation : call PM_LOAD_AND_SET_ATTRIBUTES
*
************************************************************************
* Changelog:
* - 2000-03-02   : (BGR) Initial Version
* - 2000-08-03   : (SB)  OO Exceptions
* - 2001-11-14   : (SB)  Type mapping
************************************************************************

  call method PM_LOAD_AND_SET_ATTRIBUTES
       exporting I_BUSINESS_KEY =
                         CURRENT_SPECIAL_OBJECT_INFO-BUSINESS_KEY.

           &quot;PM_LOAD
  endmethod.</source>
  </method>
  <method CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="PM_LOAD_AND_SET_ATTRIBUTES" VERSION="1" LANGU="E" DESCRIPT="Loads and Sets Persistent Attributes" EXPOSURE="1" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="PM_LOAD_AND_SET_ATTRIBUTES" SCONAME="I_BUSINESS_KEY" VERSION="1" LANGU="E" DESCRIPT="Business Key" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TYP_BUSINESS_KEY" PAROPTIONL="X"/>
   <exception CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="PM_LOAD_AND_SET_ATTRIBUTES" SCONAME="CX_OS_OBJECT_NOT_FOUND" VERSION="1" LANGU="E" DESCRIPT="Object Services Exception" MTDTYPE="0" EDITORDER="0 "/>
   <source>method PM_LOAD_AND_SET_ATTRIBUTES.
***BUILD 090501
     &quot; importing I_BUSINESS_KEY type TYP_BUSINESS_KEY optional

************************************************************************
* Purpose        : Load object data of a persistent object and set
*                  object&apos;s attributes
*                  if CURRENT is clear, load data using I_BUSINESS_KEY.
*                  if CURRENT is set, use the BKEY stored there.
*
* Version        : 2.0
*
* Precondition   : An entry for the given Business Key exists on
*                  database. CURRENT can be set (use this
*                  object to set attributes to) or clear.
*
* Postcondition  : Persistent object data is loaded and object
*                  attributes are set. CURRENT is set.
*
* OO Exceptions  : propagates PM_CHECK_AND_SET_ATTRIBUTES
*                  propagates MAP_LOAD_FROM_DATABASE_KEY/GUID
*
* Implementation : 1. Check Source of DB Keys: Business Key from
*                     CURRENT_SPECIAL_OBJECT_INFO or from I_BUSINESS_KEY
*                  2. Load from Database
*                  2.a. Type Mapping: Set E_TYPE and return if case of
*                       type mismatch
*                  3. Check loaded data and set object&apos;s attributes
*
************************************************************************
* Changelog:
* - 2000-03-07   : (BGR) Initial Version 2.0
* - 2000-05-17   : (BGR) use PM_CHECK_AND_SET_ATTRIBUTES
* - 2000-08-03   : (SB) OO Exceptions
* - 2004-01-21   : (SB) Type Mapping Refactoring
* - 2005-02-22   : (SB) Set Exception parameters
************************************************************************

  data: OBJECT_DATA_TAB     type TYP_DB_DATA_TAB,
        OBJECT_DATA         type TYP_DB_DATA,
        BUSINESS_KEY        type TYP_BUSINESS_KEY,
        BUSINESS_KEY_TAB    type TYP_BUSINESS_KEY_TAB.

  data: SERIALIZED_BUSINESS_KEY  type STRING .

* * 1. Check Source of DB Keys: Business Key from
* *    CURRENT_SPECIAL_OBJECT_INFO or from I_BUSINESS_KEY?
  if ( CURRENT_OBJECT_IREF is initial ).

    BUSINESS_KEY = I_BUSINESS_KEY.

  else. &quot;( CURRENT is set ).

*   * Get BKey from CURRENT_SPECIAL_OBJECT_INFO
    BUSINESS_KEY = CURRENT_SPECIAL_OBJECT_INFO-BUSINESS_KEY.

  endif. &quot;( CURRENT set? ).


* * 2. Load from Database
  try.
      append BUSINESS_KEY to BUSINESS_KEY_TAB.
      call method MAP_LOAD_FROM_DATABASE_KEY
           exporting I_BUSINESS_KEY_TAB = BUSINESS_KEY_TAB
           receiving result = OBJECT_DATA_TAB.
    catch CX_OS_DB_SELECT.
      class CX_OS_OBJECT_NOT_FOUND definition load.
      call method MAP_SERIALIZE_BKEY
           exporting I_BUSINESS_KEY = BUSINESS_KEY
           receiving RESULT = SERIALIZED_BUSINESS_KEY.
      raise exception type CX_OS_OBJECT_NOT_FOUND
        exporting
          BKEY   = SERIALIZED_BUSINESS_KEY
          TEXTID = CX_OS_OBJECT_NOT_FOUND=&gt;BY_BKEY.
  endtry.

  read table OBJECT_DATA_TAB into OBJECT_DATA index 1.


* * 3. Now Check the loaded data and set the Object.
  call method PM_CHECK_AND_SET_ATTRIBUTES
       exporting I_OBJECT_DATA  = OBJECT_DATA
                 I_BUSINESS_KEY = BUSINESS_KEY
                 I_ID_PROVIDED  = ID_STATUS_COMPLETE.

           &quot;PM_LOAD_AND_SET_ATTRIBUTES
  endmethod.</source>
  </method>
  <method CLSNAME="CL_OS_CA_COMMON" CMPNAME="SAVE_SPECIAL_OBJECT_INFO" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method SAVE_SPECIAL_OBJECT_INFO.
***BUILD 090501
************************************************************************
* Purpose        : Save CURRENT_SPECIAL_OBJECT_INFO into
*                  SPECIAL_OBJECT_INFO
*
* Version        : 2.0
*
* Precondition   : Index is set in CURRENT_OBJECT_INDEX
*
* Postcondition  : entry is saved
*
* OO Exceptions  : -
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 2000-03-02   : (BGR) Initial Version
************************************************************************

  modify SPECIAL_OBJECT_INFO from CURRENT_SPECIAL_OBJECT_INFO
         index CURRENT_OBJECT_INDEX.

           &quot;SAVE_SPECIAL_OBJECT_INFO
  endmethod.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZCL_USFP_T_ASA_STKUP" VERSION="1" LANGU="E" DESCRIPT="Persistence layer for table ZUSFPT_ASA_STKUP" CATEGORY="10" EXPOSURE="1" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " ZSAPLINK_PLUGIN_MAJOR_VERSION="0 " ZSAPLINK_PLUGIN_MINOR_VERSION="1 " ZSAPLINK_PLUGIN_BUILD_VERSION="0 " ZSAPLINK_PLUGIN_INFO1="ZSAPLINK_CLASS is part of the main ZSAPLINK project --&gt; This plugin found there instead of ZSAPLINK_PLUGINS projects" ZSAPLINK_PLUGIN_INFO2="SAPLINK homepage: https://www.assembla.com/spaces/saplink/wiki" ZSAPLINK_PLUGIN_INFO3="Download from https://www.assembla.com/code/saplink/subversion/nodes" ZSAPLINK_PLUGIN_INFO4="and navigate to:  trunk -&gt; core -&gt; ZSAPLINK -&gt; CLAS -&gt; ZSAPLINK_CLASS.slnk">
  <friends CLSNAME="ZCL_USFP_T_ASA_STKUP" REFCLSNAME="ZCB_USFP_T_ASA_STKUP" FRIENDTYPE="0" VERSION="1" STATE="1"/>
  <implementing CLSNAME="ZCL_USFP_T_ASA_STKUP" REFCLSNAME="IF_OS_STATE" VERSION="1" EXPOSURE="2" STATE="1" RELTYPE="1" EDITORDER="0 "/>
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <typeClasDef CLSNAME="ZCL_USFP_T_ASA_STKUP" TYPEGROUP="CL_OS_SYSTEM" VERSION="1" TPUTYPE="1"/>
  <attribute CLSNAME="ZCL_USFP_T_ASA_STKUP" CMPNAME="ADATA" VERSION="1" LANGU="E" DESCRIPT="aSa Stock Updating Data" EXPOSURE="1" STATE="1" EDITORDER="4 " ATTDECLTYP="0" ATTPERSIST="X" ATTEXPVIRT="2" TYPTYPE="1" TYPE="ZUSFP_ASA_STOCK_UPD_DATA" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_USFP_T_ASA_STKUP" CMPNAME="AEDAT" VERSION="1" LANGU="E" DESCRIPT="Creation Date" EXPOSURE="1" STATE="1" EDITORDER="1 " ATTDECLTYP="0" ATTPERSIST="X" ATTEXPVIRT="7" TYPTYPE="1" TYPE="RSCRMTSTMP" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_USFP_T_ASA_STKUP" CMPNAME="LGHDL" VERSION="1" LANGU="E" DESCRIPT="Application Log: Log Handle" EXPOSURE="1" STATE="1" EDITORDER="6 " ATTDECLTYP="0" ATTPERSIST="X" ATTEXPVIRT="2" TYPTYPE="1" TYPE="BALLOGHNDL" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_USFP_T_ASA_STKUP" CMPNAME="UMETH" VERSION="1" LANGU="E" DESCRIPT="aSa Stock Updating Method" EXPOSURE="1" STATE="1" EDITORDER="5 " ATTDECLTYP="0" ATTPERSIST="X" ATTEXPVIRT="2" TYPTYPE="1" TYPE="ZUSFP_ASA_UPD_STK_METHOD" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_USFP_T_ASA_STKUP" CMPNAME="UNAME" VERSION="1" LANGU="E" DESCRIPT="User Name" EXPOSURE="1" STATE="1" EDITORDER="2 " ATTDECLTYP="0" ATTPERSIST="X" ATTEXPVIRT="7" TYPTYPE="1" TYPE="UNAME" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_USFP_T_ASA_STKUP" CMPNAME="UTZON" VERSION="1" LANGU="E" DESCRIPT="Time Zone of User" EXPOSURE="1" STATE="1" EDITORDER="3 " ATTDECLTYP="0" ATTPERSIST="X" ATTEXPVIRT="2" TYPTYPE="1" TYPE="SUIDTZONE" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <interfaceMethod CLSNAME="ZCL_USFP_T_ASA_STKUP" CPDNAME="IF_OS_STATE~GET">
   <source>method IF_OS_STATE~GET.
***BUILD 090501
     &quot; returning result type ref to object
************************************************************************
* Purpose        : Get state.
*
* Version        : 2.0
*
* Precondition   : -
*
* Postcondition  : -
*
* OO Exceptions  : -
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 2000-03-07   : (BGR) Initial Version 2.0
************************************************************************
* GENERATED: Do not modify
************************************************************************

  data: STATE_OBJECT type ref to CL_OS_STATE.

  create object STATE_OBJECT.
  call method STATE_OBJECT-&gt;SET_STATE_FROM_OBJECT( ME ).
  result = STATE_OBJECT.

  endmethod.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_USFP_T_ASA_STKUP" CPDNAME="IF_OS_STATE~HANDLE_EXCEPTION">
   <source>method IF_OS_STATE~HANDLE_EXCEPTION.
***BUILD 090501
     &quot; importing I_EXCEPTION type ref to IF_OS_EXCEPTION_INFO optional
     &quot; importing I_EX_OS type ref to CX_OS_OBJECT_NOT_FOUND optional
************************************************************************
* Purpose        : Handles exceptions during attribute access.
*
* Version        : 2.0
*
* Precondition   : -
*
* Postcondition  : -
*
* OO Exceptions  : CX_OS_OBJECT_NOT_FOUND
*
* Implementation : If an exception is raised during attribut access,
*                  this method is called and the exception is passed
*                  as a paramater. The default is to raise the exception
*                  again, so that the caller can handle the exception.
*                  But it is also possible to handle the exception
*                  here in the callee.
*
************************************************************************
* Changelog:
* - 2000-03-07   : (BGR) Initial Version 2.0
* - 2000-08-02   : (SB)  OO Exceptions
************************************************************************
* Modify if you like
************************************************************************

  if i_ex_os is not initial.
    raise exception i_ex_os.
  endif.

  endmethod.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_USFP_T_ASA_STKUP" CPDNAME="IF_OS_STATE~INIT">
   <source>method IF_OS_STATE~INIT.
***BUILD 090501
&quot;#EC NEEDED
************************************************************************
* Purpose        : Initialisation of the transient state partition.
*
* Version        : 2.0
*
* Precondition   : -
*
* Postcondition  : Transient state is initial.
*
* OO Exceptions  : -
*
* Implementation : Caution!: Avoid Throwing ACCESS Events.
*
************************************************************************
* Changelog:
* - 2000-03-07   : (BGR) Initial Version 2.0
************************************************************************
* Modify if you like
************************************************************************

  endmethod.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_USFP_T_ASA_STKUP" CPDNAME="IF_OS_STATE~INVALIDATE">
   <source>method IF_OS_STATE~INVALIDATE.
***BUILD 090501
&quot;#EC NEEDED
************************************************************************
* Purpose        : Do something before all persistent attributes are
*                  cleared.
*
* Version        : 2.0
*
* Precondition   : -
*
* Postcondition  : -
*
* OO Exceptions  : -
*
* Implementation : Whatever you like to do.
*
************************************************************************
* Changelog:
* - 2000-03-07   : (BGR) Initial Version 2.0
************************************************************************
* Modify if you like
************************************************************************

  endmethod.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_USFP_T_ASA_STKUP" CPDNAME="IF_OS_STATE~SET">
   <source>method IF_OS_STATE~SET.
***BUILD 090501
     &quot; importing I_STATE type ref to object
************************************************************************
* Purpose        : Set state.
*
* Version        : 2.0
*
* Precondition   : -
*
* Postcondition  : -
*
* OO Exceptions  : -
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 2000-03-07   : (BGR) Initial Version 2.0
************************************************************************
* GENERATED: Do not modify
************************************************************************

  data: STATE_OBJECT type ref to CL_OS_STATE.

  STATE_OBJECT ?= I_STATE.
  call method STATE_OBJECT-&gt;SET_OBJECT_FROM_STATE( ME ).

  endmethod.</source>
  </interfaceMethod>
  <method CLSNAME="ZCL_USFP_T_ASA_STKUP" CMPNAME="GET_ADATA" VERSION="1" LANGU="E" DESCRIPT="Reads Attribute ADATA" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="4" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_USFP_T_ASA_STKUP" CMPNAME="GET_ADATA" SCONAME="RESULT" VERSION="1" LANGU="E" DESCRIPT="Attribute Value" CMPTYPE="1" MTDTYPE="4" EDITORDER="0 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="ZUSFP_ASA_STOCK_UPD_DATA"/>
   <exception CLSNAME="ZCL_USFP_T_ASA_STKUP" CMPNAME="GET_ADATA" SCONAME="CX_OS_OBJECT_NOT_FOUND" VERSION="1" LANGU="E" DESCRIPT="Object Services Exception" MTDTYPE="4" EDITORDER="0 "/>
   <source>method GET_ADATA.
***BUILD 090501
     &quot; returning RESULT
     &quot; raising CX_OS_OBJECT_NOT_FOUND
************************************************************************
* Purpose        : Get Attribute ADATA
*
* Version        : 2.0
*
* Precondition   : -
*
* Postcondition  : The object state is loaded, result is set
*
* OO Exceptions  : CX_OS_OBJECT_NOT_FOUND
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 2000-03-14   : (BGR) Version 2.0
* - 2000-07-28   : (SB)  OO Exceptions
************************************************************************

* * Inform class agent and handle exceptions
  state_read_access.

  result = ADATA.

           &quot; GET_ADATA
  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_USFP_T_ASA_STKUP" CMPNAME="GET_AEDAT" VERSION="1" LANGU="E" DESCRIPT="Reads Attribute AEDAT" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="4" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_USFP_T_ASA_STKUP" CMPNAME="GET_AEDAT" SCONAME="RESULT" VERSION="1" LANGU="E" DESCRIPT="Attribute Value" CMPTYPE="1" MTDTYPE="4" EDITORDER="0 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="RSCRMTSTMP"/>
   <exception CLSNAME="ZCL_USFP_T_ASA_STKUP" CMPNAME="GET_AEDAT" SCONAME="CX_OS_OBJECT_NOT_FOUND" VERSION="1" LANGU="E" DESCRIPT="Object Services Exception" MTDTYPE="4" EDITORDER="0 "/>
   <source>method GET_AEDAT.
***BUILD 090501
     &quot; returning RESULT
     &quot; raising CX_OS_OBJECT_NOT_FOUND
************************************************************************
* Purpose        : Get Attribute AEDAT
*
* Version        : 2.0
*
* Precondition   : -
*
* Postcondition  : The object state is loaded, result is set
*
* OO Exceptions  : CX_OS_OBJECT_NOT_FOUND
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 2000-03-14   : (BGR) Version 2.0
* - 2000-07-28   : (SB)  OO Exceptions
************************************************************************

* * Inform class agent and handle exceptions
  state_read_access.

  result = AEDAT.

           &quot; GET_AEDAT
  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_USFP_T_ASA_STKUP" CMPNAME="GET_LGHDL" VERSION="1" LANGU="E" DESCRIPT="Reads Attribute LGHDL" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="4" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_USFP_T_ASA_STKUP" CMPNAME="GET_LGHDL" SCONAME="RESULT" VERSION="1" LANGU="E" DESCRIPT="Attribute Value" CMPTYPE="1" MTDTYPE="4" EDITORDER="0 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="BALLOGHNDL"/>
   <exception CLSNAME="ZCL_USFP_T_ASA_STKUP" CMPNAME="GET_LGHDL" SCONAME="CX_OS_OBJECT_NOT_FOUND" VERSION="1" LANGU="E" DESCRIPT="Object Services Exception" MTDTYPE="4" EDITORDER="0 "/>
   <source>method GET_LGHDL.
***BUILD 090501
     &quot; returning RESULT
     &quot; raising CX_OS_OBJECT_NOT_FOUND
************************************************************************
* Purpose        : Get Attribute LGHDL
*
* Version        : 2.0
*
* Precondition   : -
*
* Postcondition  : The object state is loaded, result is set
*
* OO Exceptions  : CX_OS_OBJECT_NOT_FOUND
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 2000-03-14   : (BGR) Version 2.0
* - 2000-07-28   : (SB)  OO Exceptions
************************************************************************

* * Inform class agent and handle exceptions
  state_read_access.

  result = LGHDL.

           &quot; GET_LGHDL
  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_USFP_T_ASA_STKUP" CMPNAME="GET_UMETH" VERSION="1" LANGU="E" DESCRIPT="Reads Attribute UMETH" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="4" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_USFP_T_ASA_STKUP" CMPNAME="GET_UMETH" SCONAME="RESULT" VERSION="1" LANGU="E" DESCRIPT="Attribute Value" CMPTYPE="1" MTDTYPE="4" EDITORDER="0 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="ZUSFP_ASA_UPD_STK_METHOD"/>
   <exception CLSNAME="ZCL_USFP_T_ASA_STKUP" CMPNAME="GET_UMETH" SCONAME="CX_OS_OBJECT_NOT_FOUND" VERSION="1" LANGU="E" DESCRIPT="Object Services Exception" MTDTYPE="4" EDITORDER="0 "/>
   <source>method GET_UMETH.
***BUILD 090501
     &quot; returning RESULT
     &quot; raising CX_OS_OBJECT_NOT_FOUND
************************************************************************
* Purpose        : Get Attribute UMETH
*
* Version        : 2.0
*
* Precondition   : -
*
* Postcondition  : The object state is loaded, result is set
*
* OO Exceptions  : CX_OS_OBJECT_NOT_FOUND
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 2000-03-14   : (BGR) Version 2.0
* - 2000-07-28   : (SB)  OO Exceptions
************************************************************************

* * Inform class agent and handle exceptions
  state_read_access.

  result = UMETH.

           &quot; GET_UMETH
  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_USFP_T_ASA_STKUP" CMPNAME="GET_UNAME" VERSION="1" LANGU="E" DESCRIPT="Reads Attribute UNAME" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="4" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_USFP_T_ASA_STKUP" CMPNAME="GET_UNAME" SCONAME="RESULT" VERSION="1" LANGU="E" DESCRIPT="Attribute Value" CMPTYPE="1" MTDTYPE="4" EDITORDER="0 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="UNAME"/>
   <exception CLSNAME="ZCL_USFP_T_ASA_STKUP" CMPNAME="GET_UNAME" SCONAME="CX_OS_OBJECT_NOT_FOUND" VERSION="1" LANGU="E" DESCRIPT="Object Services Exception" MTDTYPE="4" EDITORDER="0 "/>
   <source>method GET_UNAME.
***BUILD 090501
     &quot; returning RESULT
     &quot; raising CX_OS_OBJECT_NOT_FOUND
************************************************************************
* Purpose        : Get Attribute UNAME
*
* Version        : 2.0
*
* Precondition   : -
*
* Postcondition  : The object state is loaded, result is set
*
* OO Exceptions  : CX_OS_OBJECT_NOT_FOUND
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 2000-03-14   : (BGR) Version 2.0
* - 2000-07-28   : (SB)  OO Exceptions
************************************************************************

* * Inform class agent and handle exceptions
  state_read_access.

  result = UNAME.

           &quot; GET_UNAME
  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_USFP_T_ASA_STKUP" CMPNAME="GET_UTZON" VERSION="1" LANGU="E" DESCRIPT="Reads Attribute UTZON" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="4" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_USFP_T_ASA_STKUP" CMPNAME="GET_UTZON" SCONAME="RESULT" VERSION="1" LANGU="E" DESCRIPT="Attribute Value" CMPTYPE="1" MTDTYPE="4" EDITORDER="0 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="SUIDTZONE"/>
   <exception CLSNAME="ZCL_USFP_T_ASA_STKUP" CMPNAME="GET_UTZON" SCONAME="CX_OS_OBJECT_NOT_FOUND" VERSION="1" LANGU="E" DESCRIPT="Object Services Exception" MTDTYPE="4" EDITORDER="0 "/>
   <source>method GET_UTZON.
***BUILD 090501
     &quot; returning RESULT
     &quot; raising CX_OS_OBJECT_NOT_FOUND
************************************************************************
* Purpose        : Get Attribute UTZON
*
* Version        : 2.0
*
* Precondition   : -
*
* Postcondition  : The object state is loaded, result is set
*
* OO Exceptions  : CX_OS_OBJECT_NOT_FOUND
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 2000-03-14   : (BGR) Version 2.0
* - 2000-07-28   : (SB)  OO Exceptions
************************************************************************

* * Inform class agent and handle exceptions
  state_read_access.

  result = UTZON.

           &quot; GET_UTZON
  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_USFP_T_ASA_STKUP" CMPNAME="SET_ADATA" VERSION="1" LANGU="E" DESCRIPT="Sets Attribute ADATA" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="5" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_USFP_T_ASA_STKUP" CMPNAME="SET_ADATA" SCONAME="I_ADATA" VERSION="1" LANGU="E" DESCRIPT="Attribute Value" CMPTYPE="1" MTDTYPE="5" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZUSFP_ASA_STOCK_UPD_DATA"/>
   <exception CLSNAME="ZCL_USFP_T_ASA_STKUP" CMPNAME="SET_ADATA" SCONAME="CX_OS_OBJECT_NOT_FOUND" VERSION="1" LANGU="E" DESCRIPT="Object Services Exception" MTDTYPE="5" EDITORDER="0 "/>
   <source>method SET_ADATA.
***BUILD 090501
     &quot; importing I_ADATA
     &quot; raising CX_OS_OBJECT_NOT_FOUND
************************************************************************
* Purpose        : Set attribute ADATA
*
* Version        : 2.0
*
* Precondition   : -
*
* Postcondition  : The object state is loaded, attribute is set
*
* OO Exceptions  : CX_OS_OBJECT_NOT_FOUND
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 2000-03-14   : (BGR) Version 2.0
* - 2000-07-28   : (SB)  OO Exceptions
* - 2000-10-04   : (SB)  Namespaces
************************************************************************

* * Inform class agent and handle exceptions
  state_write_access.

  if ( I_ADATA &lt;&gt; ADATA ).

    ADATA = I_ADATA.

*   * Inform class agent and handle exceptions
    state_changed.

  endif. &quot;( I_ADATA &lt;&gt; ADATA )

           &quot; GET_ADATA
  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_USFP_T_ASA_STKUP" CMPNAME="SET_LGHDL" VERSION="1" LANGU="E" DESCRIPT="Sets Attribute LGHDL" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="5" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_USFP_T_ASA_STKUP" CMPNAME="SET_LGHDL" SCONAME="I_LGHDL" VERSION="1" LANGU="E" DESCRIPT="Attribute Value" CMPTYPE="1" MTDTYPE="5" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="BALLOGHNDL"/>
   <exception CLSNAME="ZCL_USFP_T_ASA_STKUP" CMPNAME="SET_LGHDL" SCONAME="CX_OS_OBJECT_NOT_FOUND" VERSION="1" LANGU="E" DESCRIPT="Object Services Exception" MTDTYPE="5" EDITORDER="0 "/>
   <source>method SET_LGHDL.
***BUILD 090501
     &quot; importing I_LGHDL
     &quot; raising CX_OS_OBJECT_NOT_FOUND
************************************************************************
* Purpose        : Set attribute LGHDL
*
* Version        : 2.0
*
* Precondition   : -
*
* Postcondition  : The object state is loaded, attribute is set
*
* OO Exceptions  : CX_OS_OBJECT_NOT_FOUND
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 2000-03-14   : (BGR) Version 2.0
* - 2000-07-28   : (SB)  OO Exceptions
* - 2000-10-04   : (SB)  Namespaces
************************************************************************

* * Inform class agent and handle exceptions
  state_write_access.

  if ( I_LGHDL &lt;&gt; LGHDL ).

    LGHDL = I_LGHDL.

*   * Inform class agent and handle exceptions
    state_changed.

  endif. &quot;( I_LGHDL &lt;&gt; LGHDL )

           &quot; GET_LGHDL
  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_USFP_T_ASA_STKUP" CMPNAME="SET_UMETH" VERSION="1" LANGU="E" DESCRIPT="Sets Attribute UMETH" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="5" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_USFP_T_ASA_STKUP" CMPNAME="SET_UMETH" SCONAME="I_UMETH" VERSION="1" LANGU="E" DESCRIPT="Attribute Value" CMPTYPE="1" MTDTYPE="5" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZUSFP_ASA_UPD_STK_METHOD"/>
   <exception CLSNAME="ZCL_USFP_T_ASA_STKUP" CMPNAME="SET_UMETH" SCONAME="CX_OS_OBJECT_NOT_FOUND" VERSION="1" LANGU="E" DESCRIPT="Object Services Exception" MTDTYPE="5" EDITORDER="0 "/>
   <source>method SET_UMETH.
***BUILD 090501
     &quot; importing I_UMETH
     &quot; raising CX_OS_OBJECT_NOT_FOUND
************************************************************************
* Purpose        : Set attribute UMETH
*
* Version        : 2.0
*
* Precondition   : -
*
* Postcondition  : The object state is loaded, attribute is set
*
* OO Exceptions  : CX_OS_OBJECT_NOT_FOUND
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 2000-03-14   : (BGR) Version 2.0
* - 2000-07-28   : (SB)  OO Exceptions
* - 2000-10-04   : (SB)  Namespaces
************************************************************************

* * Inform class agent and handle exceptions
  state_write_access.

  if ( I_UMETH &lt;&gt; UMETH ).

    UMETH = I_UMETH.

*   * Inform class agent and handle exceptions
    state_changed.

  endif. &quot;( I_UMETH &lt;&gt; UMETH )

           &quot; GET_UMETH
  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_USFP_T_ASA_STKUP" CMPNAME="SET_UTZON" VERSION="1" LANGU="E" DESCRIPT="Sets Attribute UTZON" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="5" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_USFP_T_ASA_STKUP" CMPNAME="SET_UTZON" SCONAME="I_UTZON" VERSION="1" LANGU="E" DESCRIPT="Attribute Value" CMPTYPE="1" MTDTYPE="5" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SUIDTZONE"/>
   <exception CLSNAME="ZCL_USFP_T_ASA_STKUP" CMPNAME="SET_UTZON" SCONAME="CX_OS_OBJECT_NOT_FOUND" VERSION="1" LANGU="E" DESCRIPT="Object Services Exception" MTDTYPE="5" EDITORDER="0 "/>
   <source>method SET_UTZON.
***BUILD 090501
     &quot; importing I_UTZON
     &quot; raising CX_OS_OBJECT_NOT_FOUND
************************************************************************
* Purpose        : Set attribute UTZON
*
* Version        : 2.0
*
* Precondition   : -
*
* Postcondition  : The object state is loaded, attribute is set
*
* OO Exceptions  : CX_OS_OBJECT_NOT_FOUND
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 2000-03-14   : (BGR) Version 2.0
* - 2000-07-28   : (SB)  OO Exceptions
* - 2000-10-04   : (SB)  Namespaces
************************************************************************

* * Inform class agent and handle exceptions
  state_write_access.

  if ( I_UTZON &lt;&gt; UTZON ).

    UTZON = I_UTZON.

*   * Inform class agent and handle exceptions
    state_changed.

  endif. &quot;( I_UTZON &lt;&gt; UTZON )

           &quot; GET_UTZON
  endmethod.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZUSFPCO_SI_GET_RAW_MATERIAL_IN" VERSION="1" LANGU="E" DESCRIPT="Proxy Class (generated)" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSCCINCL="X" FIXPT="X" UNICODE="X" RSTAT="P" CLSBCCAT="00" CLSPROXY="X" DURATION_TYPE="0 " RISK_LEVEL="0 " ZSAPLINK_PLUGIN_MAJOR_VERSION="0 " ZSAPLINK_PLUGIN_MINOR_VERSION="1 " ZSAPLINK_PLUGIN_BUILD_VERSION="0 " ZSAPLINK_PLUGIN_INFO1="ZSAPLINK_CLASS is part of the main ZSAPLINK project --&gt; This plugin found there instead of ZSAPLINK_PLUGINS projects" ZSAPLINK_PLUGIN_INFO2="SAPLINK homepage: https://www.assembla.com/spaces/saplink/wiki" ZSAPLINK_PLUGIN_INFO3="Download from https://www.assembla.com/code/saplink/subversion/nodes" ZSAPLINK_PLUGIN_INFO4="and navigate to:  trunk -&gt; core -&gt; ZSAPLINK -&gt; CLAS -&gt; ZSAPLINK_CLASS.slnk" REFCLSNAME="CL_PROXY_CLIENT">
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros></localMacros>
  <inheritance CLSNAME="ZUSFPCO_SI_GET_RAW_MATERIAL_IN" REFCLSNAME="CL_PROXY_CLIENT" VERSION="1" STATE="1"/>
  <method CLSNAME="ZUSFPCO_SI_GET_RAW_MATERIAL_IN" CMPNAME="CONSTRUCTOR" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="2" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZUSFPCO_SI_GET_RAW_MATERIAL_IN" CMPNAME="CONSTRUCTOR" SCONAME="LOGICAL_PORT_NAME" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="2" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="PRX_LOGICAL_PORT_NAME" PAROPTIONL="X"/>
   <exception CLSNAME="ZUSFPCO_SI_GET_RAW_MATERIAL_IN" CMPNAME="CONSTRUCTOR" SCONAME="CX_AI_SYSTEM_FAULT" VERSION="1" LANGU="E" MTDTYPE="2" EDITORDER="1 "/>
   <source>method CONSTRUCTOR.

  super-&gt;constructor(
    class_name          = &apos;ZUSFPCO_SI_GET_RAW_MATERIAL_IN&apos;
    logical_port_name   = logical_port_name
  ).

  endmethod.</source>
  </method>
  <method CLSNAME="ZUSFPCO_SI_GET_RAW_MATERIAL_IN" CMPNAME="SI_GET_RAW_MATERIAL_INVENTORYO" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZUSFPCO_SI_GET_RAW_MATERIAL_IN" CMPNAME="SI_GET_RAW_MATERIAL_INVENTORYO" SCONAME="OUTPUT" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZUSFPMT_GET_RAW_MATERIAL_SAP"/>
   <parameter CLSNAME="ZUSFPCO_SI_GET_RAW_MATERIAL_IN" CMPNAME="SI_GET_RAW_MATERIAL_INVENTORYO" SCONAME="INPUT" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="ZUSFPMT_GET_RAW_MATERIAL_SAP_R"/>
   <exception CLSNAME="ZUSFPCO_SI_GET_RAW_MATERIAL_IN" CMPNAME="SI_GET_RAW_MATERIAL_INVENTORYO" SCONAME="CX_AI_SYSTEM_FAULT" VERSION="1" LANGU="E" DESCRIPT="Communication Error" MTDTYPE="0" EDITORDER="1 "/>
   <source>method SI_GET_RAW_MATERIAL_INVENTORYO.

  data:
    ls_parmbind type abap_parmbind,
    lt_parmbind type abap_parmbind_tab.

  ls_parmbind-name = &apos;OUTPUT&apos;.
  ls_parmbind-kind = cl_abap_objectdescr=&gt;importing.
  get reference of OUTPUT into ls_parmbind-value.
  insert ls_parmbind into table lt_parmbind.

  ls_parmbind-name = &apos;INPUT&apos;.
  ls_parmbind-kind = cl_abap_objectdescr=&gt;exporting.
  get reference of INPUT into ls_parmbind-value.
  insert ls_parmbind into table lt_parmbind.

  if_proxy_client~execute(
    exporting
      method_name = &apos;SI_GET_RAW_MATERIAL_INVENTORYO&apos;
    changing
      parmbind_tab = lt_parmbind
  ).

  endmethod.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZCA_USFP_T_ASA_STKUP" VERSION="1" LANGU="E" DESCRIPT="Agent Persistence layer for table ZUSFPT_ASA_STKUP" CATEGORY="00" EXPOSURE="0" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " ZSAPLINK_PLUGIN_MAJOR_VERSION="0 " ZSAPLINK_PLUGIN_MINOR_VERSION="1 " ZSAPLINK_PLUGIN_BUILD_VERSION="0 " ZSAPLINK_PLUGIN_INFO1="ZSAPLINK_CLASS is part of the main ZSAPLINK project --&gt; This plugin found there instead of ZSAPLINK_PLUGINS projects" ZSAPLINK_PLUGIN_INFO2="SAPLINK homepage: https://www.assembla.com/spaces/saplink/wiki" ZSAPLINK_PLUGIN_INFO3="Download from https://www.assembla.com/code/saplink/subversion/nodes" ZSAPLINK_PLUGIN_INFO4="and navigate to:  trunk -&gt; core -&gt; ZSAPLINK -&gt; CLAS -&gt; ZSAPLINK_CLASS.slnk" REFCLSNAME="ZCB_USFP_T_ASA_STKUP">
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <attribute CLSNAME="ZCA_USFP_T_ASA_STKUP" CMPNAME="AGENT" VERSION="1" LANGU="E" DESCRIPT="Class Agent - Singleton" EXPOSURE="2" STATE="1" EDITORDER="0 " ATTDECLTYP="1" ATTRDONLY="X" ATTEXPVIRT="0" TYPTYPE="3" TYPE="ZCA_USFP_T_ASA_STKUP" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <inheritance CLSNAME="ZCA_USFP_T_ASA_STKUP" REFCLSNAME="ZCB_USFP_T_ASA_STKUP" VERSION="1" STATE="1"/>
  <method CLSNAME="ZCA_USFP_T_ASA_STKUP" CMPNAME="CLASS_CONSTRUCTOR" VERSION="1" LANGU="E" DESCRIPT="Class Constructor" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="2" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CLASS_CONSTRUCTOR.
***BUILD 090501
************************************************************************
* Purpose        : Initialize the &apos;class&apos;.
*
* Version        : 2.0
*
* Precondition   : -
*
* Postcondition  : Singleton is created.
*
* OO Exceptions  : -
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 1999-09-20   : (OS) Initial Version
* - 2000-03-06   : (BGR) 2.0 modified REGISTER_CLASS_AGENT
************************************************************************
* GENERATED: Do not modify
************************************************************************

  create object AGENT.

  call method AGENT-&gt;REGISTER_CLASS_AGENT
    exporting
      I_CLASS_NAME          = &apos;ZCL_USFP_T_ASA_STKUP&apos;
      I_CLASS_AGENT_NAME    = &apos;ZCA_USFP_T_ASA_STKUP&apos;
      I_CLASS_GUID          = &apos;FE129FACED021ED5B5BAB46E95400FB8&apos;
      I_CLASS_AGENT_GUID    = &apos;FE129FACED021ED5B5BAB4B556C90FB8&apos;
      I_AGENT               = AGENT
      I_STORAGE_LOCATION    = &apos;ZUSFPT_ASA_STKUP&apos;
      I_CLASS_AGENT_VERSION = &apos;2.0&apos;.

           &quot;CLASS_CONSTRUCTOR
  endmethod.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZCB_USFP_T_ASA_STKUP" VERSION="1" LANGU="E" DESCRIPT="Base agent Persistence layer for table ZUSFPT_ASA_STKUP" CATEGORY="11" EXPOSURE="2" STATE="1" RELEASE="0" CLSABSTRCT="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " ZSAPLINK_PLUGIN_MAJOR_VERSION="0 " ZSAPLINK_PLUGIN_MINOR_VERSION="1 " ZSAPLINK_PLUGIN_BUILD_VERSION="0 " ZSAPLINK_PLUGIN_INFO1="ZSAPLINK_CLASS is part of the main ZSAPLINK project --&gt; This plugin found there instead of ZSAPLINK_PLUGINS projects" ZSAPLINK_PLUGIN_INFO2="SAPLINK homepage: https://www.assembla.com/spaces/saplink/wiki" ZSAPLINK_PLUGIN_INFO3="Download from https://www.assembla.com/code/saplink/subversion/nodes" ZSAPLINK_PLUGIN_INFO4="and navigate to:  trunk -&gt; core -&gt; ZSAPLINK -&gt; CLAS -&gt; ZSAPLINK_CLASS.slnk" REFCLSNAME="CL_OS_CA_COMMON">
  <types CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="TYP_OID" VERSION="1" LANGU="E" DESCRIPT="Type of Generic Object Identifier" EXPOSURE="1" STATE="1" EDITORDER="0 " TYPTYPE="1" TYPE="OS_GUID" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <types CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="TYP_TYPE" VERSION="1" LANGU="E" DESCRIPT="Type of Type Identifier" EXPOSURE="1" STATE="1" EDITORDER="0 " TYPTYPE="1" TYPE="OS_GUID" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <types CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="TYP_OBJECT_REF" VERSION="1" LANGU="E" DESCRIPT="Type of Managed Object" EXPOSURE="1" STATE="1" EDITORDER="1 " TYPTYPE="3" TYPE="ZCL_USFP_T_ASA_STKUP" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <types CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="TYP_BUSINESS_KEY" VERSION="1" LANGU="E" DESCRIPT="Business Key" EXPOSURE="1" STATE="1" EDITORDER="2 " TYPTYPE="4" SRCROW1="7 " SRCCOLUMN1="4 " SRCROW2="10 " SRCCOLUMN2="26 " TYPESRC_LENG="0 " TYPESRC="begin of TYP_BUSINESS_KEY ,
      AEDAT type RSCRMTSTMP ,
      UNAME type UNAME ,
    end of TYP_BUSINESS_KEY
"/>
  <types CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="TYP_BUSINESS_KEY_TAB" VERSION="1" LANGU="E" DESCRIPT="Table Type Object Reference" EXPOSURE="1" STATE="1" EDITORDER="3 " TYPTYPE="4" TYPE="TYP_BUSINESS_KEY" SRCROW1="12 " SRCCOLUMN1="4 " SRCROW2="13 " SRCCOLUMN2="49 " TYPESRC_LENG="0 " TYPESRC="TYP_BUSINESS_KEY_TAB type standard table of
      TYP_BUSINESS_KEY with non-unique default key
"/>
  <types CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="TYP_DB_DATA" VERSION="1" LANGU="E" DESCRIPT="Line-Type Persistent Object Data" EXPOSURE="1" STATE="1" EDITORDER="4 " TYPTYPE="4" SRCROW1="15 " SRCCOLUMN1="4 " SRCROW2="22 " SRCCOLUMN2="21 " TYPESRC_LENG="0 " TYPESRC="begin of TYP_DB_DATA ,
      AEDAT type RSCRMTSTMP ,
      UNAME type UNAME ,
      UTZON type SUIDTZONE ,
      ADATA type ZUSFP_ASA_STOCK_UPD_DATA ,
      UMETH type ZUSFP_ASA_UPD_STK_METHOD ,
      LGHDL type BALLOGHNDL ,
    end of TYP_DB_DATA
"/>
  <types CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="TYP_DB_DATA_TAB" VERSION="1" LANGU="E" DESCRIPT="Table-Type Persistent Object Data" EXPOSURE="1" STATE="1" EDITORDER="5 " TYPTYPE="4" TYPE="TYP_DB_DATA" SRCROW1="24 " SRCCOLUMN1="4 " SRCROW2="25 " SRCCOLUMN2="44 " TYPESRC_LENG="0 " TYPESRC="TYP_DB_DATA_TAB type standard table of
      TYP_DB_DATA with non-unique default key
"/>
  <types CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="TYP_OID_TAB" VERSION="1" LANGU="E" DESCRIPT="Table Type Object Identifier" EXPOSURE="1" STATE="1" EDITORDER="5 " TYPTYPE="4" TYPE="TYP_OID" SRCROW1="27 " SRCCOLUMN1="4 " SRCROW2="28 " SRCCOLUMN2="40 " TYPESRC_LENG="0 " TYPESRC="TYP_OID_TAB type standard table of
      TYP_OID with non-unique default key
"/>
  <types CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="TYP_OBJECT_REF_TAB" VERSION="1" LANGU="E" DESCRIPT="Table Type Object Reference" EXPOSURE="1" STATE="1" EDITORDER="6 " TYPTYPE="4" TYPE="TYP_OBJECT_REF" SRCROW1="30 " SRCCOLUMN1="4 " SRCROW2="31 " SRCCOLUMN2="47 " TYPESRC_LENG="0 " TYPESRC="TYP_OBJECT_REF_TAB type standard table of
      TYP_OBJECT_REF with non-unique default key
"/>
  <types CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="TYP_SPECIAL_OBJECT_INFO" VERSION="1" LANGU="E" DESCRIPT="Line Type Class-Specific Object Data" EXPOSURE="1" STATE="1" EDITORDER="7 " TYPTYPE="4" SRCROW1="33 " SRCCOLUMN1="4 " SRCROW2="37 " SRCCOLUMN2="33 " TYPESRC_LENG="0 " TYPESRC="begin of TYP_SPECIAL_OBJECT_INFO ,
      OBJECT_ID type TYP_INTERNAL_OID ,
      ID_STATUS type TYP_ID_STATUS ,
      BUSINESS_KEY type TYP_BUSINESS_KEY ,
    end of TYP_SPECIAL_OBJECT_INFO
"/>
  <types CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="TYP_SPECIAL_OBJECT_INFO_TAB" VERSION="1" LANGU="E" DESCRIPT="Table Type Class-Specific Object Data" EXPOSURE="1" STATE="1" EDITORDER="8 " TYPTYPE="4" TYPE="TYP_SPECIAL_OBJECT_INFO" SRCROW1="39 " SRCCOLUMN1="4 " SRCROW2="41 " SRCCOLUMN2="14 " TYPESRC_LENG="0 " TYPESRC="TYP_SPECIAL_OBJECT_INFO_TAB type sorted table of
      TYP_SPECIAL_OBJECT_INFO with unique key
      OBJECT_ID
"/>
  <types CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="TYP_SPECIAL_BKEY_TAB" VERSION="1" LANGU="E" DESCRIPT="Table Type Search Table Business Keys" EXPOSURE="1" STATE="1" EDITORDER="9 " TYPTYPE="4" TYPE="TYP_SPECIAL_OBJECT_INFO" SRCROW1="43 " SRCCOLUMN1="4 " SRCROW2="45 " SRCCOLUMN2="17 " TYPESRC_LENG="0 " TYPESRC="TYP_SPECIAL_BKEY_TAB type sorted table of
      TYP_SPECIAL_OBJECT_INFO with unique key
      BUSINESS_KEY
"/>
  <types CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="TYP_DB_DELETE_TAB" VERSION="1" LANGU="E" DESCRIPT="Table Type Identifiers to Delete" EXPOSURE="1" STATE="1" EDITORDER="10 " TYPTYPE="4" TYPE="TYP_SPECIAL_OBJECT_INFO" SRCROW1="47 " SRCCOLUMN1="4 " SRCROW2="48 " SRCCOLUMN2="56 " TYPESRC_LENG="0 " TYPESRC="TYP_DB_DELETE_TAB type standard table of
      TYP_SPECIAL_OBJECT_INFO with non-unique default key
"/>
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <attribute CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="CURRENT_SPECIAL_OBJECT_INFO" VERSION="1" LANGU="E" DESCRIPT="Current Class-Specific Object Data" EXPOSURE="1" STATE="1" EDITORDER="0 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="TYP_SPECIAL_OBJECT_INFO" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="MAP_ATT_INFO_TAB" VERSION="1" LANGU="E" DESCRIPT="Query: Mapping Metadata for Attributes" EXPOSURE="1" STATE="1" EDITORDER="0 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="OSTYP_RT_MAP_ATT_INFO_SRT_TAB" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="SPECIAL_BKEY_TAB" VERSION="1" LANGU="E" DESCRIPT="Class-Specific: Search Table Business Keys" EXPOSURE="1" STATE="1" EDITORDER="0 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="TYP_SPECIAL_BKEY_TAB" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="SPECIAL_OBJECT_INFO" VERSION="1" LANGU="E" DESCRIPT="Class-Specific Object Data" EXPOSURE="1" STATE="1" EDITORDER="0 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="TYP_SPECIAL_OBJECT_INFO_TAB" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <inheritance CLSNAME="ZCB_USFP_T_ASA_STKUP" REFCLSNAME="CL_OS_CA_COMMON" VERSION="1" STATE="1">
   <redefinition CLSNAME="ZCB_USFP_T_ASA_STKUP" REFCLSNAME="CL_OS_CA_COMMON" VERSION="1" MTDNAME="DELETE_SPECIAL_OBJECT_INFO" EXPOSURE="1"/>
   <redefinition CLSNAME="ZCB_USFP_T_ASA_STKUP" REFCLSNAME="CL_OS_CA_COMMON" VERSION="1" MTDNAME="IF_OS_CA_PERSISTENCY~GET_PERSISTENT_BY_KEY" EXPOSURE="0"/>
   <redefinition CLSNAME="ZCB_USFP_T_ASA_STKUP" REFCLSNAME="CL_OS_CA_COMMON" VERSION="1" MTDNAME="IF_OS_CA_PERSISTENCY~GET_PERSISTENT_BY_KEY_TAB" EXPOSURE="0"/>
   <redefinition CLSNAME="ZCB_USFP_T_ASA_STKUP" REFCLSNAME="CL_OS_CA_COMMON" VERSION="1" MTDNAME="IF_OS_CA_PERSISTENCY~GET_PERSISTENT_BY_QUERY" EXPOSURE="0"/>
   <redefinition CLSNAME="ZCB_USFP_T_ASA_STKUP" REFCLSNAME="CL_OS_CA_COMMON" VERSION="1" MTDNAME="IF_OS_CA_SERVICE~SAVE" EXPOSURE="0"/>
   <redefinition CLSNAME="ZCB_USFP_T_ASA_STKUP" REFCLSNAME="CL_OS_CA_COMMON" VERSION="1" MTDNAME="IF_OS_CA_SERVICE~SAVE_IN_UPDATE_TASK" EXPOSURE="0"/>
   <redefinition CLSNAME="ZCB_USFP_T_ASA_STKUP" REFCLSNAME="CL_OS_CA_COMMON" VERSION="1" MTDNAME="IF_OS_FACTORY~CREATE_PERSISTENT_BY_KEY" EXPOSURE="0"/>
   <redefinition CLSNAME="ZCB_USFP_T_ASA_STKUP" REFCLSNAME="CL_OS_CA_COMMON" VERSION="1" MTDNAME="IF_OS_FACTORY~CREATE_TRANSIENT_BY_KEY" EXPOSURE="0"/>
   <redefinition CLSNAME="ZCB_USFP_T_ASA_STKUP" REFCLSNAME="CL_OS_CA_COMMON" VERSION="1" MTDNAME="LOAD_SPECIAL_OBJECT_INFO" EXPOSURE="1"/>
   <redefinition CLSNAME="ZCB_USFP_T_ASA_STKUP" REFCLSNAME="CL_OS_CA_COMMON" VERSION="1" MTDNAME="MAP_INVALIDATE" EXPOSURE="1"/>
   <redefinition CLSNAME="ZCB_USFP_T_ASA_STKUP" REFCLSNAME="CL_OS_CA_COMMON" VERSION="1" MTDNAME="OS_PM_DELETE_PERSISTENT" EXPOSURE="1"/>
   <redefinition CLSNAME="ZCB_USFP_T_ASA_STKUP" REFCLSNAME="CL_OS_CA_COMMON" VERSION="1" MTDNAME="PM_LOAD" EXPOSURE="1"/>
   <redefinition CLSNAME="ZCB_USFP_T_ASA_STKUP" REFCLSNAME="CL_OS_CA_COMMON" VERSION="1" MTDNAME="SAVE_SPECIAL_OBJECT_INFO" EXPOSURE="1"/>
  </inheritance>
  <interfaceMethod CLSNAME="ZCB_USFP_T_ASA_STKUP" CPDNAME="IF_OS_CA_PERSISTENCY~GET_PERSISTENT_BY_KEY">
   <source>method IF_OS_CA_PERSISTENCY~GET_PERSISTENT_BY_KEY.
***BUILD 093901
*      importing I_KEY type any
*      returning result type ref to object
************************************************************************
* Purpose        : Get a persistent object identified by the
*                  given business key
*
* Version        : 2.0
*
* Precondition   : The object exists with the given business key,
*                  either in memory or on database.
*
* Postcondition  : The object exists in memory, RESULT is the reference
*
* OO Exceptions  : propagates GET_PERSISTENT
*
* Implementation : call GET_PERSISTENT
*
************************************************************************
* Changelog:
* - 2000-03-06   : (BGR) Initial Version 2.0
* - 2000-08-02   : (SB)  OO Exceptions
************************************************************************

  data: BUSINESS_KEY             type TYP_BUSINESS_KEY.

  BUSINESS_KEY = I_KEY.

*&lt; Generated from mapping:
  call method GET_PERSISTENT
       exporting I_AEDAT = BUSINESS_KEY-AEDAT
                 I_UNAME = BUSINESS_KEY-UNAME
       receiving RESULT = RESULT.
*&gt;

           &quot;IF_OS_CA_PERSISTENCY~GET_PERSISTENT_BY_KEY
  endmethod.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCB_USFP_T_ASA_STKUP" CPDNAME="IF_OS_CA_PERSISTENCY~GET_PERSISTENT_BY_KEY_TAB">
   <source>method IF_OS_CA_PERSISTENCY~GET_PERSISTENT_BY_KEY_TAB.
***BUILD 093901
      &quot;importing I_KEY_TAB type INDEX TABLE
      &quot;returning value(RESULT) type OSREFTAB
      &quot;raising   CX_OS_OBJECT_NOT_FOUND
************************************************************************
* Purpose        : Get persistent objects by Business Key table
*
* Version        : 2.0
*
* Precondition   : -
*
* Postcondition  : For each entry in the KEY table, there is a corres-
*                  ponding entry in the RESULT table. If the object was
*                  found in the cache or the database, then a reference
*                  to this object can be found in the RESULT table,
*                  if not, the reference is initial. The persistent
*                  objects are active.
*
* OO Exceptions  : CX_OS_OBJECT_NOT_FOUND
*                    (IS_TRANSIENT_BY_BKEY,DELETED_BY_BKEY)
*                  propagates PM_LOAD_AND_SET_ATTRIBUTES
*                  propagates OS_PM_LOADED_PERISISTENT
*
* Implementation : 1. Look for object in SPECIAL_OBJECT_INFO. If found,
*                     check if it is still valid
*                  2. Object found: Check PM_STATUS
*                     2a. If Status is TRANSIENT or DELETED, error!
*                     2b. If Status is NOT_LOADED, continue with 3.
*                     2c. If Status is NEW, LOADED or CHANGED, success!
*                  3. Load object data from database and set object
*                     3.a Completion in super class
*                  4. clean up
*
************************************************************************
* Changelog:
* - 2004-01-07   : (SB)  Initial version
************************************************************************

  types: begin of TYP_BUSINESS_KEY_INDEX,
           BUSINESS_KEY     type TYP_BUSINESS_KEY,
           INDEX            type SY-TABIX,
         end of TYP_BUSINESS_KEY_INDEX,
         TYP_BUSINESS_KEY_INDEX_TAB type sorted table
           of TYP_BUSINESS_KEY_INDEX with non-unique key BUSINESS_KEY.

  data: FLAG_NOT_LOADED        type OS_BOOLEAN,
        BKEY_STRING            type STRING,
        TEMP_OBJECT_REF        type TYP_OBJECT_REF,
        BUSINESS_KEY           type TYP_BUSINESS_KEY,
        BUSINESS_KEY_TAB       type TYP_BUSINESS_KEY_TAB,
        OBJECT_DATA_TAB        type TYP_DB_DATA_TAB,
        BUSINESS_KEY_INDEX     type TYP_BUSINESS_KEY_INDEX,
        BUSINESS_KEY_INDEX_TAB type TYP_BUSINESS_KEY_INDEX_TAB,
        NEXT_INDEX             type SY-TABIX.

  data: TEMP_CURRENT_OBJECT_IREF type ref to OBJECT.

  field-symbols: &lt;FS_OBJECT_DATA&gt;  type TYP_DB_DATA,
                 &lt;FS_BUSINESS_KEY&gt; type TYP_BUSINESS_KEY,
                 &lt;FS_BUSINESS_KEY_INDEX&gt; type TYP_BUSINESS_KEY_INDEX.

* * 1. Look for objects in SPECIAL_OBJECT_INFO. If found, check if they
* * are still valid

  loop at I_KEY_TAB assigning &lt;FS_BUSINESS_KEY&gt;. &quot;#EC GEN_OK

    clear CURRENT_OBJECT_IREF.

    read table SPECIAL_BKEY_TAB into CURRENT_SPECIAL_OBJECT_INFO
       with table key BUSINESS_KEY = &lt;FS_BUSINESS_KEY&gt;.

    if ( SY-SUBRC = 0 ).

      read table SPECIAL_OBJECT_INFO into CURRENT_SPECIAL_OBJECT_INFO
           with table key
           OBJECT_ID = CURRENT_SPECIAL_OBJECT_INFO-OBJECT_ID.
      call method OS_LOAD_AND_VALIDATE_CURRENT
           exporting I_INDEX = SY-TABIX.

    endif.

    if ( not CURRENT_OBJECT_IREF is initial ).

*   * 2. Object found: Check PM_STATUS

      case CURRENT_OBJECT_INFO-PM_STATUS.

*     * 2a. If Status is TRANSIENT or DELETED, error!
      when OSCON_OSTATUS_DELETED.

*!!!!!!! Error: Object activation failed - Object marked for deletion
        TEMP_CURRENT_OBJECT_IREF = CURRENT_OBJECT_IREF.
        BKEY_STRING  = MAP_SERIALIZE_BKEY( &lt;FS_BUSINESS_KEY&gt; ).
        call method OS_CLEAR_CURRENT.
        clear CURRENT_SPECIAL_OBJECT_INFO.
        class CX_OS_OBJECT_NOT_FOUND definition load.
        raise exception type CX_OS_OBJECT_NOT_FOUND
          exporting
            OBJECT = TEMP_CURRENT_OBJECT_IREF
            BKEY   = BKEY_STRING
            TEXTID = CX_OS_OBJECT_NOT_FOUND=&gt;DELETED_BY_BKEY.

      when OSCON_OSTATUS_TRANSIENT.

*!!!!!!! Error: Object activation failed - Object is transient
        TEMP_CURRENT_OBJECT_IREF = CURRENT_OBJECT_IREF.
        BKEY_STRING  = MAP_SERIALIZE_BKEY( &lt;FS_BUSINESS_KEY&gt; ).
        call method OS_CLEAR_CURRENT.
        clear CURRENT_SPECIAL_OBJECT_INFO.
        class CX_OS_OBJECT_NOT_FOUND definition load.
        raise exception type CX_OS_OBJECT_NOT_FOUND
          exporting
            OBJECT = TEMP_CURRENT_OBJECT_IREF
            BKEY   = BKEY_STRING
            TEXTID = CX_OS_OBJECT_NOT_FOUND=&gt;IS_TRANSIENT_BY_BKEY.

*     * 2b. If Status is NOT_LOADED, continue with 3.
      when OSCON_OSTATUS_NOT_LOADED.

        FLAG_NOT_LOADED = OSCON_TRUE.

*     * 2c. If Status is NEW, LOADED or CHANGED, success!
      when others.

        FLAG_NOT_LOADED = OSCON_FALSE.

      endcase.

    else.&quot; ( CURRENT_OBJECT_IREF is initial )

      FLAG_NOT_LOADED = OSCON_TRUE.

    endif.

    if ( FLAG_NOT_LOADED = OSCON_TRUE ).

      append &lt;FS_BUSINESS_KEY&gt; to BUSINESS_KEY_TAB.

    endif.

    TEMP_OBJECT_REF ?= CURRENT_OBJECT_IREF.
    append TEMP_OBJECT_REF to RESULT.

    call method OS_CLEAR_CURRENT.

  endloop.

* * 3. Load object data from database and set objects

  if ( BUSINESS_KEY_TAB is not initial ).

*   * internal Undo
    append INTERNAL_NEXT_UNDO_INFO to INTERNAL_TRANSACTION_STACK.
    INTERNAL_CURRENT_TRANSACTION = SY-TABIX.

    try.
        call method MAP_LOAD_FROM_DATABASE_KEY
             exporting I_BUSINESS_KEY_TAB = BUSINESS_KEY_TAB
             receiving result = OBJECT_DATA_TAB.
      catch CX_OS_DB_SELECT.
        clear OBJECT_DATA_TAB.
    endtry.

    loop at I_KEY_TAB assigning &lt;FS_BUSINESS_KEY&gt;. &quot;EC GEN_OK
      BUSINESS_KEY_INDEX-BUSINESS_KEY = &lt;FS_BUSINESS_KEY&gt;.
      BUSINESS_KEY_INDEX-INDEX = SY-TABIX.
      insert BUSINESS_KEY_INDEX into table BUSINESS_KEY_INDEX_TAB.
    endloop.

    try.

        loop at OBJECT_DATA_TAB assigning &lt;FS_OBJECT_DATA&gt;.

          call method MAP_EXTRACT_IDENTIFIER
               exporting I_DB_DATA  = &lt;FS_OBJECT_DATA&gt;
               importing E_BUSINESS_KEY = BUSINESS_KEY.

          clear CURRENT_OBJECT_IREF.

          call method PM_CHECK_AND_SET_ATTRIBUTES
               exporting I_OBJECT_DATA  = &lt;FS_OBJECT_DATA&gt;
                         I_ID_PROVIDED  = ID_STATUS_NONE.

          TEMP_OBJECT_REF ?= CURRENT_OBJECT_IREF.

          read table BUSINESS_KEY_INDEX_TAB
               with key BUSINESS_KEY = BUSINESS_KEY
               assigning &lt;FS_BUSINESS_KEY_INDEX&gt;.

          while ( ( SY-SUBRC = 0 ) and
                  ( &lt;FS_BUSINESS_KEY_INDEX&gt;-BUSINESS_KEY =
                    BUSINESS_KEY ) ).

            NEXT_INDEX = SY-TABIX + 1.

            modify RESULT from TEMP_OBJECT_REF
                          index &lt;FS_BUSINESS_KEY_INDEX&gt;-INDEX.

            read table BUSINESS_KEY_INDEX_TAB
                 index NEXT_INDEX
                 assigning &lt;FS_BUSINESS_KEY_INDEX&gt;.

          endwhile.

*         * 3.a. Completion in super class
          call method OS_PM_LOADED_PERSISTENT.

          clear CURRENT_SPECIAL_OBJECT_INFO.

        endloop.

      cleanup.
        call method OS_INTERNAL_UNDO.
        call method OS_CLEAR_CURRENT.
        clear CURRENT_SPECIAL_OBJECT_INFO.
    endtry.

*   * Clean-up internal Undo
    delete INTERNAL_TRANSACTION_STACK
           index INTERNAL_CURRENT_TRANSACTION.
    add -1 to INTERNAL_CURRENT_TRANSACTION.
    if ( INTERNAL_TRANSACTION_STACK is initial ).
      clear INTERNAL_UNDO_INFO.
      INTERNAL_NEXT_UNDO_INFO = 1.
    endif. &quot;( INTERNAL_TRANSACTION_STACK is initial? )

  endif.

* * 4. clean up

  clear CURRENT_SPECIAL_OBJECT_INFO.


           &quot;IF_OS_CA_PERSISTENCY~GET_PERSISTENT_BY_KEY_TAB
  endmethod.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCB_USFP_T_ASA_STKUP" CPDNAME="IF_OS_CA_PERSISTENCY~GET_PERSISTENT_BY_QUERY">
   <source>method IF_OS_CA_PERSISTENCY~GET_PERSISTENT_BY_QUERY.
***BUILD 093901
     &quot; importing I_QUERY type ref to IF_OS_QUERY
     &quot;           I_PARAMETER_TAB type OSTYP_DREF_TAB optional
     &quot;           I_PAR1 type ANY optional
     &quot;           I_PAR2 type ANY optional
     &quot;           I_PAR3 type ANY optional
     &quot;           I_SUBCLASSES type OS_BOOLEAN default OSCON_FALSE
     &quot;           I_UPTO type I default 0
     &quot;           I_OPTIONS type IF_OS_QUERY_OPTIONS default
     &quot;             IF_OS_QUERY_OPTIONS=&gt;DEFAULT_OPTIONS
     &quot; returning value(RESULT) type OSREFTAB
     &quot; raising   CX_OS_OBJECT_NOT_FOUND
     &quot;           CX_OS_QUERY_ERROR
************************************************************************
* Purpose        : Get persistent objects by Query
*
* Version        : 2.0
*
* Precondition   : --
*
* Postcondition  : For each instance that satifies the filter
*                  expression, there is a corresponding entry in the
*                  RESULT table. The persistent objects are active.
*
* OO Exceptions  : CX_OS_OBJECT_NOT_FOUND
*                    (DELETED_BY_BKEY,TRANSIENT_BY_BKEY)
*                  propagates PM_CHECK_AND_SET_ATTRIBUTES
*                  propagates OS_PM_LOADED_PERISISTENT
*
* Implementation : 1. Load data by query
*                  2. Set objects from data
*                  2a. Object found: Check PM_STATUS
*                  2b. Object not found, replace
*                  2c. Set attributes
*                  2d. Completion in super class
*                  3. clean up
*
************************************************************************
* Changelog:
* - 2004-03-25   : (SB)  Initial version
************************************************************************

  data: FLAG_NOT_LOADED  type OS_BOOLEAN,
        BKEY_STRING      type STRING,
        TEMP_OBJECT_REF  type TYP_OBJECT_REF,
        BUSINESS_KEY     type TYP_BUSINESS_KEY,
        OBJECT_DATA_TAB  type TYP_DB_DATA_TAB,
        QUERY            type ref to IF_OS_QRY_SERVICE,
        WHERE_CLAUSE     type STRING,
        ORDER_BY_CLAUSE  type STRING.

  data: TEMP_CURRENT_OBJECT_IREF type ref to OBJECT.

  field-symbols: &lt;FS_OBJECT_DATA&gt;  type TYP_DB_DATA.

* * 1. Load data with query

  try.
      call method MAP_INITIALIZE_METADATA.

      QUERY ?= I_QUERY.

      call method QUERY-&gt;MAP
           exporting I_CLASS_AGENT = ME
                     I_MAP_ATT_TAB = MAP_ATT_INFO_TAB.

      call method QUERY-&gt;GET_ORDER_BY_CLAUSE
           receiving RESULT = ORDER_BY_CLAUSE.

      if ( I_PARAMETER_TAB is supplied ).

        if ( ( I_PAR1 is supplied ) or
             ( I_PAR2 is supplied ) or
             ( I_PAR3 is supplied ) ).

          raise exception type CX_OS_QUERY_PARAMETER_ERROR
            exporting TEXTID = CX_OS_QUERY_PARAMETER_ERROR=&gt;CALL_ERROR.

        endif.

        call method QUERY-&gt;GET_WHERE_CLAUSE
             exporting I_PARAMETER_TAB = I_PARAMETER_TAB
             receiving RESULT = WHERE_CLAUSE.

        call method MAP_LOAD_FROM_DATABASE
             exporting I_WHERE_CLAUSE    = WHERE_CLAUSE
                       I_ORDER_BY_CLAUSE = ORDER_BY_CLAUSE
                       I_SUBCLASSES      = I_SUBCLASSES
                       I_UPTO            = I_UPTO
             receiving result = OBJECT_DATA_TAB.

      else.

        call method QUERY-&gt;GET_WHERE_CLAUSE
             receiving RESULT = WHERE_CLAUSE.

        call method MAP_LOAD_FROM_DATABASE
             exporting I_WHERE_CLAUSE    = WHERE_CLAUSE
                       I_ORDER_BY_CLAUSE = ORDER_BY_CLAUSE
                       I_SUBCLASSES      = I_SUBCLASSES
                       I_UPTO            = I_UPTO
                       PAR1              = I_PAR1
                       PAR2              = I_PAR2
                       PAR3              = I_PAR3
             receiving result = OBJECT_DATA_TAB.

      endif.
    catch CX_OS_DB_SELECT.
      clear OBJECT_DATA_TAB.
  endtry.

* * 2. Set objects from data

  try.

*     * internal Undo
      append INTERNAL_NEXT_UNDO_INFO to INTERNAL_TRANSACTION_STACK.
      INTERNAL_CURRENT_TRANSACTION = SY-TABIX.

      loop at OBJECT_DATA_TAB assigning &lt;FS_OBJECT_DATA&gt;.

        call method MAP_EXTRACT_IDENTIFIER
             exporting I_DB_DATA  = &lt;FS_OBJECT_DATA&gt;
             importing E_BUSINESS_KEY = BUSINESS_KEY.

        clear CURRENT_OBJECT_IREF.

        read table SPECIAL_BKEY_TAB into CURRENT_SPECIAL_OBJECT_INFO
           with table key BUSINESS_KEY = BUSINESS_KEY.

        if ( SY-SUBRC = 0 ).

          read table SPECIAL_OBJECT_INFO
               into CURRENT_SPECIAL_OBJECT_INFO
               with table key
               OBJECT_ID = CURRENT_SPECIAL_OBJECT_INFO-OBJECT_ID.
          call method OS_LOAD_AND_VALIDATE_CURRENT
               exporting I_INDEX = SY-TABIX.

        endif.

        if ( not CURRENT_OBJECT_IREF is initial ).

*       * 2a. Object found: Check PM_STATUS

          case CURRENT_OBJECT_INFO-PM_STATUS.

*         * 2a1. If Status is DELETED, ignore or raise exception!
          when OSCON_OSTATUS_DELETED.

            if ( I_OPTIONS-DATABASE_QUERY_OPTIONS O
                 IF_OS_QUERY_OPTIONS=&gt;IGNORE_DELETED ).

              call method OS_CLEAR_CURRENT.
              continue.

            endif.

* !!!!!!!! Error: Object activation failed - Object marked for deletion
            TEMP_CURRENT_OBJECT_IREF = CURRENT_OBJECT_IREF.
            BKEY_STRING  = MAP_SERIALIZE_BKEY( BUSINESS_KEY ).
            call method OS_CLEAR_CURRENT.
            clear CURRENT_SPECIAL_OBJECT_INFO.
            class CX_OS_OBJECT_NOT_FOUND definition load.
            raise exception type CX_OS_OBJECT_NOT_FOUND
              exporting
                OBJECT = TEMP_CURRENT_OBJECT_IREF
                BKEY   = BKEY_STRING
                TEXTID = CX_OS_OBJECT_NOT_FOUND=&gt;DELETED_BY_BKEY.

*         * 2a2. If Status is TRANSIENT, error!
          when OSCON_OSTATUS_TRANSIENT.

* !!!!!!!!!! Error: Object activation failed - Object is transient
            TEMP_CURRENT_OBJECT_IREF = CURRENT_OBJECT_IREF.
            BKEY_STRING  = MAP_SERIALIZE_BKEY( BUSINESS_KEY ).
            call method OS_CLEAR_CURRENT.
            clear CURRENT_SPECIAL_OBJECT_INFO.
            class CX_OS_OBJECT_NOT_FOUND definition load.
            raise exception type CX_OS_OBJECT_NOT_FOUND
              exporting
                OBJECT = TEMP_CURRENT_OBJECT_IREF
                BKEY   = BKEY_STRING
                TEXTID = CX_OS_OBJECT_NOT_FOUND=&gt;IS_TRANSIENT_BY_BKEY.

*         * 2a3. If Status is CHANGED, don&apos;t replace or raise exception!
          when OSCON_OSTATUS_CHANGED.

            if ( I_OPTIONS-DATABASE_QUERY_OPTIONS O
                 IF_OS_QUERY_OPTIONS=&gt;REJECT_CHANGED ).

* !!!!!!!! Error: Object activation failed - Object marked as changed
            TEMP_CURRENT_OBJECT_IREF = CURRENT_OBJECT_IREF.
            BKEY_STRING  = MAP_SERIALIZE_BKEY( BUSINESS_KEY ).
            call method OS_CLEAR_CURRENT.
            clear CURRENT_SPECIAL_OBJECT_INFO.
            class CX_OS_OBJECT_NOT_FOUND definition load.
            raise exception type CX_OS_OBJECT_NOT_FOUND
              exporting
                OBJECT = TEMP_CURRENT_OBJECT_IREF
                BKEY   = BKEY_STRING
                TEXTID = CX_OS_OBJECT_NOT_FOUND=&gt;CHANGED_BY_BKEY.

            endif.

            FLAG_NOT_LOADED = OSCON_FALSE.

*         * 2a4. If Status is NOT_LOADED, replace
          when OSCON_OSTATUS_NOT_LOADED.

            FLAG_NOT_LOADED = OSCON_TRUE.

*         * 2a5. If Status is NEW or LOADED, don&apos;t replace
          when others.

            FLAG_NOT_LOADED = OSCON_FALSE.

          endcase.

        else.&quot; ( CURRENT_OBJECT_IREF is initial )

*       * 2b. Object not found, replace

          FLAG_NOT_LOADED = OSCON_TRUE.

        endif.

        TEMP_OBJECT_REF ?= CURRENT_OBJECT_IREF.

        if ( FLAG_NOT_LOADED = OSCON_TRUE ).

*         * 2c. Set attributes
          call method PM_CHECK_AND_SET_ATTRIBUTES
               exporting I_OBJECT_DATA  = &lt;FS_OBJECT_DATA&gt;
                         I_ID_PROVIDED  = ID_STATUS_NONE.

          TEMP_OBJECT_REF ?= CURRENT_OBJECT_IREF.

*         * 2d. Completion in super class
          call method OS_PM_LOADED_PERSISTENT.

        endif.

        append TEMP_OBJECT_REF to RESULT.

        call method OS_CLEAR_CURRENT.

      endloop.

*     * Clean-up internal Undo
      delete INTERNAL_TRANSACTION_STACK
             index INTERNAL_CURRENT_TRANSACTION.
      add -1 to INTERNAL_CURRENT_TRANSACTION.
      if ( INTERNAL_TRANSACTION_STACK is initial ).
        clear INTERNAL_UNDO_INFO.
        INTERNAL_NEXT_UNDO_INFO = 1.
      endif. &quot;( INTERNAL_TRANSACTION_STACK is initial? )

    cleanup.
      call method OS_INTERNAL_UNDO.
      call method OS_CLEAR_CURRENT.
      clear CURRENT_SPECIAL_OBJECT_INFO.
  endtry.

* * 3. clean up

  clear CURRENT_SPECIAL_OBJECT_INFO.


           &quot;IF_OS_CA_PERSISTENCY~GET_PERSISTENT_BY_QUERY
  endmethod.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCB_USFP_T_ASA_STKUP" CPDNAME="IF_OS_CA_SERVICE~SAVE">
   <source>method IF_OS_CA_SERVICE~SAVE.
***BUILD 090501
************************************************************************
* Purpose        : Prepare data for database (buffer) transfer
*
* Version        : 2.0
*
* Precondition   : --
*
* Postcondition  : data is prepared for saving
*                  if UPDATE_MODE is direct, it is saved to DB
*                  if UPDATE_MODE is LOCAL or UPDATE_TASK,
*                    the corresponding function call is registered
*
* OO Exceptions  : propagates MAP_SAVE_TO_DATABASE
*                  propagates MAP_GET_ATTRIBUTES.
*
* Implementation :
*
************************************************************************
* Changelog:
* - 2000-03-02   : (BGR) Initial Version
* - 2000-08-02   : (SB) OO Exceptions
* - 2001-01-06   : (SB) Update with EXPORT TO DATA BUFFER
* - 2003-03-20   : (SB) post only if there dirty instances
************************************************************************

  data: NEW_OBJECT_REF_TAB       type TYP_OBJECT_REF_TAB,
        CHANGED_OBJECT_REF_TAB   type TYP_OBJECT_REF_TAB,
        INSERT_DATA_TAB          type TYP_DB_DATA_TAB ,
        INSERT_KEY_TAB           type TYP_BUSINESS_KEY_TAB,
        UPDATE_DATA_TAB          type TYP_DB_DATA_TAB ,
        UPDATE_KEY_TAB           type TYP_BUSINESS_KEY_TAB,
        DELETE_TAB               type TYP_DB_DELETE_TAB ,
        UPDATE_MODE              type OS_DMODE,
        OBJECT_REF               type TYP_OBJECT_REF,
        OBJECT_INDEX             type TYP_INDEX,
        XCONTAINER               type XSTRING.

  field-symbols:
          &lt;FS_OBJECT_INFO_ITEM&gt;         type TYP_OBJECT_INFO,
          &lt;FS_SPECIAL_OBJECT_INFO_ITEM&gt; type TYP_SPECIAL_OBJECT_INFO.

* * 1. get strong reference, BKey for all objects with status
* *    NEW, CHANGED or DELETED

  loop at OBJECT_INFO assigning &lt;FS_OBJECT_INFO_ITEM&gt; &quot;#EC CI_SORTSEQ
       where ( PM_STATUS = OSCON_OSTATUS_NEW or       &quot;#EC CI_SORTSEQ
               PM_STATUS = OSCON_OSTATUS_CHANGED or   &quot;#EC CI_SORTSEQ
               PM_STATUS = OSCON_OSTATUS_DELETED ) and &quot;#EC CI_SORTSEQ
               OM_IGNORE = OSCON_FALSE.               &quot;#EC CI_SORTSEQ

    OBJECT_INDEX = sy-tabix.

    case &lt;FS_OBJECT_INFO_ITEM&gt;-PM_STATUS.

      when OSCON_OSTATUS_NEW.

        read table SPECIAL_OBJECT_INFO
             assigning &lt;FS_SPECIAL_OBJECT_INFO_ITEM&gt;
             index OBJECT_INDEX.

        OBJECT_REF ?= &lt;FS_OBJECT_INFO_ITEM&gt;-OBJECT_IREF.
        append OBJECT_REF
            to NEW_OBJECT_REF_TAB.
        append &lt;FS_SPECIAL_OBJECT_INFO_ITEM&gt;-BUSINESS_KEY
            to INSERT_KEY_TAB.

      when OSCON_OSTATUS_CHANGED.

        read table SPECIAL_OBJECT_INFO
             assigning &lt;FS_SPECIAL_OBJECT_INFO_ITEM&gt;
             index OBJECT_INDEX.

        OBJECT_REF ?= &lt;FS_OBJECT_INFO_ITEM&gt;-OBJECT_IREF.
        append OBJECT_REF
            to CHANGED_OBJECT_REF_TAB.
        append &lt;FS_SPECIAL_OBJECT_INFO_ITEM&gt;-BUSINESS_KEY
            to UPDATE_KEY_TAB.

      when OSCON_OSTATUS_DELETED.

        read table SPECIAL_OBJECT_INFO
             assigning &lt;FS_SPECIAL_OBJECT_INFO_ITEM&gt;
             index OBJECT_INDEX.

        append &lt;FS_SPECIAL_OBJECT_INFO_ITEM&gt; to DELETE_TAB.

    endcase.&quot; Status

  endloop. &quot;at OBJECT_INFO


* * 2. get attributes for new and changed objects

* * New Objects
  if ( not NEW_OBJECT_REF_TAB is initial ).

    call method MAP_GET_ATTRIBUTES
         exporting I_OBJECT_REF_TAB  = NEW_OBJECT_REF_TAB
         importing E_OBJECT_DATA_TAB = INSERT_DATA_TAB.

    call method MAP_MERGE_IDENTIFIER
         exporting I_BUSINESS_KEY_TAB = INSERT_KEY_TAB
         changing  C_DB_DATA_TAB      = INSERT_DATA_TAB.

  endif. &quot;( not NEW_OBJECT_REF_TAB is initial ).

* * Changed Objects
  if ( not CHANGED_OBJECT_REF_TAB is initial ).

    call method MAP_GET_ATTRIBUTES
         exporting I_OBJECT_REF_TAB  = CHANGED_OBJECT_REF_TAB
         importing E_OBJECT_DATA_TAB = UPDATE_DATA_TAB.

    call method MAP_MERGE_IDENTIFIER
         exporting I_BUSINESS_KEY_TAB = UPDATE_KEY_TAB
         changing  C_DB_DATA_TAB      = UPDATE_DATA_TAB.

  endif. &quot;( not CHANGED_OBJECT_REF_TAB is initial ).

* * 3. perform or subscribe DB operations

  if ( ( INSERT_DATA_TAB is not initial ) or
       ( UPDATE_DATA_TAB is not initial ) or
       ( DELETE_TAB is not initial ) ).

    UPDATE_MODE = PERSISTENCY_MANAGER-&gt;GET_UPDATE_MODE(  ).
    if ( UPDATE_MODE = DMODE_DIRECT ).

*     * Direct DB operations
      call method MAP_SAVE_TO_DATABASE
           exporting I_INSERTS = INSERT_DATA_TAB
                     I_UPDATES = UPDATE_DATA_TAB
                     I_DELETES = DELETE_TAB.

    else.&quot; ( Update task )

*     * export data to be saved to DB to data buffer
      export
        INSERT_DATA_TAB = INSERT_DATA_TAB
        UPDATE_DATA_TAB = UPDATE_DATA_TAB
        DELETE_TAB      = DELETE_TAB
          to data buffer XCONTAINER.

*     * call update function in update task. this function
*     * calls the method if_os_ca_service~save_in_update_task
*     * of this class agent.
      call function &apos;OS_UPDATE_CLASS&apos; in update task
        exporting
          CLASSNAME = CLASS_INFO-CLASS_AGENT_NAME
          XCONTAINER = XCONTAINER.

    endif.&quot; (Update mode?)

  endif.&quot; (something to post?)

           &quot;IF_OS_CA_SERVICE~SAVE
  endmethod.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCB_USFP_T_ASA_STKUP" CPDNAME="IF_OS_CA_SERVICE~SAVE_IN_UPDATE_TASK">
   <source>method IF_OS_CA_SERVICE~SAVE_IN_UPDATE_TASK.
***BUILD 090501
     &quot; importing XCONTAINER type XSTRING optional
************************************************************************
* Purpose        : save object data to DB when running in update task
*                  mode.
*
* Version        : 2.0
*
* Precondition   : no object service environment is set, no objects
*                  exist in update task
*
* Postcondition  : data has been saved to DB
*
* OO Exceptions  : propagates MAP_SAVE_TO_DATABASE
*
* Implementation :
*
************************************************************************
* Changelog:
* - 2000-03-02   : (BGR) Initial Version
* - 2000-08-02   : (SB) OO Exceptions
* - 2001-01-06   : (SB) Update with EXPORT TO DATA BUFFER
************************************************************************

  data: INSERT_DATA_TAB       type TYP_DB_DATA_TAB ,
        UPDATE_DATA_TAB       type TYP_DB_DATA_TAB ,
        DELETE_TAB            type TYP_DB_DELETE_TAB .

* * import data to be saved to DB from data buffer
  import
    INSERT_DATA_TAB = INSERT_DATA_TAB
    UPDATE_DATA_TAB = UPDATE_DATA_TAB
    DELETE_TAB      = DELETE_TAB
      from data buffer XCONTAINER.

* * store them to DB
  call method MAP_SAVE_TO_DATABASE
       exporting I_INSERTS = INSERT_DATA_TAB
                 I_UPDATES = UPDATE_DATA_TAB
                 I_DELETES = DELETE_TAB.

           &quot;IF_OS_CA_SERVICE~SAVE_IN_UPDATE_TASK
  endmethod.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCB_USFP_T_ASA_STKUP" CPDNAME="IF_OS_FACTORY~CREATE_PERSISTENT_BY_KEY">
   <source>method IF_OS_FACTORY~CREATE_PERSISTENT_BY_KEY.
***BUILD 093901
*      importing I_KEY type any
*      returning result type ref to object
************************************************************************
* Purpose        : Create a new persistent object identified by the
*                  given business key
*
* Version        : 2.0
*
* Precondition   : No object exists with the given business key, neither
*                  in memory nor on database.
*
* Postcondition  : The object exists in memory and will result in a
*                  new entry on database when the top transaction is
*                  closed.
*
* OO Exceptions  : propagates CREATE_PERSISTENT
*
* Implementation : call CREATE_PERSISTENT
*
************************************************************************
* Changelog:
* - 2000-03-06   : (BGR) Initial Version 2.0
* - 2000-08-02   : (SB)  OO Exceptions
************************************************************************

  data: BUSINESS_KEY             type TYP_BUSINESS_KEY.

  BUSINESS_KEY = I_KEY.

*&lt; Generated from mapping:
  call method CREATE_PERSISTENT
       exporting I_AEDAT = BUSINESS_KEY-AEDAT
                 I_UNAME = BUSINESS_KEY-UNAME
       receiving RESULT = RESULT.
*&gt;

           &quot;IF_OS_FACTORY~CREATE_PERSISTENT_BY_KEY
  endmethod.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCB_USFP_T_ASA_STKUP" CPDNAME="IF_OS_FACTORY~CREATE_TRANSIENT_BY_KEY">
   <source>method IF_OS_FACTORY~CREATE_TRANSIENT_BY_KEY.
***BUILD 093901
*      importing I_KEY type any
*      returning result type ref to object
************************************************************************
* Purpose        : Create a new transient object identified by the
*                  given business key
*
* Version        : 2.0
*
* Precondition   : No object exists with the given business key
*
* Postcondition  : The object exists in memory
*
* OO Exceptions  : propagates CREATE_TRANSIENT
*
* Implementation : call CREATE_TRANSIENT
*
************************************************************************
* Changelog:
* - 2001-01-01   : (SB)  Initial Version 2.0
************************************************************************

  data: BUSINESS_KEY             type TYP_BUSINESS_KEY.

  BUSINESS_KEY = I_KEY.

*&lt; Generated from mapping:
  call method CREATE_TRANSIENT
       exporting I_AEDAT = BUSINESS_KEY-AEDAT
                 I_UNAME = BUSINESS_KEY-UNAME
       receiving RESULT = RESULT.
*&gt;

           &quot;IF_OS_FACTORY~CREATE_TRANSIENT_BY_KEY
  endmethod.</source>
  </interfaceMethod>
  <method CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="CREATE_PERSISTENT" VERSION="1" LANGU="E" DESCRIPT="Generate New Persistent Object with Key" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="CREATE_PERSISTENT" SCONAME="I_AEDAT" VERSION="1" LANGU="E" DESCRIPT="Business Key" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="RSCRMTSTMP"/>
   <parameter CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="CREATE_PERSISTENT" SCONAME="I_UNAME" VERSION="1" LANGU="E" DESCRIPT="Business Key" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="UNAME"/>
   <parameter CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="CREATE_PERSISTENT" SCONAME="RESULT" VERSION="1" LANGU="E" DESCRIPT="Newly Generated Persistent Object" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_USFP_T_ASA_STKUP"/>
   <exception CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="CREATE_PERSISTENT" SCONAME="CX_OS_OBJECT_EXISTING" VERSION="1" LANGU="E" DESCRIPT="Object Services Exception" MTDTYPE="0" EDITORDER="0 "/>
   <source>method CREATE_PERSISTENT.
***BUILD 093901
*      IMPORTING I_AEDAT TYPE RSCRMTSTMP
*      IMPORTING I_UNAME TYPE UNAME
*      RETURNING RESULT TYPE REF TO ZCL_USFP_T_ASA_STKUP
************************************************************************
* Purpose        : Create a new persistent object identified by the
*                  given business key
*
* Version        : 2.0
*
* Precondition   : No object exists with the given business key, neither
*                  in memory nor on database.
*
* Postcondition  : The object exists in memory and will result in a
*                  new entry on database when the top transaction is
*                  closed.
*
* OO Exceptions  : CX_OS_OBJECT_EXISTING(
*                            PERSISTENT_CREATING_PERSISTENT,
*                            TRANSIENT_CREATING_PERSISTENT)
*                  propagates OS_PM_CREATED_PERSISTENT
*
* Implementation : 1. Check if there is already an object with the
*                     same key
*                  2. If there is one, let OS_PM_HANDLE_CREATE_ON_EXIST
*                     decide if it is allowed to re-use the object
*                  3. If there is none, create a new object
*                  4. Set Attributes
*                  5. Register the object as NEW and initialize it
*                  6. Clean up
*
************************************************************************
* Changelog:
* - 2000-03-06   : (BGR) Initial Version 2.0
* - 2000-08-03   : (SB)  OO Exceptions
* - 2001-01-10   : (SB)  persistent attributes as optional parameters
* - 2001-10-30   : (SB)  type mapping
* - 2002-01-17   : (SB)  private attributes in super classes
* - 2003-04-28   : (SB)  reuse of instances reimplemented
************************************************************************

  data: THE_OBJECT   type        TYP_OBJECT_REF,
        BUSINESS_KEY type        TYP_BUSINESS_KEY,
        BKEY_STRING  type        STRING.

  data: TEMP_CURRENT_OBJECT_IREF type ref to object.

  clear CURRENT_OBJECT_IREF.

*&lt; Generated from mapping:
  BUSINESS_KEY-AEDAT = I_AEDAT.
  BUSINESS_KEY-UNAME = I_UNAME.
*&gt;

* * 1. Check if there is already an object with this key
  read table SPECIAL_BKEY_TAB into CURRENT_SPECIAL_OBJECT_INFO
       with table key BUSINESS_KEY = BUSINESS_KEY.

  if ( SY-SUBRC = 0 ).

    read table SPECIAL_OBJECT_INFO into CURRENT_SPECIAL_OBJECT_INFO
         with table key
         OBJECT_ID = CURRENT_SPECIAL_OBJECT_INFO-OBJECT_ID.
    call method OS_LOAD_AND_VALIDATE_CURRENT
         exporting I_INDEX = SY-TABIX.

  endif. &quot;( entry found )

  if ( not CURRENT_OBJECT_IREF is initial ).

*   * 2. Found an entry. Check if it is allowed to re-use it
    THE_OBJECT ?= CURRENT_OBJECT_IREF.

    case CURRENT_OBJECT_INFO-PM_STATUS.

    when OSCON_OSTATUS_DELETED or
        OSCON_OSTATUS_NOT_LOADED.

      try.

*&lt;  Generated from mapping:
          THE_OBJECT-&gt;AEDAT = I_AEDAT.
          THE_OBJECT-&gt;UNAME = I_UNAME.
*&gt;

          call method OS_PM_HANDLE_CREATE_ON_EXIST
               exporting I_TRANSIENT = OSCON_FALSE.

        cleanup.
          clear CURRENT_SPECIAL_OBJECT_INFO.
          call method OS_CLEAR_CURRENT.
      endtry.

    when OSCON_OSTATUS_TRANSIENT.

      TEMP_CURRENT_OBJECT_IREF = CURRENT_OBJECT_IREF.
      BKEY_STRING  = MAP_SERIALIZE_BKEY( BUSINESS_KEY ).
      call method OS_CLEAR_CURRENT.
      clear CURRENT_SPECIAL_OBJECT_INFO.
      class CX_OS_OBJECT_EXISTING definition load.
      raise exception type CX_OS_OBJECT_EXISTING
        exporting
          OBJECT = TEMP_CURRENT_OBJECT_IREF
          BKEY   = BKEY_STRING
          TEXTID =
            CX_OS_OBJECT_EXISTING=&gt;TRANSIENT_CREATING_PERSISTENT.

    when others.

      TEMP_CURRENT_OBJECT_IREF = CURRENT_OBJECT_IREF.
      BKEY_STRING  = MAP_SERIALIZE_BKEY( BUSINESS_KEY ).
      call method OS_CLEAR_CURRENT.
      clear CURRENT_SPECIAL_OBJECT_INFO.
      class CX_OS_OBJECT_EXISTING definition load.
      raise exception type CX_OS_OBJECT_EXISTING
        exporting
          OBJECT = TEMP_CURRENT_OBJECT_IREF
          BKEY   = BKEY_STRING
          TEXTID =
            CX_OS_OBJECT_EXISTING=&gt;PERSISTENT_CREATING_PERSISTENT.

    endcase.

  else. &quot;( No entry found )

*   * 3. Create a new object
    THE_OBJECT = PM_CREATE_REPRESENTANT(
                   I_BUSINESS_KEY = BUSINESS_KEY ).

*   * 4. Set attributes
*&lt;   Generated from mapping:
*&gt;

*   * 5. register object as &apos;NEW&apos; and initialize it.
    call method OS_PM_CREATED_PERSISTENT.

  endif. &quot;( Eintrag vorhanden )

* * 6. Clean-up
  clear CURRENT_SPECIAL_OBJECT_INFO.
  RESULT = THE_OBJECT.

           &quot;CREATE_PERSISTENT
  endmethod.</source>
  </method>
  <method CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="CREATE_TRANSIENT" VERSION="1" LANGU="E" DESCRIPT="Generate Transient Object with Key" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="CREATE_TRANSIENT" SCONAME="I_AEDAT" VERSION="1" LANGU="E" DESCRIPT="Business Key" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="RSCRMTSTMP"/>
   <parameter CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="CREATE_TRANSIENT" SCONAME="I_UNAME" VERSION="1" LANGU="E" DESCRIPT="Business Key" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="UNAME"/>
   <parameter CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="CREATE_TRANSIENT" SCONAME="RESULT" VERSION="1" LANGU="E" DESCRIPT="Newly Generated Transient Object" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_USFP_T_ASA_STKUP"/>
   <exception CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="CREATE_TRANSIENT" SCONAME="CX_OS_OBJECT_EXISTING" VERSION="1" LANGU="E" DESCRIPT="Object Services Exception" MTDTYPE="0" EDITORDER="0 "/>
   <source>method CREATE_TRANSIENT.
***BUILD 093901
*      IMPORTING I_AEDAT TYPE RSCRMTSTMP
*      IMPORTING I_UNAME TYPE UNAME
*      RETURNING RESULT TYPE REF TO ZCL_USFP_T_ASA_STKUP
************************************************************************
* Purpose        : Create a new transient object identified by the
*                  given business key
*
* Version        : 2.0
*
* Precondition   : No object exists with the given business key, neither
*                  in memory nor on database.
*
* Postcondition  : The object exists in memory until it is RELEASEd
*
* OO Exceptions  : CX_OS_OBJECT_EXISTING(
*                            PERSISTENT_CREATING_TRANSIENT,
*                            TRANSIENT_CREATING_TRANSIENT)
*                  propagates OS_PM_CREATED_TRANSIENT
*
* Implementation : 1. Check if there is already an object with the
*                     same key
*                  2. If there is one, let OS_PM_HANDLE_CREATE_ON_EXIST
*                     decide if it is allowed to re-use the object
*                  3. If there is none, create a new object
*                  4. Set Attributes
*                  5. Register the object as TRANSIENT and initialize it
*                  6. Clean up
*
************************************************************************
* Changelog:
* - 2000-03-06   : (BGR) Initial Version 2.0
* - 2000-08-02   : (SB)  OO Exceptions
* - 2001-01-10   : (SB)  persistent attributes as optional parameters
* - 2001-10-30   : (SB)  type mapping
* - 2002-01-17   : (SB)  private attributes in super classes
* - 2003-04-28   : (SB)  reuse of instances reimplemented
************************************************************************

  data: THE_OBJECT   type        TYP_OBJECT_REF,
        BUSINESS_KEY type        TYP_BUSINESS_KEY,
        BKEY_STRING  type        STRING.

  data: TEMP_CURRENT_OBJECT_IREF type ref to object.

  clear CURRENT_OBJECT_IREF.

*&lt; Generated from mapping:
  BUSINESS_KEY-AEDAT = I_AEDAT.
  BUSINESS_KEY-UNAME = I_UNAME.
*&gt;

* * 1. Check if there is already an object with the same key

  read table SPECIAL_BKEY_TAB into CURRENT_SPECIAL_OBJECT_INFO
       with table key BUSINESS_KEY = BUSINESS_KEY.

  if ( SY-SUBRC = 0 ).

    read table SPECIAL_OBJECT_INFO into CURRENT_SPECIAL_OBJECT_INFO
         with table key
         OBJECT_ID = CURRENT_SPECIAL_OBJECT_INFO-OBJECT_ID.
    call method OS_LOAD_AND_VALIDATE_CURRENT
         exporting I_INDEX = SY-TABIX.

  endif. &quot;( entry found )

  if ( not CURRENT_OBJECT_IREF is initial ).

*   * 2. Found an entry. Check if it is allowed to re-use it
    THE_OBJECT ?= CURRENT_OBJECT_IREF.

    case CURRENT_OBJECT_INFO-PM_STATUS.

    when OSCON_OSTATUS_DELETED or
        OSCON_OSTATUS_NOT_LOADED.

      try.

*&lt;  Generated from mapping:
          THE_OBJECT-&gt;AEDAT = I_AEDAT.
          THE_OBJECT-&gt;UNAME = I_UNAME.
*&gt;

          call method OS_PM_HANDLE_CREATE_ON_EXIST
               exporting I_TRANSIENT = OSCON_TRUE.

        cleanup.
          clear CURRENT_SPECIAL_OBJECT_INFO.
          call method OS_CLEAR_CURRENT.
      endtry.

    when OSCON_OSTATUS_TRANSIENT.

      TEMP_CURRENT_OBJECT_IREF = CURRENT_OBJECT_IREF.
      BKEY_STRING  = MAP_SERIALIZE_BKEY( BUSINESS_KEY ).
      call method OS_CLEAR_CURRENT.
      clear CURRENT_SPECIAL_OBJECT_INFO.
      class CX_OS_OBJECT_EXISTING definition load.
      raise exception type CX_OS_OBJECT_EXISTING
        exporting
          OBJECT = TEMP_CURRENT_OBJECT_IREF
          BKEY   = BKEY_STRING
          TEXTID =
            CX_OS_OBJECT_EXISTING=&gt;TRANSIENT_CREATING_TRANSIENT.

    when others.

      TEMP_CURRENT_OBJECT_IREF = CURRENT_OBJECT_IREF.
      BKEY_STRING  = MAP_SERIALIZE_BKEY( BUSINESS_KEY ).
      call method OS_CLEAR_CURRENT.
      clear CURRENT_SPECIAL_OBJECT_INFO.
      class CX_OS_OBJECT_EXISTING definition load.
      raise exception type CX_OS_OBJECT_EXISTING
        exporting
          OBJECT = TEMP_CURRENT_OBJECT_IREF
          BKEY   = BKEY_STRING
          TEXTID =
            CX_OS_OBJECT_EXISTING=&gt;PERSISTENT_CREATING_TRANSIENT.

    endcase.

  else. &quot;( Noch kein Eintrag )

*   * 3. If there is none, create a new object
    THE_OBJECT = PM_CREATE_REPRESENTANT(
                   I_BUSINESS_KEY = BUSINESS_KEY ).

*   * 4. Set attributes
*&lt;   Generated from mapping:
*&gt;

*   * 5. Register the object as TRANSIENT and initialize it
    call method OS_PM_CREATED_TRANSIENT.

  endif. &quot;( Eintrag vorhanden )

* * 6. Clean up
  clear CURRENT_SPECIAL_OBJECT_INFO.
  RESULT = THE_OBJECT.

           &quot;CREATE_TRANSIENT
  endmethod.</source>
  </method>
  <method CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="DELETE_PERSISTENT" VERSION="1" LANGU="E" DESCRIPT="Deletes Persistent Object with Key" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="DELETE_PERSISTENT" SCONAME="I_AEDAT" VERSION="1" LANGU="E" DESCRIPT="Business Key" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="RSCRMTSTMP"/>
   <parameter CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="DELETE_PERSISTENT" SCONAME="I_UNAME" VERSION="1" LANGU="E" DESCRIPT="Business Key" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="UNAME"/>
   <exception CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="DELETE_PERSISTENT" SCONAME="CX_OS_OBJECT_NOT_EXISTING" VERSION="1" LANGU="E" DESCRIPT="Object Services Exception" MTDTYPE="0" EDITORDER="0 "/>
   <source>method DELETE_PERSISTENT.
***BUILD 093901
*      IMPORTING I_AEDAT TYPE RSCRMTSTMP.
*      IMPORTING I_UNAME TYPE UNAME.
*      raising   CX_OS_OBJECT_NOT_EXISTING
************************************************************************
* Purpose        : Delete persistent object. It is marked DELETED in
*                  memory and removed from DB when the top transaction
*                  is closed.
*
* Version        : 2.0
*
* Precondition   : The object is persistent (not transient)
*
* Postcondition  : Instance is marked for deletion.
*
* OO Exceptions  : CX_OS_OBJECT_NOT_EXISTING(TRANSIENT_BY_BKEY,
*                  CREATED_AND_DELETED_BY_BKEY,BY_BKEY)
*                  ( propagates PM_LOAD_AND_SET_ATTRIBUTES )
*                  propagates PM_DELETE_PERSISTENT
*
* Implementation : 1. Check if there is already an object with that
*                     business key
*                  2. If not: create representative object and check
*                     if there is an entry on DB (Need to be sure that
*                     no other object exists with the OID that belongs
*                     to the given Business Key)
*                  3. If it already exists: call PM_DELETE_PERSISTENT
*
************************************************************************
* Changelog:
* - 1999-09-21   : (OS)  Initial Version
* - 2000-03-06   : (BGR) Version 2.0
* - 2000-08-03   : (SB)  OO Exceptions
* - 2000-10-30   : (SB)  Type Mapping
************************************************************************

  data: BUSINESS_KEY type TYP_BUSINESS_KEY .
  data: EX_OS_OBJECT_NOT_FOUND type ref to CX_OS_OBJECT_NOT_FOUND.
  data: EX_OS_OBJECT_STATE type ref to CX_OS_OBJECT_STATE.
  data: BKEY_STRING type STRING.

* 1. Check if there is already an object with that business key

  clear: CURRENT_OBJECT_IREF,
         CURRENT_SPECIAL_OBJECT_INFO.

*&lt; Generated from mapping:
  BUSINESS_KEY-AEDAT = I_AEDAT.
  BUSINESS_KEY-UNAME = I_UNAME.
*&gt;

  read table SPECIAL_BKEY_TAB into CURRENT_SPECIAL_OBJECT_INFO
       with table key BUSINESS_KEY = BUSINESS_KEY.

  if ( SY-SUBRC = 0 ).

    read table SPECIAL_OBJECT_INFO into CURRENT_SPECIAL_OBJECT_INFO
         with table key
         OBJECT_ID = CURRENT_SPECIAL_OBJECT_INFO-OBJECT_ID.
    call method OS_LOAD_AND_VALIDATE_CURRENT
         exporting I_INDEX = SY-TABIX.

  endif.

  if ( CURRENT_OBJECT_IREF is initial ).

*   * 2. If not: create representative object and check
*   *    if there is an entry on DB (Need to be sure that
*   *    no other object exists with the OID that belongs
*   *    to the given Business Key)

    try.

        call method PM_LOAD_AND_SET_ATTRIBUTES
             exporting I_BUSINESS_KEY = BUSINESS_KEY.

      catch CX_OS_OBJECT_NOT_FOUND into EX_OS_OBJECT_NOT_FOUND.
*       * If the object is not found by key - raise object not existing
*       * by key. If a reference has a illegal class GUID (i.e. object
*       * not found by ref error) - ignore.
        if ( EX_OS_OBJECT_NOT_FOUND-&gt;TEXTID =
             CX_OS_OBJECT_NOT_FOUND=&gt;BY_BKEY ).
          call method OS_CLEAR_CURRENT.
          class CX_OS_OBJECT_NOT_EXISTING definition load.
          raise exception type CX_OS_OBJECT_NOT_EXISTING
            exporting
              BKEY   = EX_OS_OBJECT_NOT_FOUND-&gt;BKEY
              TABLE  = EX_OS_OBJECT_NOT_FOUND-&gt;TABLE
              TEXTID = CX_OS_OBJECT_NOT_EXISTING=&gt;BY_BKEY.
        endif.

      cleanup.
        call method OS_CLEAR_CURRENT.

    endtry.



  endif.&quot; ( No Entry in administrative data? )


* * 3. If it already exists: call PM_DELETE_PERSISTENT
  if not ( CURRENT_OBJECT_IREF is initial ).

    try.

        call method PM_DELETE_PERSISTENT.

      catch CX_OS_OBJECT_STATE into EX_OS_OBJECT_STATE.
      if ( EX_OS_OBJECT_STATE-&gt;TEXTID =
           CX_OS_OBJECT_STATE=&gt;TRANSIENT ).
        BKEY_STRING  = MAP_SERIALIZE_BKEY( BUSINESS_KEY ).
        class CX_OS_OBJECT_NOT_EXISTING definition load.
        raise exception type CX_OS_OBJECT_NOT_EXISTING
          exporting
            BKEY   = BKEY_STRING
            TEXTID = CX_OS_OBJECT_NOT_EXISTING=&gt;TRANSIENT_BY_BKEY.
      endif.

      if ( EX_OS_OBJECT_STATE-&gt;TEXTID =
           CX_OS_OBJECT_STATE=&gt;CREATED_AND_DELETED ).
        BKEY_STRING  = MAP_SERIALIZE_BKEY( BUSINESS_KEY ).
        class CX_OS_OBJECT_NOT_EXISTING definition load.
        raise exception type CX_OS_OBJECT_NOT_EXISTING
          exporting
            BKEY   = BKEY_STRING
            TEXTID =
              CX_OS_OBJECT_NOT_EXISTING=&gt;CREATED_AND_DELETED_BY_BKEY.
      endif.

    endtry.

  endif.
           &quot;DELETE_PERSISTENT
  endmethod.</source>
  </method>
  <method CLSNAME="CL_OS_CA_COMMON" CMPNAME="DELETE_SPECIAL_OBJECT_INFO" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method DELETE_SPECIAL_OBJECT_INFO.
***BUILD 090501
************************************************************************
* Purpose        : Delete current entry SPECIAL_OBJECT_INFO
*
* Version        : 2.0
*
* Precondition   : Index is set in CURRENT_OBJECT_INDEX
*
* Postcondition  : entry is deleted
*
* OO Exceptions  : --
*
* Implementation :
*
************************************************************************
* Changelog:
* - 2000-03-02   : (BGR) Initial Version
* - 2001-10-30   : (SB)  Type Mapping
************************************************************************

  read table SPECIAL_OBJECT_INFO into CURRENT_SPECIAL_OBJECT_INFO
       index CURRENT_OBJECT_INDEX.

  delete table SPECIAL_BKEY_TAB
    with table key
      BUSINESS_KEY = CURRENT_SPECIAL_OBJECT_INFO-BUSINESS_KEY.

  delete SPECIAL_OBJECT_INFO index CURRENT_OBJECT_INDEX.
  clear CURRENT_SPECIAL_OBJECT_INFO.

           &quot;DELETE_SPECIAL_OBJECT_INFO
  endmethod.</source>
  </method>
  <method CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="GET_PERSISTENT" VERSION="1" LANGU="E" DESCRIPT="Get Persistent Object with Key" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="GET_PERSISTENT" SCONAME="I_AEDAT" VERSION="1" LANGU="E" DESCRIPT="Business Key" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="RSCRMTSTMP"/>
   <parameter CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="GET_PERSISTENT" SCONAME="I_UNAME" VERSION="1" LANGU="E" DESCRIPT="Business Key" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="UNAME"/>
   <parameter CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="GET_PERSISTENT" SCONAME="RESULT" VERSION="1" LANGU="E" DESCRIPT="Persistent Object" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_USFP_T_ASA_STKUP"/>
   <exception CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="GET_PERSISTENT" SCONAME="CX_OS_OBJECT_NOT_FOUND" VERSION="1" LANGU="E" DESCRIPT="Object Services Exception" MTDTYPE="0" EDITORDER="0 "/>
   <source>method GET_PERSISTENT.
***BUILD 093901
*      importing I_AEDAT TYPE RSCRMTSTMP.
*      importing I_UNAME TYPE UNAME.
*      returning RESULT TYPE REF TO ZCL_USFP_T_ASA_STKUP
*       raising   CX_OS_OBJECT_NOT_FOUND
************************************************************************
* Purpose        : Get reference of an persistent object.
*
* Version        : 2.0
*
* Precondition   : --
*
* Postcondition  : Persistent object is active
*
* OO Exceptions  : CX_OS_OBJECT_NOT_FOUND
*                    (IS_TRANSIENT_BY_BKEY,DELETED_BY_BKEY)
*                  propagates PM_LOAD_AND_SET_ATTRIBUTES
*                  propagates OS_PM_LOADED_PERISISTENT
*
* Implementation : 1. Look for object in SPECIAL_OBJECT_INFO. If found,
*                     check if it is still valid
*                  2. Object found: Check PM_STATUS
*                     2a. If Status is TRANSIENT or DELETED, error!
*                     2b. If Status is NOT_LOADED, continue with 3.
*                     2c. If Status is NEW, LOADED or CHANGED, success!
*                  3. Load object data from database and set object
*                  3.a. Completion in super class
*                  4. clean up
*
************************************************************************
* Changelog:
* - 1999-09-21   : (OS)  Initial Version
* - 2000-03-07   : (BGR) Version 2.0 - Common Superclass
* - 2000-08-02   : (SB)  OO Exceptions
* - 2000-10-30   : (SB)  Type Mapping
* - 2004-01-21   : (SB)  Type Mapping Refactoring
************************************************************************

  data: BUSINESS_KEY    type TYP_BUSINESS_KEY,
        FLAG_NOT_LOADED type OS_BOOLEAN,
        BKEY_STRING     type STRING.

  data: TEMP_CURRENT_OBJECT_IREF type ref to OBJECT.

* * 1. Look for object in SPECIAL_OBJECT_INFO. If found, check if it
* * is still valid

  clear:  CURRENT_OBJECT_IREF.

*&lt; Generated from mapping:
  BUSINESS_KEY-AEDAT = I_AEDAT.
  BUSINESS_KEY-UNAME = I_UNAME.
*&gt;

  read table SPECIAL_BKEY_TAB into CURRENT_SPECIAL_OBJECT_INFO
       with table key BUSINESS_KEY = BUSINESS_KEY.

  if ( SY-SUBRC = 0 ).

    read table SPECIAL_OBJECT_INFO into CURRENT_SPECIAL_OBJECT_INFO
         with table key
         OBJECT_ID = CURRENT_SPECIAL_OBJECT_INFO-OBJECT_ID.
    call method OS_LOAD_AND_VALIDATE_CURRENT
         exporting I_INDEX = SY-TABIX.

  endif.

  if ( not CURRENT_OBJECT_IREF is initial ).

* * 2. Object found: Check PM_STATUS

    case CURRENT_OBJECT_INFO-PM_STATUS.

*   * 2a. If Status is TRANSIENT or DELETED, error!
    when OSCON_OSTATUS_DELETED.

*!!!!! Error: Object activation failed - Object marked for deletion
      TEMP_CURRENT_OBJECT_IREF = CURRENT_OBJECT_IREF.
      BKEY_STRING  = MAP_SERIALIZE_BKEY( BUSINESS_KEY ).
      call method OS_CLEAR_CURRENT.
      clear CURRENT_SPECIAL_OBJECT_INFO.
      class CX_OS_OBJECT_NOT_FOUND definition load.
      raise exception type CX_OS_OBJECT_NOT_FOUND
        exporting
          OBJECT = TEMP_CURRENT_OBJECT_IREF
          BKEY   = BKEY_STRING
          TEXTID = CX_OS_OBJECT_NOT_FOUND=&gt;DELETED_BY_BKEY.

    when OSCON_OSTATUS_TRANSIENT.

*!!!!! Error: Object activation failed - Object is transient
      TEMP_CURRENT_OBJECT_IREF = CURRENT_OBJECT_IREF.
      BKEY_STRING  = MAP_SERIALIZE_BKEY( BUSINESS_KEY ).
      call method OS_CLEAR_CURRENT.
      clear CURRENT_SPECIAL_OBJECT_INFO.
      class CX_OS_OBJECT_NOT_FOUND definition load.
      raise exception type CX_OS_OBJECT_NOT_FOUND
        exporting
          OBJECT = TEMP_CURRENT_OBJECT_IREF
          BKEY   = BKEY_STRING
          TEXTID = CX_OS_OBJECT_NOT_FOUND=&gt;IS_TRANSIENT_BY_BKEY.


*   * 2b. If Status is NOT_LOADED, continue with 3.
    when OSCON_OSTATUS_NOT_LOADED.

      FLAG_NOT_LOADED      = OSCON_TRUE.

*   * 2c. If Status is NEW, LOADED or CHANGED, success!
    when others.

      FLAG_NOT_LOADED      = OSCON_FALSE.

    endcase. &quot;PM_STATUS

  else.&quot; ( CURRENT_OBJECT_IREF is initial ).

    FLAG_NOT_LOADED      = OSCON_TRUE.

  endif.&quot; ( Entry in administrative data? )

* * 3. Load object data from database and set object

  if (  FLAG_NOT_LOADED = OSCON_TRUE ).

*   * internal Undo
    append INTERNAL_NEXT_UNDO_INFO to INTERNAL_TRANSACTION_STACK.
    INTERNAL_CURRENT_TRANSACTION = SY-TABIX.

    try.
        call method PM_LOAD_AND_SET_ATTRIBUTES
             exporting I_BUSINESS_KEY = BUSINESS_KEY.

        result ?= CURRENT_OBJECT_IREF.

*       * 3.a. Completion in super class
        call method OS_PM_LOADED_PERSISTENT.

      cleanup.
        call method OS_INTERNAL_UNDO.
        call method OS_CLEAR_CURRENT.
        clear CURRENT_SPECIAL_OBJECT_INFO.
    endtry.

*   * Clean-up internal Undo
    delete INTERNAL_TRANSACTION_STACK
           index INTERNAL_CURRENT_TRANSACTION.
    add -1 to INTERNAL_CURRENT_TRANSACTION.
    if ( INTERNAL_TRANSACTION_STACK is initial ).
      clear INTERNAL_UNDO_INFO.
      INTERNAL_NEXT_UNDO_INFO = 1.
    endif. &quot;( INTERNAL_TRANSACTION_STACK is initial? )

  else. &quot;( Object already loaded )

    RESULT ?= CURRENT_OBJECT_IREF.
    call method OS_CLEAR_CURRENT.

  endif. &quot;( Loading necessesary? )

* * 4. clean up

  clear  CURRENT_SPECIAL_OBJECT_INFO.


           &quot;GET_PERSISTENT
  endmethod.</source>
  </method>
  <method CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="GET_TRANSIENT" VERSION="1" LANGU="E" DESCRIPT="Get Transient Object with Key" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="GET_TRANSIENT" SCONAME="I_AEDAT" VERSION="1" LANGU="E" DESCRIPT="Business Key" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="RSCRMTSTMP"/>
   <parameter CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="GET_TRANSIENT" SCONAME="I_UNAME" VERSION="1" LANGU="E" DESCRIPT="Business Key" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="UNAME"/>
   <parameter CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="GET_TRANSIENT" SCONAME="RESULT" VERSION="1" LANGU="E" DESCRIPT="Transient Object" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_USFP_T_ASA_STKUP"/>
   <exception CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="GET_TRANSIENT" SCONAME="CX_OS_OBJECT_NOT_FOUND" VERSION="1" LANGU="E" DESCRIPT="Object Services Exception" MTDTYPE="0" EDITORDER="0 "/>
   <source>method GET_TRANSIENT.
***BUILD 093901
*      IMPORTING I_AEDAT TYPE RSCRMTSTMP.
*      IMPORTING I_UNAME TYPE UNAME.
*      RETURNING RESULT TYPE REF TO ZCL_USFP_T_ASA_STKUP
*       raising   CX_OS_OBJECT_NOT_FOUND
************************************************************************
* Purpose        : Get reference of an transient object.
*
* Version        : 2.0
*
* Precondition   : object has been created transient
*
* Postcondition  : --
*
* OO Exceptions  : CX_OS_OBJECT_NOT_FOUND
*                  (TRANSIENT_BY_BKEY, IS_PERSISTENT_BY_BKEY)
*
* Implementation : 1. look for entry in SPECIAL_OBJECT_INFO and check
*                     if it is still valid
*                  2. If it not valid or no object found: Error
*                  3. If it is valid: Check state
*                    3a. Not Transient: Error!
*                    3b. Transient: Success!
*
************************************************************************
* Changelog:
* - 2000-03-07   : (BGR) Initial Version
* - 2000-08-03   : (SB)  OO Exceptions
* - 2000-10-30   : (SB)  Type Mapping
************************************************************************

  data: BUSINESS_KEY type TYP_BUSINESS_KEY,
        BKEY_STRING  type STRING .

  data: TEMP_CURRENT_OBJECT_IREF type ref to OBJECT.

* * 1. look for entry in SPECIAL_OBJECT_INFO and check if it is
* *    still valid

  clear CURRENT_OBJECT_IREF.

*&lt; Generated from mapping:
  BUSINESS_KEY-AEDAT = I_AEDAT.
  BUSINESS_KEY-UNAME = I_UNAME.
*&gt;

  read table SPECIAL_BKEY_TAB into CURRENT_SPECIAL_OBJECT_INFO
       with table KEY BUSINESS_KEY = BUSINESS_KEY.

  if ( SY-SUBRC = 0 ).

    read table SPECIAL_OBJECT_INFO into CURRENT_SPECIAL_OBJECT_INFO
         with table key
         OBJECT_ID = CURRENT_SPECIAL_OBJECT_INFO-OBJECT_ID.
    call method OS_LOAD_AND_VALIDATE_CURRENT
         exporting I_INDEX = SY-TABIX.

  endif.

* * 2. If it not valid or no object found: Error
  if ( CURRENT_OBJECT_IREF is initial ).

*!!! Error: Object activation failed - no entry in administrative data
    BKEY_STRING  = MAP_SERIALIZE_BKEY( BUSINESS_KEY ).
    clear CURRENT_SPECIAL_OBJECT_INFO.
    class CX_OS_OBJECT_NOT_FOUND definition load.
    raise exception type CX_OS_OBJECT_NOT_FOUND
      exporting
        BKEY   = BKEY_STRING
        TEXTID = CX_OS_OBJECT_NOT_FOUND=&gt;TRANSIENT_BY_BKEY.

  else. &quot;( Entry exists )

*   * 3. If it is valid: Check state
    if ( CURRENT_OBJECT_INFO-PM_STATUS &lt;&gt; OSCON_OSTATUS_TRANSIENT ).

*     * 3a. Not Transient: Error!
*!!!!! Error: Object is not transient
      TEMP_CURRENT_OBJECT_IREF = CURRENT_OBJECT_IREF.
      BKEY_STRING  = MAP_SERIALIZE_BKEY( BUSINESS_KEY ).
      call method OS_CLEAR_CURRENT.
      clear CURRENT_SPECIAL_OBJECT_INFO.
      class CX_OS_OBJECT_NOT_FOUND definition load.
      raise exception type CX_OS_OBJECT_NOT_FOUND
        exporting
          OBJECT = TEMP_CURRENT_OBJECT_IREF
          BKEY   = BKEY_STRING
          TEXTID = CX_OS_OBJECT_NOT_FOUND=&gt;IS_PERSISTENT_BY_BKEY.

    endif. &quot;( PM_STATUS &lt;&gt; transient )

  endif.&quot; ( Entry in administrative data? )

* * 3b. Transient: Success!
  RESULT ?= CURRENT_OBJECT_IREF.
  call method OS_CLEAR_CURRENT.
  clear CURRENT_SPECIAL_OBJECT_INFO.

           &quot;GET_TRANSIENT
  endmethod.</source>
  </method>
  <method CLSNAME="CL_OS_CA_COMMON" CMPNAME="LOAD_SPECIAL_OBJECT_INFO" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method LOAD_SPECIAL_OBJECT_INFO.
***BUILD 090501
************************************************************************
* Purpose        : Load CURRENT_SPECIAL_OBJECT_INFO from
*                  SPECIAL_OBJECT_INFO
*
* Version        : 2.0
*
* Precondition   : Index is set in CURRENT_OBJECT_INDEX
*
* Postcondition  : entry is loaded
*
* OO Exceptions  : -
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 2000-03-02   : (BGR) Initial Version
************************************************************************

  read table SPECIAL_OBJECT_INFO into CURRENT_SPECIAL_OBJECT_INFO
       index CURRENT_OBJECT_INDEX.

           &quot;LOAD_SPECIAL_OBJECT_INFO
  endmethod.</source>
  </method>
  <method CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="MAP_EXTRACT_IDENTIFIER" VERSION="1" LANGU="E" DESCRIPT="Extracts BKey from Database Data" EXPOSURE="1" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="MAP_EXTRACT_IDENTIFIER" SCONAME="I_DB_DATA" VERSION="1" LANGU="E" DESCRIPT="Object Data Read from DB" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TYP_DB_DATA"/>
   <parameter CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="MAP_EXTRACT_IDENTIFIER" SCONAME="E_BUSINESS_KEY" VERSION="1" LANGU="E" DESCRIPT="Business Key Extracted from Database Data" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="0" TYPTYPE="1" TYPE="TYP_BUSINESS_KEY"/>
   <source>method MAP_EXTRACT_IDENTIFIER.
***BUILD 093901
     &quot; importing I_DB_DATA type TYP_DB_DATA
     &quot; exporting E_BUSINESS_KEY type TYP_BUSINESS_KEY
************************************************************************
* Purpose        : Extract Business Key from given DB_DATA
*
* Version        : 2.0
*
* Precondition   : DB_DATA is a structure with object data read from
*                  DB including Keys and GUID
*
* Postcondition  : E_BUSINESS_KEY is the business key extracted from
*                  I_DB_DATA
*
* OO Exceptions  : --
*
* Implementation :
*
************************************************************************
* Changelog:
* - 2000-03-06   : (BGR) Initial Version
* - 2000-08-02   : (SB) OO Exceptions
************************************************************************
* Generated! Do not modify!
************************************************************************

*&lt;Generated from mapping:
  E_BUSINESS_KEY-AEDAT  = I_DB_DATA-AEDAT.
  E_BUSINESS_KEY-UNAME  = I_DB_DATA-UNAME.
*&gt;

           &quot;MAP_EXTRACT_IDENTIFIER
  endmethod.</source>
  </method>
  <method CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="MAP_GET_ATTRIBUTES" VERSION="1" LANGU="E" DESCRIPT="Reads Persistent Attributes from Object" EXPOSURE="1" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="MAP_GET_ATTRIBUTES" SCONAME="I_OBJECT_REF_TAB" VERSION="1" LANGU="E" DESCRIPT="List of Objects Affected" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TYP_OBJECT_REF_TAB"/>
   <parameter CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="MAP_GET_ATTRIBUTES" SCONAME="E_OBJECT_DATA_TAB" VERSION="1" LANGU="E" DESCRIPT="Object Data Read" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="0" TYPTYPE="1" TYPE="TYP_DB_DATA_TAB"/>
   <source>method MAP_GET_ATTRIBUTES.
***BUILD 093901
     &quot; importing I_OBJECT_REF_TAB  type TYP_OBJECT_REF_TAB
     &quot; exporting value(E_OBJECT_DATA_TAB) type TYP_DB_DATA_TAB
************************************************************************
* Purpose        : Get object data from objects
*
* Version        : 2.0
*
* Precondition   : I_OBJECT_REF_TAB is a list of objects that have a
*                  valid state (new, changed)
*
* Postcondition  : E_OBJECT_DATA_TAB contains all object data of the
*                  given objects. It is a table of the same size like
*                  I_OBJECT_REF_TAB with corresponding entries.
*                  GUID (and Business Key) will be added later.
*
* OO Exceptions  : CX_OS_OBJECT_REFERENCE collects GET_OID_BY_REF
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 2000-03-06   : (BGR) Initial Version
* - 2000-08-03   : (SB)  OO Exceptions
* - 2002-01-17   : (SB)  private attributes in super classes
************************************************************************
* Generated! Do not modify!
************************************************************************

  data: THE_OBJECT type ref to ZCL_USFP_T_ASA_STKUP,
        OBJECT_DATA_ITEM type TYP_DB_DATA,
        PM_SERVICE       type ref to IF_OS_PM_SERVICE. &quot;#EC NEEDED

  data: EX     type ref to CX_OS_ERROR, &quot;#EC NEEDED
        EX_SYS type ref to CX_OS_SYSTEM_ERROR, &quot;#EC NEEDED
        EX_TAB type OSTABLEREF.

  PM_SERVICE ?= PERSISTENCY_MANAGER.

  loop at I_OBJECT_REF_TAB into THE_OBJECT.

    clear OBJECT_DATA_ITEM.

*&lt;  Generated from mapping:
    OBJECT_DATA_ITEM-AEDAT = THE_OBJECT-&gt;AEDAT.
    OBJECT_DATA_ITEM-UNAME = THE_OBJECT-&gt;UNAME.
    OBJECT_DATA_ITEM-UTZON = THE_OBJECT-&gt;UTZON.
    OBJECT_DATA_ITEM-ADATA = THE_OBJECT-&gt;ADATA.
    OBJECT_DATA_ITEM-UMETH = THE_OBJECT-&gt;UMETH.
    OBJECT_DATA_ITEM-LGHDL = THE_OBJECT-&gt;LGHDL.
*&gt;

    APPEND OBJECT_DATA_ITEM TO E_OBJECT_DATA_TAB.

  endloop.&quot;at I_OBJECT_REF_TAB

  if ( not EX_TAB is initial ).
    raise exception type CX_OS_OBJECT_REFERENCE
          exporting EXCEPTION_TAB = EX_TAB.
  endif.

           &quot;MAP_GET_ATTRIBUTES
endmethod.
&quot;#EC CI_VALPAR</source>
  </method>
  <method CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="MAP_INITIALIZE_METADATA" VERSION="1" LANGU="E" DESCRIPT="Initializes Metadata Table for Attributes" EXPOSURE="1" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <source>method MAP_INITIALIZE_METADATA.
***BUILD 093901
************************************************************************
* Purpose        : Initialize the mapping metadata,
*
* Version        : 2.0
*
* Precondition   : -
*
* Postcondition  : The mapping metadata table MAP_ATT_INFO_TAB
*                  contains an entry for all persistent attributes
*                  accessible from a query expression
*
* OO Exceptions  : -
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 2004-03-25   : (SB)  Initial Version
************************************************************************


  data: MAP_ATT_INFO type OSTYP_RT_MAP_ATT_INFO.

  if MAP_ATT_INFO_TAB is initial.

    clear MAP_ATT_INFO.
    MAP_ATT_INFO-NAME = &apos;AEDAT&apos;.
    MAP_ATT_INFO-EXPOSURE = &apos;2&apos;.
    MAP_ATT_INFO-RECORDNAME = &apos;ZUSFPT_ASA_STKUP&apos;.
    MAP_ATT_INFO-FIELD_NAME1  = &apos;AEDAT&apos;.
    insert MAP_ATT_INFO into table MAP_ATT_INFO_TAB.

    clear MAP_ATT_INFO.
    MAP_ATT_INFO-NAME = &apos;UNAME&apos;.
    MAP_ATT_INFO-EXPOSURE = &apos;2&apos;.
    MAP_ATT_INFO-RECORDNAME = &apos;ZUSFPT_ASA_STKUP&apos;.
    MAP_ATT_INFO-FIELD_NAME1  = &apos;UNAME&apos;.
    insert MAP_ATT_INFO into table MAP_ATT_INFO_TAB.

    clear MAP_ATT_INFO.
    MAP_ATT_INFO-NAME = &apos;UTZON&apos;.
    MAP_ATT_INFO-EXPOSURE = &apos;2&apos;.
    MAP_ATT_INFO-RECORDNAME = &apos;ZUSFPT_ASA_STKUP&apos;.
    MAP_ATT_INFO-FIELD_NAME1  = &apos;UTZON&apos;.
    insert MAP_ATT_INFO into table MAP_ATT_INFO_TAB.

    clear MAP_ATT_INFO.
    MAP_ATT_INFO-NAME = &apos;ADATA&apos;.
    MAP_ATT_INFO-EXPOSURE = &apos;2&apos;.
    MAP_ATT_INFO-RECORDNAME = &apos;ZUSFPT_ASA_STKUP&apos;.
    MAP_ATT_INFO-FIELD_NAME1  = &apos;ADATA&apos;.
    insert MAP_ATT_INFO into table MAP_ATT_INFO_TAB.

    clear MAP_ATT_INFO.
    MAP_ATT_INFO-NAME = &apos;UMETH&apos;.
    MAP_ATT_INFO-EXPOSURE = &apos;2&apos;.
    MAP_ATT_INFO-RECORDNAME = &apos;ZUSFPT_ASA_STKUP&apos;.
    MAP_ATT_INFO-FIELD_NAME1  = &apos;UMETH&apos;.
    insert MAP_ATT_INFO into table MAP_ATT_INFO_TAB.

    clear MAP_ATT_INFO.
    MAP_ATT_INFO-NAME = &apos;LGHDL&apos;.
    MAP_ATT_INFO-EXPOSURE = &apos;2&apos;.
    MAP_ATT_INFO-RECORDNAME = &apos;ZUSFPT_ASA_STKUP&apos;.
    MAP_ATT_INFO-FIELD_NAME1  = &apos;LGHDL&apos;.
    insert MAP_ATT_INFO into table MAP_ATT_INFO_TAB.

  endif.

           &quot;MAP_INITIALIZE_METADATA
  endmethod.</source>
  </method>
  <method CLSNAME="CL_OS_CA_COMMON" CMPNAME="MAP_INVALIDATE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method MAP_INVALIDATE.
***BUILD 093901
     &quot; importing I_OBJECT_IREF_TAB type TYP_OBJECT_TAB
************************************************************************
* Purpose        : Invalidate state of all objects in I_OBJECT_IREF_TAB
*
* Version        : 2.0
*
* Precondition   : Objects in I_OBJECT_IREF_TAB exist
*
* Postcondition  : Their state in cleared
*
* OO Exceptions  : -
*
* Implementation : - call method IF_OS_STATE~INVALIDATE
*                  - clear object&apos;s (persistent) attributes
*
************************************************************************
* Changelog:
* - 2000-04-17   : (BGR) Initial Version
* - 2000-08-02   : (SB)  OO Exceptions
* - 2002-01-17   : (SB)  private attributes in super classes
************************************************************************

  data: OBJECT_IREF type TYP_OBJECT_IREF,
        THE_OBJECT  type ref TO ZCL_USFP_T_ASA_STKUP.

  loop at I_OBJECT_IREF_TAB into OBJECT_IREF.

    if ( not OBJECT_IREF is initial ).

      call method OBJECT_IREF-&gt;INVALIDATE.

      THE_OBJECT ?= OBJECT_IREF.

*&lt;    Generated from Mapping:
      clear: THE_OBJECT-&gt;AEDAT,
             THE_OBJECT-&gt;UNAME,
             THE_OBJECT-&gt;UTZON,
             THE_OBJECT-&gt;ADATA,
             THE_OBJECT-&gt;UMETH,
             THE_OBJECT-&gt;LGHDL.
*&gt;

    endif. &quot;( not initial )

  endloop. &quot;at I_OBJECT_IREF_TAB

           &quot;MAP_INVALIDATE
  endmethod.</source>
  </method>
  <method CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="MAP_LOAD_FROM_DATABASE" VERSION="1" LANGU="E" DESCRIPT="Reads Identified Object Data from the DB Based on a Filter" EXPOSURE="0" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="MAP_LOAD_FROM_DATABASE" SCONAME="I_ORDER_BY_CLAUSE" VERSION="1" LANGU="E" DESCRIPT="ORDER BY Clause" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="MAP_LOAD_FROM_DATABASE" SCONAME="I_SUBCLASSES" VERSION="1" LANGU="E" DESCRIPT="Load Subclass Instances" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="OS_BOOLEAN" PARVALUE="OSCON_FALSE"/>
   <parameter CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="MAP_LOAD_FROM_DATABASE" SCONAME="I_UPTO" VERSION="1" LANGU="E" DESCRIPT="Max. No. Instances" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="I" PARVALUE="0"/>
   <parameter CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="MAP_LOAD_FROM_DATABASE" SCONAME="I_WHERE_CLAUSE" VERSION="1" LANGU="E" DESCRIPT="Where Clause" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="MAP_LOAD_FROM_DATABASE" SCONAME="PAR1" VERSION="1" LANGU="E" DESCRIPT="First Parameter for Query Execution" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ANY" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="MAP_LOAD_FROM_DATABASE" SCONAME="PAR2" VERSION="1" LANGU="E" DESCRIPT="Second Parameter for Query Execution" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ANY" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="MAP_LOAD_FROM_DATABASE" SCONAME="PAR3" VERSION="1" LANGU="E" DESCRIPT="Third Parameter for Query Execution" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ANY" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="MAP_LOAD_FROM_DATABASE" SCONAME="RESULT" VERSION="1" LANGU="E" DESCRIPT="Object Data Read from the Database" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="TYP_DB_DATA_TAB"/>
   <source>method MAP_LOAD_FROM_DATABASE.
***BUILD 093901
     &quot; importing I_WHERE_CLAUSE type STRING optional
     &quot;           I_ORDER_BY_CLAUSE type STRING optional
     &quot;           I_SUBCLASSES type OS_BOOLEAN default OSCON_FALSE
     &quot;           I_UPTO type I value 0
     &quot;           PAR1 type ANY optional
     &quot;           PAR2 type ANY optional
     &quot;           PAR3 type ANY optional
     &quot; returning value(RESULT) type TYP_DB_DATA_TAB
************************************************************************
* Purpose        : Load object data identified by I_WHERE_CLAUSE with
*                  PAR1, PAR2 and PAR3 from DB to DB_DATA Table
*
* Version        : 2.0
*
* Precondition   : I_WHERE_CLAUSE is valid where clause in Open-SQL
*
* Postcondition  : RESULT is the corresponding table of object
*                  attributes read from DB
*
* OO Exceptions  : CX_OS_DB_SELECT
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 2004-03-25   : (SB)  Initial Version
* - 2005-04-06   : (SB)  Single Table
************************************************************************


  data: DB_DATA           type TYP_DB_DATA.

*&lt; Generated from mapping:
  types: TYP_DB_DATA_LOCAL type ZUSFPT_ASA_STKUP.
*&gt;

  types:
    TYP_DB_DATA_LOCAL_TAB type standard table of
      TYP_DB_DATA_LOCAL with non-unique default key .

  data: DB_DATA_LOCAL_TAB type TYP_DB_DATA_LOCAL_TAB.

  field-symbols: &lt;FS_DB_DATA_LOCAL&gt; type TYP_DB_DATA_LOCAL.

*&lt; Generated from mapping:
  field-symbols: &lt;FS_DB_ZUSFPT_ASA_STKUP&gt; type ZUSFPT_ASA_STKUP.
*&gt;

*&lt; Generated from mapping:
  select * from ZUSFPT_ASA_STKUP
           up to I_UPTO rows
           into table DB_DATA_LOCAL_TAB
           where (I_WHERE_CLAUSE)
           order by (I_ORDER_BY_CLAUSE).
*&gt;

*   * error handling
  if ( SY-SUBRC &lt;&gt; 0 ).
    class CX_OS_DB_SELECT definition load.
    raise exception type CX_OS_DB_SELECT
         exporting TABLE  = &apos;ZUSFPT_ASA_STKUP&apos;
                   WHERE_CLAUSE = I_WHERE_CLAUSE
                   TEXTID = CX_OS_DB_SELECT=&gt;BY_QUERY.
  endif. &quot;( Error )

  loop at DB_DATA_LOCAL_TAB assigning &lt;FS_DB_DATA_LOCAL&gt;.

    assign &lt;FS_DB_DATA_LOCAL&gt; to &lt;FS_DB_ZUSFPT_ASA_STKUP&gt;.

*&lt; Generated from mapping:
    DB_DATA-AEDAT = &lt;FS_DB_ZUSFPT_ASA_STKUP&gt;-AEDAT.
    DB_DATA-UNAME = &lt;FS_DB_ZUSFPT_ASA_STKUP&gt;-UNAME.
    DB_DATA-UTZON = &lt;FS_DB_ZUSFPT_ASA_STKUP&gt;-UTZON.
    DB_DATA-ADATA = &lt;FS_DB_ZUSFPT_ASA_STKUP&gt;-ADATA.
    DB_DATA-UMETH = &lt;FS_DB_ZUSFPT_ASA_STKUP&gt;-UMETH.
    DB_DATA-LGHDL = &lt;FS_DB_ZUSFPT_ASA_STKUP&gt;-LGHDL.
*&gt;

    append DB_DATA to RESULT.

  endloop.&quot; at DB_TAB

           &quot;MAP_LOAD_FROM_DATABASE
endmethod.
&quot;#EC CI_VALPAR</source>
  </method>
  <method CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="MAP_LOAD_FROM_DATABASE_KEY" VERSION="1" LANGU="E" DESCRIPT="Reads Object Data Identified Using Bus. Key from Database" EXPOSURE="1" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="MAP_LOAD_FROM_DATABASE_KEY" SCONAME="I_BUSINESS_KEY_TAB" VERSION="1" LANGU="E" DESCRIPT="Business Key of the Data to Be Loaded" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TYP_BUSINESS_KEY_TAB"/>
   <parameter CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="MAP_LOAD_FROM_DATABASE_KEY" SCONAME="RESULT" VERSION="1" LANGU="E" DESCRIPT="Object Data Read from the Database" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="TYP_DB_DATA_TAB"/>
   <source>method MAP_LOAD_FROM_DATABASE_KEY.
***BUILD 093901
     &quot; importing I_BUSINESS_KEY_TAB type TYP_BUSINESS_KEY_TAB
     &quot; returning value(RESULT) type TYP_DB_DATA_TAB
************************************************************************
* Purpose        : Load object data identified by I_BUSINESS_KEY_TAB
*                  from DB to DB_DATA Table
*
* Version        : 2.0
*
* Precondition   : I_BUSINESS_KEY_TAB is a table of valid business keys
*
* Postcondition  : RESULT is the corresponding table of object
*                  attributes read from DB
*
* OO Exceptions  : CX_OS_DB_SELECT
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 1999-09-21   : (OS)  Initial Version
* - 2000-03-06   : (BGR) Version 2.0 - difference between loading 1 and
*                  many entries
* - 2000-06-15   : (BGR) Support for multi-table loading
* - 2000-08-03   : (SB)  OO Exceptions
* - 2001-03-27   : (MWI) Loading several objects (type mapping)
* - 2001-11-26   : (SB)  Refactoring Generation
* - 2002-01-17   : (SB)  Bugfix for tables with namespace
* - 2002-01-17   : (SB)  private attributes in super classes
* - 2004-01-07   : (SB)  Multi Access
* - 2005-02-22   : (SB)  Inner Joins
* - 2005-04-06   : (SB)  Single Table
************************************************************************


  data: DB_DATA           type TYP_DB_DATA.

*&lt; Generated from mapping:
  types: TYP_DB_DATA_LOCAL type ZUSFPT_ASA_STKUP.
*&gt;

  types:
    TYP_DB_DATA_LOCAL_TAB type standard table of
      TYP_DB_DATA_LOCAL with non-unique default key .

  data: DB_DATA_LOCAL_TAB type TYP_DB_DATA_LOCAL_TAB.

  field-symbols: &lt;FS_DB_DATA_LOCAL&gt; type TYP_DB_DATA_LOCAL.

*&lt; Generated from mapping:
  field-symbols: &lt;FS_DB_ZUSFPT_ASA_STKUP&gt; type ZUSFPT_ASA_STKUP.
*&gt;

*&lt; Generated from mapping:
  select * from ZUSFPT_ASA_STKUP
           into table DB_DATA_LOCAL_TAB
           for all entries in I_BUSINESS_KEY_TAB
           where ZUSFPT_ASA_STKUP~AEDAT = I_BUSINESS_KEY_TAB-AEDAT
             and ZUSFPT_ASA_STKUP~UNAME = I_BUSINESS_KEY_TAB-UNAME.
*&gt;

* * error handling
  if ( SY-SUBRC &lt;&gt; 0 ).
    class CX_OS_DB_SELECT definition load.
    raise exception type CX_OS_DB_SELECT
         exporting TABLE  = &apos;ZUSFPT_ASA_STKUP&apos;
                   TEXTID = CX_OS_DB_SELECT=&gt;BY_BKEYTAB.
  endif. &quot;( Error )

  loop at DB_DATA_LOCAL_TAB assigning &lt;FS_DB_DATA_LOCAL&gt;.

    assign &lt;FS_DB_DATA_LOCAL&gt; to &lt;FS_DB_ZUSFPT_ASA_STKUP&gt;.

*&lt; Generated from mapping:
    DB_DATA-AEDAT = &lt;FS_DB_ZUSFPT_ASA_STKUP&gt;-AEDAT.
    DB_DATA-UNAME = &lt;FS_DB_ZUSFPT_ASA_STKUP&gt;-UNAME.
    DB_DATA-UTZON = &lt;FS_DB_ZUSFPT_ASA_STKUP&gt;-UTZON.
    DB_DATA-ADATA = &lt;FS_DB_ZUSFPT_ASA_STKUP&gt;-ADATA.
    DB_DATA-UMETH = &lt;FS_DB_ZUSFPT_ASA_STKUP&gt;-UMETH.
    DB_DATA-LGHDL = &lt;FS_DB_ZUSFPT_ASA_STKUP&gt;-LGHDL.
*&gt;

    append DB_DATA to RESULT.

  endloop.&quot; at DB_DATA_LOCAL_TAB

           &quot;MAP_LOAD_FROM_DATABASE_KEY
endmethod.
&quot;#EC CI_VALPAR</source>
  </method>
  <method CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="MAP_MERGE_IDENTIFIER" VERSION="1" LANGU="E" DESCRIPT="Adds BKey to DB Data" EXPOSURE="1" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="MAP_MERGE_IDENTIFIER" SCONAME="I_BUSINESS_KEY_TAB" VERSION="1" LANGU="E" DESCRIPT="List of Business Keys" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TYP_BUSINESS_KEY_TAB"/>
   <parameter CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="MAP_MERGE_IDENTIFIER" SCONAME="C_DB_DATA_TAB" VERSION="1" LANGU="E" DESCRIPT="Object Data in Which Identifiers Are to Be Mixed" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="TYP_DB_DATA_TAB"/>
   <source>method MAP_MERGE_IDENTIFIER.
***BUILD 093901
     &quot; importing I_BUSINESS_KEY_TAB type TYP_BUSINESS_KEY_TAB
     &quot; changing C_DB_DATA_TAB type TYP_DB_DATA_TAB
************************************************************************
* Purpose        : Merge Table I_BUSINESS_KEY_TAB to C_DB_DATA_TAB.
*                  The result is a complete DB_DATA table to be stored
*                  in DB.
*
* Version        : 2.0
*
* Precondition   : C_DB_DATA is a Table filled with object data
*                  I_BUSINESS_KEY_TAB is a table of the same size with
*                  corresponding entries.
*
* Postcondition  : C_DB_DATA_TAB is complete
*
* OO Exceptions  : --
*
* Implementation :
*
************************************************************************
* Changelog:
* - 2000-03-06   : (BGR) Initial Version
************************************************************************
* Generated! Do not modify!
************************************************************************

  data: BUSINESS_KEY type TYP_BUSINESS_KEY.

  field-symbols &lt;FS_OBJECT_DATA&gt; type TYP_DB_DATA.

  loop at C_DB_DATA_TAB assigning &lt;FS_OBJECT_DATA&gt;.

    read table I_BUSINESS_KEY_TAB into BUSINESS_KEY
         index SY-TABIX.

*&lt;  Generated from mapping:
    &lt;FS_OBJECT_DATA&gt;-AEDAT = BUSINESS_KEY-AEDAT.
    &lt;FS_OBJECT_DATA&gt;-UNAME = BUSINESS_KEY-UNAME.
*&gt;


  endloop.&quot; at C_DB_DATA_TAB

           &quot;MAP_MERGE_IDENTIFIER
  endmethod.</source>
  </method>
  <method CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="MAP_SAVE_TO_DATABASE" VERSION="1" LANGU="E" DESCRIPT="Saves Object Data in Database" EXPOSURE="1" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="MAP_SAVE_TO_DATABASE" SCONAME="I_DELETES" VERSION="1" LANGU="E" DESCRIPT="Key of the Data to Be Deleted" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TYP_DB_DELETE_TAB"/>
   <parameter CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="MAP_SAVE_TO_DATABASE" SCONAME="I_INSERTS" VERSION="1" LANGU="E" DESCRIPT="Data to Be Created" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TYP_DB_DATA_TAB"/>
   <parameter CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="MAP_SAVE_TO_DATABASE" SCONAME="I_UPDATES" VERSION="1" LANGU="E" DESCRIPT="Data to Be Changed" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TYP_DB_DATA_TAB"/>
   <source>method MAP_SAVE_TO_DATABASE.
***BUILD 093901
     &quot; importing I_DELETES type TYP_DB_DELETE_TAB
     &quot;           I_INSERTS type TYP_DB_DATA_TAB
     &quot;           I_UPDATES type TYP_DB_DATA_TAB
************************************************************************
* Purpose        : Do database operations:
*                  Insert new object data from I_INSERTS,
*                  Update changed object data from I_UPDATES and
*                  Delete entries for deleted objects from I_DELETES
*
* Version        : 2.0
*
* Precondition   : I_DELETES,I_INSERTS and I_UPDATES contain ALL
*                  necessary information (Keys, Data)
*                  If this method is called in update task, there
*                  is NO MORE information, no objects exist anymore.
*
* Postcondition  : All database operations have been performed.
*
* OO Exceptions  : CX_OS_DB_INSERT, CX_OS_DB_UPDATE, CX_OS_DB_DELETE
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 1999-09-21   : (OS)  Initial Version
* - 2000-03-06   : (BGR) Version 2.0
* - 2001-11-26   : (SB)  Refactoring Generation
* - 2002-01-17   : (SB)  private attributes in super classes
************************************************************************

*&lt; Generated from mapping:

* * ZUSFPT_ASA_STKUP: internal tables for mass operation
  data DB_ITB_ZUSFPT_ASA_STKUP type STANDARD TABLE OF ZUSFPT_ASA_STKUP.
  data DB_UTB_ZUSFPT_ASA_STKUP type STANDARD TABLE OF ZUSFPT_ASA_STKUP.
  data DB_DTB_ZUSFPT_ASA_STKUP type STANDARD TABLE OF ZUSFPT_ASA_STKUP.

* * ZUSFPT_ASA_STKUP: headlines for tables
  data DB_ILN_ZUSFPT_ASA_STKUP type ZUSFPT_ASA_STKUP.
  data DB_ULN_ZUSFPT_ASA_STKUP type ZUSFPT_ASA_STKUP.
  data DB_DLN_ZUSFPT_ASA_STKUP type ZUSFPT_ASA_STKUP.

*&gt;

  field-symbols &lt;FS_INSERT&gt; type TYP_DB_DATA.
  field-symbols &lt;FS_UPDATE&gt; type TYP_DB_DATA.
  field-symbols &lt;FS_DELETE&gt; type TYP_SPECIAL_OBJECT_INFO.

* * Collect Inserts
  loop at I_INSERTS assigning &lt;FS_INSERT&gt;.

*&lt; Generated from mapping:



   DB_ILN_ZUSFPT_ASA_STKUP-UTZON = &lt;FS_INSERT&gt;-UTZON.
   DB_ILN_ZUSFPT_ASA_STKUP-ADATA = &lt;FS_INSERT&gt;-ADATA.
   DB_ILN_ZUSFPT_ASA_STKUP-UMETH = &lt;FS_INSERT&gt;-UMETH.
   DB_ILN_ZUSFPT_ASA_STKUP-LGHDL = &lt;FS_INSERT&gt;-LGHDL.


   DB_ILN_ZUSFPT_ASA_STKUP-AEDAT = &lt;FS_INSERT&gt;-AEDAT.
   DB_ILN_ZUSFPT_ASA_STKUP-UNAME = &lt;FS_INSERT&gt;-UNAME.
   append DB_ILN_ZUSFPT_ASA_STKUP to DB_ITB_ZUSFPT_ASA_STKUP.
*&gt;

  endloop. &quot;at I_INSERTS

* * Collect Updates
  loop at I_UPDATES assigning &lt;FS_UPDATE&gt;.

*&lt; Generated from mapping:



   DB_ULN_ZUSFPT_ASA_STKUP-UTZON = &lt;FS_UPDATE&gt;-UTZON.
   DB_ULN_ZUSFPT_ASA_STKUP-ADATA = &lt;FS_UPDATE&gt;-ADATA.
   DB_ULN_ZUSFPT_ASA_STKUP-UMETH = &lt;FS_UPDATE&gt;-UMETH.
   DB_ULN_ZUSFPT_ASA_STKUP-LGHDL = &lt;FS_UPDATE&gt;-LGHDL.


   DB_ULN_ZUSFPT_ASA_STKUP-AEDAT = &lt;FS_UPDATE&gt;-AEDAT.
   DB_ULN_ZUSFPT_ASA_STKUP-UNAME = &lt;FS_UPDATE&gt;-UNAME.
   append DB_ULN_ZUSFPT_ASA_STKUP TO DB_UTB_ZUSFPT_ASA_STKUP.
*&gt;

  endloop. &quot;at I_UPDATES

* * Collect Deletes
  loop at I_DELETES assigning &lt;FS_DELETE&gt;.

    DB_DLN_ZUSFPT_ASA_STKUP-AEDAT = &lt;FS_DELETE&gt;-BUSINESS_KEY-AEDAT.
    DB_DLN_ZUSFPT_ASA_STKUP-UNAME = &lt;FS_DELETE&gt;-BUSINESS_KEY-UNAME.

    append DB_DLN_ZUSFPT_ASA_STKUP TO DB_DTB_ZUSFPT_ASA_STKUP.

  endloop. &quot;at I_DELETES

* * Perform DB Operations:

*&lt; Generated from mapping:

* * DB Deletes
  delete ZUSFPT_ASA_STKUP FROM TABLE DB_DTB_ZUSFPT_ASA_STKUP.
  if SY-SUBRC &lt;&gt; 0.
    raise exception type CX_OS_DB_DELETE
      exporting
        TABLE = &apos;ZUSFPT_ASA_STKUP&apos;.
  endif.

* * DB Inserts
  insert ZUSFPT_ASA_STKUP FROM TABLE DB_ITB_ZUSFPT_ASA_STKUP
    accepting duplicate keys.
  if SY-SUBRC &lt;&gt; 0.
    raise exception type CX_OS_DB_INSERT
      exporting
        TABLE = &apos;ZUSFPT_ASA_STKUP&apos;.
  endif.

* * DB Updates
  update ZUSFPT_ASA_STKUP FROM TABLE DB_UTB_ZUSFPT_ASA_STKUP.
  if SY-SUBRC &lt;&gt; 0.
    raise exception type CX_OS_DB_UPDATE
      exporting
        TABLE = &apos;ZUSFPT_ASA_STKUP&apos;.
  endif.

*&gt;
           &quot;MAP_SAVE_TO_DATABASE
  endmethod.</source>
  </method>
  <method CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="MAP_SERIALIZE_BKEY" VERSION="1" LANGU="E" DESCRIPT="Serializes Business Key" EXPOSURE="1" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="MAP_SERIALIZE_BKEY" SCONAME="I_BUSINESS_KEY" VERSION="1" LANGU="E" DESCRIPT="Business Key" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TYP_BUSINESS_KEY"/>
   <parameter CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="MAP_SERIALIZE_BKEY" SCONAME="RESULT" VERSION="1" LANGU="E" DESCRIPT="Business Key as String" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="STRING"/>
   <source>method MAP_SERIALIZE_BKEY.
***BUILD 093901
     &quot; importing I_BUSINESS_KEY type TYP_BUSINESS_KEY
     &quot; returning value(RESULT) type STRING
************************************************************************
* Purpose        : Concatenate business keys into string.
*
* Version        : 2.0
*
* Precondition   : -
*
* Postcondition  : -
*
* OO Exceptions  : -
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 2000-11-23   : (SB)  initial versiuon
* - 2009-06-03   : (SB)  correct order if edit order is used
************************************************************************
* Generated! Do not modify!
************************************************************************

  data: COMP_STRING type STRING.

*&lt; Generated from mapping:
  COMP_STRING = I_BUSINESS_KEY-AEDAT.
  concatenate RESULT COMP_STRING into RESULT.
  COMP_STRING = I_BUSINESS_KEY-UNAME.
  concatenate RESULT COMP_STRING into RESULT.
*&gt;

           &quot; MAP_SERIALIZE_BKEY
  endmethod.</source>
  </method>
  <method CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="MAP_SET_ATTRIBUTES" VERSION="1" LANGU="E" DESCRIPT="Sets Persistent Attributes of an Object" EXPOSURE="1" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="MAP_SET_ATTRIBUTES" SCONAME="I_OBJECT_DATA" VERSION="1" LANGU="E" DESCRIPT="Object Data to Be Set" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TYP_DB_DATA"/>
   <parameter CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="MAP_SET_ATTRIBUTES" SCONAME="I_OBJECT_REF" VERSION="1" LANGU="E" DESCRIPT="Object Affected" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TYP_OBJECT_REF"/>
   <exception CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="MAP_SET_ATTRIBUTES" SCONAME="CX_OS_OBJECT_NOT_FOUND" VERSION="1" LANGU="E" DESCRIPT="Object Services Exception" MTDTYPE="0" EDITORDER="0 "/>
   <source>method MAP_SET_ATTRIBUTES.
***BUILD 093901
     &quot; importing I_OBJECT_DATA type TYP_DB_DATA
     &quot;           I_OBJECT_REF  type TYP_OBJECT_REF
     &quot; raising   CX_OS_OBJECT_NOT_FOUND
************************************************************************
* Purpose        : Set objects from given object data
*
* Version        : 2.0
*
* Precondition   : I_OBJECT_REF is a reference to the object that will
*                  be set with data from I_OBJECT_DATA
*
* Postcondition  : The object&apos;s attributes are set.
*
* OO Exceptions  : CX_OS_OBJECT_NOT_FOUND
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 2000-03-06   : (BGR) Initial Version
* - 2000-08-03   : (SB)  OO Exceptions
* - 2002-01-17   : (SB)  private attributes in super classes
************************************************************************
* Generated! Do not modify!
************************************************************************

  data: THE_OBJECT type ref to ZCL_USFP_T_ASA_STKUP,
        AN_OBJECT  type ref to object, &quot;#EC NEEDED
        PM_SERVICE type ref to IF_OS_PM_SERVICE. &quot;#EC NEEDED

  PM_SERVICE ?= PERSISTENCY_MANAGER.
  THE_OBJECT = I_OBJECT_REF.

*&lt;  Generated from mapping:
  THE_OBJECT-&gt;AEDAT = I_OBJECT_DATA-AEDAT.
  THE_OBJECT-&gt;UNAME = I_OBJECT_DATA-UNAME.
  THE_OBJECT-&gt;UTZON = I_OBJECT_DATA-UTZON.
  THE_OBJECT-&gt;ADATA = I_OBJECT_DATA-ADATA.
  THE_OBJECT-&gt;UMETH = I_OBJECT_DATA-UMETH.
  THE_OBJECT-&gt;LGHDL = I_OBJECT_DATA-LGHDL.
*&gt;

           &quot;MAP_SET_ATTRIBUTES
  endmethod.</source>
  </method>
  <method CLSNAME="CL_OS_CA_COMMON" CMPNAME="OS_PM_DELETE_PERSISTENT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method OS_PM_DELETE_PERSISTENT.
***BUILD 090501
************************************************************************
* Purpose        : Delete persistent object. It is marked DELETED in
*                  memory and removed from DB when the top transaction
*                  is closed.
*
* Version        : 2.0
*
* Precondition   : The object is persistent (not transient), CURRENT
*                  is set
*
* Postcondition  : Instance is marked for deletion.
*
* OO Exceptions  : propagates PM_DELETE_PERSISTENT
*
* Implementation : load special object info and
*                  call PM_DELETE_PERSISTENT
*
************************************************************************
* Changelog:
* - 2001-12-14   : (SB)  Initial Version
************************************************************************

  call method LOAD_SPECIAL_OBJECT_INFO( ).

  call method PM_DELETE_PERSISTENT( ).

           &quot;OS_PM_DELETE_PERSISTENT .
  endmethod.</source>
  </method>
  <method CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="PM_CHECK_AND_SET_ATTRIBUTES" VERSION="1" LANGU="E" DESCRIPT="Checks and Sets Persistent Attributes" EXPOSURE="1" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="PM_CHECK_AND_SET_ATTRIBUTES" SCONAME="I_BUSINESS_KEY" VERSION="1" LANGU="E" DESCRIPT="Business Key" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TYP_BUSINESS_KEY" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="PM_CHECK_AND_SET_ATTRIBUTES" SCONAME="I_ID_PROVIDED" VERSION="1" LANGU="E" DESCRIPT="With Which Identifiers Were Loading and Checking Performed" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TYP_ID_STATUS" PARVALUE="0" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="PM_CHECK_AND_SET_ATTRIBUTES" SCONAME="I_OBJECT_DATA" VERSION="1" LANGU="E" DESCRIPT="Data Loaded from Database" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TYP_DB_DATA"/>
   <exception CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="PM_CHECK_AND_SET_ATTRIBUTES" SCONAME="CX_OS_OBJECT_NOT_FOUND" VERSION="1" LANGU="E" DESCRIPT="Object Services Exception" MTDTYPE="0" EDITORDER="0 "/>
   <source>method PM_CHECK_AND_SET_ATTRIBUTES.
***BUILD 090501
     &quot; importing I_OBJECT_DATA  type TYP_DB_DATA
     &quot; importing I_BUSINESS_KEY type TYP_BUSINESS_KEY optional
     &quot;           I_ID_PROVIDED type TYP_ID_STATUS default ID_STATUS_NONE
************************************************************************
* Purpose        : check loaded object data of a persistent object and
*                  set object&apos;s attributes
*                  if CURRENT is clear, create new representant,
*                  if CURRENT is set, use this object to set the loaded
*                  data
*                  If I_ID_PROVIDED is set to ID_STATUS_NONE, Look for
*                  an entry in SPECIAL_OBJECT_INFO with the given
*                  Business Key
*
* Version        : 2.0
*
* Precondition   :
*
* Postcondition  : Persistent object data is checked and object
*                  attributes are set. CURRENT is set.
*
* OO Exception   : CX_OS_OBJECT_STATE(INTERNAL_CHANGED,INTERNAL_DELETED,
*                                     INTERNAL_TRANSIENT, INTERNAL_NEW)
*                  propagates MAP_SET_ATTRIBUTES
*
* Implementation : 1. If CURRENT is clear:
*                   1a. I_ID_PROVIDED = ID_STATUS_NONE?:
*                       Check if another object exists with this
*                       Business Key
*                   1b. I_ID_PROVIDED &lt;&gt; ID_STATUS_NONE or no entry
*                       found:
*                       Create a new Representative object
*                   1c. If an object has been found:
*                       Check if it is allowed to set it
*                  2. set PM_DBSTATUS EXISTING
*                  3. Temporarily save CURRENT_*
*                  4. set object attributes (resolving references)
*                  5. restore CURRENT_*
*
************************************************************************
* Changelog:
* - 2000-05-17   : (BGR) Initial Version 2.0
* - 2000-08-03   : (SB) OO Exceptions
************************************************************************

  data: LOADED_BUSINESS_KEY       type TYP_BUSINESS_KEY.

  data: TEMP_CURRENT_OBJECT_INFO  type TYP_OBJECT_INFO,
        TEMP_CURRENT_OBJECT_INDEX type TYP_INDEX,
        TEMP_CURRENT_SPECIAL_OI   type TYP_SPECIAL_OBJECT_INFO,
        TEMP_CURRENT_OBJECT_IREF  type TYP_OBJECT_IREF,
        INTERNAL_UNDO_INFO_ITEM   type TYP_INTERNAL_UNDO_INFO,
        TEMP_OBJECT_REF           type TYP_OBJECT_REF.

* * Get both Business Key from DB data
  call method MAP_EXTRACT_IDENTIFIER
       exporting I_DB_DATA      = I_OBJECT_DATA
       importing E_BUSINESS_KEY = LOADED_BUSINESS_KEY.

  if ( CURRENT_OBJECT_IREF is initial ).

*   * 1. If CURRENT is clear:

    if ( I_ID_PROVIDED = ID_STATUS_NONE ).

*   * 1a. Check if another object exists with this Business Key

      read table SPECIAL_BKEY_TAB into TEMP_CURRENT_SPECIAL_OI
           with table key BUSINESS_KEY = LOADED_BUSINESS_KEY.
      if ( sy-subrc = 0 ).

        read table SPECIAL_OBJECT_INFO into
             CURRENT_SPECIAL_OBJECT_INFO
             with table key
             OBJECT_ID = TEMP_CURRENT_SPECIAL_OI-OBJECT_ID.
        call method OS_LOAD_AND_VALIDATE_CURRENT
             exporting I_INDEX = sy-tabix.

      endif. &quot; ( Entry found for BKEY? )

    endif. &quot;( no ID Provided )

    if ( CURRENT_OBJECT_IREF is initial ).

*     * 1b. Create a new Representative object and a new entry
      call method PM_CREATE_REPRESENTANT
           exporting I_BUSINESS_KEY = LOADED_BUSINESS_KEY.

    else. &quot;( Found an entry for the business key )

*     * Now we know an entry exists on DB
      CURRENT_OBJECT_INFO-PM_DBSTATUS = OSCON_DBSTATUS_EXISTING.
      modify OBJECT_INFO from CURRENT_OBJECT_INFO
             index CURRENT_OBJECT_INDEX.

*     * 1c. Check if it is allowed to use the found object.
      case CURRENT_OBJECT_INFO-PM_STATUS.

*       * PM_STATUS = NOT_LOADED: re-use entry and object
        when OSCON_OSTATUS_NOT_LOADED.

*       * PM_STATUS = LOADED: re-use entry and object
        when OSCON_OSTATUS_LOADED.

*       *  other PM_STATUS: Error!
        when OSCON_OSTATUS_NEW.

*!!!!!!!!!! Error! Object already exists on DB
*         * This NEW object should be created on DB by the next
*         * COMMIT. Now an entry was found with the same key!
          class CX_OS_OBJECT_STATE definition load.
          raise exception type CX_OS_OBJECT_STATE
               exporting OBJECT = CURRENT_OBJECT_IREF
                         TEXTID = CX_OS_OBJECT_STATE=&gt;INTERNAL_NEW.

        when OSCON_OSTATUS_CHANGED.

*!!!!!!!!!!! Error: Object has a DB relevant status
          class CX_OS_OBJECT_STATE definition load.
          raise exception type CX_OS_OBJECT_STATE
               exporting OBJECT = CURRENT_OBJECT_IREF
                         TEXTID = CX_OS_OBJECT_STATE=&gt;INTERNAL_CHANGED.

        when OSCON_OSTATUS_DELETED.

*!!!!!!!!!!! Error: Object marked for deletion
          class CX_OS_OBJECT_STATE definition load.
          raise exception type CX_OS_OBJECT_STATE
               exporting OBJECT = CURRENT_OBJECT_IREF
                         TEXTID = CX_OS_OBJECT_STATE=&gt;INTERNAL_DELETED.

        when OSCON_OSTATUS_TRANSIENT.

*!!!!!!!!!!! Error: Object is transient
          class CX_OS_OBJECT_STATE definition load.
          raise exception type CX_OS_OBJECT_STATE
               exporting OBJECT = CURRENT_OBJECT_IREF
                        TEXTID = CX_OS_OBJECT_STATE=&gt;INTERNAL_TRANSIENT.

      endcase.

    endif. &quot;( CURRENT initial? )
  endif. &quot;( CURRENT initial? )

* * 2. set PM_DBSTATUS EXISTING
  CURRENT_OBJECT_INFO-PM_DBSTATUS          = OSCON_DBSTATUS_EXISTING.

* * internal Undo entry:
  INTERNAL_UNDO_INFO_ITEM-OBJECT_INDEX = CURRENT_OBJECT_INDEX.
  INTERNAL_UNDO_INFO_ITEM-OBJECT_INFO  = CURRENT_OBJECT_INFO.
  append INTERNAL_UNDO_INFO_ITEM to INTERNAL_UNDO_INFO.
  INTERNAL_NEXT_UNDO_INFO = sy-tabix + 1.

* * To avoid recursive loading of the same object (INIT method)
* * temporarily set status &apos;LOADING&apos;
  CURRENT_OBJECT_INFO-PM_STATUS = OSCON_OSTATUS_LOADING.
  modify OBJECT_INFO from CURRENT_OBJECT_INFO
         index CURRENT_OBJECT_INDEX.

* * 3. Temporarily save CURRENT_*
  TEMP_CURRENT_OBJECT_IREF  = CURRENT_OBJECT_IREF.
  TEMP_CURRENT_OBJECT_INFO  = CURRENT_OBJECT_INFO.
  TEMP_CURRENT_OBJECT_INDEX = CURRENT_OBJECT_INDEX.
  TEMP_CURRENT_SPECIAL_OI   = CURRENT_SPECIAL_OBJECT_INFO.

* * 4. set object attributes (resolving references)
  TEMP_OBJECT_REF ?= CURRENT_OBJECT_IREF .

  call method MAP_SET_ATTRIBUTES
       exporting I_OBJECT_DATA = I_OBJECT_DATA
                 I_OBJECT_REF  = TEMP_OBJECT_REF.

* * 5. restore CURRENT_*
  CURRENT_OBJECT_INFO          = TEMP_CURRENT_OBJECT_INFO.
  CURRENT_OBJECT_INDEX         = TEMP_CURRENT_OBJECT_INDEX.
  CURRENT_SPECIAL_OBJECT_INFO  = TEMP_CURRENT_SPECIAL_OI.
  CURRENT_OBJECT_IREF          = TEMP_CURRENT_OBJECT_IREF.

* * the method call get_ref_by_oid in map_set_attributes
* * eventually creates new entries in the
* * administrative data tables, it is necessary to
* * to recalculate the index
  read table OBJECT_INFO transporting no fields
     with table key OBJECT_ID = CURRENT_OBJECT_INFO-OBJECT_ID.
  CURRENT_OBJECT_INDEX = sy-tabix.

           &quot;PM_CHECK_AND_SET_ATTRIBUTES
  endmethod.</source>
  </method>
  <method CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="PM_CREATE_REPRESENTANT" VERSION="1" LANGU="E" DESCRIPT="Generate New Wrapper Object and Administration Entry" EXPOSURE="1" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="PM_CREATE_REPRESENTANT" SCONAME="I_BUSINESS_KEY" VERSION="1" LANGU="E" DESCRIPT="Business Key" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TYP_BUSINESS_KEY" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="PM_CREATE_REPRESENTANT" SCONAME="RESULT" VERSION="1" LANGU="E" DESCRIPT="Newly Generated Wrapper Object" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="TYP_OBJECT_REF"/>
   <source>method PM_CREATE_REPRESENTANT.
***BUILD 093901
     &quot; importing I_BUSINESS_KEY type TYP_BUSINESS_KEY
     &quot; returning result         type TYP_OBJECT_REF
************************************************************************
* Purpose        : Create a new representative object including a new
*                  entry in administrative data (OBJECT_INFO and
*                  SPECIAL_OBJECT_INFO)
*
* Version        : 2.0
*
* Precondition   : No object exists with the same Business Key
*
* Postcondition  : A new object exists, corresponding entries in
*                  OBJECT_INFO and SPECIAL_OBJECT_INFO have been
*                  inserted, CURRENT is set
*
* OO Exceptions  : --
*
* Implementation : 1. Create object and set BKey attributes
*                  2. Get internal OID for the new object
*                  3. Create new entry in SPECIAL_OBJECT_INFO
*                  4. Let super class create a new entry in OBJECT_INFO
*
************************************************************************
* Changelog:
* - 2000-03-07   : (BGR) Initial Version 2.0
* - 2000-08-02   : (SB)  OO Exceptions
* - 2001-10-30   : (SB)  Type Mapping
************************************************************************

  data: NEW_OBJECT type ref to ZCL_USFP_T_ASA_STKUP.

* * 1. Create object and set BKey attributes
  create object NEW_OBJECT.

* &lt; Generated from mapping:
  NEW_OBJECT-&gt;AEDAT = I_BUSINESS_KEY-AEDAT.
  NEW_OBJECT-&gt;UNAME = I_BUSINESS_KEY-UNAME.
* &gt;

* * 2. Get internal OID for the new object and set CURRENT_SPECIAL_OI
  clear CURRENT_SPECIAL_OBJECT_INFO.

  CURRENT_SPECIAL_OBJECT_INFO-OBJECT_ID =
      OS_GET_INTERNAL_OID_BY_REF( I_OBJECT = NEW_OBJECT ).
  CURRENT_SPECIAL_OBJECT_INFO-BUSINESS_KEY = I_BUSINESS_KEY.
  CURRENT_SPECIAL_OBJECT_INFO-ID_STATUS = ID_STATUS_COMPLETE.

* * 3. Create new entry in SPECIAL_OBJECT_INFO
  insert CURRENT_SPECIAL_OBJECT_INFO into table SPECIAL_OBJECT_INFO.
  insert CURRENT_SPECIAL_OBJECT_INFO into table SPECIAL_BKEY_TAB.

* * 4. Let super class create a new entry in OBJECT_INFO
  call method OS_CREATE_NEW_ENTRY_FOR_REPR
       exporting I_OBJECT = NEW_OBJECT
                 I_INTERNAL_OID = CURRENT_SPECIAL_OBJECT_INFO-OBJECT_ID.

  RESULT = NEW_OBJECT.

           &quot;PM_CREATE_REPRESENTANT
  endmethod.</source>
  </method>
  <method CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="PM_DELETE_PERSISTENT" VERSION="1" LANGU="E" DESCRIPT="Deletes Persistent Object from Database" EXPOSURE="1" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <source>method PM_DELETE_PERSISTENT.
***BUILD 090501
************************************************************************
* Purpose        : Delete persistent object. It is marked DELETED in
*                  memory and removed from DB when the top transaction
*                  is closed.
*
* Version        : 2.0
*
* Precondition   : The object is persistent (not transient), CURRENT
*                  is set
*
* Postcondition  : Instance is marked for deletion.
*
* OO Exception   : CX_OS_OBJECT_STATE(CREATED_AND_DELETED,TRANSIENT)
*                  propagates OS_PM_DELETED_PERSISTENT
*                  ( propagates MAP_LOAD_FROM_DATABASE_KEY )
*
* Implementation : 1. Check the state of the object:
*                    1a. Object is already deleted - done
*                    1b. Object is transient - Error
*                    1c. Object is new, loaded or changed - continue
*                    1d. Object is not_loaded:
*                        Check DBSTATUS:
*                       1d1. DBSTATUS Unknown/Existing - continue
*                       1d2. DBSTATUS Not existing - Error
*                   2. Completion: call OS_PM_DELETED_PERSISTENT
*
************************************************************************
* Changelog:
* - 2000-03-06   : (BGR) Initial Version 2.0
* - 2000-08-03   : (SB) OO Exceptions
************************************************************************

  data: TEMP_CURRENT_OBJECT_IREF type TYP_OBJECT_IREF .

* * 1. Check the state of the object:
  case CURRENT_OBJECT_INFO-PM_STATUS.

  when OSCON_OSTATUS_DELETED.

*   * 1a. Object is already deleted - done
    call method OS_CLEAR_CURRENT.
    clear CURRENT_SPECIAL_OBJECT_INFO.
    exit.


  when OSCON_OSTATUS_TRANSIENT.

*   * 1b. Object is transient - Error
*!! error: object already exists transient
    TEMP_CURRENT_OBJECT_IREF = CURRENT_OBJECT_IREF.
    call method OS_CLEAR_CURRENT.
    clear CURRENT_SPECIAL_OBJECT_INFO.
    class CX_OS_OBJECT_STATE definition load.
    raise exception type CX_OS_OBJECT_STATE
         exporting OBJECT = TEMP_CURRENT_OBJECT_IREF
                   TEXTID = CX_OS_OBJECT_STATE=&gt;TRANSIENT.


  when OSCON_OSTATUS_NEW     or
       OSCON_OSTATUS_CHANGED or
       OSCON_OSTATUS_LOADED.

*   * 1c. Object is new, loaded or changed - continue


  when OSCON_OSTATUS_NOT_LOADED.

*   * 1d. Object is not_loaded: Check DBSTATUS:
    case CURRENT_OBJECT_INFO-PM_DBSTATUS.


    when OSCON_DBSTATUS_EXISTING
      or OSCON_DBSTATUS_UNKNOWN.

*     * 1d1. DBSTATUS Existing/Unknown - continue


    when OSCON_DBSTATUS_NOT_EXISTING.
*     * 1d2. DBSTATUS Not existing - Error
*!!!! error: No DB entry for the object
      TEMP_CURRENT_OBJECT_IREF = CURRENT_OBJECT_IREF.
      call method OS_CLEAR_CURRENT.
      clear CURRENT_SPECIAL_OBJECT_INFO.
      class CX_OS_OBJECT_STATE definition load.
      raise exception type CX_OS_OBJECT_STATE
           exporting OBJECT = TEMP_CURRENT_OBJECT_IREF
                     TEXTID = CX_OS_OBJECT_STATE=&gt;CREATED_AND_DELETED.

    endcase. &quot;PM_DBSTATUS
  endcase. &quot;PM_STATUS

* * 2. Completion: call OS_PM_DELETED_PERSISTENT
  call method OS_PM_DELETED_PERSISTENT.

  clear CURRENT_SPECIAL_OBJECT_INFO.

           &quot;PM_DELETE_PERSISTENT
  endmethod.</source>
  </method>
  <method CLSNAME="CL_OS_CA_COMMON" CMPNAME="PM_LOAD" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method PM_LOAD.
***BUILD 090501
************************************************************************
* Purpose        : Load data from DB into Object specified by CURRENT
*
* Version        : 2.0
*
* Precondition   : CURRENT_* is set
*
* Postcondition  : object is loaded or exceptions is raised
*
* OO Exceptions  : propagates PM_LOAD_AND_SET_ATTRIBUTES
*
* Implementation : call PM_LOAD_AND_SET_ATTRIBUTES
*
************************************************************************
* Changelog:
* - 2000-03-02   : (BGR) Initial Version
* - 2000-08-03   : (SB)  OO Exceptions
* - 2001-11-14   : (SB)  Type mapping
************************************************************************

  call method PM_LOAD_AND_SET_ATTRIBUTES
       exporting I_BUSINESS_KEY =
                         CURRENT_SPECIAL_OBJECT_INFO-BUSINESS_KEY.

           &quot;PM_LOAD
  endmethod.</source>
  </method>
  <method CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="PM_LOAD_AND_SET_ATTRIBUTES" VERSION="1" LANGU="E" DESCRIPT="Loads and Sets Persistent Attributes" EXPOSURE="1" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="PM_LOAD_AND_SET_ATTRIBUTES" SCONAME="I_BUSINESS_KEY" VERSION="1" LANGU="E" DESCRIPT="Business Key" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TYP_BUSINESS_KEY" PAROPTIONL="X"/>
   <exception CLSNAME="ZCB_USFP_T_ASA_STKUP" CMPNAME="PM_LOAD_AND_SET_ATTRIBUTES" SCONAME="CX_OS_OBJECT_NOT_FOUND" VERSION="1" LANGU="E" DESCRIPT="Object Services Exception" MTDTYPE="0" EDITORDER="0 "/>
   <source>method PM_LOAD_AND_SET_ATTRIBUTES.
***BUILD 090501
     &quot; importing I_BUSINESS_KEY type TYP_BUSINESS_KEY optional

************************************************************************
* Purpose        : Load object data of a persistent object and set
*                  object&apos;s attributes
*                  if CURRENT is clear, load data using I_BUSINESS_KEY.
*                  if CURRENT is set, use the BKEY stored there.
*
* Version        : 2.0
*
* Precondition   : An entry for the given Business Key exists on
*                  database. CURRENT can be set (use this
*                  object to set attributes to) or clear.
*
* Postcondition  : Persistent object data is loaded and object
*                  attributes are set. CURRENT is set.
*
* OO Exceptions  : propagates PM_CHECK_AND_SET_ATTRIBUTES
*                  propagates MAP_LOAD_FROM_DATABASE_KEY/GUID
*
* Implementation : 1. Check Source of DB Keys: Business Key from
*                     CURRENT_SPECIAL_OBJECT_INFO or from I_BUSINESS_KEY
*                  2. Load from Database
*                  2.a. Type Mapping: Set E_TYPE and return if case of
*                       type mismatch
*                  3. Check loaded data and set object&apos;s attributes
*
************************************************************************
* Changelog:
* - 2000-03-07   : (BGR) Initial Version 2.0
* - 2000-05-17   : (BGR) use PM_CHECK_AND_SET_ATTRIBUTES
* - 2000-08-03   : (SB) OO Exceptions
* - 2004-01-21   : (SB) Type Mapping Refactoring
* - 2005-02-22   : (SB) Set Exception parameters
************************************************************************

  data: OBJECT_DATA_TAB     type TYP_DB_DATA_TAB,
        OBJECT_DATA         type TYP_DB_DATA,
        BUSINESS_KEY        type TYP_BUSINESS_KEY,
        BUSINESS_KEY_TAB    type TYP_BUSINESS_KEY_TAB.

  data: SERIALIZED_BUSINESS_KEY  type STRING .

* * 1. Check Source of DB Keys: Business Key from
* *    CURRENT_SPECIAL_OBJECT_INFO or from I_BUSINESS_KEY?
  if ( CURRENT_OBJECT_IREF is initial ).

    BUSINESS_KEY = I_BUSINESS_KEY.

  else. &quot;( CURRENT is set ).

*   * Get BKey from CURRENT_SPECIAL_OBJECT_INFO
    BUSINESS_KEY = CURRENT_SPECIAL_OBJECT_INFO-BUSINESS_KEY.

  endif. &quot;( CURRENT set? ).


* * 2. Load from Database
  try.
      append BUSINESS_KEY to BUSINESS_KEY_TAB.
      call method MAP_LOAD_FROM_DATABASE_KEY
           exporting I_BUSINESS_KEY_TAB = BUSINESS_KEY_TAB
           receiving result = OBJECT_DATA_TAB.
    catch CX_OS_DB_SELECT.
      class CX_OS_OBJECT_NOT_FOUND definition load.
      call method MAP_SERIALIZE_BKEY
           exporting I_BUSINESS_KEY = BUSINESS_KEY
           receiving RESULT = SERIALIZED_BUSINESS_KEY.
      raise exception type CX_OS_OBJECT_NOT_FOUND
        exporting
          BKEY   = SERIALIZED_BUSINESS_KEY
          TEXTID = CX_OS_OBJECT_NOT_FOUND=&gt;BY_BKEY.
  endtry.

  read table OBJECT_DATA_TAB into OBJECT_DATA index 1.


* * 3. Now Check the loaded data and set the Object.
  call method PM_CHECK_AND_SET_ATTRIBUTES
       exporting I_OBJECT_DATA  = OBJECT_DATA
                 I_BUSINESS_KEY = BUSINESS_KEY
                 I_ID_PROVIDED  = ID_STATUS_COMPLETE.

           &quot;PM_LOAD_AND_SET_ATTRIBUTES
  endmethod.</source>
  </method>
  <method CLSNAME="CL_OS_CA_COMMON" CMPNAME="SAVE_SPECIAL_OBJECT_INFO" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method SAVE_SPECIAL_OBJECT_INFO.
***BUILD 090501
************************************************************************
* Purpose        : Save CURRENT_SPECIAL_OBJECT_INFO into
*                  SPECIAL_OBJECT_INFO
*
* Version        : 2.0
*
* Precondition   : Index is set in CURRENT_OBJECT_INDEX
*
* Postcondition  : entry is saved
*
* OO Exceptions  : -
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 2000-03-02   : (BGR) Initial Version
************************************************************************

  modify SPECIAL_OBJECT_INFO from CURRENT_SPECIAL_OBJECT_INFO
         index CURRENT_OBJECT_INDEX.

           &quot;SAVE_SPECIAL_OBJECT_INFO
  endmethod.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZCL_USFP_T_ASA_STKUP" VERSION="1" LANGU="E" DESCRIPT="Persistence layer for table ZUSFPT_ASA_STKUP" CATEGORY="10" EXPOSURE="1" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " ZSAPLINK_PLUGIN_MAJOR_VERSION="0 " ZSAPLINK_PLUGIN_MINOR_VERSION="1 " ZSAPLINK_PLUGIN_BUILD_VERSION="0 " ZSAPLINK_PLUGIN_INFO1="ZSAPLINK_CLASS is part of the main ZSAPLINK project --&gt; This plugin found there instead of ZSAPLINK_PLUGINS projects" ZSAPLINK_PLUGIN_INFO2="SAPLINK homepage: https://www.assembla.com/spaces/saplink/wiki" ZSAPLINK_PLUGIN_INFO3="Download from https://www.assembla.com/code/saplink/subversion/nodes" ZSAPLINK_PLUGIN_INFO4="and navigate to:  trunk -&gt; core -&gt; ZSAPLINK -&gt; CLAS -&gt; ZSAPLINK_CLASS.slnk">
  <friends CLSNAME="ZCL_USFP_T_ASA_STKUP" REFCLSNAME="ZCB_USFP_T_ASA_STKUP" FRIENDTYPE="0" VERSION="1" STATE="1"/>
  <implementing CLSNAME="ZCL_USFP_T_ASA_STKUP" REFCLSNAME="IF_OS_STATE" VERSION="1" EXPOSURE="2" STATE="1" RELTYPE="1" EDITORDER="0 "/>
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <typeClasDef CLSNAME="ZCL_USFP_T_ASA_STKUP" TYPEGROUP="CL_OS_SYSTEM" VERSION="1" TPUTYPE="1"/>
  <attribute CLSNAME="ZCL_USFP_T_ASA_STKUP" CMPNAME="ADATA" VERSION="1" LANGU="E" DESCRIPT="aSa Stock Updating Data" EXPOSURE="1" STATE="1" EDITORDER="4 " ATTDECLTYP="0" ATTPERSIST="X" ATTEXPVIRT="2" TYPTYPE="1" TYPE="ZUSFP_ASA_STOCK_UPD_DATA" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_USFP_T_ASA_STKUP" CMPNAME="AEDAT" VERSION="1" LANGU="E" DESCRIPT="Creation Date" EXPOSURE="1" STATE="1" EDITORDER="1 " ATTDECLTYP="0" ATTPERSIST="X" ATTEXPVIRT="7" TYPTYPE="1" TYPE="RSCRMTSTMP" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_USFP_T_ASA_STKUP" CMPNAME="LGHDL" VERSION="1" LANGU="E" DESCRIPT="Application Log: Log Handle" EXPOSURE="1" STATE="1" EDITORDER="6 " ATTDECLTYP="0" ATTPERSIST="X" ATTEXPVIRT="2" TYPTYPE="1" TYPE="BALLOGHNDL" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_USFP_T_ASA_STKUP" CMPNAME="UMETH" VERSION="1" LANGU="E" DESCRIPT="aSa Stock Updating Method" EXPOSURE="1" STATE="1" EDITORDER="5 " ATTDECLTYP="0" ATTPERSIST="X" ATTEXPVIRT="2" TYPTYPE="1" TYPE="ZUSFP_ASA_UPD_STK_METHOD" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_USFP_T_ASA_STKUP" CMPNAME="UNAME" VERSION="1" LANGU="E" DESCRIPT="User Name" EXPOSURE="1" STATE="1" EDITORDER="2 " ATTDECLTYP="0" ATTPERSIST="X" ATTEXPVIRT="7" TYPTYPE="1" TYPE="UNAME" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_USFP_T_ASA_STKUP" CMPNAME="UTZON" VERSION="1" LANGU="E" DESCRIPT="Time Zone of User" EXPOSURE="1" STATE="1" EDITORDER="3 " ATTDECLTYP="0" ATTPERSIST="X" ATTEXPVIRT="2" TYPTYPE="1" TYPE="SUIDTZONE" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <interfaceMethod CLSNAME="ZCL_USFP_T_ASA_STKUP" CPDNAME="IF_OS_STATE~GET">
   <source>method IF_OS_STATE~GET.
***BUILD 090501
     &quot; returning result type ref to object
************************************************************************
* Purpose        : Get state.
*
* Version        : 2.0
*
* Precondition   : -
*
* Postcondition  : -
*
* OO Exceptions  : -
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 2000-03-07   : (BGR) Initial Version 2.0
************************************************************************
* GENERATED: Do not modify
************************************************************************

  data: STATE_OBJECT type ref to CL_OS_STATE.

  create object STATE_OBJECT.
  call method STATE_OBJECT-&gt;SET_STATE_FROM_OBJECT( ME ).
  result = STATE_OBJECT.

  endmethod.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_USFP_T_ASA_STKUP" CPDNAME="IF_OS_STATE~HANDLE_EXCEPTION">
   <source>method IF_OS_STATE~HANDLE_EXCEPTION.
***BUILD 090501
     &quot; importing I_EXCEPTION type ref to IF_OS_EXCEPTION_INFO optional
     &quot; importing I_EX_OS type ref to CX_OS_OBJECT_NOT_FOUND optional
************************************************************************
* Purpose        : Handles exceptions during attribute access.
*
* Version        : 2.0
*
* Precondition   : -
*
* Postcondition  : -
*
* OO Exceptions  : CX_OS_OBJECT_NOT_FOUND
*
* Implementation : If an exception is raised during attribut access,
*                  this method is called and the exception is passed
*                  as a paramater. The default is to raise the exception
*                  again, so that the caller can handle the exception.
*                  But it is also possible to handle the exception
*                  here in the callee.
*
************************************************************************
* Changelog:
* - 2000-03-07   : (BGR) Initial Version 2.0
* - 2000-08-02   : (SB)  OO Exceptions
************************************************************************
* Modify if you like
************************************************************************

  if i_ex_os is not initial.
    raise exception i_ex_os.
  endif.

  endmethod.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_USFP_T_ASA_STKUP" CPDNAME="IF_OS_STATE~INIT">
   <source>method IF_OS_STATE~INIT.
***BUILD 090501
&quot;#EC NEEDED
************************************************************************
* Purpose        : Initialisation of the transient state partition.
*
* Version        : 2.0
*
* Precondition   : -
*
* Postcondition  : Transient state is initial.
*
* OO Exceptions  : -
*
* Implementation : Caution!: Avoid Throwing ACCESS Events.
*
************************************************************************
* Changelog:
* - 2000-03-07   : (BGR) Initial Version 2.0
************************************************************************
* Modify if you like
************************************************************************

  endmethod.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_USFP_T_ASA_STKUP" CPDNAME="IF_OS_STATE~INVALIDATE">
   <source>method IF_OS_STATE~INVALIDATE.
***BUILD 090501
&quot;#EC NEEDED
************************************************************************
* Purpose        : Do something before all persistent attributes are
*                  cleared.
*
* Version        : 2.0
*
* Precondition   : -
*
* Postcondition  : -
*
* OO Exceptions  : -
*
* Implementation : Whatever you like to do.
*
************************************************************************
* Changelog:
* - 2000-03-07   : (BGR) Initial Version 2.0
************************************************************************
* Modify if you like
************************************************************************

  endmethod.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_USFP_T_ASA_STKUP" CPDNAME="IF_OS_STATE~SET">
   <source>method IF_OS_STATE~SET.
***BUILD 090501
     &quot; importing I_STATE type ref to object
************************************************************************
* Purpose        : Set state.
*
* Version        : 2.0
*
* Precondition   : -
*
* Postcondition  : -
*
* OO Exceptions  : -
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 2000-03-07   : (BGR) Initial Version 2.0
************************************************************************
* GENERATED: Do not modify
************************************************************************

  data: STATE_OBJECT type ref to CL_OS_STATE.

  STATE_OBJECT ?= I_STATE.
  call method STATE_OBJECT-&gt;SET_OBJECT_FROM_STATE( ME ).

  endmethod.</source>
  </interfaceMethod>
  <method CLSNAME="ZCL_USFP_T_ASA_STKUP" CMPNAME="GET_ADATA" VERSION="1" LANGU="E" DESCRIPT="Reads Attribute ADATA" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="4" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_USFP_T_ASA_STKUP" CMPNAME="GET_ADATA" SCONAME="RESULT" VERSION="1" LANGU="E" DESCRIPT="Attribute Value" CMPTYPE="1" MTDTYPE="4" EDITORDER="0 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="ZUSFP_ASA_STOCK_UPD_DATA"/>
   <exception CLSNAME="ZCL_USFP_T_ASA_STKUP" CMPNAME="GET_ADATA" SCONAME="CX_OS_OBJECT_NOT_FOUND" VERSION="1" LANGU="E" DESCRIPT="Object Services Exception" MTDTYPE="4" EDITORDER="0 "/>
   <source>method GET_ADATA.
***BUILD 090501
     &quot; returning RESULT
     &quot; raising CX_OS_OBJECT_NOT_FOUND
************************************************************************
* Purpose        : Get Attribute ADATA
*
* Version        : 2.0
*
* Precondition   : -
*
* Postcondition  : The object state is loaded, result is set
*
* OO Exceptions  : CX_OS_OBJECT_NOT_FOUND
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 2000-03-14   : (BGR) Version 2.0
* - 2000-07-28   : (SB)  OO Exceptions
************************************************************************

* * Inform class agent and handle exceptions
  state_read_access.

  result = ADATA.

           &quot; GET_ADATA
  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_USFP_T_ASA_STKUP" CMPNAME="GET_AEDAT" VERSION="1" LANGU="E" DESCRIPT="Reads Attribute AEDAT" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="4" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_USFP_T_ASA_STKUP" CMPNAME="GET_AEDAT" SCONAME="RESULT" VERSION="1" LANGU="E" DESCRIPT="Attribute Value" CMPTYPE="1" MTDTYPE="4" EDITORDER="0 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="RSCRMTSTMP"/>
   <exception CLSNAME="ZCL_USFP_T_ASA_STKUP" CMPNAME="GET_AEDAT" SCONAME="CX_OS_OBJECT_NOT_FOUND" VERSION="1" LANGU="E" DESCRIPT="Object Services Exception" MTDTYPE="4" EDITORDER="0 "/>
   <source>method GET_AEDAT.
***BUILD 090501
     &quot; returning RESULT
     &quot; raising CX_OS_OBJECT_NOT_FOUND
************************************************************************
* Purpose        : Get Attribute AEDAT
*
* Version        : 2.0
*
* Precondition   : -
*
* Postcondition  : The object state is loaded, result is set
*
* OO Exceptions  : CX_OS_OBJECT_NOT_FOUND
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 2000-03-14   : (BGR) Version 2.0
* - 2000-07-28   : (SB)  OO Exceptions
************************************************************************

* * Inform class agent and handle exceptions
  state_read_access.

  result = AEDAT.

           &quot; GET_AEDAT
  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_USFP_T_ASA_STKUP" CMPNAME="GET_LGHDL" VERSION="1" LANGU="E" DESCRIPT="Reads Attribute LGHDL" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="4" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_USFP_T_ASA_STKUP" CMPNAME="GET_LGHDL" SCONAME="RESULT" VERSION="1" LANGU="E" DESCRIPT="Attribute Value" CMPTYPE="1" MTDTYPE="4" EDITORDER="0 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="BALLOGHNDL"/>
   <exception CLSNAME="ZCL_USFP_T_ASA_STKUP" CMPNAME="GET_LGHDL" SCONAME="CX_OS_OBJECT_NOT_FOUND" VERSION="1" LANGU="E" DESCRIPT="Object Services Exception" MTDTYPE="4" EDITORDER="0 "/>
   <source>method GET_LGHDL.
***BUILD 090501
     &quot; returning RESULT
     &quot; raising CX_OS_OBJECT_NOT_FOUND
************************************************************************
* Purpose        : Get Attribute LGHDL
*
* Version        : 2.0
*
* Precondition   : -
*
* Postcondition  : The object state is loaded, result is set
*
* OO Exceptions  : CX_OS_OBJECT_NOT_FOUND
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 2000-03-14   : (BGR) Version 2.0
* - 2000-07-28   : (SB)  OO Exceptions
************************************************************************

* * Inform class agent and handle exceptions
  state_read_access.

  result = LGHDL.

           &quot; GET_LGHDL
  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_USFP_T_ASA_STKUP" CMPNAME="GET_UMETH" VERSION="1" LANGU="E" DESCRIPT="Reads Attribute UMETH" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="4" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_USFP_T_ASA_STKUP" CMPNAME="GET_UMETH" SCONAME="RESULT" VERSION="1" LANGU="E" DESCRIPT="Attribute Value" CMPTYPE="1" MTDTYPE="4" EDITORDER="0 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="ZUSFP_ASA_UPD_STK_METHOD"/>
   <exception CLSNAME="ZCL_USFP_T_ASA_STKUP" CMPNAME="GET_UMETH" SCONAME="CX_OS_OBJECT_NOT_FOUND" VERSION="1" LANGU="E" DESCRIPT="Object Services Exception" MTDTYPE="4" EDITORDER="0 "/>
   <source>method GET_UMETH.
***BUILD 090501
     &quot; returning RESULT
     &quot; raising CX_OS_OBJECT_NOT_FOUND
************************************************************************
* Purpose        : Get Attribute UMETH
*
* Version        : 2.0
*
* Precondition   : -
*
* Postcondition  : The object state is loaded, result is set
*
* OO Exceptions  : CX_OS_OBJECT_NOT_FOUND
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 2000-03-14   : (BGR) Version 2.0
* - 2000-07-28   : (SB)  OO Exceptions
************************************************************************

* * Inform class agent and handle exceptions
  state_read_access.

  result = UMETH.

           &quot; GET_UMETH
  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_USFP_T_ASA_STKUP" CMPNAME="GET_UNAME" VERSION="1" LANGU="E" DESCRIPT="Reads Attribute UNAME" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="4" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_USFP_T_ASA_STKUP" CMPNAME="GET_UNAME" SCONAME="RESULT" VERSION="1" LANGU="E" DESCRIPT="Attribute Value" CMPTYPE="1" MTDTYPE="4" EDITORDER="0 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="UNAME"/>
   <exception CLSNAME="ZCL_USFP_T_ASA_STKUP" CMPNAME="GET_UNAME" SCONAME="CX_OS_OBJECT_NOT_FOUND" VERSION="1" LANGU="E" DESCRIPT="Object Services Exception" MTDTYPE="4" EDITORDER="0 "/>
   <source>method GET_UNAME.
***BUILD 090501
     &quot; returning RESULT
     &quot; raising CX_OS_OBJECT_NOT_FOUND
************************************************************************
* Purpose        : Get Attribute UNAME
*
* Version        : 2.0
*
* Precondition   : -
*
* Postcondition  : The object state is loaded, result is set
*
* OO Exceptions  : CX_OS_OBJECT_NOT_FOUND
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 2000-03-14   : (BGR) Version 2.0
* - 2000-07-28   : (SB)  OO Exceptions
************************************************************************

* * Inform class agent and handle exceptions
  state_read_access.

  result = UNAME.

           &quot; GET_UNAME
  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_USFP_T_ASA_STKUP" CMPNAME="GET_UTZON" VERSION="1" LANGU="E" DESCRIPT="Reads Attribute UTZON" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="4" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_USFP_T_ASA_STKUP" CMPNAME="GET_UTZON" SCONAME="RESULT" VERSION="1" LANGU="E" DESCRIPT="Attribute Value" CMPTYPE="1" MTDTYPE="4" EDITORDER="0 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="SUIDTZONE"/>
   <exception CLSNAME="ZCL_USFP_T_ASA_STKUP" CMPNAME="GET_UTZON" SCONAME="CX_OS_OBJECT_NOT_FOUND" VERSION="1" LANGU="E" DESCRIPT="Object Services Exception" MTDTYPE="4" EDITORDER="0 "/>
   <source>method GET_UTZON.
***BUILD 090501
     &quot; returning RESULT
     &quot; raising CX_OS_OBJECT_NOT_FOUND
************************************************************************
* Purpose        : Get Attribute UTZON
*
* Version        : 2.0
*
* Precondition   : -
*
* Postcondition  : The object state is loaded, result is set
*
* OO Exceptions  : CX_OS_OBJECT_NOT_FOUND
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 2000-03-14   : (BGR) Version 2.0
* - 2000-07-28   : (SB)  OO Exceptions
************************************************************************

* * Inform class agent and handle exceptions
  state_read_access.

  result = UTZON.

           &quot; GET_UTZON
  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_USFP_T_ASA_STKUP" CMPNAME="SET_ADATA" VERSION="1" LANGU="E" DESCRIPT="Sets Attribute ADATA" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="5" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_USFP_T_ASA_STKUP" CMPNAME="SET_ADATA" SCONAME="I_ADATA" VERSION="1" LANGU="E" DESCRIPT="Attribute Value" CMPTYPE="1" MTDTYPE="5" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZUSFP_ASA_STOCK_UPD_DATA"/>
   <exception CLSNAME="ZCL_USFP_T_ASA_STKUP" CMPNAME="SET_ADATA" SCONAME="CX_OS_OBJECT_NOT_FOUND" VERSION="1" LANGU="E" DESCRIPT="Object Services Exception" MTDTYPE="5" EDITORDER="0 "/>
   <source>method SET_ADATA.
***BUILD 090501
     &quot; importing I_ADATA
     &quot; raising CX_OS_OBJECT_NOT_FOUND
************************************************************************
* Purpose        : Set attribute ADATA
*
* Version        : 2.0
*
* Precondition   : -
*
* Postcondition  : The object state is loaded, attribute is set
*
* OO Exceptions  : CX_OS_OBJECT_NOT_FOUND
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 2000-03-14   : (BGR) Version 2.0
* - 2000-07-28   : (SB)  OO Exceptions
* - 2000-10-04   : (SB)  Namespaces
************************************************************************

* * Inform class agent and handle exceptions
  state_write_access.

  if ( I_ADATA &lt;&gt; ADATA ).

    ADATA = I_ADATA.

*   * Inform class agent and handle exceptions
    state_changed.

  endif. &quot;( I_ADATA &lt;&gt; ADATA )

           &quot; GET_ADATA
  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_USFP_T_ASA_STKUP" CMPNAME="SET_LGHDL" VERSION="1" LANGU="E" DESCRIPT="Sets Attribute LGHDL" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="5" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_USFP_T_ASA_STKUP" CMPNAME="SET_LGHDL" SCONAME="I_LGHDL" VERSION="1" LANGU="E" DESCRIPT="Attribute Value" CMPTYPE="1" MTDTYPE="5" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="BALLOGHNDL"/>
   <exception CLSNAME="ZCL_USFP_T_ASA_STKUP" CMPNAME="SET_LGHDL" SCONAME="CX_OS_OBJECT_NOT_FOUND" VERSION="1" LANGU="E" DESCRIPT="Object Services Exception" MTDTYPE="5" EDITORDER="0 "/>
   <source>method SET_LGHDL.
***BUILD 090501
     &quot; importing I_LGHDL
     &quot; raising CX_OS_OBJECT_NOT_FOUND
************************************************************************
* Purpose        : Set attribute LGHDL
*
* Version        : 2.0
*
* Precondition   : -
*
* Postcondition  : The object state is loaded, attribute is set
*
* OO Exceptions  : CX_OS_OBJECT_NOT_FOUND
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 2000-03-14   : (BGR) Version 2.0
* - 2000-07-28   : (SB)  OO Exceptions
* - 2000-10-04   : (SB)  Namespaces
************************************************************************

* * Inform class agent and handle exceptions
  state_write_access.

  if ( I_LGHDL &lt;&gt; LGHDL ).

    LGHDL = I_LGHDL.

*   * Inform class agent and handle exceptions
    state_changed.

  endif. &quot;( I_LGHDL &lt;&gt; LGHDL )

           &quot; GET_LGHDL
  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_USFP_T_ASA_STKUP" CMPNAME="SET_UMETH" VERSION="1" LANGU="E" DESCRIPT="Sets Attribute UMETH" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="5" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_USFP_T_ASA_STKUP" CMPNAME="SET_UMETH" SCONAME="I_UMETH" VERSION="1" LANGU="E" DESCRIPT="Attribute Value" CMPTYPE="1" MTDTYPE="5" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZUSFP_ASA_UPD_STK_METHOD"/>
   <exception CLSNAME="ZCL_USFP_T_ASA_STKUP" CMPNAME="SET_UMETH" SCONAME="CX_OS_OBJECT_NOT_FOUND" VERSION="1" LANGU="E" DESCRIPT="Object Services Exception" MTDTYPE="5" EDITORDER="0 "/>
   <source>method SET_UMETH.
***BUILD 090501
     &quot; importing I_UMETH
     &quot; raising CX_OS_OBJECT_NOT_FOUND
************************************************************************
* Purpose        : Set attribute UMETH
*
* Version        : 2.0
*
* Precondition   : -
*
* Postcondition  : The object state is loaded, attribute is set
*
* OO Exceptions  : CX_OS_OBJECT_NOT_FOUND
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 2000-03-14   : (BGR) Version 2.0
* - 2000-07-28   : (SB)  OO Exceptions
* - 2000-10-04   : (SB)  Namespaces
************************************************************************

* * Inform class agent and handle exceptions
  state_write_access.

  if ( I_UMETH &lt;&gt; UMETH ).

    UMETH = I_UMETH.

*   * Inform class agent and handle exceptions
    state_changed.

  endif. &quot;( I_UMETH &lt;&gt; UMETH )

           &quot; GET_UMETH
  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_USFP_T_ASA_STKUP" CMPNAME="SET_UTZON" VERSION="1" LANGU="E" DESCRIPT="Sets Attribute UTZON" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="5" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_USFP_T_ASA_STKUP" CMPNAME="SET_UTZON" SCONAME="I_UTZON" VERSION="1" LANGU="E" DESCRIPT="Attribute Value" CMPTYPE="1" MTDTYPE="5" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SUIDTZONE"/>
   <exception CLSNAME="ZCL_USFP_T_ASA_STKUP" CMPNAME="SET_UTZON" SCONAME="CX_OS_OBJECT_NOT_FOUND" VERSION="1" LANGU="E" DESCRIPT="Object Services Exception" MTDTYPE="5" EDITORDER="0 "/>
   <source>method SET_UTZON.
***BUILD 090501
     &quot; importing I_UTZON
     &quot; raising CX_OS_OBJECT_NOT_FOUND
************************************************************************
* Purpose        : Set attribute UTZON
*
* Version        : 2.0
*
* Precondition   : -
*
* Postcondition  : The object state is loaded, attribute is set
*
* OO Exceptions  : CX_OS_OBJECT_NOT_FOUND
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 2000-03-14   : (BGR) Version 2.0
* - 2000-07-28   : (SB)  OO Exceptions
* - 2000-10-04   : (SB)  Namespaces
************************************************************************

* * Inform class agent and handle exceptions
  state_write_access.

  if ( I_UTZON &lt;&gt; UTZON ).

    UTZON = I_UTZON.

*   * Inform class agent and handle exceptions
    state_changed.

  endif. &quot;( I_UTZON &lt;&gt; UTZON )

           &quot; GET_UTZON
  endmethod.</source>
  </method>
 </CLAS>
 <DOMA DOMNAME="ZUSFP_UPD_STK_METHOD" MultiLanguageSupport="X">
  <DDLANGUAGE LANGU="E">
   <DD01V DOMNAME="ZUSFP_UPD_STK_METHOD" DDLANGUAGE="E" DATATYPE="NUMC" LENG="000001" OUTPUTLEN="000001" DECIMALS="000000" VALEXI="X" MASKLEN="0000" DDTEXT="aSa Stock Updating Method" AUTHCLASS="00" OUTPUTSTYLE="00"/>
   <DD07V DOMNAME="ZUSFP_UPD_STK_METHOD" VALPOS="0001" DDLANGUAGE="E" DOMVALUE_L="1" DDTEXT="Interface"/>
   <DD07V DOMNAME="ZUSFP_UPD_STK_METHOD" VALPOS="0002" DDLANGUAGE="E" DOMVALUE_L="2" DDTEXT="Spreadsheet"/>
  </DDLANGUAGE>
 </DOMA>
 <DOMA DOMNAME="ZUSFP_UPD_STK_METHOD" MultiLanguageSupport="X">
  <DDLANGUAGE LANGU="E">
   <DD01V DOMNAME="ZUSFP_UPD_STK_METHOD" DDLANGUAGE="E" DATATYPE="NUMC" LENG="000001" OUTPUTLEN="000001" DECIMALS="000000" VALEXI="X" MASKLEN="0000" DDTEXT="aSa Stock Updating Method" AUTHCLASS="00" OUTPUTSTYLE="00"/>
   <DD07V DOMNAME="ZUSFP_UPD_STK_METHOD" VALPOS="0001" DDLANGUAGE="E" DOMVALUE_L="1" DDTEXT="Interface"/>
   <DD07V DOMNAME="ZUSFP_UPD_STK_METHOD" VALPOS="0002" DDLANGUAGE="E" DOMVALUE_L="2" DDTEXT="Spreadsheet"/>
  </DDLANGUAGE>
 </DOMA>
 <DTEL ROLLNAME="ZUSFPDT_GET_RAW_MATERIAL_SAP" DDLANGUAGE="E" ROUTPUTLEN="000000" HEADLEN="00" SCRLEN1="00" SCRLEN2="00" SCRLEN3="00" DDTEXT="98324: GLN - RS PI Interface for Raw Material Stock to SAP-A" AUTHCLASS="00" DTELMASTER="E" DATATYPE="STRG" LENG="000000" DECIMALS="000000" OUTPUTLEN="000000" PROXYTYPE="X" MultiLanguageSupport="X">
  <tpara/>
  <DDLANGUAGE LANGU="E">
   <DD04V ROLLNAME="ZUSFPDT_GET_RAW_MATERIAL_SAP" DDLANGUAGE="E" ROUTPUTLEN="000000" HEADLEN="00" SCRLEN1="00" SCRLEN2="00" SCRLEN3="00" DDTEXT="98324: GLN - RS PI Interface for Raw Material Stock to SAP-A" AUTHCLASS="00" DTELMASTER="E" DATATYPE="STRG" LENG="000000" DECIMALS="000000" OUTPUTLEN="000000" PROXYTYPE="X"/>
  </DDLANGUAGE>
 </DTEL>
 <DTEL ROLLNAME="ZUSFP_ASA_STOCK_UPD_DATA" DDLANGUAGE="E" ROUTPUTLEN="000000" HEADLEN="23" SCRLEN1="10" SCRLEN2="20" SCRLEN3="40" DDTEXT="aSa Stock Updating Data" REPTEXT="aSa Stock Updating Data" SCRTEXT_S="aSa Data" SCRTEXT_M="aSa Stock Upd.Data" SCRTEXT_L="aSa Stock Updating Data" AUTHCLASS="00" DTELMASTER="E" DATATYPE="RSTR" LENG="000000" DECIMALS="000000" OUTPUTLEN="000000" MultiLanguageSupport="X">
  <tpara/>
  <DDLANGUAGE LANGU="E">
   <DD04V ROLLNAME="ZUSFP_ASA_STOCK_UPD_DATA" DDLANGUAGE="E" ROUTPUTLEN="000000" HEADLEN="23" SCRLEN1="10" SCRLEN2="20" SCRLEN3="40" DDTEXT="aSa Stock Updating Data" REPTEXT="aSa Stock Updating Data" SCRTEXT_S="aSa Data" SCRTEXT_M="aSa Stock Upd.Data" SCRTEXT_L="aSa Stock Updating Data" AUTHCLASS="00" DTELMASTER="E" DATATYPE="RSTR" LENG="000000" DECIMALS="000000" OUTPUTLEN="000000"/>
  </DDLANGUAGE>
 </DTEL>
 <DTEL ROLLNAME="ZUSFP_ASA_UPD_STK_METHOD" DDLANGUAGE="E" DOMNAME="ZUSFP_UPD_STK_METHOD" ROUTPUTLEN="000000" HEADLEN="25" SCRLEN1="10" SCRLEN2="20" SCRLEN3="40" DDTEXT="aSa Stock Updating Method" REPTEXT="aSa Stock Updating Method" SCRTEXT_S="Upd.Method" SCRTEXT_M="aSa Updating Method" SCRTEXT_L="aSa Stock Updating Method" AUTHCLASS="00" DTELMASTER="E" DATATYPE="NUMC" LENG="000001" DECIMALS="000000" OUTPUTLEN="000001" VALEXI="X" REFKIND="D" MultiLanguageSupport="X">
  <tpara/>
  <DDLANGUAGE LANGU="E">
   <DD04V ROLLNAME="ZUSFP_ASA_UPD_STK_METHOD" DDLANGUAGE="E" DOMNAME="ZUSFP_UPD_STK_METHOD" ROUTPUTLEN="000000" HEADLEN="25" SCRLEN1="10" SCRLEN2="20" SCRLEN3="40" DDTEXT="aSa Stock Updating Method" REPTEXT="aSa Stock Updating Method" SCRTEXT_S="Upd.Method" SCRTEXT_M="aSa Updating Method" SCRTEXT_L="aSa Stock Updating Method" AUTHCLASS="00" DTELMASTER="E" DATATYPE="NUMC" LENG="000001" DECIMALS="000000" OUTPUTLEN="000001" VALEXI="X" REFKIND="D"/>
  </DDLANGUAGE>
 </DTEL>
 <DTEL ROLLNAME="ZUSFP_ASA_UPD_STK_METH_DESC" DDLANGUAGE="E" ROUTPUTLEN="000000" HEADLEN="44" SCRLEN1="10" SCRLEN2="20" SCRLEN3="40" DDTEXT="aSa Stock Updating - Load Method Description" REPTEXT="aSa Stock Updating - Load Method Description" SCRTEXT_S="Mth.Descr." SCRTEXT_M="Method Description" SCRTEXT_L="aSa Stock Upd. - Load Method Description" AUTHCLASS="00" DTELMASTER="E" DATATYPE="CHAR" LENG="000015" DECIMALS="000000" OUTPUTLEN="000015" MultiLanguageSupport="X">
  <tpara/>
  <DDLANGUAGE LANGU="E">
   <DD04V ROLLNAME="ZUSFP_ASA_UPD_STK_METH_DESC" DDLANGUAGE="E" ROUTPUTLEN="000000" HEADLEN="44" SCRLEN1="10" SCRLEN2="20" SCRLEN3="40" DDTEXT="aSa Stock Updating - Load Method Description" REPTEXT="aSa Stock Updating - Load Method Description" SCRTEXT_S="Mth.Descr." SCRTEXT_M="Method Description" SCRTEXT_L="aSa Stock Upd. - Load Method Description" AUTHCLASS="00" DTELMASTER="E" DATATYPE="CHAR" LENG="000015" DECIMALS="000000" OUTPUTLEN="000015"/>
  </DDLANGUAGE>
 </DTEL>
 <DTEL ROLLNAME="ZUSFPDT_GET_RAW_MATERIAL_SAP" DDLANGUAGE="E" ROUTPUTLEN="000000" HEADLEN="00" SCRLEN1="00" SCRLEN2="00" SCRLEN3="00" DDTEXT="98324: GLN - RS PI Interface for Raw Material Stock to SAP-A" AUTHCLASS="00" DTELMASTER="E" DATATYPE="STRG" LENG="000000" DECIMALS="000000" OUTPUTLEN="000000" PROXYTYPE="X" MultiLanguageSupport="X">
  <tpara/>
  <DDLANGUAGE LANGU="E">
   <DD04V ROLLNAME="ZUSFPDT_GET_RAW_MATERIAL_SAP" DDLANGUAGE="E" ROUTPUTLEN="000000" HEADLEN="00" SCRLEN1="00" SCRLEN2="00" SCRLEN3="00" DDTEXT="98324: GLN - RS PI Interface for Raw Material Stock to SAP-A" AUTHCLASS="00" DTELMASTER="E" DATATYPE="STRG" LENG="000000" DECIMALS="000000" OUTPUTLEN="000000" PROXYTYPE="X"/>
  </DDLANGUAGE>
 </DTEL>
 <DTEL ROLLNAME="ZUSFP_ASA_UPD_STK_METH_DESC" DDLANGUAGE="E" ROUTPUTLEN="000000" HEADLEN="44" SCRLEN1="10" SCRLEN2="20" SCRLEN3="40" DDTEXT="aSa Stock Updating - Load Method Description" REPTEXT="aSa Stock Updating - Load Method Description" SCRTEXT_S="Mth.Descr." SCRTEXT_M="Method Description" SCRTEXT_L="aSa Stock Upd. - Load Method Description" AUTHCLASS="00" DTELMASTER="E" DATATYPE="CHAR" LENG="000015" DECIMALS="000000" OUTPUTLEN="000015" MultiLanguageSupport="X">
  <tpara/>
  <DDLANGUAGE LANGU="E">
   <DD04V ROLLNAME="ZUSFP_ASA_UPD_STK_METH_DESC" DDLANGUAGE="E" ROUTPUTLEN="000000" HEADLEN="44" SCRLEN1="10" SCRLEN2="20" SCRLEN3="40" DDTEXT="aSa Stock Updating - Load Method Description" REPTEXT="aSa Stock Updating - Load Method Description" SCRTEXT_S="Mth.Descr." SCRTEXT_M="Method Description" SCRTEXT_L="aSa Stock Upd. - Load Method Description" AUTHCLASS="00" DTELMASTER="E" DATATYPE="CHAR" LENG="000015" DECIMALS="000000" OUTPUTLEN="000015"/>
  </DDLANGUAGE>
 </DTEL>
 <DTEL ROLLNAME="ZUSFP_ASA_UPD_STK_METHOD" DDLANGUAGE="E" DOMNAME="ZUSFP_UPD_STK_METHOD" ROUTPUTLEN="000000" HEADLEN="25" SCRLEN1="10" SCRLEN2="20" SCRLEN3="40" DDTEXT="aSa Stock Updating Method" REPTEXT="aSa Stock Updating Method" SCRTEXT_S="Upd.Method" SCRTEXT_M="aSa Updating Method" SCRTEXT_L="aSa Stock Updating Method" AUTHCLASS="00" DTELMASTER="E" DATATYPE="NUMC" LENG="000001" DECIMALS="000000" OUTPUTLEN="000001" VALEXI="X" REFKIND="D" MultiLanguageSupport="X">
  <tpara/>
  <DDLANGUAGE LANGU="E">
   <DD04V ROLLNAME="ZUSFP_ASA_UPD_STK_METHOD" DDLANGUAGE="E" DOMNAME="ZUSFP_UPD_STK_METHOD" ROUTPUTLEN="000000" HEADLEN="25" SCRLEN1="10" SCRLEN2="20" SCRLEN3="40" DDTEXT="aSa Stock Updating Method" REPTEXT="aSa Stock Updating Method" SCRTEXT_S="Upd.Method" SCRTEXT_M="aSa Updating Method" SCRTEXT_L="aSa Stock Updating Method" AUTHCLASS="00" DTELMASTER="E" DATATYPE="NUMC" LENG="000001" DECIMALS="000000" OUTPUTLEN="000001" VALEXI="X" REFKIND="D"/>
  </DDLANGUAGE>
 </DTEL>
 <DTEL ROLLNAME="ZUSFP_ASA_STOCK_UPD_DATA" DDLANGUAGE="E" ROUTPUTLEN="000000" HEADLEN="23" SCRLEN1="10" SCRLEN2="20" SCRLEN3="40" DDTEXT="aSa Stock Updating Data" REPTEXT="aSa Stock Updating Data" SCRTEXT_S="aSa Data" SCRTEXT_M="aSa Stock Upd.Data" SCRTEXT_L="aSa Stock Updating Data" AUTHCLASS="00" DTELMASTER="E" DATATYPE="RSTR" LENG="000000" DECIMALS="000000" OUTPUTLEN="000000" MultiLanguageSupport="X">
  <tpara/>
  <DDLANGUAGE LANGU="E">
   <DD04V ROLLNAME="ZUSFP_ASA_STOCK_UPD_DATA" DDLANGUAGE="E" ROUTPUTLEN="000000" HEADLEN="23" SCRLEN1="10" SCRLEN2="20" SCRLEN3="40" DDTEXT="aSa Stock Updating Data" REPTEXT="aSa Stock Updating Data" SCRTEXT_S="aSa Data" SCRTEXT_M="aSa Stock Upd.Data" SCRTEXT_L="aSa Stock Updating Data" AUTHCLASS="00" DTELMASTER="E" DATATYPE="RSTR" LENG="000000" DECIMALS="000000" OUTPUTLEN="000000"/>
  </DDLANGUAGE>
 </DTEL>
 <FUGR AREA="ZUSFP_POP_UPS" SPRAS="E" AREAT="Pop Up function modules">
  <functionGroupDocumentation/>
  <mainprogram NAME="SAPLZUSFP_POP_UPS" VARCL="X" DBAPL="S" DBNA="D$" SUBC="F" APPL="S" RMAND="050" RLOAD="E" FIXPT="X" LDBNAME="D$S" UCCHECK="X">
   <textPool>
    <language SPRAS="E">
     <textElement ID="I" KEY="T01" ENTRY="aSa Stock Updating" LENGTH="28 "/>
    </language>
   </textPool>
   <pfstatus>
    <pfstatus_sta CODE="CANCEL_STATUS" MODAL="D" ACTCODE="000001" PFKCODE="000001" BUTCODE="0001" INT_NOTE="Status of Popup"/>
    <pfstatus_sta CODE="OK_CANCEL_STATUS" MODAL="D" ACTCODE="000001" PFKCODE="000001" BUTCODE="0001" INT_NOTE="Status of Popup"/>
    <pfstatus_fun CODE="&amp;AVE" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_ALV_VARIANT_SAVE" ICON_ID="@DN@" FUN_TEXT="Save Layout..."/>
    <pfstatus_fun CODE="&amp;OAD" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_ALV_VARIANT_CHOOSE" ICON_ID="@DM@" FUN_TEXT="Select Layout..."/>
    <pfstatus_fun CODE="&amp;OL0" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_ALV_VARIANTS" ICON_ID="@LZ@" FUN_TEXT="Change Layout..."/>
    <pfstatus_fun CODE="BACK" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="Back" PATH="B"/>
    <pfstatus_fun CODE="CANC" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_CANCEL" ICON_ID="@0W@" FUN_TEXT="Cancel"/>
    <pfstatus_fun CODE="CONT" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_OKAY" ICON_ID="@0V@" FUN_TEXT="Continue" ICON_TEXT="Continue"/>
    <pfstatus_but PFK_CODE="000001" CODE="0001" NO="01" PFNO="00"/>
    <pfstatus_but PFK_CODE="000001" CODE="0001" NO="02" PFNO="13"/>
    <pfstatus_but PFK_CODE="000001" CODE="0001" NO="03" PFNO="18"/>
    <pfstatus_but PFK_CODE="000001" CODE="0001" NO="04" PFNO="19"/>
    <pfstatus_but PFK_CODE="000001" CODE="0001" NO="05" PFNO="12"/>
    <pfstatus_pfk CODE="000001" PFNO="00" FUNCODE="CONT" FUNNO="001"/>
    <pfstatus_pfk CODE="000001" PFNO="03" FUNCODE="BACK" FUNNO="001"/>
    <pfstatus_pfk CODE="000001" PFNO="12" FUNCODE="CANC" FUNNO="001"/>
    <pfstatus_pfk CODE="000001" PFNO="13" FUNCODE="&amp;OL0" FUNNO="001"/>
    <pfstatus_pfk CODE="000001" PFNO="18" FUNCODE="&amp;OAD" FUNNO="001"/>
    <pfstatus_pfk CODE="000001" PFNO="19" FUNCODE="&amp;AVE" FUNNO="001"/>
    <pfstatus_set STATUS="CANCEL_STATUS" FUNCTION="BACK"/>
    <pfstatus_set STATUS="CANCEL_STATUS" FUNCTION="CANC"/>
    <pfstatus_set STATUS="OK_CANCEL_STATUS" FUNCTION="BACK"/>
    <pfstatus_set STATUS="OK_CANCEL_STATUS" FUNCTION="CANC"/>
    <pfstatus_set STATUS="OK_CANCEL_STATUS" FUNCTION="CONT"/>
    <pfstatus_doc OBJ_TYPE="A" OBJ_CODE="000001" MODAL="D" INT_NOTE="Status of Popup"/>
    <pfstatus_doc OBJ_TYPE="P" OBJ_CODE="000001" MODAL="D" INT_NOTE="Status of Popup"/>
    <pfstatus_doc OBJ_TYPE="B" OBJ_CODE="000001" SUB_CODE="0001" MODAL="D" INT_NOTE="Status of Popup"/>
   </pfstatus>
   <source>*******************************************************************
*   System-defined Include-files.                                 *
*******************************************************************
  INCLUDE LZUSFP_POP_UPSTOP.                 &quot; Global Data
  INCLUDE LZUSFP_POP_UPSUXX.                 &quot; Function Modules
*******************************************************************
*   User-defined Include-files (if necessary).                    *
*******************************************************************
* INCLUDE LZUSFP_POP_UPSF...                 &quot; Subroutines
* INCLUDE LZUSFP_POP_UPSO...                 &quot; PBO-Modules
* INCLUDE LZUSFP_POP_UPSI...                 &quot; PAI-Modules
* INCLUDE LZUSFP_POP_UPSE...                 &quot; Events
* INCLUDE LZUSFP_POP_UPSP...                 &quot; Local class implement.
* INCLUDE LZUSFP_POP_UPST99.                 &quot; ABAP Unit tests

INCLUDE lzusfp_pop_upsp01.</source>
  </mainprogram>
  <includeprograms>
   <include NAME="LZUSFP_POP_UPSP01" VARCL="X" SUBC="I" APPL="S" RMAND="050" RLOAD="E" UCCHECK="X">
    <include_source>*----------------------------------------------------------------------*
***INCLUDE LZUSFP_POP_UPSP01.
*----------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*&amp;       Class (Implementation)  lcl_events_handler
*&amp;---------------------------------------------------------------------*
*        Text
*----------------------------------------------------------------------*
CLASS lcl_events_handler IMPLEMENTATION.
  METHOD on_user_command.

    CASE e_salv_function.
      WHEN &apos;CONT&apos;.
        option = abap_true.
        LEAVE TO SCREEN 0.
      WHEN &apos;CANC&apos;.
        option = abap_false.
        LEAVE TO SCREEN 0.
      WHEN OTHERS.
        RETURN.
    ENDCASE.
  ENDMETHOD.                    &quot;on_user_command
  METHOD on_messages_click.
    CONSTANTS lc_log_object TYPE balobj_d VALUE &apos;ZFP_ASA_STK_UPL&apos;.

    READ TABLE t_data ASSIGNING FIELD-SYMBOL(&lt;lw_data&gt;) INDEX row.
    IF sy-subrc = 0.
*      TRY .
*          DATA(lo_log) = NEW cl_ilm_log( im_extnumber = &apos;ZUSFPR_STOCK_CREATION&apos;  &amp;&amp;
*                                                  &lt;lw_data&gt;-uname &amp;&amp; &lt;lw_data&gt;-aedat &amp;&amp;
*                                                  &lt;lw_data&gt;-aetim &amp;&amp; &lt;lw_data&gt;-utzon
*                                         im_object    = lc_log_object
*                                         im_title = &apos;aSa Stock Updating&apos;(t01) ).
*        CATCH cx_ilm.
*          RETURN.
*      ENDTRY.
*      lo_log-&gt;add_from_other_log(
*      EXPORTING
*        im_operation_log_handle =  &lt;lw_data&gt;-lghdl   &quot; Application Log: Log Handle
**          im_msgty                =     &quot; Message Type
**          im_probclass            =     &quot; Application Log: Message Problem Class
*        ).
*      lo_log-&gt;show_popup( ).
      TRY .
          DATA(lo_log) = NEW lcl_log( p_instid = &apos;ZUSFPR_STOCK_CREATION&apos;  &amp;&amp;
                                                      &lt;lw_data&gt;-uname &amp;&amp; &lt;lw_data&gt;-aedat &amp;&amp;
                                                      &lt;lw_data&gt;-aetim &amp;&amp; &lt;lw_data&gt;-utzon
                                      p_lghdl = &lt;lw_data&gt;-lghdl ).

        CATCH cx_bapi_error.
          RETURN.
      ENDTRY.
      lo_log-&gt;show_messages( ).
      FREE lo_log.
    ENDIF.
  ENDMETHOD.
ENDCLASS.               &quot;lcl_events_handler


*&amp;---------------------------------------------------------------------*
*&amp;       Class (Implementation)  LCL_LOG
*&amp;---------------------------------------------------------------------*
*        Text
*----------------------------------------------------------------------*
CLASS lcl_log IMPLEMENTATION.
  METHOD constructor.
    DATA: ls_log       TYPE bal_s_log,    &quot;Log header data
          lv_timestp   TYPE timestamp,
          ls_timestp   TYPE string,
          lvc_dummy(1) TYPE c,
          lw_return    TYPE bapiret2,
          lt_return    TYPE bapiret2_t.

* define some header data of this log
    av_instid = p_instid.
    aw_log_handle = p_lghdl.

  ENDMETHOD.                    &quot;constructor
  METHOD show_messages.
    DATA: lr_object          TYPE bal_s_obj,
          lr_extnumber       TYPE bal_s_extn,
          lw_log_filter      TYPE bal_s_lfil,
          lw_display_profile TYPE bal_s_prof,
          lt_handle          TYPE bal_t_logh.

* create a filter with all relevant criteria:
    lr_object-sign   = &apos;I&apos;.
    lr_object-option = &apos;EQ&apos;.
    lr_object-low    = c_log_object.
    APPEND lr_object TO lw_log_filter-object.

    lr_extnumber-sign   = &apos;I&apos;.
    lr_extnumber-option = &apos;EQ&apos;.
    lr_extnumber-low    = av_instid.
    APPEND lr_extnumber TO lw_log_filter-extnumber.

* Load logs into memory
    load_logs(
    EXPORTING
      pw_lfil = lw_log_filter ).
* Get a prepared profile
    get_det_profile(
    IMPORTING
      rw_dsprof = lw_display_profile ).
* use grid and detail level for display
    lw_display_profile-title  = &apos;aSa Stock Updating&apos;(t01).
    lw_display_profile-use_grid   = &apos;X&apos;.
    &quot;lw_display_profile-bydetlevel = &apos;X&apos;.
    lw_display_profile-pop_adjst = &apos;X&apos;.
    lw_display_profile-cwidth_opt = &apos;X&apos;.

    lw_display_profile-disvariant-handle = &apos;LOG&apos;.
    APPEND me-&gt;aw_log_handle TO lt_handle.

* call display function module
    CALL FUNCTION &apos;BAL_DSP_LOG_DISPLAY&apos;
      EXPORTING
        i_s_display_profile  = lw_display_profile
        i_s_log_filter       = lw_log_filter
        i_t_log_handle       = lt_handle
      EXCEPTIONS
        profile_inconsistent = 1
        internal_error       = 2
        no_data_available    = 3
        no_authority         = 4
        OTHERS               = 5.
    IF sy-subrc &lt;&gt; 0.
*      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
*         WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.
  ENDMETHOD.                    &quot;show_messages
  METHOD load_logs.
    DATA lt_log_header TYPE balhdr_t.
* search on DB for the logs
    CALL FUNCTION &apos;BAL_DB_SEARCH&apos;
      EXPORTING
        i_s_log_filter     = pw_lfil
      IMPORTING
        e_t_log_header     = lt_log_header[]
      EXCEPTIONS
        log_not_found      = 1
        no_filter_criteria = 2.
    IF sy-subrc &lt;&gt; 0.
*      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
*      WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.
* load messages into memory
    CALL FUNCTION &apos;BAL_DB_LOAD&apos;
      EXPORTING
        i_t_log_header     = lt_log_header[]
      EXCEPTIONS
        no_logs_specified  = 1
        log_not_found      = 2
        log_already_loaded = 3.
    IF sy-subrc &lt;&gt; 0.
*      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
*         WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.
  ENDMETHOD.                    &quot;load_logs
  METHOD get_det_profile.
*    CALL FUNCTION &apos;BAL_DSP_PROFILE_DETLEVEL_GET&apos;
*    CALL FUNCTION &apos;BAL_DSP_PROFILE_STANDARD_GET&apos;
    CALL FUNCTION &apos;BAL_DSP_PROFILE_POPUP_GET&apos;
      IMPORTING
        e_s_display_profile = rw_dsprof
      EXCEPTIONS
        OTHERS              = 1.
    IF sy-subrc &lt;&gt; 0.
*      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
*         WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.
  ENDMETHOD.                    &quot;get_det_profile
  METHOD clean_up_log.
    DATA: lr_object          TYPE bal_s_obj,
          lr_date            TYPE bal_s_date,
          lw_log_filter      TYPE bal_s_lfil,
          lw_display_profile TYPE bal_s_prof,
          lt_log_header      TYPE balhdr_t.

* create a filter with all relevant criteria:
    lr_object-sign = lr_date-sign = &apos;I&apos;.
    lr_object-option = &apos;EQ&apos;.
    lr_object-low    = c_log_object.
    APPEND lr_object TO lw_log_filter-object.
    lr_date-option = &apos;LE&apos;.
    lr_date-low    = p_date.
    APPEND lr_date TO lw_log_filter-aldate.

* search on DB for the logs
    CALL FUNCTION &apos;BAL_DB_SEARCH&apos;
      EXPORTING
        i_s_log_filter     = lw_log_filter
      IMPORTING
        e_t_log_header     = lt_log_header[]
      EXCEPTIONS
        log_not_found      = 1
        no_filter_criteria = 2.
    IF sy-subrc &lt;&gt; 0.
*      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
*      WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.
* Delete the log
    IF lt_log_header[] IS NOT INITIAL.
      CALL FUNCTION &apos;BAL_DB_DELETE&apos;
        EXPORTING
          i_t_logs_to_delete = lt_log_header[]
*         i_in_update_task   = &apos;X&apos;
*         i_with_commit_work = &apos;X&apos;
        EXCEPTIONS
          no_logs_specified  = 1
          OTHERS             = 2.
      IF sy-subrc &lt;&gt; 0.
*        MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
*           WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
      ENDIF.
    ENDIF.
  ENDMETHOD.                    &quot;clean_up_log
ENDCLASS.               &quot;LCL_LOG</include_source>
   </include>
   <include NAME="LZUSFP_POP_UPSTOP" VARCL="X" DBAPL="S" DBNA="D$" SUBC="I" APPL="S" RMAND="050" FIXPT="X" LDBNAME="D$S" UCCHECK="X">
    <include_source>FUNCTION-POOL zusfp_pop_ups.                &quot;MESSAGE-ID ..

* INCLUDE LZUSFP_POP_UPSD...                 &quot; Local class definition
*--------------------------------------------------------------------*
* FLAT VARIABLES
*--------------------------------------------------------------------*
DATA: option    TYPE abap_bool,
      s_message TYPE string.
*--------------------------------------------------------------------*
* STRUCTURES
*--------------------------------------------------------------------*
DATA  w_return     TYPE bapiret2.
*--------------------------------------------------------------------*
* INTERNAL TABLES
*--------------------------------------------------------------------*
DATA: t_return TYPE bapiret2_t,
      t_data   TYPE zusfp_sasa_hist_view_t.
*--------------------------------------------------------------------*
* LOCAL CLASSES DEFINITIONS
*--------------------------------------------------------------------*
CLASS lcl_events_handler DEFINITION FINAL.
  PUBLIC SECTION.
    METHODS: on_user_command FOR EVENT added_function OF cl_salv_events
      IMPORTING e_salv_function,
      on_messages_click FOR EVENT link_click OF cl_salv_events_table
        IMPORTING
            row
            column.
ENDCLASS.                    &quot;lcl_events_handler DEFINITION


*----------------------------------------------------------------------*
*       CLASS LCL_LOG DEFINITION
*----------------------------------------------------------------------*
* OVERVIEW: This class controls the logging procedures.
*----------------------------------------------------------------------*
CLASS lcl_log DEFINITION.
  PUBLIC SECTION.
    METHODS: constructor IMPORTING p_instid TYPE string
                                   p_lghdl  TYPE balloghndl,
*--------------------------------------------------------------------*
* CONSTRUCTOR
*--------------------------------------------------------------------*
*       REQUIRES: The log instance name must be informed.
*       MODIFIES: Creates an object of type lcl_log.
*--------------------------------------------------------------------*
*  --&gt;  P_INSTID   Log instance name
*  --&gt;  P_LGHDL    Log handle
*----------------------------------------------------------------------*
      show_messages,
*---------------------------------------------------------------------*
* SHOW_MESSAGES S.P.E.C.I.F.I.C.A.T.I.O.N
*---------------------------------------------------------------------*
*       EFFECTS.: Shows related log messages.
*----------------------------------------------------------------------*
*  --&gt;  P_INSTID     Instance identifier
*----------------------------------------------------------------------*
      clean_up_log IMPORTING p_date  TYPE sydatum.
*---------------------------------------------------------------------*
* CLEAN_UP_LOG S.P.E.C.I.F.I.C.A.T.I.O.N
*---------------------------------------------------------------------*
*       REQUIRES: The cut date must be informed.
*       EFFECTS.: Deletes from database entries older than a given date.
*----------------------------------------------------------------------*
*  --&gt;  P_DATE     Cut date
*----------------------------------------------------------------------*
  PROTECTED SECTION.
    CONSTANTS  c_log_object    TYPE balobj_d VALUE &apos;ZFP_ASA_STK_UPL&apos;.
    DATA: aw_log_handle TYPE balloghndl,
          av_instid     TYPE balnrext.
    METHODS: load_logs IMPORTING pw_lfil  TYPE bal_s_lfil,
*---------------------------------------------------------------------*
* LOAD_LOGS S.P.E.C.I.F.I.C.A.T.I.O.N
*---------------------------------------------------------------------*
*       REQUIRES: Log filter criteria must be informed.
*       EFFECTS.: Load related log messages into memory.
*----------------------------------------------------------------------*
*  --&gt;  PW_LFIL     Log filter criteria
*----------------------------------------------------------------------*
      get_det_profile EXPORTING rw_dsprof TYPE bal_s_prof.
*---------------------------------------------------------------------*
* GET_DET_PROFILE S.P.E.C.I.F.I.C.A.T.I.O.N
*---------------------------------------------------------------------*
*       EFFECTS.: Returns detailed level formating information.
*----------------------------------------------------------------------*
*  &lt;--  RW_DSPROF     Log Output Format Profile
*----------------------------------------------------------------------*
ENDCLASS.                    &quot;LCL_LOG DEFINITION


*--------------------------------------------------------------------*
* OBJECTS
*--------------------------------------------------------------------*
DATA: o_table          TYPE REF TO cl_salv_table,
      o_columns        TYPE REF TO cl_salv_columns,
      o_column         TYPE REF TO cl_salv_column_table,
      o_selections     TYPE REF TO cl_salv_selections,
      o_functions      TYPE REF TO cl_salv_functions_list,
      o_events         TYPE REF TO cl_salv_events_table,
      o_events_handler TYPE REF TO lcl_events_handler,
      x_error          TYPE REF TO cx_salv_msg.

*--------------------------------------------------------------------*
* MACROS
*--------------------------------------------------------------------*
DEFINE m_raise_fm_exception.
  MESSAGE ID &amp;1
  TYPE &amp;2
  NUMBER &amp;3
  WITH &amp;4 &amp;5 &amp;6 &amp;7
  INTO lvc_dummy.
  lw_return-TYPE       = sy-msgty.
  lw_return-ID         = sy-msgid.
  lw_return-NUMBER     = sy-msgno.
  lw_return-message_v1 = sy-msgv1.
  lw_return-message_v2 = sy-msgv2.
  lw_return-message_v3 = sy-msgv3.
  lw_return-message_v4 = sy-msgv4.
  APPEND lw_return TO lt_return.
  RAISE exception TYPE cx_bapi_error
  EXPORTING
    status = lt_return[].
END-OF-DEFINITION.</include_source>
   </include>
  </includeprograms>
  <functionmodules>
   <functionmodule NAME="ZUSFP_LIST_WITH_OK_AND_CANCEL" STEXT="Lists a table data e returns user option (OK = TRUE and CANCEL = FALSE)">
    <importing PARAMETER="I_START_COLUMN" DEFAULT="25" OPTIONAL="X" REFERENCE="X" TYP="I"/>
    <importing PARAMETER="I_START_LINE" DEFAULT="6" OPTIONAL="X" REFERENCE="X" TYP="I"/>
    <importing PARAMETER="I_END_COLUMN" DEFAULT="100" OPTIONAL="X" REFERENCE="X" TYP="I"/>
    <importing PARAMETER="I_END_LINE" DEFAULT="26" OPTIONAL="X" REFERENCE="X" TYP="I"/>
    <importing PARAMETER="IT_DATA" REFERENCE="X" TYP="ANY TABLE"/>
    <exporting PARAMETER="E_OPTION" REFERENCE="X" TYP="ABAP_BOOL"/>
    <exceptions EXCEPTION="CX_BAPI_ERROR"/>
    <documentation PARAMETER="I_START_COLUMN" KIND="P" STEXT="Start line" INDEX=" 001"/>
    <documentation PARAMETER="I_START_LINE" KIND="P" STEXT="Start column" INDEX=" 002"/>
    <documentation PARAMETER="I_END_COLUMN" KIND="P" STEXT="End column" INDEX=" 003"/>
    <documentation PARAMETER="I_END_LINE" KIND="P" STEXT="End line" INDEX=" 004"/>
    <documentation PARAMETER="IT_DATA" KIND="P" STEXT="Data table" INDEX=" 005"/>
    <documentation PARAMETER="E_OPTION" KIND="P" STEXT="User option (OK = TRUE and CANCEL = FALSE)" INDEX=" 006"/>
    <documentation PARAMETER="CX_BAPI_ERROR" KIND="X" STEXT='BAPI Error Exception: Migrated Error Messages Type &quot;E&quot;' INDEX=" 007"/>
    <fm_source>DATA  lr_dref TYPE REF TO data.

  CLEAR e_option.

  DATA(lo_tydesc) = cl_abap_typedescr=&gt;describe_by_data( it_data ).
  CREATE DATA lr_dref TYPE (lo_tydesc-&gt;absolute_name).
  ASSIGN lr_dref-&gt;* TO FIELD-SYMBOL(&lt;lt_data&gt;).
  &lt;lt_data&gt; = it_data.

  TRY .
      cl_salv_table=&gt;factory( IMPORTING r_salv_table = o_table
                              CHANGING  t_table = &lt;lt_data&gt; ).
    CATCH cx_salv_msg INTO x_error.
      MESSAGE
      ID x_error-&gt;msgid
      TYPE x_error-&gt;msgty
      NUMBER x_error-&gt;msgno
      WITH x_error-&gt;msgv1 x_error-&gt;msgv2 x_error-&gt;msgv3
      x_error-&gt;msgv4
      INTO s_message.
      w_return-id         = sy-msgid.
      w_return-type       = sy-msgty.
      w_return-number     = sy-msgno.
      w_return-message    = s_message.
      w_return-message_v1 = sy-msgv1.
      w_return-message_v2 = sy-msgv2.
      w_return-message_v3 = sy-msgv3.
      w_return-message_v4 = sy-msgv4.
      APPEND w_return TO t_return.
      RAISE EXCEPTION TYPE cx_bapi_error
        EXPORTING
          status = t_return.
  ENDTRY.

  o_columns = o_table-&gt;get_columns( ).
  o_columns-&gt;set_optimize( ).

  o_selections = o_table-&gt;get_selections( ).
  o_selections-&gt;set_selection_mode( cl_salv_selections=&gt;none ).

  o_events = o_table-&gt;get_event( ).
  CREATE OBJECT o_events_handler.
  SET HANDLER o_events_handler-&gt;on_user_command FOR o_events.

  o_table-&gt;set_screen_status( pfstatus = &apos;OK_CANCEL_STATUS&apos;
  report    = sy-repid              ).

  o_table-&gt;set_screen_popup( start_column = i_start_column
                             end_column   = i_end_column
                             start_line   = i_start_line
                             end_line     = i_end_line ).

  o_table-&gt;display( ).

  e_option = option.</fm_source>
    <functionModuleDocumentation/>
   </functionmodule>
   <functionmodule NAME="ZUSFP_HISTORIAL_POP_UP" STEXT="Lists a table data e returns user option (OK = TRUE and CANCEL = FALSE)">
    <importing PARAMETER="I_START_COLUMN" DEFAULT="25" OPTIONAL="X" REFERENCE="X" TYP="I"/>
    <importing PARAMETER="I_START_LINE" DEFAULT="6" OPTIONAL="X" REFERENCE="X" TYP="I"/>
    <importing PARAMETER="I_END_COLUMN" DEFAULT="100" OPTIONAL="X" REFERENCE="X" TYP="I"/>
    <importing PARAMETER="I_END_LINE" DEFAULT="26" OPTIONAL="X" REFERENCE="X" TYP="I"/>
    <importing PARAMETER="IT_DATA" REFERENCE="X" TYP="ZUSFP_SASA_HIST_VIEW_T"/>
    <exceptions EXCEPTION="CX_BAPI_ERROR"/>
    <documentation PARAMETER="I_START_COLUMN" KIND="P" STEXT="Start line" INDEX=" 001"/>
    <documentation PARAMETER="I_START_LINE" KIND="P" STEXT="Start column" INDEX=" 002"/>
    <documentation PARAMETER="I_END_COLUMN" KIND="P" STEXT="End column" INDEX=" 003"/>
    <documentation PARAMETER="I_END_LINE" KIND="P" STEXT="End line" INDEX=" 004"/>
    <documentation PARAMETER="IT_DATA" KIND="P" STEXT="aSa Stock Updating - Historial view table" INDEX=" 005"/>
    <documentation PARAMETER="CX_BAPI_ERROR" KIND="X" STEXT='BAPI Error Exception: Migrated Error Messages Type &quot;E&quot;' INDEX=" 006"/>
    <fm_source>t_data = it_data.

  TRY .
      cl_salv_table=&gt;factory( IMPORTING r_salv_table = o_table
                              CHANGING  t_table = t_data ).
    CATCH cx_salv_msg INTO x_error.
      MESSAGE
      ID x_error-&gt;msgid
      TYPE x_error-&gt;msgty
      NUMBER x_error-&gt;msgno
      WITH x_error-&gt;msgv1 x_error-&gt;msgv2 x_error-&gt;msgv3
      x_error-&gt;msgv4
      INTO s_message.
      w_return-id         = sy-msgid.
      w_return-type       = sy-msgty.
      w_return-number     = sy-msgno.
      w_return-message    = s_message.
      w_return-message_v1 = sy-msgv1.
      w_return-message_v2 = sy-msgv2.
      w_return-message_v3 = sy-msgv3.
      w_return-message_v4 = sy-msgv4.
      APPEND w_return TO t_return.
      RAISE EXCEPTION TYPE cx_bapi_error
        EXPORTING
          status = t_return.
  ENDTRY.

  o_columns = o_table-&gt;get_columns( ).
  o_columns-&gt;set_optimize( ).
  TRY .
      o_column ?= o_columns-&gt;get_column( columnname = &apos;HICON&apos;  ).
      o_column-&gt;set_cell_type( if_salv_c_cell_type=&gt;hotspot ).
      o_column-&gt;set_long_text( &apos;Messages&apos; ).

      o_column ?= o_columns-&gt;get_column( columnname = &apos;UTZON&apos;  ).
      o_column-&gt;set_visible( if_salv_c_bool_sap=&gt;false ).

      o_column ?= o_columns-&gt;get_column( columnname = &apos;LGHDL&apos;  ).
      o_column-&gt;set_visible( if_salv_c_bool_sap=&gt;false ).
    CATCH cx_salv_not_found.
  ENDTRY.

  o_selections = o_table-&gt;get_selections( ).
  o_selections-&gt;set_selection_mode( cl_salv_selections=&gt;none ).

  o_events = o_table-&gt;get_event( ).
  CREATE OBJECT o_events_handler.
  SET HANDLER: o_events_handler-&gt;on_user_command FOR o_events,
               o_events_handler-&gt;on_messages_click FOR o_events.

  o_table-&gt;set_screen_status( pfstatus = &apos;CANCEL_STATUS&apos;
                              report    = sy-repid              ).

*  o_functions = o_table-&gt;get_functions( ).
*  o_functions-&gt;set_export_localfile( ).

  o_table-&gt;set_screen_popup( start_column = i_start_column
                             end_column   = i_end_column
                             start_line   = i_start_line
                             end_line     = i_end_line ).

  o_table-&gt;display( ).</fm_source>
    <functionModuleDocumentation/>
   </functionmodule>
  </functionmodules>
 </FUGR>
 <PARA PARAMID="ZUSFPR_STOCK_01">
  <parat PARAMID="ZUSFPR_STOCK_01" SPRACHE="E" PARTEXT="File path and name"/>
 </PARA>
 <PROG NAME="ZUSFPR_STOCK_CREATION_C01" VARCL="X" SUBC="I" APPL="Z" RSTAT="K" RMAND="050" RLOAD="E" UCCHECK="X">
  <textPool>
   <language SPRAS="E">
    <textElement ID="R" ENTRY="Include ZUSFPR_STOCK_CREATION_C01" LENGTH="33 "/>
   </language>
  </textPool>
  <source>*&amp;---------------------------------------------------------------------*
*&amp;  Include           ZUSFPR_STOCK_CREATION_C01
*&amp;---------------------------------------------------------------------*
CLASS lcl_main IMPLEMENTATION.
  METHOD constructor.
    DATA: lt_return  TYPE bapiret2_t,
          ls_message TYPE string,
          lv_timestp TYPE tzntstmps.
    FIELD-SYMBOLS  &lt;lw_return&gt; TYPE bapiret2.

    CONVERT DATE sy-datlo TIME sy-timlo
       INTO TIME STAMP lv_timestp TIME ZONE sy-zonlo.
    CONVERT TIME STAMP lv_timestp TIME ZONE sy-zonlo
       INTO DATE DATA(lv_date) TIME DATA(lv_time).
    TRY .
        o_log = NEW cl_ilm_log( im_extnumber = sy-repid &amp;&amp; sy-uname &amp;&amp;
                                               lv_date  &amp;&amp; lv_time  &amp;&amp;
                                               sy-zonlo
                                im_object    = c_log_object
                                im_title = &apos;aSa Stock Updating&apos;(t04) ).
      CATCH cx_ilm.
        MESSAGE e022 INTO ls_message.
        m_raise_exception.
    ENDTRY.
    o_media     = lcl_media=&gt;get_media( ).
    o_stock     = NEW lcl_stock_manager( ).
    o_historial = NEW lcl_historial_manager( lv_timestp ).
  ENDMETHOD.
  METHOD run.

    CASE abap_true.
      WHEN p_stck.
        o_stock-&gt;load( po_media = o_media
                       po_log   = o_log
                       po_hist  = o_historial ).
      WHEN p_lgmn.
        IF p_vlog = abap_true.
          lcl_historial_manager=&gt;shows( o_log ).
        ELSE.
          lcl_historial_manager=&gt;delete( ).
        ENDIF.
      WHEN OTHERS.
    ENDCASE.
  ENDMETHOD.
  METHOD show_messages.

    DATA(lw_statistics) = o_log-&gt;entries_in_log( ).
    IF lw_statistics-msg_cnt_al &gt; 0.
      o_log-&gt;show_log_fullscreen( ).
    ENDIF.
  ENDMETHOD.
  METHOD house_keeping.
    FREE: o_log, o_media, o_stock, o_historial.
  ENDMETHOD.
  METHOD get_field_value.
    DATA: lt_dynpfields TYPE dynpread_tabtype,
          lw_dynpfield  TYPE dynpread.

    MOVE p_fieldname TO lw_dynpfield-fieldname.
    APPEND lw_dynpfield TO lt_dynpfields.

    CALL FUNCTION &apos;DYNP_VALUES_READ&apos;
      EXPORTING
        dyname               = sy-repid
        dynumb               = sy-dynnr
      TABLES
        dynpfields           = lt_dynpfields[]
      EXCEPTIONS
        invalid_abapworkarea = 1
        invalid_dynprofield  = 2
        invalid_dynproname   = 3
        invalid_dynpronummer = 4
        invalid_request      = 5
        no_fielddescription  = 6
        invalid_parameter    = 7
        undefind_error       = 8
        double_conversion    = 9
        stepl_not_found      = 10
        OTHERS               = 11.
    IF sy-subrc &lt;&gt; 0.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
      WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.

    READ TABLE lt_dynpfields INTO lw_dynpfield
    WITH KEY fieldname = p_fieldname.
    IF sy-subrc = 0.
      r_fvalue = lw_dynpfield-fieldvalue.
    ENDIF.
  ENDMETHOD.                    &quot;get_field_value
ENDCLASS.
CLASS lcl_media IMPLEMENTATION.
  METHOD get_media.
    CASE abap_true.
      WHEN p_istk.
        TRY .
            DATA(lo_webservice) = NEW lcl_webservice( ).
          CATCH cx_bapi_error INTO DATA(lx_error).
            RAISE EXCEPTION lx_error.
        ENDTRY.
        ro_media = lo_webservice.
      WHEN p_sstk.
        DATA(lo_spreadsheet) = NEW lcl_spreadsheet( ).
        ro_media = lo_spreadsheet.
    ENDCASE.
  ENDMETHOD.
ENDCLASS.
CLASS lcl_webservice IMPLEMENTATION.
  METHOD constructor.
    DATA: lt_return  TYPE bapiret2_t,
          ls_message TYPE string.
    FIELD-SYMBOLS  &lt;lw_return&gt; TYPE bapiret2.


    super-&gt;constructor( ).
    TRY .
        me-&gt;o_proxy = NEW zusfpco_si_get_raw_material_in( ).
      CATCH cx_ai_system_fault INTO DATA(lx_error).
        MESSAGE e000 WITH lx_error-&gt;if_message~get_text( ) INTO ls_message.
        m_raise_exception.
    ENDTRY.
  ENDMETHOD.
  METHOD open.
    DATA: lw_request TYPE zusfpmt_get_raw_material_sap,
          lt_return  TYPE bapiret2_t,
          ls_message TYPE string.
    FIELD-SYMBOLS  &lt;lw_return&gt; TYPE bapiret2.

    TRY.
        o_proxy-&gt;si_get_raw_material_inventoryo(
          EXPORTING
            output = lw_request
          IMPORTING
            input = w_data ).
      CATCH cx_ai_system_fault INTO DATA(lx_error).
        MESSAGE e000 WITH lx_error-&gt;if_message~get_text( )
           INTO ls_message.
        m_raise_exception.
    ENDTRY.
  ENDMETHOD.
  METHOD get_iterator.
    DATA lw_line TYPE zusfp_sasa_stock_upd.

    DATA(lo_iterator) = NEW lcl_ws_iterator( ).
    LOOP AT me-&gt;w_data-mt_get_raw_material_sap_respon-raw_material
      ASSIGNING FIELD-SYMBOL(&lt;lw_raw_material&gt;).
      lw_line-location = &lt;lw_raw_material&gt;-sap_plant.
      lw_line-product = &lt;lw_raw_material&gt;-sap_sku.
      lw_line-quantity = &lt;lw_raw_material&gt;-weight.
      IF lw_line-product IN spstkif AND &quot;List filtering
         lw_line-location IN slstkif.
        lo_iterator-&gt;add_item( lw_line ).
      ENDIF.
    ENDLOOP.
    lo_iterator-&gt;initialize( ).

    ro_iterator = lo_iterator.
  ENDMETHOD.
  METHOD free.
    FREE o_proxy.
  ENDMETHOD.
ENDCLASS.


*&amp;---------------------------------------------------------------------*
*&amp;       Class (Implementation)  lcl_historial_manager
*&amp;---------------------------------------------------------------------*
*        Text
*----------------------------------------------------------------------*
CLASS lcl_historial_manager IMPLEMENTATION.
  METHOD constructor.

    me-&gt;timestp = i_timestp.
  ENDMETHOD.
  METHOD set_new.
    DATA: lo_pers_obj  TYPE REF TO zcl_usfp_t_asa_stkup,
          lv_method    TYPE zusfp_asa_upd_stk_method,
          lv_text(200) TYPE c,
          ls_data      TYPE string,
          lxs_data     TYPE xstring.

    TRY.
        lo_pers_obj = zca_usfp_t_asa_stkup=&gt;agent-&gt;create_persistent( i_aedat = me-&gt;timestp
                                                                      i_uname = sy-uname ).
      CATCH cx_os_object_existing INTO DATA(lx_exist).
        lv_text = lx_exist-&gt;get_text( ).
        io_log-&gt;add_message_free_text(
          EXPORTING
            im_text         = lv_text   &quot; Text to Be Displayed
            im_msg_type     = &apos;I&apos;    &quot; Message Type
            im_problemclass = &apos;1&apos;    &quot; Application Log: Message Problem Class
          ).
        RETURN.
    ENDTRY.

    TRY .
        CALL TRANSFORMATION zusfp_tf_asa_stock_data
          SOURCE asa_data = it_data
          RESULT XML ls_data.
      CATCH cx_transformation_error INTO DATA(lx_transf).
        lv_text = lx_transf-&gt;get_text( ).
        io_log-&gt;add_message_free_text(
          EXPORTING
            im_text         = lv_text   &quot; Text to Be Displayed
            im_msg_type     = &apos;I&apos;    &quot; Message Type
            im_problemclass = &apos;2&apos;    &quot; Application Log: Message Problem Class
          ).
    ENDTRY.

    IF ls_data IS NOT INITIAL.
      TRY .
          NEW cl_abap_gzip( )-&gt;compress_text(
            EXPORTING
              text_in                    =   ls_data  &quot; Input text
*                text_in_len                = -1    &quot; Input Length
*                compress_level             = 6    &quot; Level of Compression
*                conversion                 = &apos;DEFAULT&apos;    &quot; Conversion to UTF8 (UC)
            IMPORTING
              gzip_out                   =  lxs_data   &quot; Compressed output
*                gzip_out_len               =     &quot; Output Length
              ).
*              CATCH cx_parameter_invalid_range.    &quot;
*              CATCH cx_sy_buffer_overflow.    &quot;
*              CATCH cx_sy_conversion_codepage.    &quot;
*              CATCH cx_sy_compression_error.    &quot;
        CATCH cx_root INTO DATA(lx_root).
          lv_text = lx_root-&gt;get_text( ).
          io_log-&gt;add_message_free_text(
            EXPORTING
              im_text         = lv_text   &quot; Text to Be Displayed
              im_msg_type     = &apos;I&apos;    &quot; Message Type
              im_problemclass = &apos;2&apos;    &quot; Application Log: Message Problem Class
            ).
      ENDTRY.
    ENDIF.

    lo_pers_obj-&gt;set_utzon( i_utzon = sy-zonlo ).
*      CATCH cx_os_object_not_found.    &quot;
    IF p_istk = abap_true.
      lv_method = 1.
    ELSE.
      lv_method = 2.
    ENDIF.
    lo_pers_obj-&gt;set_umeth( i_umeth = lv_method ).
*      CATCH cx_os_object_not_found.    &quot;
    lo_pers_obj-&gt;set_adata( i_adata = lxs_data ).
    lo_pers_obj-&gt;set_lghdl( i_lghdl = io_log-&gt;g_log_handle  ).
*      CATCH cx_os_object_not_found.    &quot;
    COMMIT WORK AND WAIT.
  ENDMETHOD.
  METHOD shows.
    DATA: lv_text(200) TYPE c,
          lt_view      TYPE zusfp_sasa_hist_view_t,
          lt_data      TYPE zusfp_sasa_stock_upd_t,
          ls_data      TYPE string,
          lxs_data     TYPE xstring,
          lv_valpos    TYPE valpos,
          lo_api       TYPE REF TO lcl_api,
          lo_entry     TYPE REF TO zcl_usfp_t_asa_stkup,
          lx_error     TYPE REF TO cx_bapi_error,
          lx_root      TYPE REF TO cx_root.
    FIELD-SYMBOLS: &lt;lw_method&gt; TYPE dd07v,
                   &lt;lw_return&gt; TYPE bapiret2.

    lo_api = NEW lcl_api( ).
    TRY .
        DATA(lt_methods) = lo_api-&gt;get_methods( ).
      CATCH cx_bapi_error INTO lx_error.
        LOOP AT lx_error-&gt;status ASSIGNING &lt;lw_return&gt;.
          io_log-&gt;add_bapi_return( im_bapireturn = &lt;lw_return&gt; ).
        ENDLOOP.
    ENDTRY.
    TRY .
        DATA(lo_query_manager) = cl_os_system=&gt;get_query_manager( ).
        DATA(lo_query) = lo_query_manager-&gt;create_query(
*                    i_filter              =
*                    i_ordering            =
*                    i_parameters          =
              ).
*                  CATCH cx_os_class_not_found.  &quot;
        DATA(lt_entries) = zca_usfp_t_asa_stkup=&gt;agent-&gt;if_os_ca_persistency~get_persistent_by_query(
                i_query                = lo_query
*                         i_parameter_tab        =
*                         i_par1                 =
*                         i_par2                 =
*                         i_par3                 =
*                         i_subclasses           = OSCON_FALSE
*                         i_upto                 = 0
*                         i_options              = IF_OS_QUERY_OPTIONS=&gt;DEFAULT_OPTIONS
                ).
*                       CATCH cx_os_object_not_found.  &quot;
*                       CATCH cx_os_query_error.  &quot;
      CATCH cx_root INTO lx_root.
        lv_text = lx_root-&gt;get_text( ).
        io_log-&gt;add_message_free_text(
          EXPORTING
            im_text         = lv_text   &quot; Text to Be Displayed
            im_msg_type     = &apos;I&apos;    &quot; Message Type
            im_problemclass = &apos;2&apos;    &quot; Application Log: Message Problem Class
          ).
        io_log-&gt;save_to_db(
*            IMPORTING
*              e_lognumber =     &quot; Application log: log number
        ).
    ENDTRY.

    LOOP AT lt_entries ASSIGNING FIELD-SYMBOL(&lt;lo_line&gt;).
      lo_entry ?= &lt;lo_line&gt;.
      lxs_data = lo_entry-&gt;get_adata( ).
      CLEAR lt_data.
*             CATCH cx_os_object_not_found.  &quot;
      TRY .
          NEW cl_abap_gzip( )-&gt;decompress_text(
            EXPORTING
              gzip_in                    =  lxs_data   &quot; Input of Zipped Data
*            gzip_in_len                = -1    &quot; Input Length
*            conversion                 = &apos;DEFAULT&apos;    &quot; Conversion to UTF8 (UC)
            IMPORTING
              text_out                   =  ls_data   &quot; Decompessed Output
*            text_out_len               =     &quot; Output Length
            ).
*          CATCH cx_parameter_invalid_range.    &quot;
*          CATCH cx_sy_buffer_overflow.    &quot;
*          CATCH cx_sy_conversion_codepage.    &quot;
*          CATCH cx_sy_compression_error.    &quot;
        CATCH cx_root INTO lx_root.
          lv_text = lx_root-&gt;get_text( ).
          io_log-&gt;add_message_free_text(
          EXPORTING
            im_text         = lv_text   &quot; Text to Be Displayed
            im_msg_type     = &apos;I&apos;    &quot; Message Type
            im_problemclass = &apos;2&apos;    &quot; Application Log: Message Problem Class
            ).
      ENDTRY.

      TRY .
          CALL TRANSFORMATION zusfp_tf_asa_stock_data
            SOURCE XML ls_data
            RESULT asa_data = lt_data.
        CATCH cx_transformation_error INTO DATA(lx_transf).
          lv_text = lx_transf-&gt;get_text( ).
          io_log-&gt;add_message_free_text(
          EXPORTING
            im_text         = lv_text   &quot; Text to Be Displayed
            im_msg_type     = &apos;I&apos;    &quot; Message Type
            im_problemclass = &apos;2&apos;    &quot; Application Log: Message Problem Class
            ).
          CONTINUE.
      ENDTRY.
      lv_valpos = lo_entry-&gt;get_umeth( ).
*              CATCH cx_os_object_not_found.  &quot;
      LOOP AT lt_data ASSIGNING FIELD-SYMBOL(&lt;lw_data&gt;).
        APPEND INITIAL LINE TO lt_view ASSIGNING FIELD-SYMBOL(&lt;lw_view&gt;).
        MOVE-CORRESPONDING &lt;lw_data&gt; TO &lt;lw_view&gt;.
        &lt;lw_view&gt;-uname = lo_entry-&gt;get_uname( ).
        &lt;lw_view&gt;-utzon = lo_entry-&gt;get_utzon( ).
        &lt;lw_view&gt;-hicon = &apos;@96@&apos;.
        &lt;lw_view&gt;-lghdl = lo_entry-&gt;get_lghdl( ).
        CONVERT TIME STAMP lo_entry-&gt;get_aedat( )
           TIME ZONE lo_entry-&gt;get_utzon( )
           INTO DATE &lt;lw_view&gt;-aedat TIME &lt;lw_view&gt;-aetim.
        READ TABLE lt_methods ASSIGNING &lt;lw_method&gt;
         WITH KEY valpos     = lv_valpos
                  ddlanguage = sy-langu.
        IF sy-subrc = 0.
          &lt;lw_view&gt;-dmeth = &lt;lw_method&gt;-ddtext.
        ENDIF.
      ENDLOOP.
    ENDLOOP.

    TRY .
        lo_api-&gt;show_historial( lt_view ).
      CATCH cx_bapi_error INTO lx_error.
        LOOP AT lx_error-&gt;status ASSIGNING &lt;lw_return&gt;.
          io_log-&gt;add_bapi_return( im_bapireturn = &lt;lw_return&gt; ).
        ENDLOOP.
    ENDTRY.
  ENDMETHOD.
  METHOD delete.
    DATA: lo_api      TYPE REF TO lcl_api,
          lo_db       TYPE REF TO lcl_db,
          ls_question TYPE string,
          lr_date     TYPE RANGE OF sydatum,
          lr_timestp  TYPE lcl_db=&gt;yr_timestp,
          lr_uname    TYPE lcl_db=&gt;yr_uname.

    lo_api = NEW lcl_api( ).
    lo_db  = NEW lcl_db( ) .
    ls_question = &apos;Do you confirm the log registers exclusion?&apos;(M05).
    TRY .
        lo_api-&gt;confirm( ls_question ).
      CATCH cx_bapi_error.
        RETURN.
    ENDTRY.

    IF s_ulog IS NOT INITIAL .
      lr_uname = s_ulog[].
      INSERT s_ulog INTO lr_uname INDEX 1.
      SORT lr_uname BY table_line.
      DELETE ADJACENT DUPLICATES FROM lr_uname.
    ENDIF.

    IF s_dlog IS NOT INITIAL.
      lr_date = s_dlog[].
      INSERT s_dlog INTO lr_date INDEX 1.
      SORT lr_date BY table_line.
      DELETE ADJACENT DUPLICATES FROM lr_date.

      LOOP AT lr_date ASSIGNING FIELD-SYMBOL(&lt;lw_date&gt;).
        APPEND INITIAL LINE TO lr_timestp ASSIGNING FIELD-SYMBOL(&lt;lw_timestp&gt;).
        IF &lt;lw_date&gt;-low IS NOT INITIAL.
          CONVERT DATE &lt;lw_date&gt;-low TIME &apos;000000&apos;
             INTO TIME STAMP &lt;lw_timestp&gt;-low TIME ZONE sy-zonlo.
        ENDIF.
        IF &lt;lw_date&gt;-high IS NOT INITIAL.
          CONVERT DATE &lt;lw_date&gt;-high TIME &apos;235959&apos;
             INTO TIME STAMP &lt;lw_timestp&gt;-high TIME ZONE sy-zonlo.
        ENDIF.
        &lt;lw_timestp&gt;-sign = &lt;lw_date&gt;-sign.
        &lt;lw_timestp&gt;-option = &lt;lw_date&gt;-option.
      ENDLOOP.
    ENDIF.


    TRY .
        DATA(lt_lghdl) = lo_db-&gt;get_log_handles(
              ir_timestp      = lr_timestp
              ir_uname        = lr_uname
              ).
        lo_api-&gt;delete_messages( it_lghdl = lt_lghdl ).
        lo_db-&gt;delete_historial(
          EXPORTING
            ir_timestp      = lr_timestp
            ir_uname        = lr_uname
          ).
        MESSAGE s024.
      CATCH cx_sy_sql_error  &quot;
            cx_bapi_error.
        MESSAGE i023 DISPLAY LIKE &apos;E&apos;.
        IF sy-batch = abap_true.
          LEAVE PROGRAM.
        ELSE.
          LEAVE TO CURRENT TRANSACTION.
        ENDIF.
    ENDTRY.
  ENDMETHOD.
ENDCLASS.               &quot;lcl_historial_manager
*&amp;---------------------------------------------------------------------*
*&amp;       Class (Implementation)  lcl_stock_manager
*&amp;---------------------------------------------------------------------*
*        Text
*----------------------------------------------------------------------*
CLASS lcl_stock_manager IMPLEMENTATION.
  METHOD load.
    DATA: lo_item  TYPE REF TO lcl_item,
          lo_api   TYPE REF TO lcl_api,
          lo_db    TYPE REF TO lcl_db,
          lx_error TYPE REF TO cx_bapi_error,
          lt_items TYPE bapi10504stock2_tab,
          lt_hist  TYPE zusfp_sasa_stock_upd_t,
          lv_matnr TYPE matnr.
    FIELD-SYMBOLS: &lt;lw_item&gt;   TYPE bapi10504stock2,
                   &lt;lw_return&gt; TYPE bapiret2.
    DEFINE lm_add_messages.
      LOOP AT lx_error-&gt;status ASSIGNING &lt;lw_return&gt;.
        po_log-&gt;add_bapi_return( &lt;lw_return&gt; ).
      ENDLOOP.
      po_log-&gt;save_to_db( ).
      RETURN.
    END-OF-DEFINITION.

    TRY .
        po_media-&gt;open( ).
        DATA(lo_iterator) = po_media-&gt;get_iterator( ).
      CATCH cx_bapi_error INTO lx_error.
        lm_add_messages.
    ENDTRY.

    IF sy-batch = abap_false.
      IF lo_iterator-&gt;preview( ) = abap_false.
        po_log-&gt;add_message_free_text(
        EXPORTING
          im_text         = &apos;Action cancelled by user.&apos;(M01)   &quot; Text to Be Displayed
          im_msg_type     = &apos;I&apos;    &quot; Message Type
          im_problemclass = &apos;4&apos;    &quot; Application Log: Message Problem Class
          ).
        po_log-&gt;save_to_db( ).
        RETURN.
      ENDIF.
    ENDIF.

    lo_api ?= me-&gt;get_api( ).
    lo_db  ?= me-&gt;get_db( ).
    TRY .
        DATA(lv_logsys) = lo_api-&gt;get_logical_system( ).
      CATCH cx_bapi_error INTO lx_error.
        lm_add_messages.
    ENDTRY.
    WHILE lo_iterator-&gt;hasnext( ) = abap_true.
      lo_item ?= lo_iterator-&gt;next( ).
      APPEND INITIAL LINE TO lt_items ASSIGNING &lt;lw_item&gt;.
      MOVE-CORRESPONDING lo_item-&gt;w_item TO &lt;lw_item&gt;.
      APPEND lo_item-&gt;w_item TO lt_hist.
      &lt;lw_item&gt;-stock_type = 11.
      &lt;lw_item&gt;-version = p_vstk.
      &lt;lw_item&gt;-atpcat = p_cstk.
      &lt;lw_item&gt;-spec_stock_system = lv_logsys.
      TRY .
          &lt;lw_item&gt;-loctype = lo_db-&gt;get_location_type( &lt;lw_item&gt;-location  ).
        CATCH cx_sy_sql_error.
          CLEAR &lt;lw_item&gt;-loctype.
      ENDTRY.
      &lt;lw_item&gt;-storage_location = &apos;aSa&apos;.
      lv_matnr = &lt;lw_item&gt;-product.
      SHIFT lv_matnr RIGHT DELETING TRAILING space.
      OVERLAY lv_matnr WITH &apos;000000000000000000&apos;.
      &lt;lw_item&gt;-product = lv_matnr.
    ENDWHILE.

    po_hist-&gt;set_new( it_data = lt_hist
                      io_log  = po_log  ).
    lo_api-&gt;update_stock( EXPORTING it_items  = lt_items
                          IMPORTING et_return = DATA(lt_return) ).
    READ TABLE lt_return WITH KEY type = &apos;E&apos; TRANSPORTING NO FIELDS.
    IF sy-subrc = 0.
      lo_api-&gt;rollback( ).
    ELSE.
      lo_api-&gt;commit( ).
      po_log-&gt;add_message_free_text(
      EXPORTING
        im_text         = &apos;Stock successfully updated.&apos;(M04)   &quot; Text to Be Displayed
        im_msg_type     = &apos;I&apos;    &quot; Message Type
        im_problemclass = &apos;4&apos;    &quot; Application Log: Message Problem Class
        ).
      po_log-&gt;save_to_db( ).

    ENDIF.
    LOOP AT lt_return ASSIGNING &lt;lw_return&gt;.
      po_log-&gt;add_bapi_return( &lt;lw_return&gt; ).
    ENDLOOP.
    IF sy-subrc = 0.
      po_log-&gt;save_to_db( ).
    ENDIF.

  ENDMETHOD.
  METHOD get_api.
    ro_api = NEW lcl_api( ).
  ENDMETHOD.
  METHOD get_db.
    ro_db = NEW lcl_db( ).
  ENDMETHOD.
ENDCLASS.               &quot;lcl_stock_manager
*&amp;---------------------------------------------------------------------*
*&amp;       Class (Implementation)  lcl_spreadsheet
*&amp;---------------------------------------------------------------------*
*        Text
*----------------------------------------------------------------------*
CLASS lcl_spreadsheet IMPLEMENTATION.
  METHOD open.

    &quot;Read the content of XLSX file
    TRY.
        xs_file_data = cl_openxml_helper=&gt;load_local_file( p_fstksp ).
      CATCH cx_openxml_not_found.
    ENDTRY.
    load_package( ).
    &quot;Read the sheet XML
    xs_sheet_data = load_xml_data( co_sheet_xml ).
    &quot;Read the shared string XML
    xs_shared_data = load_xml_data( co_shared_str_xml ).
  ENDMETHOD.
  METHOD get_iterator.
    DATA: lo_shared_str_dom     TYPE REF TO if_ixml_document,
          lo_shared_str_nodeset TYPE REF TO if_ixml_node,
          lxs_shared_str_xml    TYPE xstring,
          lt_data               TYPE zusfp_sasa_stock_upd_t,
          lt_return             TYPE bapiret2_t,
          ls_message            TYPE string.
    FIELD-SYMBOLS  &lt;lw_return&gt; TYPE bapiret2.

    TRY.
        CALL TRANSFORMATION zusfp_trf_asastk_remnsp
          SOURCE XML me-&gt;xs_shared_data
          RESULT XML lxs_shared_str_xml.
        &quot;Create a nodeset from the shared XML
        CALL FUNCTION &apos;SDIXML_XML_TO_DOM&apos;
          EXPORTING
            xml           = lxs_shared_str_xml
          IMPORTING
            document      = lo_shared_str_dom
          EXCEPTIONS
            invalid_input = 1
            OTHERS        = 2.
        IF sy-subrc = 0.
          lo_shared_str_nodeset = lo_shared_str_dom-&gt;clone( ).
        ENDIF.
        &quot;Pass the SHEET XML and Shared String Nodeset to the main transformation
        CALL TRANSFORMATION zusfp_trf_asastk_import
          PARAMETERS p_shared_string = lo_shared_str_nodeset
          SOURCE XML me-&gt;xs_sheet_data
          RESULT t_data = lt_data.
      CATCH cx_xslt_exception INTO DATA(lx_error).
        MESSAGE e000 WITH lx_error-&gt;if_message~get_text( ) INTO ls_message.
        m_raise_exception.
    ENDTRY.

    DATA(lo_iterator) = NEW lcl_ws_iterator( ).
    LOOP AT lt_data ASSIGNING FIELD-SYMBOL(&lt;lw_data&gt;).
      lo_iterator-&gt;add_item( &lt;lw_data&gt; ).
    ENDLOOP.
    lo_iterator-&gt;initialize( ).

    ro_iterator = lo_iterator.
  ENDMETHOD.
  METHOD free.
  ENDMETHOD.
  METHOD load_package.
    DATA: lt_return  TYPE bapiret2_t,
          ls_message TYPE string.
    FIELD-SYMBOLS  &lt;lw_return&gt; TYPE bapiret2.

    TRY.
        o_package = cl_xlsx_document=&gt;load_document( iv_data = xs_file_data ).
        o_parts = o_package-&gt;get_parts( ).
      CATCH cx_root INTO DATA(lx_error).
        MESSAGE e000 WITH lx_error-&gt;if_message~get_text( ) INTO ls_message.
        m_raise_exception.
    ENDTRY.
  ENDMETHOD. &quot;load_package
  METHOD load_xml_data.
    DATA: lt_return  TYPE bapiret2_t,
          ls_message TYPE string.
    FIELD-SYMBOLS  &lt;lw_return&gt; TYPE bapiret2.

    TRY.
        DATA(lv_uri) = o_parts-&gt;get_part( 2 )-&gt;get_parts( )-&gt;get_part( i_xml_index )-&gt;get_uri( )-&gt;get_uri( ).
        DATA(lo_xml_part_uri) = cl_openxml_parturi=&gt;create_from_partname( lv_uri ).
        DATA(lo_xml_part) = o_package-&gt;get_part_by_uri( lo_xml_part_uri ).
        r_xml_data = lo_xml_part-&gt;get_data( ).
      CATCH cx_root INTO DATA(lx_error).
        MESSAGE e000 WITH lx_error-&gt;if_message~get_text( ) INTO ls_message.
        m_raise_exception.
    ENDTRY.
  ENDMETHOD. &quot;load_xml_data

ENDCLASS.               &quot;lcl_spreadsheet
*&amp;---------------------------------------------------------------------*
*&amp;       Class (Implementation)  lcl_ws_iterator
*&amp;---------------------------------------------------------------------*
*        Text
*----------------------------------------------------------------------*
CLASS lcl_ws_iterator IMPLEMENTATION.
  METHOD add_item.
    APPEND iw_item TO t_data.
  ENDMETHOD.
  METHOD initialize.
    SORT t_data BY table_line.
  ENDMETHOD.
  METHOD lif_iterator~hasnext.

    r_result = abap_false.
    IF lines( me-&gt;t_data ) &gt; 0.
      r_result = abap_true.
    ENDIF.
  ENDMETHOD.
  METHOD lif_iterator~next.

    READ TABLE me-&gt;t_data ASSIGNING FIELD-SYMBOL(&lt;lw_item&gt;) INDEX 1.
    IF sy-subrc = 0.
      DATA(lo_item) = NEW lcl_item( &lt;lw_item&gt; ).
      ro_object = lo_item.
      DELETE me-&gt;t_data INDEX 1.
    ENDIF.
  ENDMETHOD.
  METHOD lif_iterator~preview.
    DATA  lo_api TYPE REF TO lcl_api.

    r_ok = abap_false.
    lo_api ?= me-&gt;get_api( ).
    TRY .
        r_ok = lo_api-&gt;show_pop_up( me-&gt;t_data ).
      CATCH cx_bapi_error.
        RETURN.
    ENDTRY.
  ENDMETHOD.
  METHOD get_api.
    ro_api = NEW lcl_api( ).
  ENDMETHOD.
ENDCLASS.               &quot;lcl_ws_iterator
*&amp;---------------------------------------------------------------------*
*&amp;       Class (Implementation)  lcl_item
*&amp;---------------------------------------------------------------------*
*        Text
*----------------------------------------------------------------------*
CLASS lcl_item IMPLEMENTATION.
  METHOD constructor.
    me-&gt;w_item = pw_item.
  ENDMETHOD.
ENDCLASS.               &quot;lcl_item
*&amp;---------------------------------------------------------------------*
*&amp;       Class (Implementation)  lcl_api
*&amp;---------------------------------------------------------------------*
*        Text
*----------------------------------------------------------------------*
CLASS lcl_api IMPLEMENTATION.
  METHOD get_logical_system.
    DATA: ls_message TYPE string,
          lt_return  TYPE bapiret2_t.
    FIELD-SYMBOLS  &lt;lw_return&gt; TYPE bapiret2.

    CLEAR r_logsys.
    CALL FUNCTION &apos;OWN_LOGICAL_SYSTEM_GET&apos;
      IMPORTING
        own_logical_system             = r_logsys
      EXCEPTIONS
        own_logical_system_not_defined = 1
        OTHERS                         = 2.
    IF sy-subrc &lt;&gt; 0.
      MESSAGE
           ID sy-msgid
         TYPE sy-msgty
       NUMBER sy-msgno
         WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4
         INTO ls_message.
      m_raise_exception.
    ENDIF.
  ENDMETHOD.
  METHOD get_methods.
    CONSTANTS lc_zusfp_upd_stk_method TYPE domname VALUE &apos;ZUSFP_UPD_STK_METHOD&apos;.
    DATA: lt_methods TYPE STANDARD TABLE OF dd07v,
          ls_message TYPE string,
          lt_return  TYPE bapiret2_t.
    FIELD-SYMBOLS  &lt;lw_return&gt; TYPE bapiret2.

    CALL FUNCTION &apos;DD_DOMA_GET&apos;
      EXPORTING
        domain_name   = lc_zusfp_upd_stk_method
*       GET_STATE     = &apos;M  &apos;
*       LANGU         = SY-LANGU
*       PRID          = 0
*       WITHTEXT      = &apos;X&apos;
*     IMPORTING
*       DD01V_WA_A    =
*       DD01V_WA_N    =
*       GOT_STATE     =
      TABLES
        dd07v_tab_a   = lt_methods
        dd07v_tab_n   = rt_methods
      EXCEPTIONS
        illegal_value = 1
        op_failure    = 2
        OTHERS        = 3.
    IF sy-subrc &lt;&gt; 0.
      m_raise_exception.
    ENDIF.
  ENDMETHOD.
  METHOD show_pop_up.

    r_bool = abap_false.
    TRY .
        CALL FUNCTION &apos;ZUSFP_LIST_WITH_OK_AND_CANCEL&apos;
          EXPORTING
            i_start_column = 40
            i_start_line   = 3
            i_end_column   = 72
            i_end_line     = 20
            it_data        = it_data
          IMPORTING
            e_option       = r_bool.
      CATCH cx_bapi_error INTO DATA(lx_error).
        RAISE EXCEPTION lx_error.
    ENDTRY.
  ENDMETHOD.
  METHOD confirm.
    DATA: lv_answer(1) TYPE c,
          lt_return    TYPE bapiret2_t,
          ls_message   TYPE string.
    FIELD-SYMBOLS  &lt;lw_return&gt; TYPE bapiret2.

    CALL FUNCTION &apos;POPUP_TO_CONFIRM&apos;
      EXPORTING
        text_question  = i_question
      IMPORTING
        answer         = lv_answer
      EXCEPTIONS
        text_not_found = 1
        OTHERS         = 2.
    IF sy-subrc &lt;&gt; 0.
      m_raise_exception.
    ENDIF.
    IF lv_answer &lt;&gt; &apos;1&apos;.
      MESSAGE i022 INTO ls_message.
      m_raise_exception.
    ENDIF.

  ENDMETHOD.
  METHOD show_historial.

    TRY .
        CALL FUNCTION &apos;ZUSFP_HISTORIAL_POP_UP&apos;
          EXPORTING
            i_start_column = 20
            i_start_line   = 3
            i_end_column   = 95
            i_end_line     = 20
            it_data        = it_data.
      CATCH cx_bapi_error INTO DATA(lx_error).
        RAISE EXCEPTION lx_error.
    ENDTRY.
  ENDMETHOD.
  METHOD update_stock.

    TRY .
        DATA(lv_logsys) = me-&gt;get_logical_system( ).
      CATCH cx_bapi_error INTO DATA(lx_error).
        et_return = lx_error-&gt;status.
    ENDTRY.

    CALL FUNCTION &apos;BAPI_STSRVAPS_SAVEMULTI2&apos;
      EXPORTING
        logical_system = lv_logsys
*       COMMIT_CONTROL = &apos;E&apos;
*       PLANNING_MODE_USAGE                 =
*       PLANNING_VERSION                    = &apos;000&apos;
*       NO_AUTOMATIC_VERSION_CREATION       =
      TABLES
        stock          = it_items
*       CLASSVALUESCHAR                     =
*       CLASSVALUESNUM =
*       CLASSVALUESCURR                     =
        return         = et_return
*       EXTENSION_IN   =
*       FCS_REDUCTION  =
      .
  ENDMETHOD.
  METHOD commit.
    CALL FUNCTION &apos;BAPI_TRANSACTION_COMMIT&apos;
      EXPORTING
        wait = &apos;X&apos;
*     IMPORTING
*       RETURN        =
      .
  ENDMETHOD.
  METHOD rollback.
    CALL FUNCTION &apos;BAPI_TRANSACTION_ROLLBACK&apos;
*     IMPORTING
*       RETURN        =
      .
  ENDMETHOD.
  METHOD delete_messages.
    DATA: lt_return  TYPE bapiret2_t,
          ls_message TYPE string.
    FIELD-SYMBOLS  &lt;lw_return&gt; TYPE bapiret2.

    CALL FUNCTION &apos;BAL_DB_DELETE&apos;
      EXPORTING
        i_t_log_handle    = it_lghdl
      EXCEPTIONS
        no_logs_specified = 1
        OTHERS            = 2.
    IF sy-subrc &lt;&gt; 0.
      m_raise_exception.
    ENDIF.
  ENDMETHOD.
ENDCLASS.               &quot;lcl_api


*&amp;---------------------------------------------------------------------*
*&amp;       Class (Implementation)  lcl_db
*&amp;---------------------------------------------------------------------*
*        Text
*----------------------------------------------------------------------*
CLASS lcl_db IMPLEMENTATION.
  METHOD get_location_type.

    SELECT loctype
      FROM /sapapo/loc
        UP TO 1 ROWS
      INTO r_loctype
     WHERE locno = i_locno.
    ENDSELECT.
    IF sy-subrc &lt;&gt; 0.
      RAISE EXCEPTION TYPE cx_sy_sql_error.
    ENDIF.
  ENDMETHOD.
  METHOD get_log_handles.

    SELECT lghdl
      FROM zusfpt_asa_stkup
      INTO TABLE rt_lghdl
     WHERE aedat IN ir_timestp
       AND uname IN ir_uname.
    IF sy-subrc &lt;&gt; 0.
      RAISE EXCEPTION TYPE cx_sy_sql_error.
    ENDIF.
  ENDMETHOD.
  METHOD delete_historial.

    DELETE FROM zusfpt_asa_stkup
     WHERE aedat IN ir_timestp
       AND uname IN ir_uname.
    IF sy-subrc &lt;&gt; 0.
      RAISE EXCEPTION TYPE cx_sy_sql_error.
    ENDIF.
  ENDMETHOD.
ENDCLASS.               &quot;lcl_db</source>
 </PROG>
 <PROG NAME="ZUSFPR_STOCK_CREATION" VARCL="X" SUBC="1" APPL="Z" RSTAT="K" RMAND="050" RLOAD="E" FIXPT="X" UCCHECK="X">
  <textPool>
   <language SPRAS="E">
    <textElement ID="I" KEY="M01" ENTRY="Action cancelled by user." LENGTH="50 "/>
    <textElement ID="I" KEY="M02" ENTRY="Version and Category are obligatory for Stock Updating." LENGTH="110 "/>
    <textElement ID="I" KEY="M03" ENTRY="The file path and name are obligatory for Stock Updating through spreadsheet." LENGTH="132 "/>
    <textElement ID="I" KEY="M04" ENTRY="Stock successfully updated." LENGTH="54 "/>
    <textElement ID="I" KEY="M05" ENTRY="Do you confirm the log registers exclusion?" LENGTH="86 "/>
    <textElement ID="I" KEY="T00" ENTRY="Running Options" LENGTH="25 "/>
    <textElement ID="I" KEY="T01" ENTRY="Stock updating" LENGTH="24 "/>
    <textElement ID="I" KEY="T02" ENTRY="Log Operations" LENGTH="21 "/>
    <textElement ID="I" KEY="T03" ENTRY="Exclusion Parameters" LENGTH="40 "/>
    <textElement ID="I" KEY="T04" ENTRY="aSa Stock Updating" LENGTH="28 "/>
    <textElement ID="I" KEY="T05" ENTRY="Upload spreadsheet" LENGTH="28 "/>
    <textElement ID="R" ENTRY="Stock creation from aSa Interface" LENGTH="33 "/>
    <textElement ID="S" KEY="P_CSTK" ENTRY="D       ." LENGTH="16 "/>
    <textElement ID="S" KEY="P_DLOG" ENTRY="        Delete Log" LENGTH="26 "/>
    <textElement ID="S" KEY="P_FSTKSP" ENTRY="        File Path" LENGTH="17 "/>
    <textElement ID="S" KEY="P_ISTK" ENTRY="        aSa Interface" LENGTH="26 "/>
    <textElement ID="S" KEY="P_LGMN" ENTRY="        Log Management" LENGTH="22 "/>
    <textElement ID="S" KEY="P_SSTK" ENTRY="        Spreadsheet" LENGTH="26 "/>
    <textElement ID="S" KEY="P_STCK" ENTRY="        Stock Updating" LENGTH="26 "/>
    <textElement ID="S" KEY="P_VLOG" ENTRY="        View Log" LENGTH="26 "/>
    <textElement ID="S" KEY="P_VSTK" ENTRY="        Version" LENGTH="23 "/>
    <textElement ID="S" KEY="SLSTKIF" ENTRY="D       ." LENGTH="16 "/>
    <textElement ID="S" KEY="SPSTKIF" ENTRY="        Product" LENGTH="20 "/>
    <textElement ID="S" KEY="S_DLOG" ENTRY="        Date" LENGTH="12 "/>
    <textElement ID="S" KEY="S_LLOG" ENTRY="D       ." LENGTH="16 "/>
    <textElement ID="S" KEY="S_ULOG" ENTRY="D       ." LENGTH="17 "/>
   </language>
  </textPool>
  <source>************************************************************************
* PROGRAM ID           : ZUSFPR_STOCK_CREATION                         *
* PROGRAM TITLE        : FABRICATION - Stock Creation                  *
* AUTHOR               : Rafael Guares Quadros (META)                  *
* SUPPLIER             : GERDAU AÇOS LONGOS S.A.                       *
* DATE                 : 11/02/2016                                    *
* DEVELOPMENT ID       : Requirement 98325                             *
* CHANGE REQUEST (CTS) : SG1K905555                                    *
* DESCRIPTION          : Stock creation with data provided by aSa      *
*                        interface or from spreadsheet data.           *
*======================================================================*
* COPIED FROM         : (CLONED PROGRAM)                               *
* TITLE               : (PROGRAM TITLE)                                *
* OTHER RELATED OBJ   : (OBJECT NAMES)                                 *
*======================================================================*
* CHANGE HISTORY LOG                                                   *
*----------------------------------------------------------------------*
* MOD. NO.|  DATE    | NAME   | CORRECTION NUMBER | CHANGE REFERENCE # *
*----------------------------------------------------------------------*

INCLUDE: zusfpr_stock_creation_top                ,  &quot; global Data
         zusfpr_stock_creation_f01                ,  &quot; FORM-Routines
         zusfpr_stock_creation_c01                .  &quot; Classes Implementations
* INCLUDE ZUSFPR_STOCK_CREATION_O01               .  &quot; PBO-Modules
* INCLUDE ZUSFPR_STOCK_CREATION_I01               .  &quot; PAI-Modules
* INCLUDE ZUSFPR_STOCK_CREATION_F01               .  &quot; FORM-Routines

AT SELECTION-SCREEN OUTPUT.
  PERFORM organize_selection_screen.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_fstksp.
  IF p_sstk = abap_true.
    s_title  = &apos;Upload spreadsheet&apos;(T05).
    p_fstksp = cl_openxml_helper=&gt;browse_local_file_open(
                              iv_title      = s_title
                              iv_filename   = &apos;&apos;
                              iv_extpattern = &apos;All files(*.*)|*.*&apos; ).
  ENDIF.

START-OF-SELECTION.
  IF p_stck = abap_true AND ( p_vstk IS INITIAL OR p_cstk IS INITIAL ).
    MESSAGE &apos;Version and Category are obligatory for Stock Updating.&apos;(m02)
       TYPE &apos;I&apos; DISPLAY LIKE &apos;E&apos;.
    IF sy-batch = abap_false.
      LEAVE TO CURRENT TRANSACTION.
    ELSE.
      LEAVE PROGRAM.
    ENDIF.
  ENDIF.

  IF p_sstk = abap_true AND p_fstksp IS INITIAL.
    MESSAGE &apos;The file path and name are obligatory for Stock Updating through spreadsheet.&apos;(m03)
       TYPE &apos;I&apos; DISPLAY LIKE &apos;E&apos;.
    IF sy-batch = abap_false.
      LEAVE TO CURRENT TRANSACTION.
    ELSE.
      LEAVE PROGRAM.
    ENDIF.
  ENDIF.

  o_main = NEW lcl_main( ).

END-OF-SELECTION.
  o_main-&gt;run( ).
  IF sy-batch = abap_false.
    o_main-&gt;show_messages( ).
  ENDIF.
  o_main-&gt;house_keeping( ).
  FREE o_main.</source>
 </PROG>
 <PROG NAME="ZUSFPR_STOCK_CREATION_C01" VARCL="X" SUBC="I" APPL="Z" RSTAT="K" RMAND="050" RLOAD="E" UCCHECK="X">
  <textPool>
   <language SPRAS="E">
    <textElement ID="R" ENTRY="Include ZUSFPR_STOCK_CREATION_C01" LENGTH="33 "/>
   </language>
  </textPool>
  <source>*&amp;---------------------------------------------------------------------*
*&amp;  Include           ZUSFPR_STOCK_CREATION_C01
*&amp;---------------------------------------------------------------------*
CLASS lcl_main IMPLEMENTATION.
  METHOD constructor.
    DATA: lt_return  TYPE bapiret2_t,
          ls_message TYPE string,
          lv_timestp TYPE tzntstmps.
    FIELD-SYMBOLS  &lt;lw_return&gt; TYPE bapiret2.

    CONVERT DATE sy-datlo TIME sy-timlo
       INTO TIME STAMP lv_timestp TIME ZONE sy-zonlo.
    CONVERT TIME STAMP lv_timestp TIME ZONE sy-zonlo
       INTO DATE DATA(lv_date) TIME DATA(lv_time).
    TRY .
        o_log = NEW cl_ilm_log( im_extnumber = sy-repid &amp;&amp; sy-uname &amp;&amp;
                                               lv_date  &amp;&amp; lv_time  &amp;&amp;
                                               sy-zonlo
                                im_object    = c_log_object
                                im_title = &apos;aSa Stock Updating&apos;(t04) ).
      CATCH cx_ilm.
        MESSAGE e022 INTO ls_message.
        m_raise_exception.
    ENDTRY.
    o_media     = lcl_media=&gt;get_media( ).
    o_stock     = NEW lcl_stock_manager( ).
    o_historial = NEW lcl_historial_manager( lv_timestp ).
  ENDMETHOD.
  METHOD run.

    CASE abap_true.
      WHEN p_stck.
        o_stock-&gt;load( po_media = o_media
                       po_log   = o_log
                       po_hist  = o_historial ).
      WHEN p_lgmn.
        IF p_vlog = abap_true.
          lcl_historial_manager=&gt;shows( o_log ).
        ELSE.
          lcl_historial_manager=&gt;delete( ).
        ENDIF.
      WHEN OTHERS.
    ENDCASE.
  ENDMETHOD.
  METHOD show_messages.

    DATA(lw_statistics) = o_log-&gt;entries_in_log( ).
    IF lw_statistics-msg_cnt_al &gt; 0.
      o_log-&gt;show_log_fullscreen( ).
    ENDIF.
  ENDMETHOD.
  METHOD house_keeping.
    FREE: o_log, o_media, o_stock, o_historial.
  ENDMETHOD.
  METHOD get_field_value.
    DATA: lt_dynpfields TYPE dynpread_tabtype,
          lw_dynpfield  TYPE dynpread.

    MOVE p_fieldname TO lw_dynpfield-fieldname.
    APPEND lw_dynpfield TO lt_dynpfields.

    CALL FUNCTION &apos;DYNP_VALUES_READ&apos;
      EXPORTING
        dyname               = sy-repid
        dynumb               = sy-dynnr
      TABLES
        dynpfields           = lt_dynpfields[]
      EXCEPTIONS
        invalid_abapworkarea = 1
        invalid_dynprofield  = 2
        invalid_dynproname   = 3
        invalid_dynpronummer = 4
        invalid_request      = 5
        no_fielddescription  = 6
        invalid_parameter    = 7
        undefind_error       = 8
        double_conversion    = 9
        stepl_not_found      = 10
        OTHERS               = 11.
    IF sy-subrc &lt;&gt; 0.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
      WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.

    READ TABLE lt_dynpfields INTO lw_dynpfield
    WITH KEY fieldname = p_fieldname.
    IF sy-subrc = 0.
      r_fvalue = lw_dynpfield-fieldvalue.
    ENDIF.
  ENDMETHOD.                    &quot;get_field_value
ENDCLASS.
CLASS lcl_media IMPLEMENTATION.
  METHOD get_media.
    CASE abap_true.
      WHEN p_istk.
        TRY .
            DATA(lo_webservice) = NEW lcl_webservice( ).
          CATCH cx_bapi_error INTO DATA(lx_error).
            RAISE EXCEPTION lx_error.
        ENDTRY.
        ro_media = lo_webservice.
      WHEN p_sstk.
        DATA(lo_spreadsheet) = NEW lcl_spreadsheet( ).
        ro_media = lo_spreadsheet.
    ENDCASE.
  ENDMETHOD.
ENDCLASS.
CLASS lcl_webservice IMPLEMENTATION.
  METHOD constructor.
    DATA: lt_return  TYPE bapiret2_t,
          ls_message TYPE string.
    FIELD-SYMBOLS  &lt;lw_return&gt; TYPE bapiret2.


    super-&gt;constructor( ).
    TRY .
        me-&gt;o_proxy = NEW zusfpco_si_get_raw_material_in( ).
      CATCH cx_ai_system_fault INTO DATA(lx_error).
        MESSAGE e000 WITH lx_error-&gt;if_message~get_text( ) INTO ls_message.
        m_raise_exception.
    ENDTRY.
  ENDMETHOD.
  METHOD open.
    DATA: lw_request TYPE zusfpmt_get_raw_material_sap,
          lt_return  TYPE bapiret2_t,
          ls_message TYPE string.
    FIELD-SYMBOLS  &lt;lw_return&gt; TYPE bapiret2.

    TRY.
        o_proxy-&gt;si_get_raw_material_inventoryo(
          EXPORTING
            output = lw_request
          IMPORTING
            input = w_data ).
      CATCH cx_ai_system_fault INTO DATA(lx_error).
        MESSAGE e000 WITH lx_error-&gt;if_message~get_text( )
           INTO ls_message.
        m_raise_exception.
    ENDTRY.
  ENDMETHOD.
  METHOD get_iterator.
    DATA lw_line TYPE zusfp_sasa_stock_upd.

    DATA(lo_iterator) = NEW lcl_ws_iterator( ).
    LOOP AT me-&gt;w_data-mt_get_raw_material_sap_respon-raw_material
      ASSIGNING FIELD-SYMBOL(&lt;lw_raw_material&gt;).
      lw_line-location = &lt;lw_raw_material&gt;-sap_plant.
      lw_line-product = &lt;lw_raw_material&gt;-sap_sku.
      lw_line-quantity = &lt;lw_raw_material&gt;-weight.
      IF lw_line-product IN spstkif AND &quot;List filtering
         lw_line-location IN slstkif.
        lo_iterator-&gt;add_item( lw_line ).
      ENDIF.
    ENDLOOP.
    lo_iterator-&gt;initialize( ).

    ro_iterator = lo_iterator.
  ENDMETHOD.
  METHOD free.
    FREE o_proxy.
  ENDMETHOD.
ENDCLASS.


*&amp;---------------------------------------------------------------------*
*&amp;       Class (Implementation)  lcl_historial_manager
*&amp;---------------------------------------------------------------------*
*        Text
*----------------------------------------------------------------------*
CLASS lcl_historial_manager IMPLEMENTATION.
  METHOD constructor.

    me-&gt;timestp = i_timestp.
  ENDMETHOD.
  METHOD set_new.
    DATA: lo_pers_obj  TYPE REF TO zcl_usfp_t_asa_stkup,
          lv_method    TYPE zusfp_asa_upd_stk_method,
          lv_text(200) TYPE c,
          ls_data      TYPE string,
          lxs_data     TYPE xstring.

    TRY.
        lo_pers_obj = zca_usfp_t_asa_stkup=&gt;agent-&gt;create_persistent( i_aedat = me-&gt;timestp
                                                                      i_uname = sy-uname ).
      CATCH cx_os_object_existing INTO DATA(lx_exist).
        lv_text = lx_exist-&gt;get_text( ).
        io_log-&gt;add_message_free_text(
          EXPORTING
            im_text         = lv_text   &quot; Text to Be Displayed
            im_msg_type     = &apos;I&apos;    &quot; Message Type
            im_problemclass = &apos;1&apos;    &quot; Application Log: Message Problem Class
          ).
        RETURN.
    ENDTRY.

    TRY .
        CALL TRANSFORMATION zusfp_tf_asa_stock_data
          SOURCE asa_data = it_data
          RESULT XML ls_data.
      CATCH cx_transformation_error INTO DATA(lx_transf).
        lv_text = lx_transf-&gt;get_text( ).
        io_log-&gt;add_message_free_text(
          EXPORTING
            im_text         = lv_text   &quot; Text to Be Displayed
            im_msg_type     = &apos;I&apos;    &quot; Message Type
            im_problemclass = &apos;2&apos;    &quot; Application Log: Message Problem Class
          ).
    ENDTRY.

    IF ls_data IS NOT INITIAL.
      TRY .
          NEW cl_abap_gzip( )-&gt;compress_text(
            EXPORTING
              text_in                    =   ls_data  &quot; Input text
*                text_in_len                = -1    &quot; Input Length
*                compress_level             = 6    &quot; Level of Compression
*                conversion                 = &apos;DEFAULT&apos;    &quot; Conversion to UTF8 (UC)
            IMPORTING
              gzip_out                   =  lxs_data   &quot; Compressed output
*                gzip_out_len               =     &quot; Output Length
              ).
*              CATCH cx_parameter_invalid_range.    &quot;
*              CATCH cx_sy_buffer_overflow.    &quot;
*              CATCH cx_sy_conversion_codepage.    &quot;
*              CATCH cx_sy_compression_error.    &quot;
        CATCH cx_root INTO DATA(lx_root).
          lv_text = lx_root-&gt;get_text( ).
          io_log-&gt;add_message_free_text(
            EXPORTING
              im_text         = lv_text   &quot; Text to Be Displayed
              im_msg_type     = &apos;I&apos;    &quot; Message Type
              im_problemclass = &apos;2&apos;    &quot; Application Log: Message Problem Class
            ).
      ENDTRY.
    ENDIF.

    lo_pers_obj-&gt;set_utzon( i_utzon = sy-zonlo ).
*      CATCH cx_os_object_not_found.    &quot;
    IF p_istk = abap_true.
      lv_method = 1.
    ELSE.
      lv_method = 2.
    ENDIF.
    lo_pers_obj-&gt;set_umeth( i_umeth = lv_method ).
*      CATCH cx_os_object_not_found.    &quot;
    lo_pers_obj-&gt;set_adata( i_adata = lxs_data ).
    lo_pers_obj-&gt;set_lghdl( i_lghdl = io_log-&gt;g_log_handle  ).
*      CATCH cx_os_object_not_found.    &quot;
    COMMIT WORK AND WAIT.
  ENDMETHOD.
  METHOD shows.
    DATA: lv_text(200) TYPE c,
          lt_view      TYPE zusfp_sasa_hist_view_t,
          lt_data      TYPE zusfp_sasa_stock_upd_t,
          ls_data      TYPE string,
          lxs_data     TYPE xstring,
          lv_valpos    TYPE valpos,
          lo_api       TYPE REF TO lcl_api,
          lo_entry     TYPE REF TO zcl_usfp_t_asa_stkup,
          lx_error     TYPE REF TO cx_bapi_error,
          lx_root      TYPE REF TO cx_root.
    FIELD-SYMBOLS: &lt;lw_method&gt; TYPE dd07v,
                   &lt;lw_return&gt; TYPE bapiret2.

    lo_api = NEW lcl_api( ).
    TRY .
        DATA(lt_methods) = lo_api-&gt;get_methods( ).
      CATCH cx_bapi_error INTO lx_error.
        LOOP AT lx_error-&gt;status ASSIGNING &lt;lw_return&gt;.
          io_log-&gt;add_bapi_return( im_bapireturn = &lt;lw_return&gt; ).
        ENDLOOP.
    ENDTRY.
    TRY .
        DATA(lo_query_manager) = cl_os_system=&gt;get_query_manager( ).
        DATA(lo_query) = lo_query_manager-&gt;create_query(
*                    i_filter              =
*                    i_ordering            =
*                    i_parameters          =
              ).
*                  CATCH cx_os_class_not_found.  &quot;
        DATA(lt_entries) = zca_usfp_t_asa_stkup=&gt;agent-&gt;if_os_ca_persistency~get_persistent_by_query(
                i_query                = lo_query
*                         i_parameter_tab        =
*                         i_par1                 =
*                         i_par2                 =
*                         i_par3                 =
*                         i_subclasses           = OSCON_FALSE
*                         i_upto                 = 0
*                         i_options              = IF_OS_QUERY_OPTIONS=&gt;DEFAULT_OPTIONS
                ).
*                       CATCH cx_os_object_not_found.  &quot;
*                       CATCH cx_os_query_error.  &quot;
      CATCH cx_root INTO lx_root.
        lv_text = lx_root-&gt;get_text( ).
        io_log-&gt;add_message_free_text(
          EXPORTING
            im_text         = lv_text   &quot; Text to Be Displayed
            im_msg_type     = &apos;I&apos;    &quot; Message Type
            im_problemclass = &apos;2&apos;    &quot; Application Log: Message Problem Class
          ).
        io_log-&gt;save_to_db(
*            IMPORTING
*              e_lognumber =     &quot; Application log: log number
        ).
    ENDTRY.

    LOOP AT lt_entries ASSIGNING FIELD-SYMBOL(&lt;lo_line&gt;).
      lo_entry ?= &lt;lo_line&gt;.
      lxs_data = lo_entry-&gt;get_adata( ).
      CLEAR lt_data.
*             CATCH cx_os_object_not_found.  &quot;
      TRY .
          NEW cl_abap_gzip( )-&gt;decompress_text(
            EXPORTING
              gzip_in                    =  lxs_data   &quot; Input of Zipped Data
*            gzip_in_len                = -1    &quot; Input Length
*            conversion                 = &apos;DEFAULT&apos;    &quot; Conversion to UTF8 (UC)
            IMPORTING
              text_out                   =  ls_data   &quot; Decompessed Output
*            text_out_len               =     &quot; Output Length
            ).
*          CATCH cx_parameter_invalid_range.    &quot;
*          CATCH cx_sy_buffer_overflow.    &quot;
*          CATCH cx_sy_conversion_codepage.    &quot;
*          CATCH cx_sy_compression_error.    &quot;
        CATCH cx_root INTO lx_root.
          lv_text = lx_root-&gt;get_text( ).
          io_log-&gt;add_message_free_text(
          EXPORTING
            im_text         = lv_text   &quot; Text to Be Displayed
            im_msg_type     = &apos;I&apos;    &quot; Message Type
            im_problemclass = &apos;2&apos;    &quot; Application Log: Message Problem Class
            ).
      ENDTRY.

      TRY .
          CALL TRANSFORMATION zusfp_tf_asa_stock_data
            SOURCE XML ls_data
            RESULT asa_data = lt_data.
        CATCH cx_transformation_error INTO DATA(lx_transf).
          lv_text = lx_transf-&gt;get_text( ).
          io_log-&gt;add_message_free_text(
          EXPORTING
            im_text         = lv_text   &quot; Text to Be Displayed
            im_msg_type     = &apos;I&apos;    &quot; Message Type
            im_problemclass = &apos;2&apos;    &quot; Application Log: Message Problem Class
            ).
          CONTINUE.
      ENDTRY.
      lv_valpos = lo_entry-&gt;get_umeth( ).
*              CATCH cx_os_object_not_found.  &quot;
      LOOP AT lt_data ASSIGNING FIELD-SYMBOL(&lt;lw_data&gt;).
        APPEND INITIAL LINE TO lt_view ASSIGNING FIELD-SYMBOL(&lt;lw_view&gt;).
        MOVE-CORRESPONDING &lt;lw_data&gt; TO &lt;lw_view&gt;.
        &lt;lw_view&gt;-uname = lo_entry-&gt;get_uname( ).
        &lt;lw_view&gt;-utzon = lo_entry-&gt;get_utzon( ).
        &lt;lw_view&gt;-hicon = &apos;@96@&apos;.
        &lt;lw_view&gt;-lghdl = lo_entry-&gt;get_lghdl( ).
        CONVERT TIME STAMP lo_entry-&gt;get_aedat( )
           TIME ZONE lo_entry-&gt;get_utzon( )
           INTO DATE &lt;lw_view&gt;-aedat TIME &lt;lw_view&gt;-aetim.
        READ TABLE lt_methods ASSIGNING &lt;lw_method&gt;
         WITH KEY valpos     = lv_valpos
                  ddlanguage = sy-langu.
        IF sy-subrc = 0.
          &lt;lw_view&gt;-dmeth = &lt;lw_method&gt;-ddtext.
        ENDIF.
      ENDLOOP.
    ENDLOOP.

    TRY .
        lo_api-&gt;show_historial( lt_view ).
      CATCH cx_bapi_error INTO lx_error.
        LOOP AT lx_error-&gt;status ASSIGNING &lt;lw_return&gt;.
          io_log-&gt;add_bapi_return( im_bapireturn = &lt;lw_return&gt; ).
        ENDLOOP.
    ENDTRY.
  ENDMETHOD.
  METHOD delete.
    DATA: lo_api      TYPE REF TO lcl_api,
          lo_db       TYPE REF TO lcl_db,
          ls_question TYPE string,
          lr_date     TYPE RANGE OF sydatum,
          lr_timestp  TYPE lcl_db=&gt;yr_timestp,
          lr_uname    TYPE lcl_db=&gt;yr_uname.

    lo_api = NEW lcl_api( ).
    lo_db  = NEW lcl_db( ) .
    ls_question = &apos;Do you confirm the log registers exclusion?&apos;(M05).
    TRY .
        lo_api-&gt;confirm( ls_question ).
      CATCH cx_bapi_error.
        RETURN.
    ENDTRY.

    IF s_ulog IS NOT INITIAL .
      lr_uname = s_ulog[].
      INSERT s_ulog INTO lr_uname INDEX 1.
      SORT lr_uname BY table_line.
      DELETE ADJACENT DUPLICATES FROM lr_uname.
    ENDIF.

    IF s_dlog IS NOT INITIAL.
      lr_date = s_dlog[].
      INSERT s_dlog INTO lr_date INDEX 1.
      SORT lr_date BY table_line.
      DELETE ADJACENT DUPLICATES FROM lr_date.

      LOOP AT lr_date ASSIGNING FIELD-SYMBOL(&lt;lw_date&gt;).
        APPEND INITIAL LINE TO lr_timestp ASSIGNING FIELD-SYMBOL(&lt;lw_timestp&gt;).
        IF &lt;lw_date&gt;-low IS NOT INITIAL.
          CONVERT DATE &lt;lw_date&gt;-low TIME &apos;000000&apos;
             INTO TIME STAMP &lt;lw_timestp&gt;-low TIME ZONE sy-zonlo.
        ENDIF.
        IF &lt;lw_date&gt;-high IS NOT INITIAL.
          CONVERT DATE &lt;lw_date&gt;-high TIME &apos;235959&apos;
             INTO TIME STAMP &lt;lw_timestp&gt;-high TIME ZONE sy-zonlo.
        ENDIF.
        &lt;lw_timestp&gt;-sign = &lt;lw_date&gt;-sign.
        &lt;lw_timestp&gt;-option = &lt;lw_date&gt;-option.
      ENDLOOP.
    ENDIF.


    TRY .
        DATA(lt_lghdl) = lo_db-&gt;get_log_handles(
              ir_timestp      = lr_timestp
              ir_uname        = lr_uname
              ).
        lo_api-&gt;delete_messages( it_lghdl = lt_lghdl ).
        lo_db-&gt;delete_historial(
          EXPORTING
            ir_timestp      = lr_timestp
            ir_uname        = lr_uname
          ).
        MESSAGE s024.
      CATCH cx_sy_sql_error  &quot;
            cx_bapi_error.
        MESSAGE i023 DISPLAY LIKE &apos;E&apos;.
        IF sy-batch = abap_true.
          LEAVE PROGRAM.
        ELSE.
          LEAVE TO CURRENT TRANSACTION.
        ENDIF.
    ENDTRY.
  ENDMETHOD.
ENDCLASS.               &quot;lcl_historial_manager
*&amp;---------------------------------------------------------------------*
*&amp;       Class (Implementation)  lcl_stock_manager
*&amp;---------------------------------------------------------------------*
*        Text
*----------------------------------------------------------------------*
CLASS lcl_stock_manager IMPLEMENTATION.
  METHOD load.
    DATA: lo_item  TYPE REF TO lcl_item,
          lo_api   TYPE REF TO lcl_api,
          lo_db    TYPE REF TO lcl_db,
          lx_error TYPE REF TO cx_bapi_error,
          lt_items TYPE bapi10504stock2_tab,
          lt_hist  TYPE zusfp_sasa_stock_upd_t,
          lv_matnr TYPE matnr.
    FIELD-SYMBOLS: &lt;lw_item&gt;   TYPE bapi10504stock2,
                   &lt;lw_return&gt; TYPE bapiret2.
    DEFINE lm_add_messages.
      LOOP AT lx_error-&gt;status ASSIGNING &lt;lw_return&gt;.
        po_log-&gt;add_bapi_return( &lt;lw_return&gt; ).
      ENDLOOP.
      po_log-&gt;save_to_db( ).
      RETURN.
    END-OF-DEFINITION.

    TRY .
        po_media-&gt;open( ).
        DATA(lo_iterator) = po_media-&gt;get_iterator( ).
      CATCH cx_bapi_error INTO lx_error.
        lm_add_messages.
    ENDTRY.

    IF sy-batch = abap_false.
      IF lo_iterator-&gt;preview( ) = abap_false.
        po_log-&gt;add_message_free_text(
        EXPORTING
          im_text         = &apos;Action cancelled by user.&apos;(M01)   &quot; Text to Be Displayed
          im_msg_type     = &apos;I&apos;    &quot; Message Type
          im_problemclass = &apos;4&apos;    &quot; Application Log: Message Problem Class
          ).
        po_log-&gt;save_to_db( ).
        RETURN.
      ENDIF.
    ENDIF.

    lo_api ?= me-&gt;get_api( ).
    lo_db  ?= me-&gt;get_db( ).
    TRY .
        DATA(lv_logsys) = lo_api-&gt;get_logical_system( ).
      CATCH cx_bapi_error INTO lx_error.
        lm_add_messages.
    ENDTRY.
    WHILE lo_iterator-&gt;hasnext( ) = abap_true.
      lo_item ?= lo_iterator-&gt;next( ).
      APPEND INITIAL LINE TO lt_items ASSIGNING &lt;lw_item&gt;.
      MOVE-CORRESPONDING lo_item-&gt;w_item TO &lt;lw_item&gt;.
      APPEND lo_item-&gt;w_item TO lt_hist.
      &lt;lw_item&gt;-stock_type = 11.
      &lt;lw_item&gt;-version = p_vstk.
      &lt;lw_item&gt;-atpcat = p_cstk.
      &lt;lw_item&gt;-spec_stock_system = lv_logsys.
      TRY .
          &lt;lw_item&gt;-loctype = lo_db-&gt;get_location_type( &lt;lw_item&gt;-location  ).
        CATCH cx_sy_sql_error.
          CLEAR &lt;lw_item&gt;-loctype.
      ENDTRY.
      &lt;lw_item&gt;-storage_location = &apos;aSa&apos;.
      lv_matnr = &lt;lw_item&gt;-product.
      SHIFT lv_matnr RIGHT DELETING TRAILING space.
      OVERLAY lv_matnr WITH &apos;000000000000000000&apos;.
      &lt;lw_item&gt;-product = lv_matnr.
    ENDWHILE.

    po_hist-&gt;set_new( it_data = lt_hist
                      io_log  = po_log  ).
    lo_api-&gt;update_stock( EXPORTING it_items  = lt_items
                          IMPORTING et_return = DATA(lt_return) ).
    READ TABLE lt_return WITH KEY type = &apos;E&apos; TRANSPORTING NO FIELDS.
    IF sy-subrc = 0.
      lo_api-&gt;rollback( ).
    ELSE.
      lo_api-&gt;commit( ).
      po_log-&gt;add_message_free_text(
      EXPORTING
        im_text         = &apos;Stock successfully updated.&apos;(M04)   &quot; Text to Be Displayed
        im_msg_type     = &apos;I&apos;    &quot; Message Type
        im_problemclass = &apos;4&apos;    &quot; Application Log: Message Problem Class
        ).
      po_log-&gt;save_to_db( ).

    ENDIF.
    LOOP AT lt_return ASSIGNING &lt;lw_return&gt;.
      po_log-&gt;add_bapi_return( &lt;lw_return&gt; ).
    ENDLOOP.
    IF sy-subrc = 0.
      po_log-&gt;save_to_db( ).
    ENDIF.

  ENDMETHOD.
  METHOD get_api.
    ro_api = NEW lcl_api( ).
  ENDMETHOD.
  METHOD get_db.
    ro_db = NEW lcl_db( ).
  ENDMETHOD.
ENDCLASS.               &quot;lcl_stock_manager
*&amp;---------------------------------------------------------------------*
*&amp;       Class (Implementation)  lcl_spreadsheet
*&amp;---------------------------------------------------------------------*
*        Text
*----------------------------------------------------------------------*
CLASS lcl_spreadsheet IMPLEMENTATION.
  METHOD open.

    &quot;Read the content of XLSX file
    TRY.
        xs_file_data = cl_openxml_helper=&gt;load_local_file( p_fstksp ).
      CATCH cx_openxml_not_found.
    ENDTRY.
    load_package( ).
    &quot;Read the sheet XML
    xs_sheet_data = load_xml_data( co_sheet_xml ).
    &quot;Read the shared string XML
    xs_shared_data = load_xml_data( co_shared_str_xml ).
  ENDMETHOD.
  METHOD get_iterator.
    DATA: lo_shared_str_dom     TYPE REF TO if_ixml_document,
          lo_shared_str_nodeset TYPE REF TO if_ixml_node,
          lxs_shared_str_xml    TYPE xstring,
          lt_data               TYPE zusfp_sasa_stock_upd_t,
          lt_return             TYPE bapiret2_t,
          ls_message            TYPE string.
    FIELD-SYMBOLS  &lt;lw_return&gt; TYPE bapiret2.

    TRY.
        CALL TRANSFORMATION zusfp_trf_asastk_remnsp
          SOURCE XML me-&gt;xs_shared_data
          RESULT XML lxs_shared_str_xml.
        &quot;Create a nodeset from the shared XML
        CALL FUNCTION &apos;SDIXML_XML_TO_DOM&apos;
          EXPORTING
            xml           = lxs_shared_str_xml
          IMPORTING
            document      = lo_shared_str_dom
          EXCEPTIONS
            invalid_input = 1
            OTHERS        = 2.
        IF sy-subrc = 0.
          lo_shared_str_nodeset = lo_shared_str_dom-&gt;clone( ).
        ENDIF.
        &quot;Pass the SHEET XML and Shared String Nodeset to the main transformation
        CALL TRANSFORMATION zusfp_trf_asastk_import
          PARAMETERS p_shared_string = lo_shared_str_nodeset
          SOURCE XML me-&gt;xs_sheet_data
          RESULT t_data = lt_data.
      CATCH cx_xslt_exception INTO DATA(lx_error).
        MESSAGE e000 WITH lx_error-&gt;if_message~get_text( ) INTO ls_message.
        m_raise_exception.
    ENDTRY.

    DATA(lo_iterator) = NEW lcl_ws_iterator( ).
    LOOP AT lt_data ASSIGNING FIELD-SYMBOL(&lt;lw_data&gt;).
      lo_iterator-&gt;add_item( &lt;lw_data&gt; ).
    ENDLOOP.
    lo_iterator-&gt;initialize( ).

    ro_iterator = lo_iterator.
  ENDMETHOD.
  METHOD free.
  ENDMETHOD.
  METHOD load_package.
    DATA: lt_return  TYPE bapiret2_t,
          ls_message TYPE string.
    FIELD-SYMBOLS  &lt;lw_return&gt; TYPE bapiret2.

    TRY.
        o_package = cl_xlsx_document=&gt;load_document( iv_data = xs_file_data ).
        o_parts = o_package-&gt;get_parts( ).
      CATCH cx_root INTO DATA(lx_error).
        MESSAGE e000 WITH lx_error-&gt;if_message~get_text( ) INTO ls_message.
        m_raise_exception.
    ENDTRY.
  ENDMETHOD. &quot;load_package
  METHOD load_xml_data.
    DATA: lt_return  TYPE bapiret2_t,
          ls_message TYPE string.
    FIELD-SYMBOLS  &lt;lw_return&gt; TYPE bapiret2.

    TRY.
        DATA(lv_uri) = o_parts-&gt;get_part( 2 )-&gt;get_parts( )-&gt;get_part( i_xml_index )-&gt;get_uri( )-&gt;get_uri( ).
        DATA(lo_xml_part_uri) = cl_openxml_parturi=&gt;create_from_partname( lv_uri ).
        DATA(lo_xml_part) = o_package-&gt;get_part_by_uri( lo_xml_part_uri ).
        r_xml_data = lo_xml_part-&gt;get_data( ).
      CATCH cx_root INTO DATA(lx_error).
        MESSAGE e000 WITH lx_error-&gt;if_message~get_text( ) INTO ls_message.
        m_raise_exception.
    ENDTRY.
  ENDMETHOD. &quot;load_xml_data

ENDCLASS.               &quot;lcl_spreadsheet
*&amp;---------------------------------------------------------------------*
*&amp;       Class (Implementation)  lcl_ws_iterator
*&amp;---------------------------------------------------------------------*
*        Text
*----------------------------------------------------------------------*
CLASS lcl_ws_iterator IMPLEMENTATION.
  METHOD add_item.
    APPEND iw_item TO t_data.
  ENDMETHOD.
  METHOD initialize.
    SORT t_data BY table_line.
  ENDMETHOD.
  METHOD lif_iterator~hasnext.

    r_result = abap_false.
    IF lines( me-&gt;t_data ) &gt; 0.
      r_result = abap_true.
    ENDIF.
  ENDMETHOD.
  METHOD lif_iterator~next.

    READ TABLE me-&gt;t_data ASSIGNING FIELD-SYMBOL(&lt;lw_item&gt;) INDEX 1.
    IF sy-subrc = 0.
      DATA(lo_item) = NEW lcl_item( &lt;lw_item&gt; ).
      ro_object = lo_item.
      DELETE me-&gt;t_data INDEX 1.
    ENDIF.
  ENDMETHOD.
  METHOD lif_iterator~preview.
    DATA  lo_api TYPE REF TO lcl_api.

    r_ok = abap_false.
    lo_api ?= me-&gt;get_api( ).
    TRY .
        r_ok = lo_api-&gt;show_pop_up( me-&gt;t_data ).
      CATCH cx_bapi_error.
        RETURN.
    ENDTRY.
  ENDMETHOD.
  METHOD get_api.
    ro_api = NEW lcl_api( ).
  ENDMETHOD.
ENDCLASS.               &quot;lcl_ws_iterator
*&amp;---------------------------------------------------------------------*
*&amp;       Class (Implementation)  lcl_item
*&amp;---------------------------------------------------------------------*
*        Text
*----------------------------------------------------------------------*
CLASS lcl_item IMPLEMENTATION.
  METHOD constructor.
    me-&gt;w_item = pw_item.
  ENDMETHOD.
ENDCLASS.               &quot;lcl_item
*&amp;---------------------------------------------------------------------*
*&amp;       Class (Implementation)  lcl_api
*&amp;---------------------------------------------------------------------*
*        Text
*----------------------------------------------------------------------*
CLASS lcl_api IMPLEMENTATION.
  METHOD get_logical_system.
    DATA: ls_message TYPE string,
          lt_return  TYPE bapiret2_t.
    FIELD-SYMBOLS  &lt;lw_return&gt; TYPE bapiret2.

    CLEAR r_logsys.
    CALL FUNCTION &apos;OWN_LOGICAL_SYSTEM_GET&apos;
      IMPORTING
        own_logical_system             = r_logsys
      EXCEPTIONS
        own_logical_system_not_defined = 1
        OTHERS                         = 2.
    IF sy-subrc &lt;&gt; 0.
      MESSAGE
           ID sy-msgid
         TYPE sy-msgty
       NUMBER sy-msgno
         WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4
         INTO ls_message.
      m_raise_exception.
    ENDIF.
  ENDMETHOD.
  METHOD get_methods.
    CONSTANTS lc_zusfp_upd_stk_method TYPE domname VALUE &apos;ZUSFP_UPD_STK_METHOD&apos;.
    DATA: lt_methods TYPE STANDARD TABLE OF dd07v,
          ls_message TYPE string,
          lt_return  TYPE bapiret2_t.
    FIELD-SYMBOLS  &lt;lw_return&gt; TYPE bapiret2.

    CALL FUNCTION &apos;DD_DOMA_GET&apos;
      EXPORTING
        domain_name   = lc_zusfp_upd_stk_method
*       GET_STATE     = &apos;M  &apos;
*       LANGU         = SY-LANGU
*       PRID          = 0
*       WITHTEXT      = &apos;X&apos;
*     IMPORTING
*       DD01V_WA_A    =
*       DD01V_WA_N    =
*       GOT_STATE     =
      TABLES
        dd07v_tab_a   = lt_methods
        dd07v_tab_n   = rt_methods
      EXCEPTIONS
        illegal_value = 1
        op_failure    = 2
        OTHERS        = 3.
    IF sy-subrc &lt;&gt; 0.
      m_raise_exception.
    ENDIF.
  ENDMETHOD.
  METHOD show_pop_up.

    r_bool = abap_false.
    TRY .
        CALL FUNCTION &apos;ZUSFP_LIST_WITH_OK_AND_CANCEL&apos;
          EXPORTING
            i_start_column = 40
            i_start_line   = 3
            i_end_column   = 72
            i_end_line     = 20
            it_data        = it_data
          IMPORTING
            e_option       = r_bool.
      CATCH cx_bapi_error INTO DATA(lx_error).
        RAISE EXCEPTION lx_error.
    ENDTRY.
  ENDMETHOD.
  METHOD confirm.
    DATA: lv_answer(1) TYPE c,
          lt_return    TYPE bapiret2_t,
          ls_message   TYPE string.
    FIELD-SYMBOLS  &lt;lw_return&gt; TYPE bapiret2.

    CALL FUNCTION &apos;POPUP_TO_CONFIRM&apos;
      EXPORTING
        text_question  = i_question
      IMPORTING
        answer         = lv_answer
      EXCEPTIONS
        text_not_found = 1
        OTHERS         = 2.
    IF sy-subrc &lt;&gt; 0.
      m_raise_exception.
    ENDIF.
    IF lv_answer &lt;&gt; &apos;1&apos;.
      MESSAGE i022 INTO ls_message.
      m_raise_exception.
    ENDIF.

  ENDMETHOD.
  METHOD show_historial.

    TRY .
        CALL FUNCTION &apos;ZUSFP_HISTORIAL_POP_UP&apos;
          EXPORTING
            i_start_column = 20
            i_start_line   = 3
            i_end_column   = 95
            i_end_line     = 20
            it_data        = it_data.
      CATCH cx_bapi_error INTO DATA(lx_error).
        RAISE EXCEPTION lx_error.
    ENDTRY.
  ENDMETHOD.
  METHOD update_stock.

    TRY .
        DATA(lv_logsys) = me-&gt;get_logical_system( ).
      CATCH cx_bapi_error INTO DATA(lx_error).
        et_return = lx_error-&gt;status.
    ENDTRY.

    CALL FUNCTION &apos;BAPI_STSRVAPS_SAVEMULTI2&apos;
      EXPORTING
        logical_system = lv_logsys
*       COMMIT_CONTROL = &apos;E&apos;
*       PLANNING_MODE_USAGE                 =
*       PLANNING_VERSION                    = &apos;000&apos;
*       NO_AUTOMATIC_VERSION_CREATION       =
      TABLES
        stock          = it_items
*       CLASSVALUESCHAR                     =
*       CLASSVALUESNUM =
*       CLASSVALUESCURR                     =
        return         = et_return
*       EXTENSION_IN   =
*       FCS_REDUCTION  =
      .
  ENDMETHOD.
  METHOD commit.
    CALL FUNCTION &apos;BAPI_TRANSACTION_COMMIT&apos;
      EXPORTING
        wait = &apos;X&apos;
*     IMPORTING
*       RETURN        =
      .
  ENDMETHOD.
  METHOD rollback.
    CALL FUNCTION &apos;BAPI_TRANSACTION_ROLLBACK&apos;
*     IMPORTING
*       RETURN        =
      .
  ENDMETHOD.
  METHOD delete_messages.
    DATA: lt_return  TYPE bapiret2_t,
          ls_message TYPE string.
    FIELD-SYMBOLS  &lt;lw_return&gt; TYPE bapiret2.

    CALL FUNCTION &apos;BAL_DB_DELETE&apos;
      EXPORTING
        i_t_log_handle    = it_lghdl
      EXCEPTIONS
        no_logs_specified = 1
        OTHERS            = 2.
    IF sy-subrc &lt;&gt; 0.
      m_raise_exception.
    ENDIF.
  ENDMETHOD.
ENDCLASS.               &quot;lcl_api


*&amp;---------------------------------------------------------------------*
*&amp;       Class (Implementation)  lcl_db
*&amp;---------------------------------------------------------------------*
*        Text
*----------------------------------------------------------------------*
CLASS lcl_db IMPLEMENTATION.
  METHOD get_location_type.

    SELECT loctype
      FROM /sapapo/loc
        UP TO 1 ROWS
      INTO r_loctype
     WHERE locno = i_locno.
    ENDSELECT.
    IF sy-subrc &lt;&gt; 0.
      RAISE EXCEPTION TYPE cx_sy_sql_error.
    ENDIF.
  ENDMETHOD.
  METHOD get_log_handles.

    SELECT lghdl
      FROM zusfpt_asa_stkup
      INTO TABLE rt_lghdl
     WHERE aedat IN ir_timestp
       AND uname IN ir_uname.
    IF sy-subrc &lt;&gt; 0.
      RAISE EXCEPTION TYPE cx_sy_sql_error.
    ENDIF.
  ENDMETHOD.
  METHOD delete_historial.

    DELETE FROM zusfpt_asa_stkup
     WHERE aedat IN ir_timestp
       AND uname IN ir_uname.
    IF sy-subrc &lt;&gt; 0.
      RAISE EXCEPTION TYPE cx_sy_sql_error.
    ENDIF.
  ENDMETHOD.
ENDCLASS.               &quot;lcl_db</source>
 </PROG>
 <PROG NAME="ZUSFPR_STOCK_CREATION_F01" VARCL="X" SUBC="I" APPL="Z" RSTAT="K" RMAND="050" RLOAD="E" UCCHECK="X">
  <textPool>
   <language SPRAS="E">
    <textElement ID="R" ENTRY="Include ZUSFPR_STOCK_CREATION_F01" LENGTH="33 "/>
   </language>
  </textPool>
  <source>*&amp;---------------------------------------------------------------------*
*&amp;  Include           ZUSFPR_STOCK_CREATION_F01
*&amp;---------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*&amp;      Form  ORGANIZE_SELECTION_SCREEN
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  --&gt;  p1        text
*  &lt;--  p2        text
*----------------------------------------------------------------------*
FORM organize_selection_screen .
  IF p_stck IS NOT INITIAL.
    LOOP AT SCREEN.
      IF screen-name CS &apos;LOG&apos;.
        screen-active = 0.
        MODIFY SCREEN.
      ELSEIF screen-name CS &apos;STK&apos;.
        screen-active = 1.
        MODIFY SCREEN.
      ENDIF.
    ENDLOOP.
  ELSE.
    LOOP AT SCREEN.
      IF screen-name CS &apos;LOG&apos;.
        screen-active = 1.
        MODIFY SCREEN.
      ELSEIF screen-name CS &apos;STK&apos;.
        screen-active = 0.
        MODIFY SCREEN.
      ENDIF.
    ENDLOOP.

  ENDIF.
  PERFORM: organize_stock_screen,
           organize_log_screen.
ENDFORM.
*&amp;---------------------------------------------------------------------*
*&amp;      Form  ORGANIZE_STOCK_SCREEN
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  --&gt;  p1        text
*  &lt;--  p2        text
*----------------------------------------------------------------------*
FORM organize_stock_screen .
  CASE abap_true.
    WHEN p_istk.
      LOOP AT SCREEN.
        IF screen-group1 = &apos;SP1&apos;.
          screen-active = 0.
          MODIFY SCREEN.
        ENDIF.
        IF screen-group1 = &apos;IT1&apos;.
          screen-active = 1.
          MODIFY SCREEN.
        ENDIF.
      ENDLOOP.
    WHEN p_sstk.
      LOOP AT SCREEN.
        IF screen-group1 = &apos;SP1&apos;.
          screen-active = 1.
          MODIFY SCREEN.
        ENDIF.
        IF screen-group1 = &apos;IT1&apos;.
          screen-active = 0.
          MODIFY SCREEN.
        ENDIF.
      ENDLOOP.
  ENDCASE.
ENDFORM.
*&amp;---------------------------------------------------------------------*
*&amp;      Form  ORGANIZE_LOG_SCREEN
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  --&gt;  p1        text
*  &lt;--  p2        text
*----------------------------------------------------------------------*
FORM organize_log_screen .
  IF p_vlog IS NOT INITIAL.
    LOOP AT SCREEN.
      IF screen-group1 = &apos;LG1&apos;.
        screen-active = 0.
        MODIFY SCREEN.
      ENDIF.
    ENDLOOP.
  ELSEIF p_dlog IS NOT INITIAL.
    LOOP AT SCREEN.
      IF screen-group1 = &apos;LG1&apos;.
        screen-active = 1.
        MODIFY SCREEN.
      ENDIF.
    ENDLOOP.
  ENDIF.
ENDFORM.</source>
 </PROG>
 <PROG NAME="ZUSFPR_STOCK_CREATION_TOP" VARCL="X" SUBC="I" APPL="Z" RSTAT="K" RMAND="050" RLOAD="E" UCCHECK="X">
  <textPool>
   <language SPRAS="E">
    <textElement ID="R" ENTRY="Include ZUSFPR_STOCK_CREATION_TOP" LENGTH="33 "/>
   </language>
  </textPool>
  <source>*&amp;---------------------------------------------------------------------*
*&amp; Include ZUSFPR_STOCK_CREATION_TOP                         Report ZUSFPR_STOCK_CREATION
*&amp;
*&amp;---------------------------------------------------------------------*
REPORT zusfpr_stock_creation MESSAGE-ID zgldev.

TABLES: bapi10504stock2.

SELECTION-SCREEN BEGIN OF BLOCK b0 WITH FRAME TITLE text-t00.
PARAMETERS: p_stck TYPE char01 RADIOBUTTON GROUP optn DEFAULT &apos;X&apos; USER-COMMAND code1,
            p_lgmn TYPE char01 RADIOBUTTON GROUP optn.
SELECTION-SCREEN END OF BLOCK b0.

SELECTION-SCREEN BEGIN OF BLOCK stock WITH FRAME TITLE text-t01.
PARAMETERS: p_vstk TYPE /sapapo/version,
            p_cstk TYPE /sapapo/atpcat,
            p_istk TYPE char01 RADIOBUTTON GROUP mode DEFAULT &apos;X&apos; USER-COMMAND code2,
            p_sstk TYPE char01 RADIOBUTTON GROUP mode.

SELECTION-SCREEN BEGIN OF BLOCK it1 WITH FRAME.
SELECT-OPTIONS: spstkif FOR bapi10504stock2-product  MODIF ID it1,
                slstkif FOR bapi10504stock2-location MODIF ID it1.
SELECTION-SCREEN END OF BLOCK it1.

SELECTION-SCREEN BEGIN OF BLOCK sp1 WITH FRAME.
PARAMETERS  p_fstksp  TYPE string MEMORY ID zusfpr_stock_02 &quot;zusfpr_stock_01
 LOWER CASE MODIF ID sp1.
SELECTION-SCREEN END OF BLOCK sp1.

SELECTION-SCREEN END OF BLOCK stock.

SELECTION-SCREEN BEGIN OF BLOCK log WITH FRAME TITLE text-t02.
PARAMETERS: p_vlog TYPE char01 RADIOBUTTON GROUP logp DEFAULT &apos;X&apos; USER-COMMAND code3,
            p_dlog TYPE char01 RADIOBUTTON GROUP logp.

SELECTION-SCREEN BEGIN OF BLOCK blg1 WITH FRAME TITLE text-t03.
SELECT-OPTIONS: &quot;s_llog FOR bapi10504stock2-location MODIF ID lg1,
                s_ulog FOR sy-uname MODIF ID lg1,
                s_dlog FOR sy-datum MODIF ID lg1.
SELECTION-SCREEN END OF BLOCK blg1.

SELECTION-SCREEN END OF BLOCK log.

*--------------------------------------------------------------------*
* INTERFACE  LIF_ITERATOR
* ------------------------------------------------------------------ *
* OVERVIEW: This interface defines an interator.
*--------------------------------------------------------------------*
INTERFACE lif_iterator.
  METHODS: next    RETURNING VALUE(ro_object) TYPE REF TO object,
*--------------------------------------------------------------------*
* NEXT
*--------------------------------------------------------------------*
*       EFFECTS.:  Returns Next Object.
*--------------------------------------------------------------------*
* &lt;-- RO_OBJECT The next object.
*--------------------------------------------------------------------*
    hasnext RETURNING VALUE(r_result)  TYPE abap_bool,
*--------------------------------------------------------------------*
* HASNEXT
*--------------------------------------------------------------------*
*       EFFECTS.:  Returns the result.
*--------------------------------------------------------------------*
* &lt;-- R_RESULT The next object.
*--------------------------------------------------------------------*
    preview RETURNING VALUE(r_ok) TYPE abap_bool.
*--------------------------------------------------------------------*
* PREVIEW
*--------------------------------------------------------------------*
*       EFFECTS.:  Shows a list of items to be returned in sequence
*                  and return the button pressed by user (OK = TRUE
*                  and CANCEL = FALSE).
*--------------------------------------------------------------------*
* &lt;-- R_RESULT The next object.
*--------------------------------------------------------------------*
ENDINTERFACE.                    &quot;lif_iterator  PUBLIC
*--------------------------------------------------------------------*
* CLASSES DEFINITIONS
*--------------------------------------------------------------------*
CLASS: lcl_webservice  DEFINITION DEFERRED,
       lcl_spreadsheet DEFINITION DEFERRED.
CLASS lcl_ws_iterator DEFINITION FINAL FRIENDS lcl_webservice
                                               lcl_spreadsheet.
  PUBLIC SECTION.
    INTERFACES lif_iterator.
    ALIASES: next    FOR lif_iterator~next,
             hasnext FOR lif_iterator~hasnext,
             preview FOR lif_iterator~preview.
  PRIVATE SECTION.
    DATA t_data TYPE zusfp_sasa_stock_upd_t.
    METHODS: add_item IMPORTING iw_item TYPE zusfp_sasa_stock_upd,
      initialize,
      get_api RETURNING VALUE(ro_api) TYPE REF TO object.
ENDCLASS.
CLASS lcl_item DEFINITION FINAL.
  PUBLIC SECTION.
    DATA w_item READ-ONLY TYPE zusfp_sasa_stock_upd.
    METHODS constructor IMPORTING pw_item TYPE zusfp_sasa_stock_upd.
ENDCLASS.
*--------------------------------------------------------------------*
* CLASS  LCL_MEDIA
* ------------------------------------------------------------------ *
* OVERVIEW: Generic definition of a media. A media can be an interface
*           or a file. It defines basic methods for a media.
*--------------------------------------------------------------------*
CLASS lcl_media DEFINITION ABSTRACT.
  PUBLIC SECTION.
    CLASS-METHODS get_media RETURNING VALUE(ro_media) TYPE REF TO lcl_media RAISING cx_bapi_error.
    METHODS: open  ABSTRACT RAISING cx_bapi_error,
*--------------------------------------------------------------------*
* OPEN
*--------------------------------------------------------------------*
*       EFFECTS.:  Loads the media content.
*--------------------------------------------------------------------*
      get_iterator ABSTRACT RETURNING VALUE(ro_iterator) TYPE REF TO lif_iterator
                            RAISING   cx_bapi_error,
*--------------------------------------------------------------------*
* GET_ITERATOR
*--------------------------------------------------------------------*
*       EFFECTS.:  Returns an iterator for the media content.
*--------------------------------------------------------------------*
      free ABSTRACT.
*--------------------------------------------------------------------*
* FREE
*--------------------------------------------------------------------*
*       EFFECTS.:  Cleans up internal objects.
*--------------------------------------------------------------------*
ENDCLASS.                    &quot;lcl_media DEFINITION
CLASS lcl_webservice DEFINITION FINAL INHERITING FROM lcl_media.
  PUBLIC SECTION.
    METHODS: constructor RAISING cx_bapi_error,
      open REDEFINITION,
      get_iterator REDEFINITION,
      free REDEFINITION.
  PRIVATE SECTION.
    DATA: o_proxy TYPE REF TO zusfpco_si_get_raw_material_in,
          w_data  TYPE zusfpmt_get_raw_material_sap_r.
ENDCLASS.
*--------------------------------------------------------------------*
* CLASS  LCL_XLS
* ------------------------------------------------------------------ *
* OVERVIEW: Represents a Spreadsheet.
*--------------------------------------------------------------------*
CLASS lcl_spreadsheet DEFINITION FINAL INHERITING FROM lcl_media.
  PUBLIC SECTION.
    CONSTANTS co_sheet_xml TYPE i VALUE 2.
    CONSTANTS co_shared_str_xml TYPE i VALUE 3.

    METHODS:
      open REDEFINITION,
      get_iterator REDEFINITION,
      free REDEFINITION.

  PRIVATE SECTION.
    DATA: xs_file_data   TYPE xstring,
          o_package      TYPE REF TO cl_openxml_package,
          o_parts        TYPE REF TO cl_openxml_partcollection,
          xs_sheet_data  TYPE xstring,
          xs_shared_data TYPE xstring.

    METHODS: load_package RAISING cx_bapi_error,
      load_xml_data IMPORTING VALUE(i_xml_index) TYPE i
                    RETURNING VALUE(r_xml_data)  TYPE xstring
                    RAISING   cx_bapi_error.
ENDCLASS.                    &quot;lcl_xls DEFINITION


CLASS lcl_api DEFINITION FINAL.
  PUBLIC SECTION.
    METHODS: get_logical_system RETURNING VALUE(r_logsys) TYPE logsys
                                RAISING   cx_bapi_error,
      get_methods        RETURNING VALUE(rt_methods) TYPE dd07v_tab
                         RAISING   cx_bapi_error,
      confirm            IMPORTING i_question TYPE string
                         RAISING   cx_bapi_error,
      show_pop_up        IMPORTING it_data       TYPE ANY TABLE
                         RETURNING VALUE(r_bool) TYPE abap_bool
                         RAISING   cx_bapi_error,
      show_historial     IMPORTING it_data TYPE zusfp_sasa_hist_view_t
                         RAISING   cx_bapi_error,
      update_stock       IMPORTING it_items  TYPE bapi10504stock2_tab
                         EXPORTING et_return TYPE bapiret2_t,
      commit,
      rollback,
      delete_messages    IMPORTING it_lghdl TYPE bal_t_logh.
ENDCLASS.


CLASS lcl_db DEFINITION FINAL.
  PUBLIC SECTION.
    TYPES: yr_uname   TYPE RANGE OF uname,
           yr_timestp TYPE RANGE OF tzntstmps.
    METHODS: get_location_type IMPORTING i_locno          TYPE /sapapo/locno
                               RETURNING VALUE(r_loctype) TYPE /sapapo/c_loctype
                               RAISING   cx_sy_sql_error,
      get_log_handles  IMPORTING ir_timestp      TYPE yr_timestp
                                 ir_uname        TYPE yr_uname
                       RETURNING VALUE(rt_lghdl) TYPE bal_t_logh
                       RAISING   cx_sy_sql_error,
      delete_historial IMPORTING ir_timestp TYPE yr_timestp
                                 ir_uname   TYPE yr_uname
                       RAISING   cx_sy_sql_error.
ENDCLASS.

CLASS lcl_historial_manager DEFINITION DEFERRED.
CLASS lcl_stock_manager DEFINITION FINAL.
  PUBLIC SECTION.
    METHODS  load IMPORTING po_media TYPE REF TO lcl_media
                            po_log   TYPE REF TO cl_ilm_log
                            po_hist  TYPE REF TO lcl_historial_manager.
  PRIVATE SECTION.
    METHODS: get_api RETURNING VALUE(ro_api) TYPE REF TO object,
      get_db  RETURNING VALUE(ro_db)  TYPE REF TO object.
ENDCLASS.


CLASS lcl_historial_manager DEFINITION FINAL.
  PUBLIC SECTION.
    DATA timestp TYPE tzntstmps.
    CLASS-METHODS: shows IMPORTING io_log TYPE REF TO cl_ilm_log,
      delete.
    METHODS: constructor IMPORTING i_timestp TYPE tzntstmps,
      set_new IMPORTING it_data TYPE zusfp_sasa_stock_upd_t
                        io_log  TYPE REF TO cl_ilm_log.
ENDCLASS.


*--------------------------------------------------------------------*
* CLASS  LCL_MAIN
* ------------------------------------------------------------------ *
* OVERVIEW: This class controls the program behavior, provided the
*           selection arguments have been set.
*--------------------------------------------------------------------*
CLASS lcl_main DEFINITION FINAL.
  PUBLIC SECTION.
    CONSTANTS c_log_object TYPE balobj_d VALUE &apos;ZFP_ASA_STK_UPL&apos;.
    CLASS-METHODS: get_field_value IMPORTING p_fieldname     TYPE dynfnam
                                   RETURNING VALUE(r_fvalue) TYPE dynfieldvalue.
*--------------------------------------------------------------------*
* GET_FIELD_VALUE
*--------------------------------------------------------------------*
*       EFFECTS.:  Returns the values of a field, before PAI is
*                  executed.
*--------------------------------------------------------------------*
* --&gt; P_FILENAME  Name of the file.
* &lt;-- R_FVALUE    Field value.
*--------------------------------------------------------------------*
    METHODS: constructor RAISING cx_bapi_error,
      run,
      show_messages,
      house_keeping.
*--------------------------------------------------------------------*
* HOUSE_KEEPING
*--------------------------------------------------------------------*
*       EFFECTS.:  Cleans up inner objects.
*--------------------------------------------------------------------*
  PRIVATE SECTION.
    DATA: o_log       TYPE REF TO cl_ilm_log,
          o_media     TYPE REF TO lcl_media,
          o_stock     TYPE REF TO lcl_stock_manager,
          o_historial TYPE REF TO lcl_historial_manager.
ENDCLASS.                    &quot;lcl_main DEFINITION


DATA: o_main  TYPE REF TO lcl_main,
      s_title TYPE string.

DEFINE m_raise_exception.
  APPEND INITIAL LINE TO lt_return ASSIGNING &lt;lw_return&gt;.
  &lt;lw_return&gt;-id         = sy-msgid.
  &lt;lw_return&gt;-type       = sy-msgty.
  &lt;lw_return&gt;-number     = sy-msgno.
  &lt;lw_return&gt;-message    = ls_message.
  &lt;lw_return&gt;-message_v1 = sy-msgv1.
  &lt;lw_return&gt;-message_v2 = sy-msgv2.
  &lt;lw_return&gt;-message_v3 = sy-msgv3.
  &lt;lw_return&gt;-message_v4 = sy-msgv4.
  RAISE EXCEPTION TYPE cx_bapi_error
    EXPORTING
      status = lt_return.
END-OF-DEFINITION.</source>
 </PROG>
 <PROG NAME="ZUSFPR_STOCK_CREATION_C01" VARCL="X" SUBC="I" APPL="Z" RSTAT="K" RMAND="050" RLOAD="E" UCCHECK="X">
  <textPool>
   <language SPRAS="E">
    <textElement ID="R" ENTRY="Include ZUSFPR_STOCK_CREATION_C01" LENGTH="33 "/>
   </language>
  </textPool>
  <source>*&amp;---------------------------------------------------------------------*
*&amp;  Include           ZUSFPR_STOCK_CREATION_C01
*&amp;---------------------------------------------------------------------*
CLASS lcl_main IMPLEMENTATION.
  METHOD constructor.
    DATA: lt_return  TYPE bapiret2_t,
          ls_message TYPE string,
          lv_timestp TYPE tzntstmps.
    FIELD-SYMBOLS  &lt;lw_return&gt; TYPE bapiret2.

    CONVERT DATE sy-datlo TIME sy-timlo
       INTO TIME STAMP lv_timestp TIME ZONE sy-zonlo.
    CONVERT TIME STAMP lv_timestp TIME ZONE sy-zonlo
       INTO DATE DATA(lv_date) TIME DATA(lv_time).
    TRY .
        o_log = NEW cl_ilm_log( im_extnumber = sy-repid &amp;&amp; sy-uname &amp;&amp;
                                               lv_date  &amp;&amp; lv_time  &amp;&amp;
                                               sy-zonlo
                                im_object    = c_log_object
                                im_title = &apos;aSa Stock Updating&apos;(t04) ).
      CATCH cx_ilm.
        MESSAGE e022 INTO ls_message.
        m_raise_exception.
    ENDTRY.
    o_media     = lcl_media=&gt;get_media( ).
    o_stock     = NEW lcl_stock_manager( ).
    o_historial = NEW lcl_historial_manager( lv_timestp ).
  ENDMETHOD.
  METHOD run.

    CASE abap_true.
      WHEN p_stck.
        o_stock-&gt;load( po_media = o_media
                       po_log   = o_log
                       po_hist  = o_historial ).
      WHEN p_lgmn.
        IF p_vlog = abap_true.
          lcl_historial_manager=&gt;shows( o_log ).
        ELSE.
          lcl_historial_manager=&gt;delete( ).
        ENDIF.
      WHEN OTHERS.
    ENDCASE.
  ENDMETHOD.
  METHOD show_messages.

    DATA(lw_statistics) = o_log-&gt;entries_in_log( ).
    IF lw_statistics-msg_cnt_al &gt; 0.
      o_log-&gt;show_log_fullscreen( ).
    ENDIF.
  ENDMETHOD.
  METHOD house_keeping.
    FREE: o_log, o_media, o_stock, o_historial.
  ENDMETHOD.
  METHOD get_field_value.
    DATA: lt_dynpfields TYPE dynpread_tabtype,
          lw_dynpfield  TYPE dynpread.

    MOVE p_fieldname TO lw_dynpfield-fieldname.
    APPEND lw_dynpfield TO lt_dynpfields.

    CALL FUNCTION &apos;DYNP_VALUES_READ&apos;
      EXPORTING
        dyname               = sy-repid
        dynumb               = sy-dynnr
      TABLES
        dynpfields           = lt_dynpfields[]
      EXCEPTIONS
        invalid_abapworkarea = 1
        invalid_dynprofield  = 2
        invalid_dynproname   = 3
        invalid_dynpronummer = 4
        invalid_request      = 5
        no_fielddescription  = 6
        invalid_parameter    = 7
        undefind_error       = 8
        double_conversion    = 9
        stepl_not_found      = 10
        OTHERS               = 11.
    IF sy-subrc &lt;&gt; 0.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
      WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.

    READ TABLE lt_dynpfields INTO lw_dynpfield
    WITH KEY fieldname = p_fieldname.
    IF sy-subrc = 0.
      r_fvalue = lw_dynpfield-fieldvalue.
    ENDIF.
  ENDMETHOD.                    &quot;get_field_value
ENDCLASS.
CLASS lcl_media IMPLEMENTATION.
  METHOD get_media.
    CASE abap_true.
      WHEN p_istk.
        TRY .
            DATA(lo_webservice) = NEW lcl_webservice( ).
          CATCH cx_bapi_error INTO DATA(lx_error).
            RAISE EXCEPTION lx_error.
        ENDTRY.
        ro_media = lo_webservice.
      WHEN p_sstk.
        DATA(lo_spreadsheet) = NEW lcl_spreadsheet( ).
        ro_media = lo_spreadsheet.
    ENDCASE.
  ENDMETHOD.
ENDCLASS.
CLASS lcl_webservice IMPLEMENTATION.
  METHOD constructor.
    DATA: lt_return  TYPE bapiret2_t,
          ls_message TYPE string.
    FIELD-SYMBOLS  &lt;lw_return&gt; TYPE bapiret2.


    super-&gt;constructor( ).
    TRY .
        me-&gt;o_proxy = NEW zusfpco_si_get_raw_material_in( ).
      CATCH cx_ai_system_fault INTO DATA(lx_error).
        MESSAGE e000 WITH lx_error-&gt;if_message~get_text( ) INTO ls_message.
        m_raise_exception.
    ENDTRY.
  ENDMETHOD.
  METHOD open.
    DATA: lw_request TYPE zusfpmt_get_raw_material_sap,
          lt_return  TYPE bapiret2_t,
          ls_message TYPE string.
    FIELD-SYMBOLS  &lt;lw_return&gt; TYPE bapiret2.

    TRY.
        o_proxy-&gt;si_get_raw_material_inventoryo(
          EXPORTING
            output = lw_request
          IMPORTING
            input = w_data ).
      CATCH cx_ai_system_fault INTO DATA(lx_error).
        MESSAGE e000 WITH lx_error-&gt;if_message~get_text( )
           INTO ls_message.
        m_raise_exception.
    ENDTRY.
  ENDMETHOD.
  METHOD get_iterator.
    DATA lw_line TYPE zusfp_sasa_stock_upd.

    DATA(lo_iterator) = NEW lcl_ws_iterator( ).
    LOOP AT me-&gt;w_data-mt_get_raw_material_sap_respon-raw_material
      ASSIGNING FIELD-SYMBOL(&lt;lw_raw_material&gt;).
      lw_line-location = &lt;lw_raw_material&gt;-sap_plant.
      lw_line-product = &lt;lw_raw_material&gt;-sap_sku.
      lw_line-quantity = &lt;lw_raw_material&gt;-weight.
      IF lw_line-product IN spstkif AND &quot;List filtering
         lw_line-location IN slstkif.
        lo_iterator-&gt;add_item( lw_line ).
      ENDIF.
    ENDLOOP.
    lo_iterator-&gt;initialize( ).

    ro_iterator = lo_iterator.
  ENDMETHOD.
  METHOD free.
    FREE o_proxy.
  ENDMETHOD.
ENDCLASS.


*&amp;---------------------------------------------------------------------*
*&amp;       Class (Implementation)  lcl_historial_manager
*&amp;---------------------------------------------------------------------*
*        Text
*----------------------------------------------------------------------*
CLASS lcl_historial_manager IMPLEMENTATION.
  METHOD constructor.

    me-&gt;timestp = i_timestp.
  ENDMETHOD.
  METHOD set_new.
    DATA: lo_pers_obj  TYPE REF TO zcl_usfp_t_asa_stkup,
          lv_method    TYPE zusfp_asa_upd_stk_method,
          lv_text(200) TYPE c,
          ls_data      TYPE string,
          lxs_data     TYPE xstring.

    TRY.
        lo_pers_obj = zca_usfp_t_asa_stkup=&gt;agent-&gt;create_persistent( i_aedat = me-&gt;timestp
                                                                      i_uname = sy-uname ).
      CATCH cx_os_object_existing INTO DATA(lx_exist).
        lv_text = lx_exist-&gt;get_text( ).
        io_log-&gt;add_message_free_text(
          EXPORTING
            im_text         = lv_text   &quot; Text to Be Displayed
            im_msg_type     = &apos;I&apos;    &quot; Message Type
            im_problemclass = &apos;1&apos;    &quot; Application Log: Message Problem Class
          ).
        RETURN.
    ENDTRY.

    TRY .
        CALL TRANSFORMATION zusfp_tf_asa_stock_data
          SOURCE asa_data = it_data
          RESULT XML ls_data.
      CATCH cx_transformation_error INTO DATA(lx_transf).
        lv_text = lx_transf-&gt;get_text( ).
        io_log-&gt;add_message_free_text(
          EXPORTING
            im_text         = lv_text   &quot; Text to Be Displayed
            im_msg_type     = &apos;I&apos;    &quot; Message Type
            im_problemclass = &apos;2&apos;    &quot; Application Log: Message Problem Class
          ).
    ENDTRY.

    IF ls_data IS NOT INITIAL.
      TRY .
          NEW cl_abap_gzip( )-&gt;compress_text(
            EXPORTING
              text_in                    =   ls_data  &quot; Input text
*                text_in_len                = -1    &quot; Input Length
*                compress_level             = 6    &quot; Level of Compression
*                conversion                 = &apos;DEFAULT&apos;    &quot; Conversion to UTF8 (UC)
            IMPORTING
              gzip_out                   =  lxs_data   &quot; Compressed output
*                gzip_out_len               =     &quot; Output Length
              ).
*              CATCH cx_parameter_invalid_range.    &quot;
*              CATCH cx_sy_buffer_overflow.    &quot;
*              CATCH cx_sy_conversion_codepage.    &quot;
*              CATCH cx_sy_compression_error.    &quot;
        CATCH cx_root INTO DATA(lx_root).
          lv_text = lx_root-&gt;get_text( ).
          io_log-&gt;add_message_free_text(
            EXPORTING
              im_text         = lv_text   &quot; Text to Be Displayed
              im_msg_type     = &apos;I&apos;    &quot; Message Type
              im_problemclass = &apos;2&apos;    &quot; Application Log: Message Problem Class
            ).
      ENDTRY.
    ENDIF.

    lo_pers_obj-&gt;set_utzon( i_utzon = sy-zonlo ).
*      CATCH cx_os_object_not_found.    &quot;
    IF p_istk = abap_true.
      lv_method = 1.
    ELSE.
      lv_method = 2.
    ENDIF.
    lo_pers_obj-&gt;set_umeth( i_umeth = lv_method ).
*      CATCH cx_os_object_not_found.    &quot;
    lo_pers_obj-&gt;set_adata( i_adata = lxs_data ).
    lo_pers_obj-&gt;set_lghdl( i_lghdl = io_log-&gt;g_log_handle  ).
*      CATCH cx_os_object_not_found.    &quot;
    COMMIT WORK AND WAIT.
  ENDMETHOD.
  METHOD shows.
    DATA: lv_text(200) TYPE c,
          lt_view      TYPE zusfp_sasa_hist_view_t,
          lt_data      TYPE zusfp_sasa_stock_upd_t,
          ls_data      TYPE string,
          lxs_data     TYPE xstring,
          lv_valpos    TYPE valpos,
          lo_api       TYPE REF TO lcl_api,
          lo_entry     TYPE REF TO zcl_usfp_t_asa_stkup,
          lx_error     TYPE REF TO cx_bapi_error,
          lx_root      TYPE REF TO cx_root.
    FIELD-SYMBOLS: &lt;lw_method&gt; TYPE dd07v,
                   &lt;lw_return&gt; TYPE bapiret2.

    lo_api = NEW lcl_api( ).
    TRY .
        DATA(lt_methods) = lo_api-&gt;get_methods( ).
      CATCH cx_bapi_error INTO lx_error.
        LOOP AT lx_error-&gt;status ASSIGNING &lt;lw_return&gt;.
          io_log-&gt;add_bapi_return( im_bapireturn = &lt;lw_return&gt; ).
        ENDLOOP.
    ENDTRY.
    TRY .
        DATA(lo_query_manager) = cl_os_system=&gt;get_query_manager( ).
        DATA(lo_query) = lo_query_manager-&gt;create_query(
*                    i_filter              =
*                    i_ordering            =
*                    i_parameters          =
              ).
*                  CATCH cx_os_class_not_found.  &quot;
        DATA(lt_entries) = zca_usfp_t_asa_stkup=&gt;agent-&gt;if_os_ca_persistency~get_persistent_by_query(
                i_query                = lo_query
*                         i_parameter_tab        =
*                         i_par1                 =
*                         i_par2                 =
*                         i_par3                 =
*                         i_subclasses           = OSCON_FALSE
*                         i_upto                 = 0
*                         i_options              = IF_OS_QUERY_OPTIONS=&gt;DEFAULT_OPTIONS
                ).
*                       CATCH cx_os_object_not_found.  &quot;
*                       CATCH cx_os_query_error.  &quot;
      CATCH cx_root INTO lx_root.
        lv_text = lx_root-&gt;get_text( ).
        io_log-&gt;add_message_free_text(
          EXPORTING
            im_text         = lv_text   &quot; Text to Be Displayed
            im_msg_type     = &apos;I&apos;    &quot; Message Type
            im_problemclass = &apos;2&apos;    &quot; Application Log: Message Problem Class
          ).
        io_log-&gt;save_to_db(
*            IMPORTING
*              e_lognumber =     &quot; Application log: log number
        ).
    ENDTRY.

    LOOP AT lt_entries ASSIGNING FIELD-SYMBOL(&lt;lo_line&gt;).
      lo_entry ?= &lt;lo_line&gt;.
      lxs_data = lo_entry-&gt;get_adata( ).
      CLEAR lt_data.
*             CATCH cx_os_object_not_found.  &quot;
      TRY .
          NEW cl_abap_gzip( )-&gt;decompress_text(
            EXPORTING
              gzip_in                    =  lxs_data   &quot; Input of Zipped Data
*            gzip_in_len                = -1    &quot; Input Length
*            conversion                 = &apos;DEFAULT&apos;    &quot; Conversion to UTF8 (UC)
            IMPORTING
              text_out                   =  ls_data   &quot; Decompessed Output
*            text_out_len               =     &quot; Output Length
            ).
*          CATCH cx_parameter_invalid_range.    &quot;
*          CATCH cx_sy_buffer_overflow.    &quot;
*          CATCH cx_sy_conversion_codepage.    &quot;
*          CATCH cx_sy_compression_error.    &quot;
        CATCH cx_root INTO lx_root.
          lv_text = lx_root-&gt;get_text( ).
          io_log-&gt;add_message_free_text(
          EXPORTING
            im_text         = lv_text   &quot; Text to Be Displayed
            im_msg_type     = &apos;I&apos;    &quot; Message Type
            im_problemclass = &apos;2&apos;    &quot; Application Log: Message Problem Class
            ).
      ENDTRY.

      TRY .
          CALL TRANSFORMATION zusfp_tf_asa_stock_data
            SOURCE XML ls_data
            RESULT asa_data = lt_data.
        CATCH cx_transformation_error INTO DATA(lx_transf).
          lv_text = lx_transf-&gt;get_text( ).
          io_log-&gt;add_message_free_text(
          EXPORTING
            im_text         = lv_text   &quot; Text to Be Displayed
            im_msg_type     = &apos;I&apos;    &quot; Message Type
            im_problemclass = &apos;2&apos;    &quot; Application Log: Message Problem Class
            ).
          CONTINUE.
      ENDTRY.
      lv_valpos = lo_entry-&gt;get_umeth( ).
*              CATCH cx_os_object_not_found.  &quot;
      LOOP AT lt_data ASSIGNING FIELD-SYMBOL(&lt;lw_data&gt;).
        APPEND INITIAL LINE TO lt_view ASSIGNING FIELD-SYMBOL(&lt;lw_view&gt;).
        MOVE-CORRESPONDING &lt;lw_data&gt; TO &lt;lw_view&gt;.
        &lt;lw_view&gt;-uname = lo_entry-&gt;get_uname( ).
        &lt;lw_view&gt;-utzon = lo_entry-&gt;get_utzon( ).
        &lt;lw_view&gt;-hicon = &apos;@96@&apos;.
        &lt;lw_view&gt;-lghdl = lo_entry-&gt;get_lghdl( ).
        CONVERT TIME STAMP lo_entry-&gt;get_aedat( )
           TIME ZONE lo_entry-&gt;get_utzon( )
           INTO DATE &lt;lw_view&gt;-aedat TIME &lt;lw_view&gt;-aetim.
        READ TABLE lt_methods ASSIGNING &lt;lw_method&gt;
         WITH KEY valpos     = lv_valpos
                  ddlanguage = sy-langu.
        IF sy-subrc = 0.
          &lt;lw_view&gt;-dmeth = &lt;lw_method&gt;-ddtext.
        ENDIF.
      ENDLOOP.
    ENDLOOP.

    TRY .
        lo_api-&gt;show_historial( lt_view ).
      CATCH cx_bapi_error INTO lx_error.
        LOOP AT lx_error-&gt;status ASSIGNING &lt;lw_return&gt;.
          io_log-&gt;add_bapi_return( im_bapireturn = &lt;lw_return&gt; ).
        ENDLOOP.
    ENDTRY.
  ENDMETHOD.
  METHOD delete.
    DATA: lo_api      TYPE REF TO lcl_api,
          lo_db       TYPE REF TO lcl_db,
          ls_question TYPE string,
          lr_date     TYPE RANGE OF sydatum,
          lr_timestp  TYPE lcl_db=&gt;yr_timestp,
          lr_uname    TYPE lcl_db=&gt;yr_uname.

    lo_api = NEW lcl_api( ).
    lo_db  = NEW lcl_db( ) .
    ls_question = &apos;Do you confirm the log registers exclusion?&apos;(M05).
    TRY .
        lo_api-&gt;confirm( ls_question ).
      CATCH cx_bapi_error.
        RETURN.
    ENDTRY.

    IF s_ulog IS NOT INITIAL .
      lr_uname = s_ulog[].
      INSERT s_ulog INTO lr_uname INDEX 1.
      SORT lr_uname BY table_line.
      DELETE ADJACENT DUPLICATES FROM lr_uname.
    ENDIF.

    IF s_dlog IS NOT INITIAL.
      lr_date = s_dlog[].
      INSERT s_dlog INTO lr_date INDEX 1.
      SORT lr_date BY table_line.
      DELETE ADJACENT DUPLICATES FROM lr_date.

      LOOP AT lr_date ASSIGNING FIELD-SYMBOL(&lt;lw_date&gt;).
        APPEND INITIAL LINE TO lr_timestp ASSIGNING FIELD-SYMBOL(&lt;lw_timestp&gt;).
        IF &lt;lw_date&gt;-low IS NOT INITIAL.
          CONVERT DATE &lt;lw_date&gt;-low TIME &apos;000000&apos;
             INTO TIME STAMP &lt;lw_timestp&gt;-low TIME ZONE sy-zonlo.
        ENDIF.
        IF &lt;lw_date&gt;-high IS NOT INITIAL.
          CONVERT DATE &lt;lw_date&gt;-high TIME &apos;235959&apos;
             INTO TIME STAMP &lt;lw_timestp&gt;-high TIME ZONE sy-zonlo.
        ENDIF.
        &lt;lw_timestp&gt;-sign = &lt;lw_date&gt;-sign.
        &lt;lw_timestp&gt;-option = &lt;lw_date&gt;-option.
      ENDLOOP.
    ENDIF.


    TRY .
        DATA(lt_lghdl) = lo_db-&gt;get_log_handles(
              ir_timestp      = lr_timestp
              ir_uname        = lr_uname
              ).
        lo_api-&gt;delete_messages( it_lghdl = lt_lghdl ).
        lo_db-&gt;delete_historial(
          EXPORTING
            ir_timestp      = lr_timestp
            ir_uname        = lr_uname
          ).
        MESSAGE s024.
      CATCH cx_sy_sql_error  &quot;
            cx_bapi_error.
        MESSAGE i023 DISPLAY LIKE &apos;E&apos;.
        IF sy-batch = abap_true.
          LEAVE PROGRAM.
        ELSE.
          LEAVE TO CURRENT TRANSACTION.
        ENDIF.
    ENDTRY.
  ENDMETHOD.
ENDCLASS.               &quot;lcl_historial_manager
*&amp;---------------------------------------------------------------------*
*&amp;       Class (Implementation)  lcl_stock_manager
*&amp;---------------------------------------------------------------------*
*        Text
*----------------------------------------------------------------------*
CLASS lcl_stock_manager IMPLEMENTATION.
  METHOD load.
    DATA: lo_item  TYPE REF TO lcl_item,
          lo_api   TYPE REF TO lcl_api,
          lo_db    TYPE REF TO lcl_db,
          lx_error TYPE REF TO cx_bapi_error,
          lt_items TYPE bapi10504stock2_tab,
          lt_hist  TYPE zusfp_sasa_stock_upd_t,
          lv_matnr TYPE matnr.
    FIELD-SYMBOLS: &lt;lw_item&gt;   TYPE bapi10504stock2,
                   &lt;lw_return&gt; TYPE bapiret2.
    DEFINE lm_add_messages.
      LOOP AT lx_error-&gt;status ASSIGNING &lt;lw_return&gt;.
        po_log-&gt;add_bapi_return( &lt;lw_return&gt; ).
      ENDLOOP.
      po_log-&gt;save_to_db( ).
      RETURN.
    END-OF-DEFINITION.

    TRY .
        po_media-&gt;open( ).
        DATA(lo_iterator) = po_media-&gt;get_iterator( ).
      CATCH cx_bapi_error INTO lx_error.
        lm_add_messages.
    ENDTRY.

    IF sy-batch = abap_false.
      IF lo_iterator-&gt;preview( ) = abap_false.
        po_log-&gt;add_message_free_text(
        EXPORTING
          im_text         = &apos;Action cancelled by user.&apos;(M01)   &quot; Text to Be Displayed
          im_msg_type     = &apos;I&apos;    &quot; Message Type
          im_problemclass = &apos;4&apos;    &quot; Application Log: Message Problem Class
          ).
        po_log-&gt;save_to_db( ).
        RETURN.
      ENDIF.
    ENDIF.

    lo_api ?= me-&gt;get_api( ).
    lo_db  ?= me-&gt;get_db( ).
    TRY .
        DATA(lv_logsys) = lo_api-&gt;get_logical_system( ).
      CATCH cx_bapi_error INTO lx_error.
        lm_add_messages.
    ENDTRY.
    WHILE lo_iterator-&gt;hasnext( ) = abap_true.
      lo_item ?= lo_iterator-&gt;next( ).
      APPEND INITIAL LINE TO lt_items ASSIGNING &lt;lw_item&gt;.
      MOVE-CORRESPONDING lo_item-&gt;w_item TO &lt;lw_item&gt;.
      APPEND lo_item-&gt;w_item TO lt_hist.
      &lt;lw_item&gt;-stock_type = 11.
      &lt;lw_item&gt;-version = p_vstk.
      &lt;lw_item&gt;-atpcat = p_cstk.
      &lt;lw_item&gt;-spec_stock_system = lv_logsys.
      TRY .
          &lt;lw_item&gt;-loctype = lo_db-&gt;get_location_type( &lt;lw_item&gt;-location  ).
        CATCH cx_sy_sql_error.
          CLEAR &lt;lw_item&gt;-loctype.
      ENDTRY.
      &lt;lw_item&gt;-storage_location = &apos;aSa&apos;.
      lv_matnr = &lt;lw_item&gt;-product.
      SHIFT lv_matnr RIGHT DELETING TRAILING space.
      OVERLAY lv_matnr WITH &apos;000000000000000000&apos;.
      &lt;lw_item&gt;-product = lv_matnr.
    ENDWHILE.

    po_hist-&gt;set_new( it_data = lt_hist
                      io_log  = po_log  ).
    lo_api-&gt;update_stock( EXPORTING it_items  = lt_items
                          IMPORTING et_return = DATA(lt_return) ).
    READ TABLE lt_return WITH KEY type = &apos;E&apos; TRANSPORTING NO FIELDS.
    IF sy-subrc = 0.
      lo_api-&gt;rollback( ).
    ELSE.
      lo_api-&gt;commit( ).
      po_log-&gt;add_message_free_text(
      EXPORTING
        im_text         = &apos;Stock successfully updated.&apos;(M04)   &quot; Text to Be Displayed
        im_msg_type     = &apos;I&apos;    &quot; Message Type
        im_problemclass = &apos;4&apos;    &quot; Application Log: Message Problem Class
        ).
      po_log-&gt;save_to_db( ).

    ENDIF.
    LOOP AT lt_return ASSIGNING &lt;lw_return&gt;.
      po_log-&gt;add_bapi_return( &lt;lw_return&gt; ).
    ENDLOOP.
    IF sy-subrc = 0.
      po_log-&gt;save_to_db( ).
    ENDIF.

  ENDMETHOD.
  METHOD get_api.
    ro_api = NEW lcl_api( ).
  ENDMETHOD.
  METHOD get_db.
    ro_db = NEW lcl_db( ).
  ENDMETHOD.
ENDCLASS.               &quot;lcl_stock_manager
*&amp;---------------------------------------------------------------------*
*&amp;       Class (Implementation)  lcl_spreadsheet
*&amp;---------------------------------------------------------------------*
*        Text
*----------------------------------------------------------------------*
CLASS lcl_spreadsheet IMPLEMENTATION.
  METHOD open.

    &quot;Read the content of XLSX file
    TRY.
        xs_file_data = cl_openxml_helper=&gt;load_local_file( p_fstksp ).
      CATCH cx_openxml_not_found.
    ENDTRY.
    load_package( ).
    &quot;Read the sheet XML
    xs_sheet_data = load_xml_data( co_sheet_xml ).
    &quot;Read the shared string XML
    xs_shared_data = load_xml_data( co_shared_str_xml ).
  ENDMETHOD.
  METHOD get_iterator.
    DATA: lo_shared_str_dom     TYPE REF TO if_ixml_document,
          lo_shared_str_nodeset TYPE REF TO if_ixml_node,
          lxs_shared_str_xml    TYPE xstring,
          lt_data               TYPE zusfp_sasa_stock_upd_t,
          lt_return             TYPE bapiret2_t,
          ls_message            TYPE string.
    FIELD-SYMBOLS  &lt;lw_return&gt; TYPE bapiret2.

    TRY.
        CALL TRANSFORMATION zusfp_trf_asastk_remnsp
          SOURCE XML me-&gt;xs_shared_data
          RESULT XML lxs_shared_str_xml.
        &quot;Create a nodeset from the shared XML
        CALL FUNCTION &apos;SDIXML_XML_TO_DOM&apos;
          EXPORTING
            xml           = lxs_shared_str_xml
          IMPORTING
            document      = lo_shared_str_dom
          EXCEPTIONS
            invalid_input = 1
            OTHERS        = 2.
        IF sy-subrc = 0.
          lo_shared_str_nodeset = lo_shared_str_dom-&gt;clone( ).
        ENDIF.
        &quot;Pass the SHEET XML and Shared String Nodeset to the main transformation
        CALL TRANSFORMATION zusfp_trf_asastk_import
          PARAMETERS p_shared_string = lo_shared_str_nodeset
          SOURCE XML me-&gt;xs_sheet_data
          RESULT t_data = lt_data.
      CATCH cx_xslt_exception INTO DATA(lx_error).
        MESSAGE e000 WITH lx_error-&gt;if_message~get_text( ) INTO ls_message.
        m_raise_exception.
    ENDTRY.

    DATA(lo_iterator) = NEW lcl_ws_iterator( ).
    LOOP AT lt_data ASSIGNING FIELD-SYMBOL(&lt;lw_data&gt;).
      lo_iterator-&gt;add_item( &lt;lw_data&gt; ).
    ENDLOOP.
    lo_iterator-&gt;initialize( ).

    ro_iterator = lo_iterator.
  ENDMETHOD.
  METHOD free.
  ENDMETHOD.
  METHOD load_package.
    DATA: lt_return  TYPE bapiret2_t,
          ls_message TYPE string.
    FIELD-SYMBOLS  &lt;lw_return&gt; TYPE bapiret2.

    TRY.
        o_package = cl_xlsx_document=&gt;load_document( iv_data = xs_file_data ).
        o_parts = o_package-&gt;get_parts( ).
      CATCH cx_root INTO DATA(lx_error).
        MESSAGE e000 WITH lx_error-&gt;if_message~get_text( ) INTO ls_message.
        m_raise_exception.
    ENDTRY.
  ENDMETHOD. &quot;load_package
  METHOD load_xml_data.
    DATA: lt_return  TYPE bapiret2_t,
          ls_message TYPE string.
    FIELD-SYMBOLS  &lt;lw_return&gt; TYPE bapiret2.

    TRY.
        DATA(lv_uri) = o_parts-&gt;get_part( 2 )-&gt;get_parts( )-&gt;get_part( i_xml_index )-&gt;get_uri( )-&gt;get_uri( ).
        DATA(lo_xml_part_uri) = cl_openxml_parturi=&gt;create_from_partname( lv_uri ).
        DATA(lo_xml_part) = o_package-&gt;get_part_by_uri( lo_xml_part_uri ).
        r_xml_data = lo_xml_part-&gt;get_data( ).
      CATCH cx_root INTO DATA(lx_error).
        MESSAGE e000 WITH lx_error-&gt;if_message~get_text( ) INTO ls_message.
        m_raise_exception.
    ENDTRY.
  ENDMETHOD. &quot;load_xml_data

ENDCLASS.               &quot;lcl_spreadsheet
*&amp;---------------------------------------------------------------------*
*&amp;       Class (Implementation)  lcl_ws_iterator
*&amp;---------------------------------------------------------------------*
*        Text
*----------------------------------------------------------------------*
CLASS lcl_ws_iterator IMPLEMENTATION.
  METHOD add_item.
    APPEND iw_item TO t_data.
  ENDMETHOD.
  METHOD initialize.
    SORT t_data BY table_line.
  ENDMETHOD.
  METHOD lif_iterator~hasnext.

    r_result = abap_false.
    IF lines( me-&gt;t_data ) &gt; 0.
      r_result = abap_true.
    ENDIF.
  ENDMETHOD.
  METHOD lif_iterator~next.

    READ TABLE me-&gt;t_data ASSIGNING FIELD-SYMBOL(&lt;lw_item&gt;) INDEX 1.
    IF sy-subrc = 0.
      DATA(lo_item) = NEW lcl_item( &lt;lw_item&gt; ).
      ro_object = lo_item.
      DELETE me-&gt;t_data INDEX 1.
    ENDIF.
  ENDMETHOD.
  METHOD lif_iterator~preview.
    DATA  lo_api TYPE REF TO lcl_api.

    r_ok = abap_false.
    lo_api ?= me-&gt;get_api( ).
    TRY .
        r_ok = lo_api-&gt;show_pop_up( me-&gt;t_data ).
      CATCH cx_bapi_error.
        RETURN.
    ENDTRY.
  ENDMETHOD.
  METHOD get_api.
    ro_api = NEW lcl_api( ).
  ENDMETHOD.
ENDCLASS.               &quot;lcl_ws_iterator
*&amp;---------------------------------------------------------------------*
*&amp;       Class (Implementation)  lcl_item
*&amp;---------------------------------------------------------------------*
*        Text
*----------------------------------------------------------------------*
CLASS lcl_item IMPLEMENTATION.
  METHOD constructor.
    me-&gt;w_item = pw_item.
  ENDMETHOD.
ENDCLASS.               &quot;lcl_item
*&amp;---------------------------------------------------------------------*
*&amp;       Class (Implementation)  lcl_api
*&amp;---------------------------------------------------------------------*
*        Text
*----------------------------------------------------------------------*
CLASS lcl_api IMPLEMENTATION.
  METHOD get_logical_system.
    DATA: ls_message TYPE string,
          lt_return  TYPE bapiret2_t.
    FIELD-SYMBOLS  &lt;lw_return&gt; TYPE bapiret2.

    CLEAR r_logsys.
    CALL FUNCTION &apos;OWN_LOGICAL_SYSTEM_GET&apos;
      IMPORTING
        own_logical_system             = r_logsys
      EXCEPTIONS
        own_logical_system_not_defined = 1
        OTHERS                         = 2.
    IF sy-subrc &lt;&gt; 0.
      MESSAGE
           ID sy-msgid
         TYPE sy-msgty
       NUMBER sy-msgno
         WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4
         INTO ls_message.
      m_raise_exception.
    ENDIF.
  ENDMETHOD.
  METHOD get_methods.
    CONSTANTS lc_zusfp_upd_stk_method TYPE domname VALUE &apos;ZUSFP_UPD_STK_METHOD&apos;.
    DATA: lt_methods TYPE STANDARD TABLE OF dd07v,
          ls_message TYPE string,
          lt_return  TYPE bapiret2_t.
    FIELD-SYMBOLS  &lt;lw_return&gt; TYPE bapiret2.

    CALL FUNCTION &apos;DD_DOMA_GET&apos;
      EXPORTING
        domain_name   = lc_zusfp_upd_stk_method
*       GET_STATE     = &apos;M  &apos;
*       LANGU         = SY-LANGU
*       PRID          = 0
*       WITHTEXT      = &apos;X&apos;
*     IMPORTING
*       DD01V_WA_A    =
*       DD01V_WA_N    =
*       GOT_STATE     =
      TABLES
        dd07v_tab_a   = lt_methods
        dd07v_tab_n   = rt_methods
      EXCEPTIONS
        illegal_value = 1
        op_failure    = 2
        OTHERS        = 3.
    IF sy-subrc &lt;&gt; 0.
      m_raise_exception.
    ENDIF.
  ENDMETHOD.
  METHOD show_pop_up.

    r_bool = abap_false.
    TRY .
        CALL FUNCTION &apos;ZUSFP_LIST_WITH_OK_AND_CANCEL&apos;
          EXPORTING
            i_start_column = 40
            i_start_line   = 3
            i_end_column   = 72
            i_end_line     = 20
            it_data        = it_data
          IMPORTING
            e_option       = r_bool.
      CATCH cx_bapi_error INTO DATA(lx_error).
        RAISE EXCEPTION lx_error.
    ENDTRY.
  ENDMETHOD.
  METHOD confirm.
    DATA: lv_answer(1) TYPE c,
          lt_return    TYPE bapiret2_t,
          ls_message   TYPE string.
    FIELD-SYMBOLS  &lt;lw_return&gt; TYPE bapiret2.

    CALL FUNCTION &apos;POPUP_TO_CONFIRM&apos;
      EXPORTING
        text_question  = i_question
      IMPORTING
        answer         = lv_answer
      EXCEPTIONS
        text_not_found = 1
        OTHERS         = 2.
    IF sy-subrc &lt;&gt; 0.
      m_raise_exception.
    ENDIF.
    IF lv_answer &lt;&gt; &apos;1&apos;.
      MESSAGE i022 INTO ls_message.
      m_raise_exception.
    ENDIF.

  ENDMETHOD.
  METHOD show_historial.

    TRY .
        CALL FUNCTION &apos;ZUSFP_HISTORIAL_POP_UP&apos;
          EXPORTING
            i_start_column = 20
            i_start_line   = 3
            i_end_column   = 95
            i_end_line     = 20
            it_data        = it_data.
      CATCH cx_bapi_error INTO DATA(lx_error).
        RAISE EXCEPTION lx_error.
    ENDTRY.
  ENDMETHOD.
  METHOD update_stock.

    TRY .
        DATA(lv_logsys) = me-&gt;get_logical_system( ).
      CATCH cx_bapi_error INTO DATA(lx_error).
        et_return = lx_error-&gt;status.
    ENDTRY.

    CALL FUNCTION &apos;BAPI_STSRVAPS_SAVEMULTI2&apos;
      EXPORTING
        logical_system = lv_logsys
*       COMMIT_CONTROL = &apos;E&apos;
*       PLANNING_MODE_USAGE                 =
*       PLANNING_VERSION                    = &apos;000&apos;
*       NO_AUTOMATIC_VERSION_CREATION       =
      TABLES
        stock          = it_items
*       CLASSVALUESCHAR                     =
*       CLASSVALUESNUM =
*       CLASSVALUESCURR                     =
        return         = et_return
*       EXTENSION_IN   =
*       FCS_REDUCTION  =
      .
  ENDMETHOD.
  METHOD commit.
    CALL FUNCTION &apos;BAPI_TRANSACTION_COMMIT&apos;
      EXPORTING
        wait = &apos;X&apos;
*     IMPORTING
*       RETURN        =
      .
  ENDMETHOD.
  METHOD rollback.
    CALL FUNCTION &apos;BAPI_TRANSACTION_ROLLBACK&apos;
*     IMPORTING
*       RETURN        =
      .
  ENDMETHOD.
  METHOD delete_messages.
    DATA: lt_return  TYPE bapiret2_t,
          ls_message TYPE string.
    FIELD-SYMBOLS  &lt;lw_return&gt; TYPE bapiret2.

    CALL FUNCTION &apos;BAL_DB_DELETE&apos;
      EXPORTING
        i_t_log_handle    = it_lghdl
      EXCEPTIONS
        no_logs_specified = 1
        OTHERS            = 2.
    IF sy-subrc &lt;&gt; 0.
      m_raise_exception.
    ENDIF.
  ENDMETHOD.
ENDCLASS.               &quot;lcl_api


*&amp;---------------------------------------------------------------------*
*&amp;       Class (Implementation)  lcl_db
*&amp;---------------------------------------------------------------------*
*        Text
*----------------------------------------------------------------------*
CLASS lcl_db IMPLEMENTATION.
  METHOD get_location_type.

    SELECT loctype
      FROM /sapapo/loc
        UP TO 1 ROWS
      INTO r_loctype
     WHERE locno = i_locno.
    ENDSELECT.
    IF sy-subrc &lt;&gt; 0.
      RAISE EXCEPTION TYPE cx_sy_sql_error.
    ENDIF.
  ENDMETHOD.
  METHOD get_log_handles.

    SELECT lghdl
      FROM zusfpt_asa_stkup
      INTO TABLE rt_lghdl
     WHERE aedat IN ir_timestp
       AND uname IN ir_uname.
    IF sy-subrc &lt;&gt; 0.
      RAISE EXCEPTION TYPE cx_sy_sql_error.
    ENDIF.
  ENDMETHOD.
  METHOD delete_historial.

    DELETE FROM zusfpt_asa_stkup
     WHERE aedat IN ir_timestp
       AND uname IN ir_uname.
    IF sy-subrc &lt;&gt; 0.
      RAISE EXCEPTION TYPE cx_sy_sql_error.
    ENDIF.
  ENDMETHOD.
ENDCLASS.               &quot;lcl_db</source>
 </PROG>
 <PROG NAME="ZUSFPR_STOCK_CREATION_TOP" VARCL="X" SUBC="I" APPL="Z" RSTAT="K" RMAND="050" RLOAD="E" UCCHECK="X">
  <textPool>
   <language SPRAS="E">
    <textElement ID="R" ENTRY="Include ZUSFPR_STOCK_CREATION_TOP" LENGTH="33 "/>
   </language>
  </textPool>
  <source>*&amp;---------------------------------------------------------------------*
*&amp; Include ZUSFPR_STOCK_CREATION_TOP                         Report ZUSFPR_STOCK_CREATION
*&amp;
*&amp;---------------------------------------------------------------------*
REPORT zusfpr_stock_creation MESSAGE-ID zgldev.

TABLES: bapi10504stock2.

SELECTION-SCREEN BEGIN OF BLOCK b0 WITH FRAME TITLE text-t00.
PARAMETERS: p_stck TYPE char01 RADIOBUTTON GROUP optn DEFAULT &apos;X&apos; USER-COMMAND code1,
            p_lgmn TYPE char01 RADIOBUTTON GROUP optn.
SELECTION-SCREEN END OF BLOCK b0.

SELECTION-SCREEN BEGIN OF BLOCK stock WITH FRAME TITLE text-t01.
PARAMETERS: p_vstk TYPE /sapapo/version,
            p_cstk TYPE /sapapo/atpcat,
            p_istk TYPE char01 RADIOBUTTON GROUP mode DEFAULT &apos;X&apos; USER-COMMAND code2,
            p_sstk TYPE char01 RADIOBUTTON GROUP mode.

SELECTION-SCREEN BEGIN OF BLOCK it1 WITH FRAME.
SELECT-OPTIONS: spstkif FOR bapi10504stock2-product  MODIF ID it1,
                slstkif FOR bapi10504stock2-location MODIF ID it1.
SELECTION-SCREEN END OF BLOCK it1.

SELECTION-SCREEN BEGIN OF BLOCK sp1 WITH FRAME.
PARAMETERS  p_fstksp  TYPE string MEMORY ID zusfpr_stock_02 &quot;zusfpr_stock_01
 LOWER CASE MODIF ID sp1.
SELECTION-SCREEN END OF BLOCK sp1.

SELECTION-SCREEN END OF BLOCK stock.

SELECTION-SCREEN BEGIN OF BLOCK log WITH FRAME TITLE text-t02.
PARAMETERS: p_vlog TYPE char01 RADIOBUTTON GROUP logp DEFAULT &apos;X&apos; USER-COMMAND code3,
            p_dlog TYPE char01 RADIOBUTTON GROUP logp.

SELECTION-SCREEN BEGIN OF BLOCK blg1 WITH FRAME TITLE text-t03.
SELECT-OPTIONS: &quot;s_llog FOR bapi10504stock2-location MODIF ID lg1,
                s_ulog FOR sy-uname MODIF ID lg1,
                s_dlog FOR sy-datum MODIF ID lg1.
SELECTION-SCREEN END OF BLOCK blg1.

SELECTION-SCREEN END OF BLOCK log.

*--------------------------------------------------------------------*
* INTERFACE  LIF_ITERATOR
* ------------------------------------------------------------------ *
* OVERVIEW: This interface defines an interator.
*--------------------------------------------------------------------*
INTERFACE lif_iterator.
  METHODS: next    RETURNING VALUE(ro_object) TYPE REF TO object,
*--------------------------------------------------------------------*
* NEXT
*--------------------------------------------------------------------*
*       EFFECTS.:  Returns Next Object.
*--------------------------------------------------------------------*
* &lt;-- RO_OBJECT The next object.
*--------------------------------------------------------------------*
    hasnext RETURNING VALUE(r_result)  TYPE abap_bool,
*--------------------------------------------------------------------*
* HASNEXT
*--------------------------------------------------------------------*
*       EFFECTS.:  Returns the result.
*--------------------------------------------------------------------*
* &lt;-- R_RESULT The next object.
*--------------------------------------------------------------------*
    preview RETURNING VALUE(r_ok) TYPE abap_bool.
*--------------------------------------------------------------------*
* PREVIEW
*--------------------------------------------------------------------*
*       EFFECTS.:  Shows a list of items to be returned in sequence
*                  and return the button pressed by user (OK = TRUE
*                  and CANCEL = FALSE).
*--------------------------------------------------------------------*
* &lt;-- R_RESULT The next object.
*--------------------------------------------------------------------*
ENDINTERFACE.                    &quot;lif_iterator  PUBLIC
*--------------------------------------------------------------------*
* CLASSES DEFINITIONS
*--------------------------------------------------------------------*
CLASS: lcl_webservice  DEFINITION DEFERRED,
       lcl_spreadsheet DEFINITION DEFERRED.
CLASS lcl_ws_iterator DEFINITION FINAL FRIENDS lcl_webservice
                                               lcl_spreadsheet.
  PUBLIC SECTION.
    INTERFACES lif_iterator.
    ALIASES: next    FOR lif_iterator~next,
             hasnext FOR lif_iterator~hasnext,
             preview FOR lif_iterator~preview.
  PRIVATE SECTION.
    DATA t_data TYPE zusfp_sasa_stock_upd_t.
    METHODS: add_item IMPORTING iw_item TYPE zusfp_sasa_stock_upd,
      initialize,
      get_api RETURNING VALUE(ro_api) TYPE REF TO object.
ENDCLASS.
CLASS lcl_item DEFINITION FINAL.
  PUBLIC SECTION.
    DATA w_item READ-ONLY TYPE zusfp_sasa_stock_upd.
    METHODS constructor IMPORTING pw_item TYPE zusfp_sasa_stock_upd.
ENDCLASS.
*--------------------------------------------------------------------*
* CLASS  LCL_MEDIA
* ------------------------------------------------------------------ *
* OVERVIEW: Generic definition of a media. A media can be an interface
*           or a file. It defines basic methods for a media.
*--------------------------------------------------------------------*
CLASS lcl_media DEFINITION ABSTRACT.
  PUBLIC SECTION.
    CLASS-METHODS get_media RETURNING VALUE(ro_media) TYPE REF TO lcl_media RAISING cx_bapi_error.
    METHODS: open  ABSTRACT RAISING cx_bapi_error,
*--------------------------------------------------------------------*
* OPEN
*--------------------------------------------------------------------*
*       EFFECTS.:  Loads the media content.
*--------------------------------------------------------------------*
      get_iterator ABSTRACT RETURNING VALUE(ro_iterator) TYPE REF TO lif_iterator
                            RAISING   cx_bapi_error,
*--------------------------------------------------------------------*
* GET_ITERATOR
*--------------------------------------------------------------------*
*       EFFECTS.:  Returns an iterator for the media content.
*--------------------------------------------------------------------*
      free ABSTRACT.
*--------------------------------------------------------------------*
* FREE
*--------------------------------------------------------------------*
*       EFFECTS.:  Cleans up internal objects.
*--------------------------------------------------------------------*
ENDCLASS.                    &quot;lcl_media DEFINITION
CLASS lcl_webservice DEFINITION FINAL INHERITING FROM lcl_media.
  PUBLIC SECTION.
    METHODS: constructor RAISING cx_bapi_error,
      open REDEFINITION,
      get_iterator REDEFINITION,
      free REDEFINITION.
  PRIVATE SECTION.
    DATA: o_proxy TYPE REF TO zusfpco_si_get_raw_material_in,
          w_data  TYPE zusfpmt_get_raw_material_sap_r.
ENDCLASS.
*--------------------------------------------------------------------*
* CLASS  LCL_XLS
* ------------------------------------------------------------------ *
* OVERVIEW: Represents a Spreadsheet.
*--------------------------------------------------------------------*
CLASS lcl_spreadsheet DEFINITION FINAL INHERITING FROM lcl_media.
  PUBLIC SECTION.
    CONSTANTS co_sheet_xml TYPE i VALUE 2.
    CONSTANTS co_shared_str_xml TYPE i VALUE 3.

    METHODS:
      open REDEFINITION,
      get_iterator REDEFINITION,
      free REDEFINITION.

  PRIVATE SECTION.
    DATA: xs_file_data   TYPE xstring,
          o_package      TYPE REF TO cl_openxml_package,
          o_parts        TYPE REF TO cl_openxml_partcollection,
          xs_sheet_data  TYPE xstring,
          xs_shared_data TYPE xstring.

    METHODS: load_package RAISING cx_bapi_error,
      load_xml_data IMPORTING VALUE(i_xml_index) TYPE i
                    RETURNING VALUE(r_xml_data)  TYPE xstring
                    RAISING   cx_bapi_error.
ENDCLASS.                    &quot;lcl_xls DEFINITION


CLASS lcl_api DEFINITION FINAL.
  PUBLIC SECTION.
    METHODS: get_logical_system RETURNING VALUE(r_logsys) TYPE logsys
                                RAISING   cx_bapi_error,
      get_methods        RETURNING VALUE(rt_methods) TYPE dd07v_tab
                         RAISING   cx_bapi_error,
      confirm            IMPORTING i_question TYPE string
                         RAISING   cx_bapi_error,
      show_pop_up        IMPORTING it_data       TYPE ANY TABLE
                         RETURNING VALUE(r_bool) TYPE abap_bool
                         RAISING   cx_bapi_error,
      show_historial     IMPORTING it_data TYPE zusfp_sasa_hist_view_t
                         RAISING   cx_bapi_error,
      update_stock       IMPORTING it_items  TYPE bapi10504stock2_tab
                         EXPORTING et_return TYPE bapiret2_t,
      commit,
      rollback,
      delete_messages    IMPORTING it_lghdl TYPE bal_t_logh.
ENDCLASS.


CLASS lcl_db DEFINITION FINAL.
  PUBLIC SECTION.
    TYPES: yr_uname   TYPE RANGE OF uname,
           yr_timestp TYPE RANGE OF tzntstmps.
    METHODS: get_location_type IMPORTING i_locno          TYPE /sapapo/locno
                               RETURNING VALUE(r_loctype) TYPE /sapapo/c_loctype
                               RAISING   cx_sy_sql_error,
      get_log_handles  IMPORTING ir_timestp      TYPE yr_timestp
                                 ir_uname        TYPE yr_uname
                       RETURNING VALUE(rt_lghdl) TYPE bal_t_logh
                       RAISING   cx_sy_sql_error,
      delete_historial IMPORTING ir_timestp TYPE yr_timestp
                                 ir_uname   TYPE yr_uname
                       RAISING   cx_sy_sql_error.
ENDCLASS.

CLASS lcl_historial_manager DEFINITION DEFERRED.
CLASS lcl_stock_manager DEFINITION FINAL.
  PUBLIC SECTION.
    METHODS  load IMPORTING po_media TYPE REF TO lcl_media
                            po_log   TYPE REF TO cl_ilm_log
                            po_hist  TYPE REF TO lcl_historial_manager.
  PRIVATE SECTION.
    METHODS: get_api RETURNING VALUE(ro_api) TYPE REF TO object,
      get_db  RETURNING VALUE(ro_db)  TYPE REF TO object.
ENDCLASS.


CLASS lcl_historial_manager DEFINITION FINAL.
  PUBLIC SECTION.
    DATA timestp TYPE tzntstmps.
    CLASS-METHODS: shows IMPORTING io_log TYPE REF TO cl_ilm_log,
      delete.
    METHODS: constructor IMPORTING i_timestp TYPE tzntstmps,
      set_new IMPORTING it_data TYPE zusfp_sasa_stock_upd_t
                        io_log  TYPE REF TO cl_ilm_log.
ENDCLASS.


*--------------------------------------------------------------------*
* CLASS  LCL_MAIN
* ------------------------------------------------------------------ *
* OVERVIEW: This class controls the program behavior, provided the
*           selection arguments have been set.
*--------------------------------------------------------------------*
CLASS lcl_main DEFINITION FINAL.
  PUBLIC SECTION.
    CONSTANTS c_log_object TYPE balobj_d VALUE &apos;ZFP_ASA_STK_UPL&apos;.
    CLASS-METHODS: get_field_value IMPORTING p_fieldname     TYPE dynfnam
                                   RETURNING VALUE(r_fvalue) TYPE dynfieldvalue.
*--------------------------------------------------------------------*
* GET_FIELD_VALUE
*--------------------------------------------------------------------*
*       EFFECTS.:  Returns the values of a field, before PAI is
*                  executed.
*--------------------------------------------------------------------*
* --&gt; P_FILENAME  Name of the file.
* &lt;-- R_FVALUE    Field value.
*--------------------------------------------------------------------*
    METHODS: constructor RAISING cx_bapi_error,
      run,
      show_messages,
      house_keeping.
*--------------------------------------------------------------------*
* HOUSE_KEEPING
*--------------------------------------------------------------------*
*       EFFECTS.:  Cleans up inner objects.
*--------------------------------------------------------------------*
  PRIVATE SECTION.
    DATA: o_log       TYPE REF TO cl_ilm_log,
          o_media     TYPE REF TO lcl_media,
          o_stock     TYPE REF TO lcl_stock_manager,
          o_historial TYPE REF TO lcl_historial_manager.
ENDCLASS.                    &quot;lcl_main DEFINITION


DATA: o_main  TYPE REF TO lcl_main,
      s_title TYPE string.

DEFINE m_raise_exception.
  APPEND INITIAL LINE TO lt_return ASSIGNING &lt;lw_return&gt;.
  &lt;lw_return&gt;-id         = sy-msgid.
  &lt;lw_return&gt;-type       = sy-msgty.
  &lt;lw_return&gt;-number     = sy-msgno.
  &lt;lw_return&gt;-message    = ls_message.
  &lt;lw_return&gt;-message_v1 = sy-msgv1.
  &lt;lw_return&gt;-message_v2 = sy-msgv2.
  &lt;lw_return&gt;-message_v3 = sy-msgv3.
  &lt;lw_return&gt;-message_v4 = sy-msgv4.
  RAISE EXCEPTION TYPE cx_bapi_error
    EXPORTING
      status = lt_return.
END-OF-DEFINITION.</source>
 </PROG>
 <PROG NAME="ZUSFPR_STOCK_CREATION" VARCL="X" SUBC="1" APPL="Z" RSTAT="K" RMAND="050" RLOAD="E" FIXPT="X" UCCHECK="X">
  <textPool>
   <language SPRAS="E">
    <textElement ID="I" KEY="M01" ENTRY="Action cancelled by user." LENGTH="50 "/>
    <textElement ID="I" KEY="M02" ENTRY="Version and Category are obligatory for Stock Updating." LENGTH="110 "/>
    <textElement ID="I" KEY="M03" ENTRY="The file path and name are obligatory for Stock Updating through spreadsheet." LENGTH="132 "/>
    <textElement ID="I" KEY="M04" ENTRY="Stock successfully updated." LENGTH="54 "/>
    <textElement ID="I" KEY="M05" ENTRY="Do you confirm the log registers exclusion?" LENGTH="86 "/>
    <textElement ID="I" KEY="T00" ENTRY="Running Options" LENGTH="25 "/>
    <textElement ID="I" KEY="T01" ENTRY="Stock updating" LENGTH="24 "/>
    <textElement ID="I" KEY="T02" ENTRY="Log Operations" LENGTH="21 "/>
    <textElement ID="I" KEY="T03" ENTRY="Exclusion Parameters" LENGTH="40 "/>
    <textElement ID="I" KEY="T04" ENTRY="aSa Stock Updating" LENGTH="28 "/>
    <textElement ID="I" KEY="T05" ENTRY="Upload spreadsheet" LENGTH="28 "/>
    <textElement ID="R" ENTRY="Stock creation from aSa Interface" LENGTH="33 "/>
    <textElement ID="S" KEY="P_CSTK" ENTRY="D       ." LENGTH="16 "/>
    <textElement ID="S" KEY="P_DLOG" ENTRY="        Delete Log" LENGTH="26 "/>
    <textElement ID="S" KEY="P_FSTKSP" ENTRY="        File Path" LENGTH="17 "/>
    <textElement ID="S" KEY="P_ISTK" ENTRY="        aSa Interface" LENGTH="26 "/>
    <textElement ID="S" KEY="P_LGMN" ENTRY="        Log Management" LENGTH="22 "/>
    <textElement ID="S" KEY="P_SSTK" ENTRY="        Spreadsheet" LENGTH="26 "/>
    <textElement ID="S" KEY="P_STCK" ENTRY="        Stock Updating" LENGTH="26 "/>
    <textElement ID="S" KEY="P_VLOG" ENTRY="        View Log" LENGTH="26 "/>
    <textElement ID="S" KEY="P_VSTK" ENTRY="        Version" LENGTH="23 "/>
    <textElement ID="S" KEY="SLSTKIF" ENTRY="D       ." LENGTH="16 "/>
    <textElement ID="S" KEY="SPSTKIF" ENTRY="        Product" LENGTH="20 "/>
    <textElement ID="S" KEY="S_DLOG" ENTRY="        Date" LENGTH="12 "/>
    <textElement ID="S" KEY="S_LLOG" ENTRY="D       ." LENGTH="16 "/>
    <textElement ID="S" KEY="S_ULOG" ENTRY="D       ." LENGTH="17 "/>
   </language>
  </textPool>
  <source>************************************************************************
* PROGRAM ID           : ZUSFPR_STOCK_CREATION                         *
* PROGRAM TITLE        : FABRICATION - Stock Creation                  *
* AUTHOR               : Rafael Guares Quadros (META)                  *
* SUPPLIER             : GERDAU AÇOS LONGOS S.A.                       *
* DATE                 : 11/02/2016                                    *
* DEVELOPMENT ID       : Requirement 98325                             *
* CHANGE REQUEST (CTS) : SG1K905555                                    *
* DESCRIPTION          : Stock creation with data provided by aSa      *
*                        interface or from spreadsheet data.           *
*======================================================================*
* COPIED FROM         : (CLONED PROGRAM)                               *
* TITLE               : (PROGRAM TITLE)                                *
* OTHER RELATED OBJ   : (OBJECT NAMES)                                 *
*======================================================================*
* CHANGE HISTORY LOG                                                   *
*----------------------------------------------------------------------*
* MOD. NO.|  DATE    | NAME   | CORRECTION NUMBER | CHANGE REFERENCE # *
*----------------------------------------------------------------------*

INCLUDE: zusfpr_stock_creation_top                ,  &quot; global Data
         zusfpr_stock_creation_f01                ,  &quot; FORM-Routines
         zusfpr_stock_creation_c01                .  &quot; Classes Implementations
* INCLUDE ZUSFPR_STOCK_CREATION_O01               .  &quot; PBO-Modules
* INCLUDE ZUSFPR_STOCK_CREATION_I01               .  &quot; PAI-Modules
* INCLUDE ZUSFPR_STOCK_CREATION_F01               .  &quot; FORM-Routines

AT SELECTION-SCREEN OUTPUT.
  PERFORM organize_selection_screen.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_fstksp.
  IF p_sstk = abap_true.
    s_title  = &apos;Upload spreadsheet&apos;(T05).
    p_fstksp = cl_openxml_helper=&gt;browse_local_file_open(
                              iv_title      = s_title
                              iv_filename   = &apos;&apos;
                              iv_extpattern = &apos;All files(*.*)|*.*&apos; ).
  ENDIF.

START-OF-SELECTION.
  IF p_stck = abap_true AND ( p_vstk IS INITIAL OR p_cstk IS INITIAL ).
    MESSAGE &apos;Version and Category are obligatory for Stock Updating.&apos;(m02)
       TYPE &apos;I&apos; DISPLAY LIKE &apos;E&apos;.
    IF sy-batch = abap_false.
      LEAVE TO CURRENT TRANSACTION.
    ELSE.
      LEAVE PROGRAM.
    ENDIF.
  ENDIF.

  IF p_sstk = abap_true AND p_fstksp IS INITIAL.
    MESSAGE &apos;The file path and name are obligatory for Stock Updating through spreadsheet.&apos;(m03)
       TYPE &apos;I&apos; DISPLAY LIKE &apos;E&apos;.
    IF sy-batch = abap_false.
      LEAVE TO CURRENT TRANSACTION.
    ELSE.
      LEAVE PROGRAM.
    ENDIF.
  ENDIF.

  o_main = NEW lcl_main( ).

END-OF-SELECTION.
  o_main-&gt;run( ).
  IF sy-batch = abap_false.
    o_main-&gt;show_messages( ).
  ENDIF.
  o_main-&gt;house_keeping( ).
  FREE o_main.</source>
 </PROG>
 <PROG NAME="ZUSFPR_STOCK_CREATION_C01" VARCL="X" SUBC="I" APPL="Z" RSTAT="K" RMAND="050" RLOAD="E" UCCHECK="X">
  <textPool>
   <language SPRAS="E">
    <textElement ID="R" ENTRY="Include ZUSFPR_STOCK_CREATION_C01" LENGTH="33 "/>
   </language>
  </textPool>
  <source>*&amp;---------------------------------------------------------------------*
*&amp;  Include           ZUSFPR_STOCK_CREATION_C01
*&amp;---------------------------------------------------------------------*
CLASS lcl_main IMPLEMENTATION.
  METHOD constructor.
    DATA: lt_return  TYPE bapiret2_t,
          ls_message TYPE string,
          lv_timestp TYPE tzntstmps.
    FIELD-SYMBOLS  &lt;lw_return&gt; TYPE bapiret2.

    CONVERT DATE sy-datlo TIME sy-timlo
       INTO TIME STAMP lv_timestp TIME ZONE sy-zonlo.
    CONVERT TIME STAMP lv_timestp TIME ZONE sy-zonlo
       INTO DATE DATA(lv_date) TIME DATA(lv_time).
    TRY .
        o_log = NEW cl_ilm_log( im_extnumber = sy-repid &amp;&amp; sy-uname &amp;&amp;
                                               lv_date  &amp;&amp; lv_time  &amp;&amp;
                                               sy-zonlo
                                im_object    = c_log_object
                                im_title = &apos;aSa Stock Updating&apos;(t04) ).
      CATCH cx_ilm.
        MESSAGE e022 INTO ls_message.
        m_raise_exception.
    ENDTRY.
    o_media     = lcl_media=&gt;get_media( ).
    o_stock     = NEW lcl_stock_manager( ).
    o_historial = NEW lcl_historial_manager( lv_timestp ).
  ENDMETHOD.
  METHOD run.

    CASE abap_true.
      WHEN p_stck.
        o_stock-&gt;load( po_media = o_media
                       po_log   = o_log
                       po_hist  = o_historial ).
      WHEN p_lgmn.
        IF p_vlog = abap_true.
          lcl_historial_manager=&gt;shows( o_log ).
        ELSE.
          lcl_historial_manager=&gt;delete( ).
        ENDIF.
      WHEN OTHERS.
    ENDCASE.
  ENDMETHOD.
  METHOD show_messages.

    DATA(lw_statistics) = o_log-&gt;entries_in_log( ).
    IF lw_statistics-msg_cnt_al &gt; 0.
      o_log-&gt;show_log_fullscreen( ).
    ENDIF.
  ENDMETHOD.
  METHOD house_keeping.
    FREE: o_log, o_media, o_stock, o_historial.
  ENDMETHOD.
  METHOD get_field_value.
    DATA: lt_dynpfields TYPE dynpread_tabtype,
          lw_dynpfield  TYPE dynpread.

    MOVE p_fieldname TO lw_dynpfield-fieldname.
    APPEND lw_dynpfield TO lt_dynpfields.

    CALL FUNCTION &apos;DYNP_VALUES_READ&apos;
      EXPORTING
        dyname               = sy-repid
        dynumb               = sy-dynnr
      TABLES
        dynpfields           = lt_dynpfields[]
      EXCEPTIONS
        invalid_abapworkarea = 1
        invalid_dynprofield  = 2
        invalid_dynproname   = 3
        invalid_dynpronummer = 4
        invalid_request      = 5
        no_fielddescription  = 6
        invalid_parameter    = 7
        undefind_error       = 8
        double_conversion    = 9
        stepl_not_found      = 10
        OTHERS               = 11.
    IF sy-subrc &lt;&gt; 0.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
      WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.

    READ TABLE lt_dynpfields INTO lw_dynpfield
    WITH KEY fieldname = p_fieldname.
    IF sy-subrc = 0.
      r_fvalue = lw_dynpfield-fieldvalue.
    ENDIF.
  ENDMETHOD.                    &quot;get_field_value
ENDCLASS.
CLASS lcl_media IMPLEMENTATION.
  METHOD get_media.
    CASE abap_true.
      WHEN p_istk.
        TRY .
            DATA(lo_webservice) = NEW lcl_webservice( ).
          CATCH cx_bapi_error INTO DATA(lx_error).
            RAISE EXCEPTION lx_error.
        ENDTRY.
        ro_media = lo_webservice.
      WHEN p_sstk.
        DATA(lo_spreadsheet) = NEW lcl_spreadsheet( ).
        ro_media = lo_spreadsheet.
    ENDCASE.
  ENDMETHOD.
ENDCLASS.
CLASS lcl_webservice IMPLEMENTATION.
  METHOD constructor.
    DATA: lt_return  TYPE bapiret2_t,
          ls_message TYPE string.
    FIELD-SYMBOLS  &lt;lw_return&gt; TYPE bapiret2.


    super-&gt;constructor( ).
    TRY .
        me-&gt;o_proxy = NEW zusfpco_si_get_raw_material_in( ).
      CATCH cx_ai_system_fault INTO DATA(lx_error).
        MESSAGE e000 WITH lx_error-&gt;if_message~get_text( ) INTO ls_message.
        m_raise_exception.
    ENDTRY.
  ENDMETHOD.
  METHOD open.
    DATA: lw_request TYPE zusfpmt_get_raw_material_sap,
          lt_return  TYPE bapiret2_t,
          ls_message TYPE string.
    FIELD-SYMBOLS  &lt;lw_return&gt; TYPE bapiret2.

    TRY.
        o_proxy-&gt;si_get_raw_material_inventoryo(
          EXPORTING
            output = lw_request
          IMPORTING
            input = w_data ).
      CATCH cx_ai_system_fault INTO DATA(lx_error).
        MESSAGE e000 WITH lx_error-&gt;if_message~get_text( )
           INTO ls_message.
        m_raise_exception.
    ENDTRY.
  ENDMETHOD.
  METHOD get_iterator.
    DATA lw_line TYPE zusfp_sasa_stock_upd.

    DATA(lo_iterator) = NEW lcl_ws_iterator( ).
    LOOP AT me-&gt;w_data-mt_get_raw_material_sap_respon-raw_material
      ASSIGNING FIELD-SYMBOL(&lt;lw_raw_material&gt;).
      lw_line-location = &lt;lw_raw_material&gt;-sap_plant.
      lw_line-product = &lt;lw_raw_material&gt;-sap_sku.
      lw_line-quantity = &lt;lw_raw_material&gt;-weight.
      IF lw_line-product IN spstkif AND &quot;List filtering
         lw_line-location IN slstkif.
        lo_iterator-&gt;add_item( lw_line ).
      ENDIF.
    ENDLOOP.
    lo_iterator-&gt;initialize( ).

    ro_iterator = lo_iterator.
  ENDMETHOD.
  METHOD free.
    FREE o_proxy.
  ENDMETHOD.
ENDCLASS.


*&amp;---------------------------------------------------------------------*
*&amp;       Class (Implementation)  lcl_historial_manager
*&amp;---------------------------------------------------------------------*
*        Text
*----------------------------------------------------------------------*
CLASS lcl_historial_manager IMPLEMENTATION.
  METHOD constructor.

    me-&gt;timestp = i_timestp.
  ENDMETHOD.
  METHOD set_new.
    DATA: lo_pers_obj  TYPE REF TO zcl_usfp_t_asa_stkup,
          lv_method    TYPE zusfp_asa_upd_stk_method,
          lv_text(200) TYPE c,
          ls_data      TYPE string,
          lxs_data     TYPE xstring.

    TRY.
        lo_pers_obj = zca_usfp_t_asa_stkup=&gt;agent-&gt;create_persistent( i_aedat = me-&gt;timestp
                                                                      i_uname = sy-uname ).
      CATCH cx_os_object_existing INTO DATA(lx_exist).
        lv_text = lx_exist-&gt;get_text( ).
        io_log-&gt;add_message_free_text(
          EXPORTING
            im_text         = lv_text   &quot; Text to Be Displayed
            im_msg_type     = &apos;I&apos;    &quot; Message Type
            im_problemclass = &apos;1&apos;    &quot; Application Log: Message Problem Class
          ).
        RETURN.
    ENDTRY.

    TRY .
        CALL TRANSFORMATION zusfp_tf_asa_stock_data
          SOURCE asa_data = it_data
          RESULT XML ls_data.
      CATCH cx_transformation_error INTO DATA(lx_transf).
        lv_text = lx_transf-&gt;get_text( ).
        io_log-&gt;add_message_free_text(
          EXPORTING
            im_text         = lv_text   &quot; Text to Be Displayed
            im_msg_type     = &apos;I&apos;    &quot; Message Type
            im_problemclass = &apos;2&apos;    &quot; Application Log: Message Problem Class
          ).
    ENDTRY.

    IF ls_data IS NOT INITIAL.
      TRY .
          NEW cl_abap_gzip( )-&gt;compress_text(
            EXPORTING
              text_in                    =   ls_data  &quot; Input text
*                text_in_len                = -1    &quot; Input Length
*                compress_level             = 6    &quot; Level of Compression
*                conversion                 = &apos;DEFAULT&apos;    &quot; Conversion to UTF8 (UC)
            IMPORTING
              gzip_out                   =  lxs_data   &quot; Compressed output
*                gzip_out_len               =     &quot; Output Length
              ).
*              CATCH cx_parameter_invalid_range.    &quot;
*              CATCH cx_sy_buffer_overflow.    &quot;
*              CATCH cx_sy_conversion_codepage.    &quot;
*              CATCH cx_sy_compression_error.    &quot;
        CATCH cx_root INTO DATA(lx_root).
          lv_text = lx_root-&gt;get_text( ).
          io_log-&gt;add_message_free_text(
            EXPORTING
              im_text         = lv_text   &quot; Text to Be Displayed
              im_msg_type     = &apos;I&apos;    &quot; Message Type
              im_problemclass = &apos;2&apos;    &quot; Application Log: Message Problem Class
            ).
      ENDTRY.
    ENDIF.

    lo_pers_obj-&gt;set_utzon( i_utzon = sy-zonlo ).
*      CATCH cx_os_object_not_found.    &quot;
    IF p_istk = abap_true.
      lv_method = 1.
    ELSE.
      lv_method = 2.
    ENDIF.
    lo_pers_obj-&gt;set_umeth( i_umeth = lv_method ).
*      CATCH cx_os_object_not_found.    &quot;
    lo_pers_obj-&gt;set_adata( i_adata = lxs_data ).
    lo_pers_obj-&gt;set_lghdl( i_lghdl = io_log-&gt;g_log_handle  ).
*      CATCH cx_os_object_not_found.    &quot;
    COMMIT WORK AND WAIT.
  ENDMETHOD.
  METHOD shows.
    DATA: lv_text(200) TYPE c,
          lt_view      TYPE zusfp_sasa_hist_view_t,
          lt_data      TYPE zusfp_sasa_stock_upd_t,
          ls_data      TYPE string,
          lxs_data     TYPE xstring,
          lv_valpos    TYPE valpos,
          lo_api       TYPE REF TO lcl_api,
          lo_entry     TYPE REF TO zcl_usfp_t_asa_stkup,
          lx_error     TYPE REF TO cx_bapi_error,
          lx_root      TYPE REF TO cx_root.
    FIELD-SYMBOLS: &lt;lw_method&gt; TYPE dd07v,
                   &lt;lw_return&gt; TYPE bapiret2.

    lo_api = NEW lcl_api( ).
    TRY .
        DATA(lt_methods) = lo_api-&gt;get_methods( ).
      CATCH cx_bapi_error INTO lx_error.
        LOOP AT lx_error-&gt;status ASSIGNING &lt;lw_return&gt;.
          io_log-&gt;add_bapi_return( im_bapireturn = &lt;lw_return&gt; ).
        ENDLOOP.
    ENDTRY.
    TRY .
        DATA(lo_query_manager) = cl_os_system=&gt;get_query_manager( ).
        DATA(lo_query) = lo_query_manager-&gt;create_query(
*                    i_filter              =
*                    i_ordering            =
*                    i_parameters          =
              ).
*                  CATCH cx_os_class_not_found.  &quot;
        DATA(lt_entries) = zca_usfp_t_asa_stkup=&gt;agent-&gt;if_os_ca_persistency~get_persistent_by_query(
                i_query                = lo_query
*                         i_parameter_tab        =
*                         i_par1                 =
*                         i_par2                 =
*                         i_par3                 =
*                         i_subclasses           = OSCON_FALSE
*                         i_upto                 = 0
*                         i_options              = IF_OS_QUERY_OPTIONS=&gt;DEFAULT_OPTIONS
                ).
*                       CATCH cx_os_object_not_found.  &quot;
*                       CATCH cx_os_query_error.  &quot;
      CATCH cx_root INTO lx_root.
        lv_text = lx_root-&gt;get_text( ).
        io_log-&gt;add_message_free_text(
          EXPORTING
            im_text         = lv_text   &quot; Text to Be Displayed
            im_msg_type     = &apos;I&apos;    &quot; Message Type
            im_problemclass = &apos;2&apos;    &quot; Application Log: Message Problem Class
          ).
        io_log-&gt;save_to_db(
*            IMPORTING
*              e_lognumber =     &quot; Application log: log number
        ).
    ENDTRY.

    LOOP AT lt_entries ASSIGNING FIELD-SYMBOL(&lt;lo_line&gt;).
      lo_entry ?= &lt;lo_line&gt;.
      lxs_data = lo_entry-&gt;get_adata( ).
      CLEAR lt_data.
*             CATCH cx_os_object_not_found.  &quot;
      TRY .
          NEW cl_abap_gzip( )-&gt;decompress_text(
            EXPORTING
              gzip_in                    =  lxs_data   &quot; Input of Zipped Data
*            gzip_in_len                = -1    &quot; Input Length
*            conversion                 = &apos;DEFAULT&apos;    &quot; Conversion to UTF8 (UC)
            IMPORTING
              text_out                   =  ls_data   &quot; Decompessed Output
*            text_out_len               =     &quot; Output Length
            ).
*          CATCH cx_parameter_invalid_range.    &quot;
*          CATCH cx_sy_buffer_overflow.    &quot;
*          CATCH cx_sy_conversion_codepage.    &quot;
*          CATCH cx_sy_compression_error.    &quot;
        CATCH cx_root INTO lx_root.
          lv_text = lx_root-&gt;get_text( ).
          io_log-&gt;add_message_free_text(
          EXPORTING
            im_text         = lv_text   &quot; Text to Be Displayed
            im_msg_type     = &apos;I&apos;    &quot; Message Type
            im_problemclass = &apos;2&apos;    &quot; Application Log: Message Problem Class
            ).
      ENDTRY.

      TRY .
          CALL TRANSFORMATION zusfp_tf_asa_stock_data
            SOURCE XML ls_data
            RESULT asa_data = lt_data.
        CATCH cx_transformation_error INTO DATA(lx_transf).
          lv_text = lx_transf-&gt;get_text( ).
          io_log-&gt;add_message_free_text(
          EXPORTING
            im_text         = lv_text   &quot; Text to Be Displayed
            im_msg_type     = &apos;I&apos;    &quot; Message Type
            im_problemclass = &apos;2&apos;    &quot; Application Log: Message Problem Class
            ).
          CONTINUE.
      ENDTRY.
      lv_valpos = lo_entry-&gt;get_umeth( ).
*              CATCH cx_os_object_not_found.  &quot;
      LOOP AT lt_data ASSIGNING FIELD-SYMBOL(&lt;lw_data&gt;).
        APPEND INITIAL LINE TO lt_view ASSIGNING FIELD-SYMBOL(&lt;lw_view&gt;).
        MOVE-CORRESPONDING &lt;lw_data&gt; TO &lt;lw_view&gt;.
        &lt;lw_view&gt;-uname = lo_entry-&gt;get_uname( ).
        &lt;lw_view&gt;-utzon = lo_entry-&gt;get_utzon( ).
        &lt;lw_view&gt;-hicon = &apos;@96@&apos;.
        &lt;lw_view&gt;-lghdl = lo_entry-&gt;get_lghdl( ).
        CONVERT TIME STAMP lo_entry-&gt;get_aedat( )
           TIME ZONE lo_entry-&gt;get_utzon( )
           INTO DATE &lt;lw_view&gt;-aedat TIME &lt;lw_view&gt;-aetim.
        READ TABLE lt_methods ASSIGNING &lt;lw_method&gt;
         WITH KEY valpos     = lv_valpos
                  ddlanguage = sy-langu.
        IF sy-subrc = 0.
          &lt;lw_view&gt;-dmeth = &lt;lw_method&gt;-ddtext.
        ENDIF.
      ENDLOOP.
    ENDLOOP.

    TRY .
        lo_api-&gt;show_historial( lt_view ).
      CATCH cx_bapi_error INTO lx_error.
        LOOP AT lx_error-&gt;status ASSIGNING &lt;lw_return&gt;.
          io_log-&gt;add_bapi_return( im_bapireturn = &lt;lw_return&gt; ).
        ENDLOOP.
    ENDTRY.
  ENDMETHOD.
  METHOD delete.
    DATA: lo_api      TYPE REF TO lcl_api,
          lo_db       TYPE REF TO lcl_db,
          ls_question TYPE string,
          lr_date     TYPE RANGE OF sydatum,
          lr_timestp  TYPE lcl_db=&gt;yr_timestp,
          lr_uname    TYPE lcl_db=&gt;yr_uname.

    lo_api = NEW lcl_api( ).
    lo_db  = NEW lcl_db( ) .
    ls_question = &apos;Do you confirm the log registers exclusion?&apos;(M05).
    TRY .
        lo_api-&gt;confirm( ls_question ).
      CATCH cx_bapi_error.
        RETURN.
    ENDTRY.

    IF s_ulog IS NOT INITIAL .
      lr_uname = s_ulog[].
      INSERT s_ulog INTO lr_uname INDEX 1.
      SORT lr_uname BY table_line.
      DELETE ADJACENT DUPLICATES FROM lr_uname.
    ENDIF.

    IF s_dlog IS NOT INITIAL.
      lr_date = s_dlog[].
      INSERT s_dlog INTO lr_date INDEX 1.
      SORT lr_date BY table_line.
      DELETE ADJACENT DUPLICATES FROM lr_date.

      LOOP AT lr_date ASSIGNING FIELD-SYMBOL(&lt;lw_date&gt;).
        APPEND INITIAL LINE TO lr_timestp ASSIGNING FIELD-SYMBOL(&lt;lw_timestp&gt;).
        IF &lt;lw_date&gt;-low IS NOT INITIAL.
          CONVERT DATE &lt;lw_date&gt;-low TIME &apos;000000&apos;
             INTO TIME STAMP &lt;lw_timestp&gt;-low TIME ZONE sy-zonlo.
        ENDIF.
        IF &lt;lw_date&gt;-high IS NOT INITIAL.
          CONVERT DATE &lt;lw_date&gt;-high TIME &apos;235959&apos;
             INTO TIME STAMP &lt;lw_timestp&gt;-high TIME ZONE sy-zonlo.
        ENDIF.
        &lt;lw_timestp&gt;-sign = &lt;lw_date&gt;-sign.
        &lt;lw_timestp&gt;-option = &lt;lw_date&gt;-option.
      ENDLOOP.
    ENDIF.


    TRY .
        DATA(lt_lghdl) = lo_db-&gt;get_log_handles(
              ir_timestp      = lr_timestp
              ir_uname        = lr_uname
              ).
        lo_api-&gt;delete_messages( it_lghdl = lt_lghdl ).
        lo_db-&gt;delete_historial(
          EXPORTING
            ir_timestp      = lr_timestp
            ir_uname        = lr_uname
          ).
        MESSAGE s024.
      CATCH cx_sy_sql_error  &quot;
            cx_bapi_error.
        MESSAGE i023 DISPLAY LIKE &apos;E&apos;.
        IF sy-batch = abap_true.
          LEAVE PROGRAM.
        ELSE.
          LEAVE TO CURRENT TRANSACTION.
        ENDIF.
    ENDTRY.
  ENDMETHOD.
ENDCLASS.               &quot;lcl_historial_manager
*&amp;---------------------------------------------------------------------*
*&amp;       Class (Implementation)  lcl_stock_manager
*&amp;---------------------------------------------------------------------*
*        Text
*----------------------------------------------------------------------*
CLASS lcl_stock_manager IMPLEMENTATION.
  METHOD load.
    DATA: lo_item  TYPE REF TO lcl_item,
          lo_api   TYPE REF TO lcl_api,
          lo_db    TYPE REF TO lcl_db,
          lx_error TYPE REF TO cx_bapi_error,
          lt_items TYPE bapi10504stock2_tab,
          lt_hist  TYPE zusfp_sasa_stock_upd_t,
          lv_matnr TYPE matnr.
    FIELD-SYMBOLS: &lt;lw_item&gt;   TYPE bapi10504stock2,
                   &lt;lw_return&gt; TYPE bapiret2.
    DEFINE lm_add_messages.
      LOOP AT lx_error-&gt;status ASSIGNING &lt;lw_return&gt;.
        po_log-&gt;add_bapi_return( &lt;lw_return&gt; ).
      ENDLOOP.
      po_log-&gt;save_to_db( ).
      RETURN.
    END-OF-DEFINITION.

    TRY .
        po_media-&gt;open( ).
        DATA(lo_iterator) = po_media-&gt;get_iterator( ).
      CATCH cx_bapi_error INTO lx_error.
        lm_add_messages.
    ENDTRY.

    IF sy-batch = abap_false.
      IF lo_iterator-&gt;preview( ) = abap_false.
        po_log-&gt;add_message_free_text(
        EXPORTING
          im_text         = &apos;Action cancelled by user.&apos;(M01)   &quot; Text to Be Displayed
          im_msg_type     = &apos;I&apos;    &quot; Message Type
          im_problemclass = &apos;4&apos;    &quot; Application Log: Message Problem Class
          ).
        po_log-&gt;save_to_db( ).
        RETURN.
      ENDIF.
    ENDIF.

    lo_api ?= me-&gt;get_api( ).
    lo_db  ?= me-&gt;get_db( ).
    TRY .
        DATA(lv_logsys) = lo_api-&gt;get_logical_system( ).
      CATCH cx_bapi_error INTO lx_error.
        lm_add_messages.
    ENDTRY.
    WHILE lo_iterator-&gt;hasnext( ) = abap_true.
      lo_item ?= lo_iterator-&gt;next( ).
      APPEND INITIAL LINE TO lt_items ASSIGNING &lt;lw_item&gt;.
      MOVE-CORRESPONDING lo_item-&gt;w_item TO &lt;lw_item&gt;.
      APPEND lo_item-&gt;w_item TO lt_hist.
      &lt;lw_item&gt;-stock_type = 11.
      &lt;lw_item&gt;-version = p_vstk.
      &lt;lw_item&gt;-atpcat = p_cstk.
      &lt;lw_item&gt;-spec_stock_system = lv_logsys.
      TRY .
          &lt;lw_item&gt;-loctype = lo_db-&gt;get_location_type( &lt;lw_item&gt;-location  ).
        CATCH cx_sy_sql_error.
          CLEAR &lt;lw_item&gt;-loctype.
      ENDTRY.
      &lt;lw_item&gt;-storage_location = &apos;aSa&apos;.
      lv_matnr = &lt;lw_item&gt;-product.
      SHIFT lv_matnr RIGHT DELETING TRAILING space.
      OVERLAY lv_matnr WITH &apos;000000000000000000&apos;.
      &lt;lw_item&gt;-product = lv_matnr.
    ENDWHILE.

    po_hist-&gt;set_new( it_data = lt_hist
                      io_log  = po_log  ).
    lo_api-&gt;update_stock( EXPORTING it_items  = lt_items
                          IMPORTING et_return = DATA(lt_return) ).
    READ TABLE lt_return WITH KEY type = &apos;E&apos; TRANSPORTING NO FIELDS.
    IF sy-subrc = 0.
      lo_api-&gt;rollback( ).
    ELSE.
      lo_api-&gt;commit( ).
      po_log-&gt;add_message_free_text(
      EXPORTING
        im_text         = &apos;Stock successfully updated.&apos;(M04)   &quot; Text to Be Displayed
        im_msg_type     = &apos;I&apos;    &quot; Message Type
        im_problemclass = &apos;4&apos;    &quot; Application Log: Message Problem Class
        ).
      po_log-&gt;save_to_db( ).

    ENDIF.
    LOOP AT lt_return ASSIGNING &lt;lw_return&gt;.
      po_log-&gt;add_bapi_return( &lt;lw_return&gt; ).
    ENDLOOP.
    IF sy-subrc = 0.
      po_log-&gt;save_to_db( ).
    ENDIF.

  ENDMETHOD.
  METHOD get_api.
    ro_api = NEW lcl_api( ).
  ENDMETHOD.
  METHOD get_db.
    ro_db = NEW lcl_db( ).
  ENDMETHOD.
ENDCLASS.               &quot;lcl_stock_manager
*&amp;---------------------------------------------------------------------*
*&amp;       Class (Implementation)  lcl_spreadsheet
*&amp;---------------------------------------------------------------------*
*        Text
*----------------------------------------------------------------------*
CLASS lcl_spreadsheet IMPLEMENTATION.
  METHOD open.

    &quot;Read the content of XLSX file
    TRY.
        xs_file_data = cl_openxml_helper=&gt;load_local_file( p_fstksp ).
      CATCH cx_openxml_not_found.
    ENDTRY.
    load_package( ).
    &quot;Read the sheet XML
    xs_sheet_data = load_xml_data( co_sheet_xml ).
    &quot;Read the shared string XML
    xs_shared_data = load_xml_data( co_shared_str_xml ).
  ENDMETHOD.
  METHOD get_iterator.
    DATA: lo_shared_str_dom     TYPE REF TO if_ixml_document,
          lo_shared_str_nodeset TYPE REF TO if_ixml_node,
          lxs_shared_str_xml    TYPE xstring,
          lt_data               TYPE zusfp_sasa_stock_upd_t,
          lt_return             TYPE bapiret2_t,
          ls_message            TYPE string.
    FIELD-SYMBOLS  &lt;lw_return&gt; TYPE bapiret2.

    TRY.
        CALL TRANSFORMATION zusfp_trf_asastk_remnsp
          SOURCE XML me-&gt;xs_shared_data
          RESULT XML lxs_shared_str_xml.
        &quot;Create a nodeset from the shared XML
        CALL FUNCTION &apos;SDIXML_XML_TO_DOM&apos;
          EXPORTING
            xml           = lxs_shared_str_xml
          IMPORTING
            document      = lo_shared_str_dom
          EXCEPTIONS
            invalid_input = 1
            OTHERS        = 2.
        IF sy-subrc = 0.
          lo_shared_str_nodeset = lo_shared_str_dom-&gt;clone( ).
        ENDIF.
        &quot;Pass the SHEET XML and Shared String Nodeset to the main transformation
        CALL TRANSFORMATION zusfp_trf_asastk_import
          PARAMETERS p_shared_string = lo_shared_str_nodeset
          SOURCE XML me-&gt;xs_sheet_data
          RESULT t_data = lt_data.
      CATCH cx_xslt_exception INTO DATA(lx_error).
        MESSAGE e000 WITH lx_error-&gt;if_message~get_text( ) INTO ls_message.
        m_raise_exception.
    ENDTRY.

    DATA(lo_iterator) = NEW lcl_ws_iterator( ).
    LOOP AT lt_data ASSIGNING FIELD-SYMBOL(&lt;lw_data&gt;).
      lo_iterator-&gt;add_item( &lt;lw_data&gt; ).
    ENDLOOP.
    lo_iterator-&gt;initialize( ).

    ro_iterator = lo_iterator.
  ENDMETHOD.
  METHOD free.
  ENDMETHOD.
  METHOD load_package.
    DATA: lt_return  TYPE bapiret2_t,
          ls_message TYPE string.
    FIELD-SYMBOLS  &lt;lw_return&gt; TYPE bapiret2.

    TRY.
        o_package = cl_xlsx_document=&gt;load_document( iv_data = xs_file_data ).
        o_parts = o_package-&gt;get_parts( ).
      CATCH cx_root INTO DATA(lx_error).
        MESSAGE e000 WITH lx_error-&gt;if_message~get_text( ) INTO ls_message.
        m_raise_exception.
    ENDTRY.
  ENDMETHOD. &quot;load_package
  METHOD load_xml_data.
    DATA: lt_return  TYPE bapiret2_t,
          ls_message TYPE string.
    FIELD-SYMBOLS  &lt;lw_return&gt; TYPE bapiret2.

    TRY.
        DATA(lv_uri) = o_parts-&gt;get_part( 2 )-&gt;get_parts( )-&gt;get_part( i_xml_index )-&gt;get_uri( )-&gt;get_uri( ).
        DATA(lo_xml_part_uri) = cl_openxml_parturi=&gt;create_from_partname( lv_uri ).
        DATA(lo_xml_part) = o_package-&gt;get_part_by_uri( lo_xml_part_uri ).
        r_xml_data = lo_xml_part-&gt;get_data( ).
      CATCH cx_root INTO DATA(lx_error).
        MESSAGE e000 WITH lx_error-&gt;if_message~get_text( ) INTO ls_message.
        m_raise_exception.
    ENDTRY.
  ENDMETHOD. &quot;load_xml_data

ENDCLASS.               &quot;lcl_spreadsheet
*&amp;---------------------------------------------------------------------*
*&amp;       Class (Implementation)  lcl_ws_iterator
*&amp;---------------------------------------------------------------------*
*        Text
*----------------------------------------------------------------------*
CLASS lcl_ws_iterator IMPLEMENTATION.
  METHOD add_item.
    APPEND iw_item TO t_data.
  ENDMETHOD.
  METHOD initialize.
    SORT t_data BY table_line.
  ENDMETHOD.
  METHOD lif_iterator~hasnext.

    r_result = abap_false.
    IF lines( me-&gt;t_data ) &gt; 0.
      r_result = abap_true.
    ENDIF.
  ENDMETHOD.
  METHOD lif_iterator~next.

    READ TABLE me-&gt;t_data ASSIGNING FIELD-SYMBOL(&lt;lw_item&gt;) INDEX 1.
    IF sy-subrc = 0.
      DATA(lo_item) = NEW lcl_item( &lt;lw_item&gt; ).
      ro_object = lo_item.
      DELETE me-&gt;t_data INDEX 1.
    ENDIF.
  ENDMETHOD.
  METHOD lif_iterator~preview.
    DATA  lo_api TYPE REF TO lcl_api.

    r_ok = abap_false.
    lo_api ?= me-&gt;get_api( ).
    TRY .
        r_ok = lo_api-&gt;show_pop_up( me-&gt;t_data ).
      CATCH cx_bapi_error.
        RETURN.
    ENDTRY.
  ENDMETHOD.
  METHOD get_api.
    ro_api = NEW lcl_api( ).
  ENDMETHOD.
ENDCLASS.               &quot;lcl_ws_iterator
*&amp;---------------------------------------------------------------------*
*&amp;       Class (Implementation)  lcl_item
*&amp;---------------------------------------------------------------------*
*        Text
*----------------------------------------------------------------------*
CLASS lcl_item IMPLEMENTATION.
  METHOD constructor.
    me-&gt;w_item = pw_item.
  ENDMETHOD.
ENDCLASS.               &quot;lcl_item
*&amp;---------------------------------------------------------------------*
*&amp;       Class (Implementation)  lcl_api
*&amp;---------------------------------------------------------------------*
*        Text
*----------------------------------------------------------------------*
CLASS lcl_api IMPLEMENTATION.
  METHOD get_logical_system.
    DATA: ls_message TYPE string,
          lt_return  TYPE bapiret2_t.
    FIELD-SYMBOLS  &lt;lw_return&gt; TYPE bapiret2.

    CLEAR r_logsys.
    CALL FUNCTION &apos;OWN_LOGICAL_SYSTEM_GET&apos;
      IMPORTING
        own_logical_system             = r_logsys
      EXCEPTIONS
        own_logical_system_not_defined = 1
        OTHERS                         = 2.
    IF sy-subrc &lt;&gt; 0.
      MESSAGE
           ID sy-msgid
         TYPE sy-msgty
       NUMBER sy-msgno
         WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4
         INTO ls_message.
      m_raise_exception.
    ENDIF.
  ENDMETHOD.
  METHOD get_methods.
    CONSTANTS lc_zusfp_upd_stk_method TYPE domname VALUE &apos;ZUSFP_UPD_STK_METHOD&apos;.
    DATA: lt_methods TYPE STANDARD TABLE OF dd07v,
          ls_message TYPE string,
          lt_return  TYPE bapiret2_t.
    FIELD-SYMBOLS  &lt;lw_return&gt; TYPE bapiret2.

    CALL FUNCTION &apos;DD_DOMA_GET&apos;
      EXPORTING
        domain_name   = lc_zusfp_upd_stk_method
*       GET_STATE     = &apos;M  &apos;
*       LANGU         = SY-LANGU
*       PRID          = 0
*       WITHTEXT      = &apos;X&apos;
*     IMPORTING
*       DD01V_WA_A    =
*       DD01V_WA_N    =
*       GOT_STATE     =
      TABLES
        dd07v_tab_a   = lt_methods
        dd07v_tab_n   = rt_methods
      EXCEPTIONS
        illegal_value = 1
        op_failure    = 2
        OTHERS        = 3.
    IF sy-subrc &lt;&gt; 0.
      m_raise_exception.
    ENDIF.
  ENDMETHOD.
  METHOD show_pop_up.

    r_bool = abap_false.
    TRY .
        CALL FUNCTION &apos;ZUSFP_LIST_WITH_OK_AND_CANCEL&apos;
          EXPORTING
            i_start_column = 40
            i_start_line   = 3
            i_end_column   = 72
            i_end_line     = 20
            it_data        = it_data
          IMPORTING
            e_option       = r_bool.
      CATCH cx_bapi_error INTO DATA(lx_error).
        RAISE EXCEPTION lx_error.
    ENDTRY.
  ENDMETHOD.
  METHOD confirm.
    DATA: lv_answer(1) TYPE c,
          lt_return    TYPE bapiret2_t,
          ls_message   TYPE string.
    FIELD-SYMBOLS  &lt;lw_return&gt; TYPE bapiret2.

    CALL FUNCTION &apos;POPUP_TO_CONFIRM&apos;
      EXPORTING
        text_question  = i_question
      IMPORTING
        answer         = lv_answer
      EXCEPTIONS
        text_not_found = 1
        OTHERS         = 2.
    IF sy-subrc &lt;&gt; 0.
      m_raise_exception.
    ENDIF.
    IF lv_answer &lt;&gt; &apos;1&apos;.
      MESSAGE i022 INTO ls_message.
      m_raise_exception.
    ENDIF.

  ENDMETHOD.
  METHOD show_historial.

    TRY .
        CALL FUNCTION &apos;ZUSFP_HISTORIAL_POP_UP&apos;
          EXPORTING
            i_start_column = 20
            i_start_line   = 3
            i_end_column   = 95
            i_end_line     = 20
            it_data        = it_data.
      CATCH cx_bapi_error INTO DATA(lx_error).
        RAISE EXCEPTION lx_error.
    ENDTRY.
  ENDMETHOD.
  METHOD update_stock.

    TRY .
        DATA(lv_logsys) = me-&gt;get_logical_system( ).
      CATCH cx_bapi_error INTO DATA(lx_error).
        et_return = lx_error-&gt;status.
    ENDTRY.

    CALL FUNCTION &apos;BAPI_STSRVAPS_SAVEMULTI2&apos;
      EXPORTING
        logical_system = lv_logsys
*       COMMIT_CONTROL = &apos;E&apos;
*       PLANNING_MODE_USAGE                 =
*       PLANNING_VERSION                    = &apos;000&apos;
*       NO_AUTOMATIC_VERSION_CREATION       =
      TABLES
        stock          = it_items
*       CLASSVALUESCHAR                     =
*       CLASSVALUESNUM =
*       CLASSVALUESCURR                     =
        return         = et_return
*       EXTENSION_IN   =
*       FCS_REDUCTION  =
      .
  ENDMETHOD.
  METHOD commit.
    CALL FUNCTION &apos;BAPI_TRANSACTION_COMMIT&apos;
      EXPORTING
        wait = &apos;X&apos;
*     IMPORTING
*       RETURN        =
      .
  ENDMETHOD.
  METHOD rollback.
    CALL FUNCTION &apos;BAPI_TRANSACTION_ROLLBACK&apos;
*     IMPORTING
*       RETURN        =
      .
  ENDMETHOD.
  METHOD delete_messages.
    DATA: lt_return  TYPE bapiret2_t,
          ls_message TYPE string.
    FIELD-SYMBOLS  &lt;lw_return&gt; TYPE bapiret2.

    CALL FUNCTION &apos;BAL_DB_DELETE&apos;
      EXPORTING
        i_t_log_handle    = it_lghdl
      EXCEPTIONS
        no_logs_specified = 1
        OTHERS            = 2.
    IF sy-subrc &lt;&gt; 0.
      m_raise_exception.
    ENDIF.
  ENDMETHOD.
ENDCLASS.               &quot;lcl_api


*&amp;---------------------------------------------------------------------*
*&amp;       Class (Implementation)  lcl_db
*&amp;---------------------------------------------------------------------*
*        Text
*----------------------------------------------------------------------*
CLASS lcl_db IMPLEMENTATION.
  METHOD get_location_type.

    SELECT loctype
      FROM /sapapo/loc
        UP TO 1 ROWS
      INTO r_loctype
     WHERE locno = i_locno.
    ENDSELECT.
    IF sy-subrc &lt;&gt; 0.
      RAISE EXCEPTION TYPE cx_sy_sql_error.
    ENDIF.
  ENDMETHOD.
  METHOD get_log_handles.

    SELECT lghdl
      FROM zusfpt_asa_stkup
      INTO TABLE rt_lghdl
     WHERE aedat IN ir_timestp
       AND uname IN ir_uname.
    IF sy-subrc &lt;&gt; 0.
      RAISE EXCEPTION TYPE cx_sy_sql_error.
    ENDIF.
  ENDMETHOD.
  METHOD delete_historial.

    DELETE FROM zusfpt_asa_stkup
     WHERE aedat IN ir_timestp
       AND uname IN ir_uname.
    IF sy-subrc &lt;&gt; 0.
      RAISE EXCEPTION TYPE cx_sy_sql_error.
    ENDIF.
  ENDMETHOD.
ENDCLASS.               &quot;lcl_db</source>
 </PROG>
 <PROG NAME="ZUSFPR_STOCK_CREATION_TOP" VARCL="X" SUBC="I" APPL="Z" RSTAT="K" RMAND="050" RLOAD="E" UCCHECK="X">
  <textPool>
   <language SPRAS="E">
    <textElement ID="R" ENTRY="Include ZUSFPR_STOCK_CREATION_TOP" LENGTH="33 "/>
   </language>
  </textPool>
  <source>*&amp;---------------------------------------------------------------------*
*&amp; Include ZUSFPR_STOCK_CREATION_TOP                         Report ZUSFPR_STOCK_CREATION
*&amp;
*&amp;---------------------------------------------------------------------*
REPORT zusfpr_stock_creation MESSAGE-ID zgldev.

TABLES: bapi10504stock2.

SELECTION-SCREEN BEGIN OF BLOCK b0 WITH FRAME TITLE text-t00.
PARAMETERS: p_stck TYPE char01 RADIOBUTTON GROUP optn DEFAULT &apos;X&apos; USER-COMMAND code1,
            p_lgmn TYPE char01 RADIOBUTTON GROUP optn.
SELECTION-SCREEN END OF BLOCK b0.

SELECTION-SCREEN BEGIN OF BLOCK stock WITH FRAME TITLE text-t01.
PARAMETERS: p_vstk TYPE /sapapo/version,
            p_cstk TYPE /sapapo/atpcat,
            p_istk TYPE char01 RADIOBUTTON GROUP mode DEFAULT &apos;X&apos; USER-COMMAND code2,
            p_sstk TYPE char01 RADIOBUTTON GROUP mode.

SELECTION-SCREEN BEGIN OF BLOCK it1 WITH FRAME.
SELECT-OPTIONS: spstkif FOR bapi10504stock2-product  MODIF ID it1,
                slstkif FOR bapi10504stock2-location MODIF ID it1.
SELECTION-SCREEN END OF BLOCK it1.

SELECTION-SCREEN BEGIN OF BLOCK sp1 WITH FRAME.
PARAMETERS  p_fstksp  TYPE string MEMORY ID zusfpr_stock_02 &quot;zusfpr_stock_01
 LOWER CASE MODIF ID sp1.
SELECTION-SCREEN END OF BLOCK sp1.

SELECTION-SCREEN END OF BLOCK stock.

SELECTION-SCREEN BEGIN OF BLOCK log WITH FRAME TITLE text-t02.
PARAMETERS: p_vlog TYPE char01 RADIOBUTTON GROUP logp DEFAULT &apos;X&apos; USER-COMMAND code3,
            p_dlog TYPE char01 RADIOBUTTON GROUP logp.

SELECTION-SCREEN BEGIN OF BLOCK blg1 WITH FRAME TITLE text-t03.
SELECT-OPTIONS: &quot;s_llog FOR bapi10504stock2-location MODIF ID lg1,
                s_ulog FOR sy-uname MODIF ID lg1,
                s_dlog FOR sy-datum MODIF ID lg1.
SELECTION-SCREEN END OF BLOCK blg1.

SELECTION-SCREEN END OF BLOCK log.

*--------------------------------------------------------------------*
* INTERFACE  LIF_ITERATOR
* ------------------------------------------------------------------ *
* OVERVIEW: This interface defines an interator.
*--------------------------------------------------------------------*
INTERFACE lif_iterator.
  METHODS: next    RETURNING VALUE(ro_object) TYPE REF TO object,
*--------------------------------------------------------------------*
* NEXT
*--------------------------------------------------------------------*
*       EFFECTS.:  Returns Next Object.
*--------------------------------------------------------------------*
* &lt;-- RO_OBJECT The next object.
*--------------------------------------------------------------------*
    hasnext RETURNING VALUE(r_result)  TYPE abap_bool,
*--------------------------------------------------------------------*
* HASNEXT
*--------------------------------------------------------------------*
*       EFFECTS.:  Returns the result.
*--------------------------------------------------------------------*
* &lt;-- R_RESULT The next object.
*--------------------------------------------------------------------*
    preview RETURNING VALUE(r_ok) TYPE abap_bool.
*--------------------------------------------------------------------*
* PREVIEW
*--------------------------------------------------------------------*
*       EFFECTS.:  Shows a list of items to be returned in sequence
*                  and return the button pressed by user (OK = TRUE
*                  and CANCEL = FALSE).
*--------------------------------------------------------------------*
* &lt;-- R_RESULT The next object.
*--------------------------------------------------------------------*
ENDINTERFACE.                    &quot;lif_iterator  PUBLIC
*--------------------------------------------------------------------*
* CLASSES DEFINITIONS
*--------------------------------------------------------------------*
CLASS: lcl_webservice  DEFINITION DEFERRED,
       lcl_spreadsheet DEFINITION DEFERRED.
CLASS lcl_ws_iterator DEFINITION FINAL FRIENDS lcl_webservice
                                               lcl_spreadsheet.
  PUBLIC SECTION.
    INTERFACES lif_iterator.
    ALIASES: next    FOR lif_iterator~next,
             hasnext FOR lif_iterator~hasnext,
             preview FOR lif_iterator~preview.
  PRIVATE SECTION.
    DATA t_data TYPE zusfp_sasa_stock_upd_t.
    METHODS: add_item IMPORTING iw_item TYPE zusfp_sasa_stock_upd,
      initialize,
      get_api RETURNING VALUE(ro_api) TYPE REF TO object.
ENDCLASS.
CLASS lcl_item DEFINITION FINAL.
  PUBLIC SECTION.
    DATA w_item READ-ONLY TYPE zusfp_sasa_stock_upd.
    METHODS constructor IMPORTING pw_item TYPE zusfp_sasa_stock_upd.
ENDCLASS.
*--------------------------------------------------------------------*
* CLASS  LCL_MEDIA
* ------------------------------------------------------------------ *
* OVERVIEW: Generic definition of a media. A media can be an interface
*           or a file. It defines basic methods for a media.
*--------------------------------------------------------------------*
CLASS lcl_media DEFINITION ABSTRACT.
  PUBLIC SECTION.
    CLASS-METHODS get_media RETURNING VALUE(ro_media) TYPE REF TO lcl_media RAISING cx_bapi_error.
    METHODS: open  ABSTRACT RAISING cx_bapi_error,
*--------------------------------------------------------------------*
* OPEN
*--------------------------------------------------------------------*
*       EFFECTS.:  Loads the media content.
*--------------------------------------------------------------------*
      get_iterator ABSTRACT RETURNING VALUE(ro_iterator) TYPE REF TO lif_iterator
                            RAISING   cx_bapi_error,
*--------------------------------------------------------------------*
* GET_ITERATOR
*--------------------------------------------------------------------*
*       EFFECTS.:  Returns an iterator for the media content.
*--------------------------------------------------------------------*
      free ABSTRACT.
*--------------------------------------------------------------------*
* FREE
*--------------------------------------------------------------------*
*       EFFECTS.:  Cleans up internal objects.
*--------------------------------------------------------------------*
ENDCLASS.                    &quot;lcl_media DEFINITION
CLASS lcl_webservice DEFINITION FINAL INHERITING FROM lcl_media.
  PUBLIC SECTION.
    METHODS: constructor RAISING cx_bapi_error,
      open REDEFINITION,
      get_iterator REDEFINITION,
      free REDEFINITION.
  PRIVATE SECTION.
    DATA: o_proxy TYPE REF TO zusfpco_si_get_raw_material_in,
          w_data  TYPE zusfpmt_get_raw_material_sap_r.
ENDCLASS.
*--------------------------------------------------------------------*
* CLASS  LCL_XLS
* ------------------------------------------------------------------ *
* OVERVIEW: Represents a Spreadsheet.
*--------------------------------------------------------------------*
CLASS lcl_spreadsheet DEFINITION FINAL INHERITING FROM lcl_media.
  PUBLIC SECTION.
    CONSTANTS co_sheet_xml TYPE i VALUE 2.
    CONSTANTS co_shared_str_xml TYPE i VALUE 3.

    METHODS:
      open REDEFINITION,
      get_iterator REDEFINITION,
      free REDEFINITION.

  PRIVATE SECTION.
    DATA: xs_file_data   TYPE xstring,
          o_package      TYPE REF TO cl_openxml_package,
          o_parts        TYPE REF TO cl_openxml_partcollection,
          xs_sheet_data  TYPE xstring,
          xs_shared_data TYPE xstring.

    METHODS: load_package RAISING cx_bapi_error,
      load_xml_data IMPORTING VALUE(i_xml_index) TYPE i
                    RETURNING VALUE(r_xml_data)  TYPE xstring
                    RAISING   cx_bapi_error.
ENDCLASS.                    &quot;lcl_xls DEFINITION


CLASS lcl_api DEFINITION FINAL.
  PUBLIC SECTION.
    METHODS: get_logical_system RETURNING VALUE(r_logsys) TYPE logsys
                                RAISING   cx_bapi_error,
      get_methods        RETURNING VALUE(rt_methods) TYPE dd07v_tab
                         RAISING   cx_bapi_error,
      confirm            IMPORTING i_question TYPE string
                         RAISING   cx_bapi_error,
      show_pop_up        IMPORTING it_data       TYPE ANY TABLE
                         RETURNING VALUE(r_bool) TYPE abap_bool
                         RAISING   cx_bapi_error,
      show_historial     IMPORTING it_data TYPE zusfp_sasa_hist_view_t
                         RAISING   cx_bapi_error,
      update_stock       IMPORTING it_items  TYPE bapi10504stock2_tab
                         EXPORTING et_return TYPE bapiret2_t,
      commit,
      rollback,
      delete_messages    IMPORTING it_lghdl TYPE bal_t_logh.
ENDCLASS.


CLASS lcl_db DEFINITION FINAL.
  PUBLIC SECTION.
    TYPES: yr_uname   TYPE RANGE OF uname,
           yr_timestp TYPE RANGE OF tzntstmps.
    METHODS: get_location_type IMPORTING i_locno          TYPE /sapapo/locno
                               RETURNING VALUE(r_loctype) TYPE /sapapo/c_loctype
                               RAISING   cx_sy_sql_error,
      get_log_handles  IMPORTING ir_timestp      TYPE yr_timestp
                                 ir_uname        TYPE yr_uname
                       RETURNING VALUE(rt_lghdl) TYPE bal_t_logh
                       RAISING   cx_sy_sql_error,
      delete_historial IMPORTING ir_timestp TYPE yr_timestp
                                 ir_uname   TYPE yr_uname
                       RAISING   cx_sy_sql_error.
ENDCLASS.

CLASS lcl_historial_manager DEFINITION DEFERRED.
CLASS lcl_stock_manager DEFINITION FINAL.
  PUBLIC SECTION.
    METHODS  load IMPORTING po_media TYPE REF TO lcl_media
                            po_log   TYPE REF TO cl_ilm_log
                            po_hist  TYPE REF TO lcl_historial_manager.
  PRIVATE SECTION.
    METHODS: get_api RETURNING VALUE(ro_api) TYPE REF TO object,
      get_db  RETURNING VALUE(ro_db)  TYPE REF TO object.
ENDCLASS.


CLASS lcl_historial_manager DEFINITION FINAL.
  PUBLIC SECTION.
    DATA timestp TYPE tzntstmps.
    CLASS-METHODS: shows IMPORTING io_log TYPE REF TO cl_ilm_log,
      delete.
    METHODS: constructor IMPORTING i_timestp TYPE tzntstmps,
      set_new IMPORTING it_data TYPE zusfp_sasa_stock_upd_t
                        io_log  TYPE REF TO cl_ilm_log.
ENDCLASS.


*--------------------------------------------------------------------*
* CLASS  LCL_MAIN
* ------------------------------------------------------------------ *
* OVERVIEW: This class controls the program behavior, provided the
*           selection arguments have been set.
*--------------------------------------------------------------------*
CLASS lcl_main DEFINITION FINAL.
  PUBLIC SECTION.
    CONSTANTS c_log_object TYPE balobj_d VALUE &apos;ZFP_ASA_STK_UPL&apos;.
    CLASS-METHODS: get_field_value IMPORTING p_fieldname     TYPE dynfnam
                                   RETURNING VALUE(r_fvalue) TYPE dynfieldvalue.
*--------------------------------------------------------------------*
* GET_FIELD_VALUE
*--------------------------------------------------------------------*
*       EFFECTS.:  Returns the values of a field, before PAI is
*                  executed.
*--------------------------------------------------------------------*
* --&gt; P_FILENAME  Name of the file.
* &lt;-- R_FVALUE    Field value.
*--------------------------------------------------------------------*
    METHODS: constructor RAISING cx_bapi_error,
      run,
      show_messages,
      house_keeping.
*--------------------------------------------------------------------*
* HOUSE_KEEPING
*--------------------------------------------------------------------*
*       EFFECTS.:  Cleans up inner objects.
*--------------------------------------------------------------------*
  PRIVATE SECTION.
    DATA: o_log       TYPE REF TO cl_ilm_log,
          o_media     TYPE REF TO lcl_media,
          o_stock     TYPE REF TO lcl_stock_manager,
          o_historial TYPE REF TO lcl_historial_manager.
ENDCLASS.                    &quot;lcl_main DEFINITION


DATA: o_main  TYPE REF TO lcl_main,
      s_title TYPE string.

DEFINE m_raise_exception.
  APPEND INITIAL LINE TO lt_return ASSIGNING &lt;lw_return&gt;.
  &lt;lw_return&gt;-id         = sy-msgid.
  &lt;lw_return&gt;-type       = sy-msgty.
  &lt;lw_return&gt;-number     = sy-msgno.
  &lt;lw_return&gt;-message    = ls_message.
  &lt;lw_return&gt;-message_v1 = sy-msgv1.
  &lt;lw_return&gt;-message_v2 = sy-msgv2.
  &lt;lw_return&gt;-message_v3 = sy-msgv3.
  &lt;lw_return&gt;-message_v4 = sy-msgv4.
  RAISE EXCEPTION TYPE cx_bapi_error
    EXPORTING
      status = lt_return.
END-OF-DEFINITION.</source>
 </PROG>
 <PROG NAME="ZUSFPR_STOCK_CREATION" VARCL="X" SUBC="1" APPL="Z" RSTAT="K" RMAND="050" RLOAD="E" FIXPT="X" UCCHECK="X">
  <textPool>
   <language SPRAS="E">
    <textElement ID="I" KEY="M01" ENTRY="Action cancelled by user." LENGTH="50 "/>
    <textElement ID="I" KEY="M02" ENTRY="Version and Category are obligatory for Stock Updating." LENGTH="110 "/>
    <textElement ID="I" KEY="M03" ENTRY="The file path and name are obligatory for Stock Updating through spreadsheet." LENGTH="132 "/>
    <textElement ID="I" KEY="M04" ENTRY="Stock successfully updated." LENGTH="54 "/>
    <textElement ID="I" KEY="M05" ENTRY="Do you confirm the log registers exclusion?" LENGTH="86 "/>
    <textElement ID="I" KEY="T00" ENTRY="Running Options" LENGTH="25 "/>
    <textElement ID="I" KEY="T01" ENTRY="Stock updating" LENGTH="24 "/>
    <textElement ID="I" KEY="T02" ENTRY="Log Operations" LENGTH="21 "/>
    <textElement ID="I" KEY="T03" ENTRY="Exclusion Parameters" LENGTH="40 "/>
    <textElement ID="I" KEY="T04" ENTRY="aSa Stock Updating" LENGTH="28 "/>
    <textElement ID="I" KEY="T05" ENTRY="Upload spreadsheet" LENGTH="28 "/>
    <textElement ID="R" ENTRY="Stock creation from aSa Interface" LENGTH="33 "/>
    <textElement ID="S" KEY="P_CSTK" ENTRY="D       ." LENGTH="16 "/>
    <textElement ID="S" KEY="P_DLOG" ENTRY="        Delete Log" LENGTH="26 "/>
    <textElement ID="S" KEY="P_FSTKSP" ENTRY="        File Path" LENGTH="17 "/>
    <textElement ID="S" KEY="P_ISTK" ENTRY="        aSa Interface" LENGTH="26 "/>
    <textElement ID="S" KEY="P_LGMN" ENTRY="        Log Management" LENGTH="22 "/>
    <textElement ID="S" KEY="P_SSTK" ENTRY="        Spreadsheet" LENGTH="26 "/>
    <textElement ID="S" KEY="P_STCK" ENTRY="        Stock Updating" LENGTH="26 "/>
    <textElement ID="S" KEY="P_VLOG" ENTRY="        View Log" LENGTH="26 "/>
    <textElement ID="S" KEY="P_VSTK" ENTRY="        Version" LENGTH="23 "/>
    <textElement ID="S" KEY="SLSTKIF" ENTRY="D       ." LENGTH="16 "/>
    <textElement ID="S" KEY="SPSTKIF" ENTRY="        Product" LENGTH="20 "/>
    <textElement ID="S" KEY="S_DLOG" ENTRY="        Date" LENGTH="12 "/>
    <textElement ID="S" KEY="S_LLOG" ENTRY="D       ." LENGTH="16 "/>
    <textElement ID="S" KEY="S_ULOG" ENTRY="D       ." LENGTH="17 "/>
   </language>
  </textPool>
  <source>************************************************************************
* PROGRAM ID           : ZUSFPR_STOCK_CREATION                         *
* PROGRAM TITLE        : FABRICATION - Stock Creation                  *
* AUTHOR               : Rafael Guares Quadros (META)                  *
* SUPPLIER             : GERDAU AÇOS LONGOS S.A.                       *
* DATE                 : 11/02/2016                                    *
* DEVELOPMENT ID       : Requirement 98325                             *
* CHANGE REQUEST (CTS) : SG1K905555                                    *
* DESCRIPTION          : Stock creation with data provided by aSa      *
*                        interface or from spreadsheet data.           *
*======================================================================*
* COPIED FROM         : (CLONED PROGRAM)                               *
* TITLE               : (PROGRAM TITLE)                                *
* OTHER RELATED OBJ   : (OBJECT NAMES)                                 *
*======================================================================*
* CHANGE HISTORY LOG                                                   *
*----------------------------------------------------------------------*
* MOD. NO.|  DATE    | NAME   | CORRECTION NUMBER | CHANGE REFERENCE # *
*----------------------------------------------------------------------*

INCLUDE: zusfpr_stock_creation_top                ,  &quot; global Data
         zusfpr_stock_creation_f01                ,  &quot; FORM-Routines
         zusfpr_stock_creation_c01                .  &quot; Classes Implementations
* INCLUDE ZUSFPR_STOCK_CREATION_O01               .  &quot; PBO-Modules
* INCLUDE ZUSFPR_STOCK_CREATION_I01               .  &quot; PAI-Modules
* INCLUDE ZUSFPR_STOCK_CREATION_F01               .  &quot; FORM-Routines

AT SELECTION-SCREEN OUTPUT.
  PERFORM organize_selection_screen.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_fstksp.
  IF p_sstk = abap_true.
    s_title  = &apos;Upload spreadsheet&apos;(T05).
    p_fstksp = cl_openxml_helper=&gt;browse_local_file_open(
                              iv_title      = s_title
                              iv_filename   = &apos;&apos;
                              iv_extpattern = &apos;All files(*.*)|*.*&apos; ).
  ENDIF.

START-OF-SELECTION.
  IF p_stck = abap_true AND ( p_vstk IS INITIAL OR p_cstk IS INITIAL ).
    MESSAGE &apos;Version and Category are obligatory for Stock Updating.&apos;(m02)
       TYPE &apos;I&apos; DISPLAY LIKE &apos;E&apos;.
    IF sy-batch = abap_false.
      LEAVE TO CURRENT TRANSACTION.
    ELSE.
      LEAVE PROGRAM.
    ENDIF.
  ENDIF.

  IF p_sstk = abap_true AND p_fstksp IS INITIAL.
    MESSAGE &apos;The file path and name are obligatory for Stock Updating through spreadsheet.&apos;(m03)
       TYPE &apos;I&apos; DISPLAY LIKE &apos;E&apos;.
    IF sy-batch = abap_false.
      LEAVE TO CURRENT TRANSACTION.
    ELSE.
      LEAVE PROGRAM.
    ENDIF.
  ENDIF.

  o_main = NEW lcl_main( ).

END-OF-SELECTION.
  o_main-&gt;run( ).
  IF sy-batch = abap_false.
    o_main-&gt;show_messages( ).
  ENDIF.
  o_main-&gt;house_keeping( ).
  FREE o_main.</source>
 </PROG>
 <PROG NAME="ZUSFPR_STOCK_CREATION" VARCL="X" SUBC="1" APPL="Z" RSTAT="K" RMAND="050" RLOAD="E" FIXPT="X" UCCHECK="X">
  <textPool>
   <language SPRAS="E">
    <textElement ID="I" KEY="M01" ENTRY="Action cancelled by user." LENGTH="50 "/>
    <textElement ID="I" KEY="M02" ENTRY="Version and Category are obligatory for Stock Updating." LENGTH="110 "/>
    <textElement ID="I" KEY="M03" ENTRY="The file path and name are obligatory for Stock Updating through spreadsheet." LENGTH="132 "/>
    <textElement ID="I" KEY="M04" ENTRY="Stock successfully updated." LENGTH="54 "/>
    <textElement ID="I" KEY="M05" ENTRY="Do you confirm the log registers exclusion?" LENGTH="86 "/>
    <textElement ID="I" KEY="T00" ENTRY="Running Options" LENGTH="25 "/>
    <textElement ID="I" KEY="T01" ENTRY="Stock updating" LENGTH="24 "/>
    <textElement ID="I" KEY="T02" ENTRY="Log Operations" LENGTH="21 "/>
    <textElement ID="I" KEY="T03" ENTRY="Exclusion Parameters" LENGTH="40 "/>
    <textElement ID="I" KEY="T04" ENTRY="aSa Stock Updating" LENGTH="28 "/>
    <textElement ID="I" KEY="T05" ENTRY="Upload spreadsheet" LENGTH="28 "/>
    <textElement ID="R" ENTRY="Stock creation from aSa Interface" LENGTH="33 "/>
    <textElement ID="S" KEY="P_CSTK" ENTRY="D       ." LENGTH="16 "/>
    <textElement ID="S" KEY="P_DLOG" ENTRY="        Delete Log" LENGTH="26 "/>
    <textElement ID="S" KEY="P_FSTKSP" ENTRY="        File Path" LENGTH="17 "/>
    <textElement ID="S" KEY="P_ISTK" ENTRY="        aSa Interface" LENGTH="26 "/>
    <textElement ID="S" KEY="P_LGMN" ENTRY="        Log Management" LENGTH="22 "/>
    <textElement ID="S" KEY="P_SSTK" ENTRY="        Spreadsheet" LENGTH="26 "/>
    <textElement ID="S" KEY="P_STCK" ENTRY="        Stock Updating" LENGTH="26 "/>
    <textElement ID="S" KEY="P_VLOG" ENTRY="        View Log" LENGTH="26 "/>
    <textElement ID="S" KEY="P_VSTK" ENTRY="        Version" LENGTH="23 "/>
    <textElement ID="S" KEY="SLSTKIF" ENTRY="D       ." LENGTH="16 "/>
    <textElement ID="S" KEY="SPSTKIF" ENTRY="        Product" LENGTH="20 "/>
    <textElement ID="S" KEY="S_DLOG" ENTRY="        Date" LENGTH="12 "/>
    <textElement ID="S" KEY="S_LLOG" ENTRY="D       ." LENGTH="16 "/>
    <textElement ID="S" KEY="S_ULOG" ENTRY="D       ." LENGTH="17 "/>
   </language>
  </textPool>
  <source>************************************************************************
* PROGRAM ID           : ZUSFPR_STOCK_CREATION                         *
* PROGRAM TITLE        : FABRICATION - Stock Creation                  *
* AUTHOR               : Rafael Guares Quadros (META)                  *
* SUPPLIER             : GERDAU AÇOS LONGOS S.A.                       *
* DATE                 : 11/02/2016                                    *
* DEVELOPMENT ID       : Requirement 98325                             *
* CHANGE REQUEST (CTS) : SG1K905555                                    *
* DESCRIPTION          : Stock creation with data provided by aSa      *
*                        interface or from spreadsheet data.           *
*======================================================================*
* COPIED FROM         : (CLONED PROGRAM)                               *
* TITLE               : (PROGRAM TITLE)                                *
* OTHER RELATED OBJ   : (OBJECT NAMES)                                 *
*======================================================================*
* CHANGE HISTORY LOG                                                   *
*----------------------------------------------------------------------*
* MOD. NO.|  DATE    | NAME   | CORRECTION NUMBER | CHANGE REFERENCE # *
*----------------------------------------------------------------------*

INCLUDE: zusfpr_stock_creation_top                ,  &quot; global Data
         zusfpr_stock_creation_f01                ,  &quot; FORM-Routines
         zusfpr_stock_creation_c01                .  &quot; Classes Implementations
* INCLUDE ZUSFPR_STOCK_CREATION_O01               .  &quot; PBO-Modules
* INCLUDE ZUSFPR_STOCK_CREATION_I01               .  &quot; PAI-Modules
* INCLUDE ZUSFPR_STOCK_CREATION_F01               .  &quot; FORM-Routines

AT SELECTION-SCREEN OUTPUT.
  PERFORM organize_selection_screen.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_fstksp.
  IF p_sstk = abap_true.
    s_title  = &apos;Upload spreadsheet&apos;(T05).
    p_fstksp = cl_openxml_helper=&gt;browse_local_file_open(
                              iv_title      = s_title
                              iv_filename   = &apos;&apos;
                              iv_extpattern = &apos;All files(*.*)|*.*&apos; ).
  ENDIF.

START-OF-SELECTION.
  IF p_stck = abap_true AND ( p_vstk IS INITIAL OR p_cstk IS INITIAL ).
    MESSAGE &apos;Version and Category are obligatory for Stock Updating.&apos;(m02)
       TYPE &apos;I&apos; DISPLAY LIKE &apos;E&apos;.
    IF sy-batch = abap_false.
      LEAVE TO CURRENT TRANSACTION.
    ELSE.
      LEAVE PROGRAM.
    ENDIF.
  ENDIF.

  IF p_sstk = abap_true AND p_fstksp IS INITIAL.
    MESSAGE &apos;The file path and name are obligatory for Stock Updating through spreadsheet.&apos;(m03)
       TYPE &apos;I&apos; DISPLAY LIKE &apos;E&apos;.
    IF sy-batch = abap_false.
      LEAVE TO CURRENT TRANSACTION.
    ELSE.
      LEAVE PROGRAM.
    ENDIF.
  ENDIF.

  o_main = NEW lcl_main( ).

END-OF-SELECTION.
  o_main-&gt;run( ).
  IF sy-batch = abap_false.
    o_main-&gt;show_messages( ).
  ENDIF.
  o_main-&gt;house_keeping( ).
  FREE o_main.</source>
 </PROG>
 <PROG NAME="ZUSFPR_STOCK_CREATION_C01" VARCL="X" SUBC="I" APPL="Z" RSTAT="K" RMAND="050" RLOAD="E" UCCHECK="X">
  <textPool>
   <language SPRAS="E">
    <textElement ID="R" ENTRY="Include ZUSFPR_STOCK_CREATION_C01" LENGTH="33 "/>
   </language>
  </textPool>
  <source>*&amp;---------------------------------------------------------------------*
*&amp;  Include           ZUSFPR_STOCK_CREATION_C01
*&amp;---------------------------------------------------------------------*
CLASS lcl_main IMPLEMENTATION.
  METHOD constructor.
    DATA: lt_return  TYPE bapiret2_t,
          ls_message TYPE string,
          lv_timestp TYPE tzntstmps.
    FIELD-SYMBOLS  &lt;lw_return&gt; TYPE bapiret2.

    CONVERT DATE sy-datlo TIME sy-timlo
       INTO TIME STAMP lv_timestp TIME ZONE sy-zonlo.
    CONVERT TIME STAMP lv_timestp TIME ZONE sy-zonlo
       INTO DATE DATA(lv_date) TIME DATA(lv_time).
    TRY .
        o_log = NEW cl_ilm_log( im_extnumber = sy-repid &amp;&amp; sy-uname &amp;&amp;
                                               lv_date  &amp;&amp; lv_time  &amp;&amp;
                                               sy-zonlo
                                im_object    = c_log_object
                                im_title = &apos;aSa Stock Updating&apos;(t04) ).
      CATCH cx_ilm.
        MESSAGE e022 INTO ls_message.
        m_raise_exception.
    ENDTRY.
    o_media     = lcl_media=&gt;get_media( ).
    o_stock     = NEW lcl_stock_manager( ).
    o_historial = NEW lcl_historial_manager( lv_timestp ).
  ENDMETHOD.
  METHOD run.

    CASE abap_true.
      WHEN p_stck.
        o_stock-&gt;load( po_media = o_media
                       po_log   = o_log
                       po_hist  = o_historial ).
      WHEN p_lgmn.
        IF p_vlog = abap_true.
          lcl_historial_manager=&gt;shows( o_log ).
        ELSE.
          lcl_historial_manager=&gt;delete( ).
        ENDIF.
      WHEN OTHERS.
    ENDCASE.
  ENDMETHOD.
  METHOD show_messages.

    DATA(lw_statistics) = o_log-&gt;entries_in_log( ).
    IF lw_statistics-msg_cnt_al &gt; 0.
      o_log-&gt;show_log_fullscreen( ).
    ENDIF.
  ENDMETHOD.
  METHOD house_keeping.
    FREE: o_log, o_media, o_stock, o_historial.
  ENDMETHOD.
  METHOD get_field_value.
    DATA: lt_dynpfields TYPE dynpread_tabtype,
          lw_dynpfield  TYPE dynpread.

    MOVE p_fieldname TO lw_dynpfield-fieldname.
    APPEND lw_dynpfield TO lt_dynpfields.

    CALL FUNCTION &apos;DYNP_VALUES_READ&apos;
      EXPORTING
        dyname               = sy-repid
        dynumb               = sy-dynnr
      TABLES
        dynpfields           = lt_dynpfields[]
      EXCEPTIONS
        invalid_abapworkarea = 1
        invalid_dynprofield  = 2
        invalid_dynproname   = 3
        invalid_dynpronummer = 4
        invalid_request      = 5
        no_fielddescription  = 6
        invalid_parameter    = 7
        undefind_error       = 8
        double_conversion    = 9
        stepl_not_found      = 10
        OTHERS               = 11.
    IF sy-subrc &lt;&gt; 0.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
      WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.

    READ TABLE lt_dynpfields INTO lw_dynpfield
    WITH KEY fieldname = p_fieldname.
    IF sy-subrc = 0.
      r_fvalue = lw_dynpfield-fieldvalue.
    ENDIF.
  ENDMETHOD.                    &quot;get_field_value
ENDCLASS.
CLASS lcl_media IMPLEMENTATION.
  METHOD get_media.
    CASE abap_true.
      WHEN p_istk.
        TRY .
            DATA(lo_webservice) = NEW lcl_webservice( ).
          CATCH cx_bapi_error INTO DATA(lx_error).
            RAISE EXCEPTION lx_error.
        ENDTRY.
        ro_media = lo_webservice.
      WHEN p_sstk.
        DATA(lo_spreadsheet) = NEW lcl_spreadsheet( ).
        ro_media = lo_spreadsheet.
    ENDCASE.
  ENDMETHOD.
ENDCLASS.
CLASS lcl_webservice IMPLEMENTATION.
  METHOD constructor.
    DATA: lt_return  TYPE bapiret2_t,
          ls_message TYPE string.
    FIELD-SYMBOLS  &lt;lw_return&gt; TYPE bapiret2.


    super-&gt;constructor( ).
    TRY .
        me-&gt;o_proxy = NEW zusfpco_si_get_raw_material_in( ).
      CATCH cx_ai_system_fault INTO DATA(lx_error).
        MESSAGE e000 WITH lx_error-&gt;if_message~get_text( ) INTO ls_message.
        m_raise_exception.
    ENDTRY.
  ENDMETHOD.
  METHOD open.
    DATA: lw_request TYPE zusfpmt_get_raw_material_sap,
          lt_return  TYPE bapiret2_t,
          ls_message TYPE string.
    FIELD-SYMBOLS  &lt;lw_return&gt; TYPE bapiret2.

    TRY.
        o_proxy-&gt;si_get_raw_material_inventoryo(
          EXPORTING
            output = lw_request
          IMPORTING
            input = w_data ).
      CATCH cx_ai_system_fault INTO DATA(lx_error).
        MESSAGE e000 WITH lx_error-&gt;if_message~get_text( )
           INTO ls_message.
        m_raise_exception.
    ENDTRY.
  ENDMETHOD.
  METHOD get_iterator.
    DATA lw_line TYPE zusfp_sasa_stock_upd.

    DATA(lo_iterator) = NEW lcl_ws_iterator( ).
    LOOP AT me-&gt;w_data-mt_get_raw_material_sap_respon-raw_material
      ASSIGNING FIELD-SYMBOL(&lt;lw_raw_material&gt;).
      lw_line-location = &lt;lw_raw_material&gt;-sap_plant.
      lw_line-product = &lt;lw_raw_material&gt;-sap_sku.
      lw_line-quantity = &lt;lw_raw_material&gt;-weight.
      IF lw_line-product IN spstkif AND &quot;List filtering
         lw_line-location IN slstkif.
        lo_iterator-&gt;add_item( lw_line ).
      ENDIF.
    ENDLOOP.
    lo_iterator-&gt;initialize( ).

    ro_iterator = lo_iterator.
  ENDMETHOD.
  METHOD free.
    FREE o_proxy.
  ENDMETHOD.
ENDCLASS.


*&amp;---------------------------------------------------------------------*
*&amp;       Class (Implementation)  lcl_historial_manager
*&amp;---------------------------------------------------------------------*
*        Text
*----------------------------------------------------------------------*
CLASS lcl_historial_manager IMPLEMENTATION.
  METHOD constructor.

    me-&gt;timestp = i_timestp.
  ENDMETHOD.
  METHOD set_new.
    DATA: lo_pers_obj  TYPE REF TO zcl_usfp_t_asa_stkup,
          lv_method    TYPE zusfp_asa_upd_stk_method,
          lv_text(200) TYPE c,
          ls_data      TYPE string,
          lxs_data     TYPE xstring.

    TRY.
        lo_pers_obj = zca_usfp_t_asa_stkup=&gt;agent-&gt;create_persistent( i_aedat = me-&gt;timestp
                                                                      i_uname = sy-uname ).
      CATCH cx_os_object_existing INTO DATA(lx_exist).
        lv_text = lx_exist-&gt;get_text( ).
        io_log-&gt;add_message_free_text(
          EXPORTING
            im_text         = lv_text   &quot; Text to Be Displayed
            im_msg_type     = &apos;I&apos;    &quot; Message Type
            im_problemclass = &apos;1&apos;    &quot; Application Log: Message Problem Class
          ).
        RETURN.
    ENDTRY.

    TRY .
        CALL TRANSFORMATION zusfp_tf_asa_stock_data
          SOURCE asa_data = it_data
          RESULT XML ls_data.
      CATCH cx_transformation_error INTO DATA(lx_transf).
        lv_text = lx_transf-&gt;get_text( ).
        io_log-&gt;add_message_free_text(
          EXPORTING
            im_text         = lv_text   &quot; Text to Be Displayed
            im_msg_type     = &apos;I&apos;    &quot; Message Type
            im_problemclass = &apos;2&apos;    &quot; Application Log: Message Problem Class
          ).
    ENDTRY.

    IF ls_data IS NOT INITIAL.
      TRY .
          NEW cl_abap_gzip( )-&gt;compress_text(
            EXPORTING
              text_in                    =   ls_data  &quot; Input text
*                text_in_len                = -1    &quot; Input Length
*                compress_level             = 6    &quot; Level of Compression
*                conversion                 = &apos;DEFAULT&apos;    &quot; Conversion to UTF8 (UC)
            IMPORTING
              gzip_out                   =  lxs_data   &quot; Compressed output
*                gzip_out_len               =     &quot; Output Length
              ).
*              CATCH cx_parameter_invalid_range.    &quot;
*              CATCH cx_sy_buffer_overflow.    &quot;
*              CATCH cx_sy_conversion_codepage.    &quot;
*              CATCH cx_sy_compression_error.    &quot;
        CATCH cx_root INTO DATA(lx_root).
          lv_text = lx_root-&gt;get_text( ).
          io_log-&gt;add_message_free_text(
            EXPORTING
              im_text         = lv_text   &quot; Text to Be Displayed
              im_msg_type     = &apos;I&apos;    &quot; Message Type
              im_problemclass = &apos;2&apos;    &quot; Application Log: Message Problem Class
            ).
      ENDTRY.
    ENDIF.

    lo_pers_obj-&gt;set_utzon( i_utzon = sy-zonlo ).
*      CATCH cx_os_object_not_found.    &quot;
    IF p_istk = abap_true.
      lv_method = 1.
    ELSE.
      lv_method = 2.
    ENDIF.
    lo_pers_obj-&gt;set_umeth( i_umeth = lv_method ).
*      CATCH cx_os_object_not_found.    &quot;
    lo_pers_obj-&gt;set_adata( i_adata = lxs_data ).
    lo_pers_obj-&gt;set_lghdl( i_lghdl = io_log-&gt;g_log_handle  ).
*      CATCH cx_os_object_not_found.    &quot;
    COMMIT WORK AND WAIT.
  ENDMETHOD.
  METHOD shows.
    DATA: lv_text(200) TYPE c,
          lt_view      TYPE zusfp_sasa_hist_view_t,
          lt_data      TYPE zusfp_sasa_stock_upd_t,
          ls_data      TYPE string,
          lxs_data     TYPE xstring,
          lv_valpos    TYPE valpos,
          lo_api       TYPE REF TO lcl_api,
          lo_entry     TYPE REF TO zcl_usfp_t_asa_stkup,
          lx_error     TYPE REF TO cx_bapi_error,
          lx_root      TYPE REF TO cx_root.
    FIELD-SYMBOLS: &lt;lw_method&gt; TYPE dd07v,
                   &lt;lw_return&gt; TYPE bapiret2.

    lo_api = NEW lcl_api( ).
    TRY .
        DATA(lt_methods) = lo_api-&gt;get_methods( ).
      CATCH cx_bapi_error INTO lx_error.
        LOOP AT lx_error-&gt;status ASSIGNING &lt;lw_return&gt;.
          io_log-&gt;add_bapi_return( im_bapireturn = &lt;lw_return&gt; ).
        ENDLOOP.
    ENDTRY.
    TRY .
        DATA(lo_query_manager) = cl_os_system=&gt;get_query_manager( ).
        DATA(lo_query) = lo_query_manager-&gt;create_query(
*                    i_filter              =
*                    i_ordering            =
*                    i_parameters          =
              ).
*                  CATCH cx_os_class_not_found.  &quot;
        DATA(lt_entries) = zca_usfp_t_asa_stkup=&gt;agent-&gt;if_os_ca_persistency~get_persistent_by_query(
                i_query                = lo_query
*                         i_parameter_tab        =
*                         i_par1                 =
*                         i_par2                 =
*                         i_par3                 =
*                         i_subclasses           = OSCON_FALSE
*                         i_upto                 = 0
*                         i_options              = IF_OS_QUERY_OPTIONS=&gt;DEFAULT_OPTIONS
                ).
*                       CATCH cx_os_object_not_found.  &quot;
*                       CATCH cx_os_query_error.  &quot;
      CATCH cx_root INTO lx_root.
        lv_text = lx_root-&gt;get_text( ).
        io_log-&gt;add_message_free_text(
          EXPORTING
            im_text         = lv_text   &quot; Text to Be Displayed
            im_msg_type     = &apos;I&apos;    &quot; Message Type
            im_problemclass = &apos;2&apos;    &quot; Application Log: Message Problem Class
          ).
        io_log-&gt;save_to_db(
*            IMPORTING
*              e_lognumber =     &quot; Application log: log number
        ).
    ENDTRY.

    LOOP AT lt_entries ASSIGNING FIELD-SYMBOL(&lt;lo_line&gt;).
      lo_entry ?= &lt;lo_line&gt;.
      lxs_data = lo_entry-&gt;get_adata( ).
      CLEAR lt_data.
*             CATCH cx_os_object_not_found.  &quot;
      TRY .
          NEW cl_abap_gzip( )-&gt;decompress_text(
            EXPORTING
              gzip_in                    =  lxs_data   &quot; Input of Zipped Data
*            gzip_in_len                = -1    &quot; Input Length
*            conversion                 = &apos;DEFAULT&apos;    &quot; Conversion to UTF8 (UC)
            IMPORTING
              text_out                   =  ls_data   &quot; Decompessed Output
*            text_out_len               =     &quot; Output Length
            ).
*          CATCH cx_parameter_invalid_range.    &quot;
*          CATCH cx_sy_buffer_overflow.    &quot;
*          CATCH cx_sy_conversion_codepage.    &quot;
*          CATCH cx_sy_compression_error.    &quot;
        CATCH cx_root INTO lx_root.
          lv_text = lx_root-&gt;get_text( ).
          io_log-&gt;add_message_free_text(
          EXPORTING
            im_text         = lv_text   &quot; Text to Be Displayed
            im_msg_type     = &apos;I&apos;    &quot; Message Type
            im_problemclass = &apos;2&apos;    &quot; Application Log: Message Problem Class
            ).
      ENDTRY.

      TRY .
          CALL TRANSFORMATION zusfp_tf_asa_stock_data
            SOURCE XML ls_data
            RESULT asa_data = lt_data.
        CATCH cx_transformation_error INTO DATA(lx_transf).
          lv_text = lx_transf-&gt;get_text( ).
          io_log-&gt;add_message_free_text(
          EXPORTING
            im_text         = lv_text   &quot; Text to Be Displayed
            im_msg_type     = &apos;I&apos;    &quot; Message Type
            im_problemclass = &apos;2&apos;    &quot; Application Log: Message Problem Class
            ).
          CONTINUE.
      ENDTRY.
      lv_valpos = lo_entry-&gt;get_umeth( ).
*              CATCH cx_os_object_not_found.  &quot;
      LOOP AT lt_data ASSIGNING FIELD-SYMBOL(&lt;lw_data&gt;).
        APPEND INITIAL LINE TO lt_view ASSIGNING FIELD-SYMBOL(&lt;lw_view&gt;).
        MOVE-CORRESPONDING &lt;lw_data&gt; TO &lt;lw_view&gt;.
        &lt;lw_view&gt;-uname = lo_entry-&gt;get_uname( ).
        &lt;lw_view&gt;-utzon = lo_entry-&gt;get_utzon( ).
        &lt;lw_view&gt;-hicon = &apos;@96@&apos;.
        &lt;lw_view&gt;-lghdl = lo_entry-&gt;get_lghdl( ).
        CONVERT TIME STAMP lo_entry-&gt;get_aedat( )
           TIME ZONE lo_entry-&gt;get_utzon( )
           INTO DATE &lt;lw_view&gt;-aedat TIME &lt;lw_view&gt;-aetim.
        READ TABLE lt_methods ASSIGNING &lt;lw_method&gt;
         WITH KEY valpos     = lv_valpos
                  ddlanguage = sy-langu.
        IF sy-subrc = 0.
          &lt;lw_view&gt;-dmeth = &lt;lw_method&gt;-ddtext.
        ENDIF.
      ENDLOOP.
    ENDLOOP.

    TRY .
        lo_api-&gt;show_historial( lt_view ).
      CATCH cx_bapi_error INTO lx_error.
        LOOP AT lx_error-&gt;status ASSIGNING &lt;lw_return&gt;.
          io_log-&gt;add_bapi_return( im_bapireturn = &lt;lw_return&gt; ).
        ENDLOOP.
    ENDTRY.
  ENDMETHOD.
  METHOD delete.
    DATA: lo_api      TYPE REF TO lcl_api,
          lo_db       TYPE REF TO lcl_db,
          ls_question TYPE string,
          lr_date     TYPE RANGE OF sydatum,
          lr_timestp  TYPE lcl_db=&gt;yr_timestp,
          lr_uname    TYPE lcl_db=&gt;yr_uname.

    lo_api = NEW lcl_api( ).
    lo_db  = NEW lcl_db( ) .
    ls_question = &apos;Do you confirm the log registers exclusion?&apos;(M05).
    TRY .
        lo_api-&gt;confirm( ls_question ).
      CATCH cx_bapi_error.
        RETURN.
    ENDTRY.

    IF s_ulog IS NOT INITIAL .
      lr_uname = s_ulog[].
      INSERT s_ulog INTO lr_uname INDEX 1.
      SORT lr_uname BY table_line.
      DELETE ADJACENT DUPLICATES FROM lr_uname.
    ENDIF.

    IF s_dlog IS NOT INITIAL.
      lr_date = s_dlog[].
      INSERT s_dlog INTO lr_date INDEX 1.
      SORT lr_date BY table_line.
      DELETE ADJACENT DUPLICATES FROM lr_date.

      LOOP AT lr_date ASSIGNING FIELD-SYMBOL(&lt;lw_date&gt;).
        APPEND INITIAL LINE TO lr_timestp ASSIGNING FIELD-SYMBOL(&lt;lw_timestp&gt;).
        IF &lt;lw_date&gt;-low IS NOT INITIAL.
          CONVERT DATE &lt;lw_date&gt;-low TIME &apos;000000&apos;
             INTO TIME STAMP &lt;lw_timestp&gt;-low TIME ZONE sy-zonlo.
        ENDIF.
        IF &lt;lw_date&gt;-high IS NOT INITIAL.
          CONVERT DATE &lt;lw_date&gt;-high TIME &apos;235959&apos;
             INTO TIME STAMP &lt;lw_timestp&gt;-high TIME ZONE sy-zonlo.
        ENDIF.
        &lt;lw_timestp&gt;-sign = &lt;lw_date&gt;-sign.
        &lt;lw_timestp&gt;-option = &lt;lw_date&gt;-option.
      ENDLOOP.
    ENDIF.


    TRY .
        DATA(lt_lghdl) = lo_db-&gt;get_log_handles(
              ir_timestp      = lr_timestp
              ir_uname        = lr_uname
              ).
        lo_api-&gt;delete_messages( it_lghdl = lt_lghdl ).
        lo_db-&gt;delete_historial(
          EXPORTING
            ir_timestp      = lr_timestp
            ir_uname        = lr_uname
          ).
        MESSAGE s024.
      CATCH cx_sy_sql_error  &quot;
            cx_bapi_error.
        MESSAGE i023 DISPLAY LIKE &apos;E&apos;.
        IF sy-batch = abap_true.
          LEAVE PROGRAM.
        ELSE.
          LEAVE TO CURRENT TRANSACTION.
        ENDIF.
    ENDTRY.
  ENDMETHOD.
ENDCLASS.               &quot;lcl_historial_manager
*&amp;---------------------------------------------------------------------*
*&amp;       Class (Implementation)  lcl_stock_manager
*&amp;---------------------------------------------------------------------*
*        Text
*----------------------------------------------------------------------*
CLASS lcl_stock_manager IMPLEMENTATION.
  METHOD load.
    DATA: lo_item  TYPE REF TO lcl_item,
          lo_api   TYPE REF TO lcl_api,
          lo_db    TYPE REF TO lcl_db,
          lx_error TYPE REF TO cx_bapi_error,
          lt_items TYPE bapi10504stock2_tab,
          lt_hist  TYPE zusfp_sasa_stock_upd_t,
          lv_matnr TYPE matnr.
    FIELD-SYMBOLS: &lt;lw_item&gt;   TYPE bapi10504stock2,
                   &lt;lw_return&gt; TYPE bapiret2.
    DEFINE lm_add_messages.
      LOOP AT lx_error-&gt;status ASSIGNING &lt;lw_return&gt;.
        po_log-&gt;add_bapi_return( &lt;lw_return&gt; ).
      ENDLOOP.
      po_log-&gt;save_to_db( ).
      RETURN.
    END-OF-DEFINITION.

    TRY .
        po_media-&gt;open( ).
        DATA(lo_iterator) = po_media-&gt;get_iterator( ).
      CATCH cx_bapi_error INTO lx_error.
        lm_add_messages.
    ENDTRY.

    IF sy-batch = abap_false.
      IF lo_iterator-&gt;preview( ) = abap_false.
        po_log-&gt;add_message_free_text(
        EXPORTING
          im_text         = &apos;Action cancelled by user.&apos;(M01)   &quot; Text to Be Displayed
          im_msg_type     = &apos;I&apos;    &quot; Message Type
          im_problemclass = &apos;4&apos;    &quot; Application Log: Message Problem Class
          ).
        po_log-&gt;save_to_db( ).
        RETURN.
      ENDIF.
    ENDIF.

    lo_api ?= me-&gt;get_api( ).
    lo_db  ?= me-&gt;get_db( ).
    TRY .
        DATA(lv_logsys) = lo_api-&gt;get_logical_system( ).
      CATCH cx_bapi_error INTO lx_error.
        lm_add_messages.
    ENDTRY.
    WHILE lo_iterator-&gt;hasnext( ) = abap_true.
      lo_item ?= lo_iterator-&gt;next( ).
      APPEND INITIAL LINE TO lt_items ASSIGNING &lt;lw_item&gt;.
      MOVE-CORRESPONDING lo_item-&gt;w_item TO &lt;lw_item&gt;.
      APPEND lo_item-&gt;w_item TO lt_hist.
      &lt;lw_item&gt;-stock_type = 11.
      &lt;lw_item&gt;-version = p_vstk.
      &lt;lw_item&gt;-atpcat = p_cstk.
      &lt;lw_item&gt;-spec_stock_system = lv_logsys.
      TRY .
          &lt;lw_item&gt;-loctype = lo_db-&gt;get_location_type( &lt;lw_item&gt;-location  ).
        CATCH cx_sy_sql_error.
          CLEAR &lt;lw_item&gt;-loctype.
      ENDTRY.
      &lt;lw_item&gt;-storage_location = &apos;aSa&apos;.
      lv_matnr = &lt;lw_item&gt;-product.
      SHIFT lv_matnr RIGHT DELETING TRAILING space.
      OVERLAY lv_matnr WITH &apos;000000000000000000&apos;.
      &lt;lw_item&gt;-product = lv_matnr.
    ENDWHILE.

    po_hist-&gt;set_new( it_data = lt_hist
                      io_log  = po_log  ).
    lo_api-&gt;update_stock( EXPORTING it_items  = lt_items
                          IMPORTING et_return = DATA(lt_return) ).
    READ TABLE lt_return WITH KEY type = &apos;E&apos; TRANSPORTING NO FIELDS.
    IF sy-subrc = 0.
      lo_api-&gt;rollback( ).
    ELSE.
      lo_api-&gt;commit( ).
      po_log-&gt;add_message_free_text(
      EXPORTING
        im_text         = &apos;Stock successfully updated.&apos;(M04)   &quot; Text to Be Displayed
        im_msg_type     = &apos;I&apos;    &quot; Message Type
        im_problemclass = &apos;4&apos;    &quot; Application Log: Message Problem Class
        ).
      po_log-&gt;save_to_db( ).

    ENDIF.
    LOOP AT lt_return ASSIGNING &lt;lw_return&gt;.
      po_log-&gt;add_bapi_return( &lt;lw_return&gt; ).
    ENDLOOP.
    IF sy-subrc = 0.
      po_log-&gt;save_to_db( ).
    ENDIF.

  ENDMETHOD.
  METHOD get_api.
    ro_api = NEW lcl_api( ).
  ENDMETHOD.
  METHOD get_db.
    ro_db = NEW lcl_db( ).
  ENDMETHOD.
ENDCLASS.               &quot;lcl_stock_manager
*&amp;---------------------------------------------------------------------*
*&amp;       Class (Implementation)  lcl_spreadsheet
*&amp;---------------------------------------------------------------------*
*        Text
*----------------------------------------------------------------------*
CLASS lcl_spreadsheet IMPLEMENTATION.
  METHOD open.

    &quot;Read the content of XLSX file
    TRY.
        xs_file_data = cl_openxml_helper=&gt;load_local_file( p_fstksp ).
      CATCH cx_openxml_not_found.
    ENDTRY.
    load_package( ).
    &quot;Read the sheet XML
    xs_sheet_data = load_xml_data( co_sheet_xml ).
    &quot;Read the shared string XML
    xs_shared_data = load_xml_data( co_shared_str_xml ).
  ENDMETHOD.
  METHOD get_iterator.
    DATA: lo_shared_str_dom     TYPE REF TO if_ixml_document,
          lo_shared_str_nodeset TYPE REF TO if_ixml_node,
          lxs_shared_str_xml    TYPE xstring,
          lt_data               TYPE zusfp_sasa_stock_upd_t,
          lt_return             TYPE bapiret2_t,
          ls_message            TYPE string.
    FIELD-SYMBOLS  &lt;lw_return&gt; TYPE bapiret2.

    TRY.
        CALL TRANSFORMATION zusfp_trf_asastk_remnsp
          SOURCE XML me-&gt;xs_shared_data
          RESULT XML lxs_shared_str_xml.
        &quot;Create a nodeset from the shared XML
        CALL FUNCTION &apos;SDIXML_XML_TO_DOM&apos;
          EXPORTING
            xml           = lxs_shared_str_xml
          IMPORTING
            document      = lo_shared_str_dom
          EXCEPTIONS
            invalid_input = 1
            OTHERS        = 2.
        IF sy-subrc = 0.
          lo_shared_str_nodeset = lo_shared_str_dom-&gt;clone( ).
        ENDIF.
        &quot;Pass the SHEET XML and Shared String Nodeset to the main transformation
        CALL TRANSFORMATION zusfp_trf_asastk_import
          PARAMETERS p_shared_string = lo_shared_str_nodeset
          SOURCE XML me-&gt;xs_sheet_data
          RESULT t_data = lt_data.
      CATCH cx_xslt_exception INTO DATA(lx_error).
        MESSAGE e000 WITH lx_error-&gt;if_message~get_text( ) INTO ls_message.
        m_raise_exception.
    ENDTRY.

    DATA(lo_iterator) = NEW lcl_ws_iterator( ).
    LOOP AT lt_data ASSIGNING FIELD-SYMBOL(&lt;lw_data&gt;).
      lo_iterator-&gt;add_item( &lt;lw_data&gt; ).
    ENDLOOP.
    lo_iterator-&gt;initialize( ).

    ro_iterator = lo_iterator.
  ENDMETHOD.
  METHOD free.
  ENDMETHOD.
  METHOD load_package.
    DATA: lt_return  TYPE bapiret2_t,
          ls_message TYPE string.
    FIELD-SYMBOLS  &lt;lw_return&gt; TYPE bapiret2.

    TRY.
        o_package = cl_xlsx_document=&gt;load_document( iv_data = xs_file_data ).
        o_parts = o_package-&gt;get_parts( ).
      CATCH cx_root INTO DATA(lx_error).
        MESSAGE e000 WITH lx_error-&gt;if_message~get_text( ) INTO ls_message.
        m_raise_exception.
    ENDTRY.
  ENDMETHOD. &quot;load_package
  METHOD load_xml_data.
    DATA: lt_return  TYPE bapiret2_t,
          ls_message TYPE string.
    FIELD-SYMBOLS  &lt;lw_return&gt; TYPE bapiret2.

    TRY.
        DATA(lv_uri) = o_parts-&gt;get_part( 2 )-&gt;get_parts( )-&gt;get_part( i_xml_index )-&gt;get_uri( )-&gt;get_uri( ).
        DATA(lo_xml_part_uri) = cl_openxml_parturi=&gt;create_from_partname( lv_uri ).
        DATA(lo_xml_part) = o_package-&gt;get_part_by_uri( lo_xml_part_uri ).
        r_xml_data = lo_xml_part-&gt;get_data( ).
      CATCH cx_root INTO DATA(lx_error).
        MESSAGE e000 WITH lx_error-&gt;if_message~get_text( ) INTO ls_message.
        m_raise_exception.
    ENDTRY.
  ENDMETHOD. &quot;load_xml_data

ENDCLASS.               &quot;lcl_spreadsheet
*&amp;---------------------------------------------------------------------*
*&amp;       Class (Implementation)  lcl_ws_iterator
*&amp;---------------------------------------------------------------------*
*        Text
*----------------------------------------------------------------------*
CLASS lcl_ws_iterator IMPLEMENTATION.
  METHOD add_item.
    APPEND iw_item TO t_data.
  ENDMETHOD.
  METHOD initialize.
    SORT t_data BY table_line.
  ENDMETHOD.
  METHOD lif_iterator~hasnext.

    r_result = abap_false.
    IF lines( me-&gt;t_data ) &gt; 0.
      r_result = abap_true.
    ENDIF.
  ENDMETHOD.
  METHOD lif_iterator~next.

    READ TABLE me-&gt;t_data ASSIGNING FIELD-SYMBOL(&lt;lw_item&gt;) INDEX 1.
    IF sy-subrc = 0.
      DATA(lo_item) = NEW lcl_item( &lt;lw_item&gt; ).
      ro_object = lo_item.
      DELETE me-&gt;t_data INDEX 1.
    ENDIF.
  ENDMETHOD.
  METHOD lif_iterator~preview.
    DATA  lo_api TYPE REF TO lcl_api.

    r_ok = abap_false.
    lo_api ?= me-&gt;get_api( ).
    TRY .
        r_ok = lo_api-&gt;show_pop_up( me-&gt;t_data ).
      CATCH cx_bapi_error.
        RETURN.
    ENDTRY.
  ENDMETHOD.
  METHOD get_api.
    ro_api = NEW lcl_api( ).
  ENDMETHOD.
ENDCLASS.               &quot;lcl_ws_iterator
*&amp;---------------------------------------------------------------------*
*&amp;       Class (Implementation)  lcl_item
*&amp;---------------------------------------------------------------------*
*        Text
*----------------------------------------------------------------------*
CLASS lcl_item IMPLEMENTATION.
  METHOD constructor.
    me-&gt;w_item = pw_item.
  ENDMETHOD.
ENDCLASS.               &quot;lcl_item
*&amp;---------------------------------------------------------------------*
*&amp;       Class (Implementation)  lcl_api
*&amp;---------------------------------------------------------------------*
*        Text
*----------------------------------------------------------------------*
CLASS lcl_api IMPLEMENTATION.
  METHOD get_logical_system.
    DATA: ls_message TYPE string,
          lt_return  TYPE bapiret2_t.
    FIELD-SYMBOLS  &lt;lw_return&gt; TYPE bapiret2.

    CLEAR r_logsys.
    CALL FUNCTION &apos;OWN_LOGICAL_SYSTEM_GET&apos;
      IMPORTING
        own_logical_system             = r_logsys
      EXCEPTIONS
        own_logical_system_not_defined = 1
        OTHERS                         = 2.
    IF sy-subrc &lt;&gt; 0.
      MESSAGE
           ID sy-msgid
         TYPE sy-msgty
       NUMBER sy-msgno
         WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4
         INTO ls_message.
      m_raise_exception.
    ENDIF.
  ENDMETHOD.
  METHOD get_methods.
    CONSTANTS lc_zusfp_upd_stk_method TYPE domname VALUE &apos;ZUSFP_UPD_STK_METHOD&apos;.
    DATA: lt_methods TYPE STANDARD TABLE OF dd07v,
          ls_message TYPE string,
          lt_return  TYPE bapiret2_t.
    FIELD-SYMBOLS  &lt;lw_return&gt; TYPE bapiret2.

    CALL FUNCTION &apos;DD_DOMA_GET&apos;
      EXPORTING
        domain_name   = lc_zusfp_upd_stk_method
*       GET_STATE     = &apos;M  &apos;
*       LANGU         = SY-LANGU
*       PRID          = 0
*       WITHTEXT      = &apos;X&apos;
*     IMPORTING
*       DD01V_WA_A    =
*       DD01V_WA_N    =
*       GOT_STATE     =
      TABLES
        dd07v_tab_a   = lt_methods
        dd07v_tab_n   = rt_methods
      EXCEPTIONS
        illegal_value = 1
        op_failure    = 2
        OTHERS        = 3.
    IF sy-subrc &lt;&gt; 0.
      m_raise_exception.
    ENDIF.
  ENDMETHOD.
  METHOD show_pop_up.

    r_bool = abap_false.
    TRY .
        CALL FUNCTION &apos;ZUSFP_LIST_WITH_OK_AND_CANCEL&apos;
          EXPORTING
            i_start_column = 40
            i_start_line   = 3
            i_end_column   = 72
            i_end_line     = 20
            it_data        = it_data
          IMPORTING
            e_option       = r_bool.
      CATCH cx_bapi_error INTO DATA(lx_error).
        RAISE EXCEPTION lx_error.
    ENDTRY.
  ENDMETHOD.
  METHOD confirm.
    DATA: lv_answer(1) TYPE c,
          lt_return    TYPE bapiret2_t,
          ls_message   TYPE string.
    FIELD-SYMBOLS  &lt;lw_return&gt; TYPE bapiret2.

    CALL FUNCTION &apos;POPUP_TO_CONFIRM&apos;
      EXPORTING
        text_question  = i_question
      IMPORTING
        answer         = lv_answer
      EXCEPTIONS
        text_not_found = 1
        OTHERS         = 2.
    IF sy-subrc &lt;&gt; 0.
      m_raise_exception.
    ENDIF.
    IF lv_answer &lt;&gt; &apos;1&apos;.
      MESSAGE i022 INTO ls_message.
      m_raise_exception.
    ENDIF.

  ENDMETHOD.
  METHOD show_historial.

    TRY .
        CALL FUNCTION &apos;ZUSFP_HISTORIAL_POP_UP&apos;
          EXPORTING
            i_start_column = 20
            i_start_line   = 3
            i_end_column   = 95
            i_end_line     = 20
            it_data        = it_data.
      CATCH cx_bapi_error INTO DATA(lx_error).
        RAISE EXCEPTION lx_error.
    ENDTRY.
  ENDMETHOD.
  METHOD update_stock.

    TRY .
        DATA(lv_logsys) = me-&gt;get_logical_system( ).
      CATCH cx_bapi_error INTO DATA(lx_error).
        et_return = lx_error-&gt;status.
    ENDTRY.

    CALL FUNCTION &apos;BAPI_STSRVAPS_SAVEMULTI2&apos;
      EXPORTING
        logical_system = lv_logsys
*       COMMIT_CONTROL = &apos;E&apos;
*       PLANNING_MODE_USAGE                 =
*       PLANNING_VERSION                    = &apos;000&apos;
*       NO_AUTOMATIC_VERSION_CREATION       =
      TABLES
        stock          = it_items
*       CLASSVALUESCHAR                     =
*       CLASSVALUESNUM =
*       CLASSVALUESCURR                     =
        return         = et_return
*       EXTENSION_IN   =
*       FCS_REDUCTION  =
      .
  ENDMETHOD.
  METHOD commit.
    CALL FUNCTION &apos;BAPI_TRANSACTION_COMMIT&apos;
      EXPORTING
        wait = &apos;X&apos;
*     IMPORTING
*       RETURN        =
      .
  ENDMETHOD.
  METHOD rollback.
    CALL FUNCTION &apos;BAPI_TRANSACTION_ROLLBACK&apos;
*     IMPORTING
*       RETURN        =
      .
  ENDMETHOD.
  METHOD delete_messages.
    DATA: lt_return  TYPE bapiret2_t,
          ls_message TYPE string.
    FIELD-SYMBOLS  &lt;lw_return&gt; TYPE bapiret2.

    CALL FUNCTION &apos;BAL_DB_DELETE&apos;
      EXPORTING
        i_t_log_handle    = it_lghdl
      EXCEPTIONS
        no_logs_specified = 1
        OTHERS            = 2.
    IF sy-subrc &lt;&gt; 0.
      m_raise_exception.
    ENDIF.
  ENDMETHOD.
ENDCLASS.               &quot;lcl_api


*&amp;---------------------------------------------------------------------*
*&amp;       Class (Implementation)  lcl_db
*&amp;---------------------------------------------------------------------*
*        Text
*----------------------------------------------------------------------*
CLASS lcl_db IMPLEMENTATION.
  METHOD get_location_type.

    SELECT loctype
      FROM /sapapo/loc
        UP TO 1 ROWS
      INTO r_loctype
     WHERE locno = i_locno.
    ENDSELECT.
    IF sy-subrc &lt;&gt; 0.
      RAISE EXCEPTION TYPE cx_sy_sql_error.
    ENDIF.
  ENDMETHOD.
  METHOD get_log_handles.

    SELECT lghdl
      FROM zusfpt_asa_stkup
      INTO TABLE rt_lghdl
     WHERE aedat IN ir_timestp
       AND uname IN ir_uname.
    IF sy-subrc &lt;&gt; 0.
      RAISE EXCEPTION TYPE cx_sy_sql_error.
    ENDIF.
  ENDMETHOD.
  METHOD delete_historial.

    DELETE FROM zusfpt_asa_stkup
     WHERE aedat IN ir_timestp
       AND uname IN ir_uname.
    IF sy-subrc &lt;&gt; 0.
      RAISE EXCEPTION TYPE cx_sy_sql_error.
    ENDIF.
  ENDMETHOD.
ENDCLASS.               &quot;lcl_db</source>
 </PROG>
 <PROG NAME="ZUSFPR_STOCK_CREATION_TOP" VARCL="X" SUBC="I" APPL="Z" RSTAT="K" RMAND="050" RLOAD="E" UCCHECK="X">
  <textPool>
   <language SPRAS="E">
    <textElement ID="R" ENTRY="Include ZUSFPR_STOCK_CREATION_TOP" LENGTH="33 "/>
   </language>
  </textPool>
  <source>*&amp;---------------------------------------------------------------------*
*&amp; Include ZUSFPR_STOCK_CREATION_TOP                         Report ZUSFPR_STOCK_CREATION
*&amp;
*&amp;---------------------------------------------------------------------*
REPORT zusfpr_stock_creation MESSAGE-ID zgldev.

TABLES: bapi10504stock2.

SELECTION-SCREEN BEGIN OF BLOCK b0 WITH FRAME TITLE text-t00.
PARAMETERS: p_stck TYPE char01 RADIOBUTTON GROUP optn DEFAULT &apos;X&apos; USER-COMMAND code1,
            p_lgmn TYPE char01 RADIOBUTTON GROUP optn.
SELECTION-SCREEN END OF BLOCK b0.

SELECTION-SCREEN BEGIN OF BLOCK stock WITH FRAME TITLE text-t01.
PARAMETERS: p_vstk TYPE /sapapo/version,
            p_cstk TYPE /sapapo/atpcat,
            p_istk TYPE char01 RADIOBUTTON GROUP mode DEFAULT &apos;X&apos; USER-COMMAND code2,
            p_sstk TYPE char01 RADIOBUTTON GROUP mode.

SELECTION-SCREEN BEGIN OF BLOCK it1 WITH FRAME.
SELECT-OPTIONS: spstkif FOR bapi10504stock2-product  MODIF ID it1,
                slstkif FOR bapi10504stock2-location MODIF ID it1.
SELECTION-SCREEN END OF BLOCK it1.

SELECTION-SCREEN BEGIN OF BLOCK sp1 WITH FRAME.
PARAMETERS  p_fstksp  TYPE string MEMORY ID zusfpr_stock_02 &quot;zusfpr_stock_01
 LOWER CASE MODIF ID sp1.
SELECTION-SCREEN END OF BLOCK sp1.

SELECTION-SCREEN END OF BLOCK stock.

SELECTION-SCREEN BEGIN OF BLOCK log WITH FRAME TITLE text-t02.
PARAMETERS: p_vlog TYPE char01 RADIOBUTTON GROUP logp DEFAULT &apos;X&apos; USER-COMMAND code3,
            p_dlog TYPE char01 RADIOBUTTON GROUP logp.

SELECTION-SCREEN BEGIN OF BLOCK blg1 WITH FRAME TITLE text-t03.
SELECT-OPTIONS: &quot;s_llog FOR bapi10504stock2-location MODIF ID lg1,
                s_ulog FOR sy-uname MODIF ID lg1,
                s_dlog FOR sy-datum MODIF ID lg1.
SELECTION-SCREEN END OF BLOCK blg1.

SELECTION-SCREEN END OF BLOCK log.

*--------------------------------------------------------------------*
* INTERFACE  LIF_ITERATOR
* ------------------------------------------------------------------ *
* OVERVIEW: This interface defines an interator.
*--------------------------------------------------------------------*
INTERFACE lif_iterator.
  METHODS: next    RETURNING VALUE(ro_object) TYPE REF TO object,
*--------------------------------------------------------------------*
* NEXT
*--------------------------------------------------------------------*
*       EFFECTS.:  Returns Next Object.
*--------------------------------------------------------------------*
* &lt;-- RO_OBJECT The next object.
*--------------------------------------------------------------------*
    hasnext RETURNING VALUE(r_result)  TYPE abap_bool,
*--------------------------------------------------------------------*
* HASNEXT
*--------------------------------------------------------------------*
*       EFFECTS.:  Returns the result.
*--------------------------------------------------------------------*
* &lt;-- R_RESULT The next object.
*--------------------------------------------------------------------*
    preview RETURNING VALUE(r_ok) TYPE abap_bool.
*--------------------------------------------------------------------*
* PREVIEW
*--------------------------------------------------------------------*
*       EFFECTS.:  Shows a list of items to be returned in sequence
*                  and return the button pressed by user (OK = TRUE
*                  and CANCEL = FALSE).
*--------------------------------------------------------------------*
* &lt;-- R_RESULT The next object.
*--------------------------------------------------------------------*
ENDINTERFACE.                    &quot;lif_iterator  PUBLIC
*--------------------------------------------------------------------*
* CLASSES DEFINITIONS
*--------------------------------------------------------------------*
CLASS: lcl_webservice  DEFINITION DEFERRED,
       lcl_spreadsheet DEFINITION DEFERRED.
CLASS lcl_ws_iterator DEFINITION FINAL FRIENDS lcl_webservice
                                               lcl_spreadsheet.
  PUBLIC SECTION.
    INTERFACES lif_iterator.
    ALIASES: next    FOR lif_iterator~next,
             hasnext FOR lif_iterator~hasnext,
             preview FOR lif_iterator~preview.
  PRIVATE SECTION.
    DATA t_data TYPE zusfp_sasa_stock_upd_t.
    METHODS: add_item IMPORTING iw_item TYPE zusfp_sasa_stock_upd,
      initialize,
      get_api RETURNING VALUE(ro_api) TYPE REF TO object.
ENDCLASS.
CLASS lcl_item DEFINITION FINAL.
  PUBLIC SECTION.
    DATA w_item READ-ONLY TYPE zusfp_sasa_stock_upd.
    METHODS constructor IMPORTING pw_item TYPE zusfp_sasa_stock_upd.
ENDCLASS.
*--------------------------------------------------------------------*
* CLASS  LCL_MEDIA
* ------------------------------------------------------------------ *
* OVERVIEW: Generic definition of a media. A media can be an interface
*           or a file. It defines basic methods for a media.
*--------------------------------------------------------------------*
CLASS lcl_media DEFINITION ABSTRACT.
  PUBLIC SECTION.
    CLASS-METHODS get_media RETURNING VALUE(ro_media) TYPE REF TO lcl_media RAISING cx_bapi_error.
    METHODS: open  ABSTRACT RAISING cx_bapi_error,
*--------------------------------------------------------------------*
* OPEN
*--------------------------------------------------------------------*
*       EFFECTS.:  Loads the media content.
*--------------------------------------------------------------------*
      get_iterator ABSTRACT RETURNING VALUE(ro_iterator) TYPE REF TO lif_iterator
                            RAISING   cx_bapi_error,
*--------------------------------------------------------------------*
* GET_ITERATOR
*--------------------------------------------------------------------*
*       EFFECTS.:  Returns an iterator for the media content.
*--------------------------------------------------------------------*
      free ABSTRACT.
*--------------------------------------------------------------------*
* FREE
*--------------------------------------------------------------------*
*       EFFECTS.:  Cleans up internal objects.
*--------------------------------------------------------------------*
ENDCLASS.                    &quot;lcl_media DEFINITION
CLASS lcl_webservice DEFINITION FINAL INHERITING FROM lcl_media.
  PUBLIC SECTION.
    METHODS: constructor RAISING cx_bapi_error,
      open REDEFINITION,
      get_iterator REDEFINITION,
      free REDEFINITION.
  PRIVATE SECTION.
    DATA: o_proxy TYPE REF TO zusfpco_si_get_raw_material_in,
          w_data  TYPE zusfpmt_get_raw_material_sap_r.
ENDCLASS.
*--------------------------------------------------------------------*
* CLASS  LCL_XLS
* ------------------------------------------------------------------ *
* OVERVIEW: Represents a Spreadsheet.
*--------------------------------------------------------------------*
CLASS lcl_spreadsheet DEFINITION FINAL INHERITING FROM lcl_media.
  PUBLIC SECTION.
    CONSTANTS co_sheet_xml TYPE i VALUE 2.
    CONSTANTS co_shared_str_xml TYPE i VALUE 3.

    METHODS:
      open REDEFINITION,
      get_iterator REDEFINITION,
      free REDEFINITION.

  PRIVATE SECTION.
    DATA: xs_file_data   TYPE xstring,
          o_package      TYPE REF TO cl_openxml_package,
          o_parts        TYPE REF TO cl_openxml_partcollection,
          xs_sheet_data  TYPE xstring,
          xs_shared_data TYPE xstring.

    METHODS: load_package RAISING cx_bapi_error,
      load_xml_data IMPORTING VALUE(i_xml_index) TYPE i
                    RETURNING VALUE(r_xml_data)  TYPE xstring
                    RAISING   cx_bapi_error.
ENDCLASS.                    &quot;lcl_xls DEFINITION


CLASS lcl_api DEFINITION FINAL.
  PUBLIC SECTION.
    METHODS: get_logical_system RETURNING VALUE(r_logsys) TYPE logsys
                                RAISING   cx_bapi_error,
      get_methods        RETURNING VALUE(rt_methods) TYPE dd07v_tab
                         RAISING   cx_bapi_error,
      confirm            IMPORTING i_question TYPE string
                         RAISING   cx_bapi_error,
      show_pop_up        IMPORTING it_data       TYPE ANY TABLE
                         RETURNING VALUE(r_bool) TYPE abap_bool
                         RAISING   cx_bapi_error,
      show_historial     IMPORTING it_data TYPE zusfp_sasa_hist_view_t
                         RAISING   cx_bapi_error,
      update_stock       IMPORTING it_items  TYPE bapi10504stock2_tab
                         EXPORTING et_return TYPE bapiret2_t,
      commit,
      rollback,
      delete_messages    IMPORTING it_lghdl TYPE bal_t_logh.
ENDCLASS.


CLASS lcl_db DEFINITION FINAL.
  PUBLIC SECTION.
    TYPES: yr_uname   TYPE RANGE OF uname,
           yr_timestp TYPE RANGE OF tzntstmps.
    METHODS: get_location_type IMPORTING i_locno          TYPE /sapapo/locno
                               RETURNING VALUE(r_loctype) TYPE /sapapo/c_loctype
                               RAISING   cx_sy_sql_error,
      get_log_handles  IMPORTING ir_timestp      TYPE yr_timestp
                                 ir_uname        TYPE yr_uname
                       RETURNING VALUE(rt_lghdl) TYPE bal_t_logh
                       RAISING   cx_sy_sql_error,
      delete_historial IMPORTING ir_timestp TYPE yr_timestp
                                 ir_uname   TYPE yr_uname
                       RAISING   cx_sy_sql_error.
ENDCLASS.

CLASS lcl_historial_manager DEFINITION DEFERRED.
CLASS lcl_stock_manager DEFINITION FINAL.
  PUBLIC SECTION.
    METHODS  load IMPORTING po_media TYPE REF TO lcl_media
                            po_log   TYPE REF TO cl_ilm_log
                            po_hist  TYPE REF TO lcl_historial_manager.
  PRIVATE SECTION.
    METHODS: get_api RETURNING VALUE(ro_api) TYPE REF TO object,
      get_db  RETURNING VALUE(ro_db)  TYPE REF TO object.
ENDCLASS.


CLASS lcl_historial_manager DEFINITION FINAL.
  PUBLIC SECTION.
    DATA timestp TYPE tzntstmps.
    CLASS-METHODS: shows IMPORTING io_log TYPE REF TO cl_ilm_log,
      delete.
    METHODS: constructor IMPORTING i_timestp TYPE tzntstmps,
      set_new IMPORTING it_data TYPE zusfp_sasa_stock_upd_t
                        io_log  TYPE REF TO cl_ilm_log.
ENDCLASS.


*--------------------------------------------------------------------*
* CLASS  LCL_MAIN
* ------------------------------------------------------------------ *
* OVERVIEW: This class controls the program behavior, provided the
*           selection arguments have been set.
*--------------------------------------------------------------------*
CLASS lcl_main DEFINITION FINAL.
  PUBLIC SECTION.
    CONSTANTS c_log_object TYPE balobj_d VALUE &apos;ZFP_ASA_STK_UPL&apos;.
    CLASS-METHODS: get_field_value IMPORTING p_fieldname     TYPE dynfnam
                                   RETURNING VALUE(r_fvalue) TYPE dynfieldvalue.
*--------------------------------------------------------------------*
* GET_FIELD_VALUE
*--------------------------------------------------------------------*
*       EFFECTS.:  Returns the values of a field, before PAI is
*                  executed.
*--------------------------------------------------------------------*
* --&gt; P_FILENAME  Name of the file.
* &lt;-- R_FVALUE    Field value.
*--------------------------------------------------------------------*
    METHODS: constructor RAISING cx_bapi_error,
      run,
      show_messages,
      house_keeping.
*--------------------------------------------------------------------*
* HOUSE_KEEPING
*--------------------------------------------------------------------*
*       EFFECTS.:  Cleans up inner objects.
*--------------------------------------------------------------------*
  PRIVATE SECTION.
    DATA: o_log       TYPE REF TO cl_ilm_log,
          o_media     TYPE REF TO lcl_media,
          o_stock     TYPE REF TO lcl_stock_manager,
          o_historial TYPE REF TO lcl_historial_manager.
ENDCLASS.                    &quot;lcl_main DEFINITION


DATA: o_main  TYPE REF TO lcl_main,
      s_title TYPE string.

DEFINE m_raise_exception.
  APPEND INITIAL LINE TO lt_return ASSIGNING &lt;lw_return&gt;.
  &lt;lw_return&gt;-id         = sy-msgid.
  &lt;lw_return&gt;-type       = sy-msgty.
  &lt;lw_return&gt;-number     = sy-msgno.
  &lt;lw_return&gt;-message    = ls_message.
  &lt;lw_return&gt;-message_v1 = sy-msgv1.
  &lt;lw_return&gt;-message_v2 = sy-msgv2.
  &lt;lw_return&gt;-message_v3 = sy-msgv3.
  &lt;lw_return&gt;-message_v4 = sy-msgv4.
  RAISE EXCEPTION TYPE cx_bapi_error
    EXPORTING
      status = lt_return.
END-OF-DEFINITION.</source>
 </PROG>
 <PROG NAME="ZUSFPR_STOCK_CREATION" VARCL="X" SUBC="1" APPL="Z" RSTAT="K" RMAND="050" RLOAD="E" FIXPT="X" UCCHECK="X">
  <textPool>
   <language SPRAS="E">
    <textElement ID="I" KEY="M01" ENTRY="Action cancelled by user." LENGTH="50 "/>
    <textElement ID="I" KEY="M02" ENTRY="Version and Category are obligatory for Stock Updating." LENGTH="110 "/>
    <textElement ID="I" KEY="M03" ENTRY="The file path and name are obligatory for Stock Updating through spreadsheet." LENGTH="132 "/>
    <textElement ID="I" KEY="M04" ENTRY="Stock successfully updated." LENGTH="54 "/>
    <textElement ID="I" KEY="M05" ENTRY="Do you confirm the log registers exclusion?" LENGTH="86 "/>
    <textElement ID="I" KEY="T00" ENTRY="Running Options" LENGTH="25 "/>
    <textElement ID="I" KEY="T01" ENTRY="Stock updating" LENGTH="24 "/>
    <textElement ID="I" KEY="T02" ENTRY="Log Operations" LENGTH="21 "/>
    <textElement ID="I" KEY="T03" ENTRY="Exclusion Parameters" LENGTH="40 "/>
    <textElement ID="I" KEY="T04" ENTRY="aSa Stock Updating" LENGTH="28 "/>
    <textElement ID="I" KEY="T05" ENTRY="Upload spreadsheet" LENGTH="28 "/>
    <textElement ID="R" ENTRY="Stock creation from aSa Interface" LENGTH="33 "/>
    <textElement ID="S" KEY="P_CSTK" ENTRY="D       ." LENGTH="16 "/>
    <textElement ID="S" KEY="P_DLOG" ENTRY="        Delete Log" LENGTH="26 "/>
    <textElement ID="S" KEY="P_FSTKSP" ENTRY="        File Path" LENGTH="17 "/>
    <textElement ID="S" KEY="P_ISTK" ENTRY="        aSa Interface" LENGTH="26 "/>
    <textElement ID="S" KEY="P_LGMN" ENTRY="        Log Management" LENGTH="22 "/>
    <textElement ID="S" KEY="P_SSTK" ENTRY="        Spreadsheet" LENGTH="26 "/>
    <textElement ID="S" KEY="P_STCK" ENTRY="        Stock Updating" LENGTH="26 "/>
    <textElement ID="S" KEY="P_VLOG" ENTRY="        View Log" LENGTH="26 "/>
    <textElement ID="S" KEY="P_VSTK" ENTRY="        Version" LENGTH="23 "/>
    <textElement ID="S" KEY="SLSTKIF" ENTRY="D       ." LENGTH="16 "/>
    <textElement ID="S" KEY="SPSTKIF" ENTRY="        Product" LENGTH="20 "/>
    <textElement ID="S" KEY="S_DLOG" ENTRY="        Date" LENGTH="12 "/>
    <textElement ID="S" KEY="S_LLOG" ENTRY="D       ." LENGTH="16 "/>
    <textElement ID="S" KEY="S_ULOG" ENTRY="D       ." LENGTH="17 "/>
   </language>
  </textPool>
  <source>************************************************************************
* PROGRAM ID           : ZUSFPR_STOCK_CREATION                         *
* PROGRAM TITLE        : FABRICATION - Stock Creation                  *
* AUTHOR               : Rafael Guares Quadros (META)                  *
* SUPPLIER             : GERDAU AÇOS LONGOS S.A.                       *
* DATE                 : 11/02/2016                                    *
* DEVELOPMENT ID       : Requirement 98325                             *
* CHANGE REQUEST (CTS) : SG1K905555                                    *
* DESCRIPTION          : Stock creation with data provided by aSa      *
*                        interface or from spreadsheet data.           *
*======================================================================*
* COPIED FROM         : (CLONED PROGRAM)                               *
* TITLE               : (PROGRAM TITLE)                                *
* OTHER RELATED OBJ   : (OBJECT NAMES)                                 *
*======================================================================*
* CHANGE HISTORY LOG                                                   *
*----------------------------------------------------------------------*
* MOD. NO.|  DATE    | NAME   | CORRECTION NUMBER | CHANGE REFERENCE # *
*----------------------------------------------------------------------*

INCLUDE: zusfpr_stock_creation_top                ,  &quot; global Data
         zusfpr_stock_creation_f01                ,  &quot; FORM-Routines
         zusfpr_stock_creation_c01                .  &quot; Classes Implementations
* INCLUDE ZUSFPR_STOCK_CREATION_O01               .  &quot; PBO-Modules
* INCLUDE ZUSFPR_STOCK_CREATION_I01               .  &quot; PAI-Modules
* INCLUDE ZUSFPR_STOCK_CREATION_F01               .  &quot; FORM-Routines

AT SELECTION-SCREEN OUTPUT.
  PERFORM organize_selection_screen.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_fstksp.
  IF p_sstk = abap_true.
    s_title  = &apos;Upload spreadsheet&apos;(T05).
    p_fstksp = cl_openxml_helper=&gt;browse_local_file_open(
                              iv_title      = s_title
                              iv_filename   = &apos;&apos;
                              iv_extpattern = &apos;All files(*.*)|*.*&apos; ).
  ENDIF.

START-OF-SELECTION.
  IF p_stck = abap_true AND ( p_vstk IS INITIAL OR p_cstk IS INITIAL ).
    MESSAGE &apos;Version and Category are obligatory for Stock Updating.&apos;(m02)
       TYPE &apos;I&apos; DISPLAY LIKE &apos;E&apos;.
    IF sy-batch = abap_false.
      LEAVE TO CURRENT TRANSACTION.
    ELSE.
      LEAVE PROGRAM.
    ENDIF.
  ENDIF.

  IF p_sstk = abap_true AND p_fstksp IS INITIAL.
    MESSAGE &apos;The file path and name are obligatory for Stock Updating through spreadsheet.&apos;(m03)
       TYPE &apos;I&apos; DISPLAY LIKE &apos;E&apos;.
    IF sy-batch = abap_false.
      LEAVE TO CURRENT TRANSACTION.
    ELSE.
      LEAVE PROGRAM.
    ENDIF.
  ENDIF.

  o_main = NEW lcl_main( ).

END-OF-SELECTION.
  o_main-&gt;run( ).
  IF sy-batch = abap_false.
    o_main-&gt;show_messages( ).
  ENDIF.
  o_main-&gt;house_keeping( ).
  FREE o_main.</source>
 </PROG>
 <PROG NAME="ZUSFPR_STOCK_CREATION_C01" VARCL="X" SUBC="I" APPL="Z" RSTAT="K" RMAND="050" RLOAD="E" UCCHECK="X">
  <textPool>
   <language SPRAS="E">
    <textElement ID="R" ENTRY="Include ZUSFPR_STOCK_CREATION_C01" LENGTH="33 "/>
   </language>
  </textPool>
  <source>*&amp;---------------------------------------------------------------------*
*&amp;  Include           ZUSFPR_STOCK_CREATION_C01
*&amp;---------------------------------------------------------------------*
CLASS lcl_main IMPLEMENTATION.
  METHOD constructor.
    DATA: lt_return  TYPE bapiret2_t,
          ls_message TYPE string,
          lv_timestp TYPE tzntstmps.
    FIELD-SYMBOLS  &lt;lw_return&gt; TYPE bapiret2.

    CONVERT DATE sy-datlo TIME sy-timlo
       INTO TIME STAMP lv_timestp TIME ZONE sy-zonlo.
    CONVERT TIME STAMP lv_timestp TIME ZONE sy-zonlo
       INTO DATE DATA(lv_date) TIME DATA(lv_time).
    TRY .
        o_log = NEW cl_ilm_log( im_extnumber = sy-repid &amp;&amp; sy-uname &amp;&amp;
                                               lv_date  &amp;&amp; lv_time  &amp;&amp;
                                               sy-zonlo
                                im_object    = c_log_object
                                im_title = &apos;aSa Stock Updating&apos;(t04) ).
      CATCH cx_ilm.
        MESSAGE e022 INTO ls_message.
        m_raise_exception.
    ENDTRY.
    o_media     = lcl_media=&gt;get_media( ).
    o_stock     = NEW lcl_stock_manager( ).
    o_historial = NEW lcl_historial_manager( lv_timestp ).
  ENDMETHOD.
  METHOD run.

    CASE abap_true.
      WHEN p_stck.
        o_stock-&gt;load( po_media = o_media
                       po_log   = o_log
                       po_hist  = o_historial ).
      WHEN p_lgmn.
        IF p_vlog = abap_true.
          lcl_historial_manager=&gt;shows( o_log ).
        ELSE.
          lcl_historial_manager=&gt;delete( ).
        ENDIF.
      WHEN OTHERS.
    ENDCASE.
  ENDMETHOD.
  METHOD show_messages.

    DATA(lw_statistics) = o_log-&gt;entries_in_log( ).
    IF lw_statistics-msg_cnt_al &gt; 0.
      o_log-&gt;show_log_fullscreen( ).
    ENDIF.
  ENDMETHOD.
  METHOD house_keeping.
    FREE: o_log, o_media, o_stock, o_historial.
  ENDMETHOD.
  METHOD get_field_value.
    DATA: lt_dynpfields TYPE dynpread_tabtype,
          lw_dynpfield  TYPE dynpread.

    MOVE p_fieldname TO lw_dynpfield-fieldname.
    APPEND lw_dynpfield TO lt_dynpfields.

    CALL FUNCTION &apos;DYNP_VALUES_READ&apos;
      EXPORTING
        dyname               = sy-repid
        dynumb               = sy-dynnr
      TABLES
        dynpfields           = lt_dynpfields[]
      EXCEPTIONS
        invalid_abapworkarea = 1
        invalid_dynprofield  = 2
        invalid_dynproname   = 3
        invalid_dynpronummer = 4
        invalid_request      = 5
        no_fielddescription  = 6
        invalid_parameter    = 7
        undefind_error       = 8
        double_conversion    = 9
        stepl_not_found      = 10
        OTHERS               = 11.
    IF sy-subrc &lt;&gt; 0.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
      WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.

    READ TABLE lt_dynpfields INTO lw_dynpfield
    WITH KEY fieldname = p_fieldname.
    IF sy-subrc = 0.
      r_fvalue = lw_dynpfield-fieldvalue.
    ENDIF.
  ENDMETHOD.                    &quot;get_field_value
ENDCLASS.
CLASS lcl_media IMPLEMENTATION.
  METHOD get_media.
    CASE abap_true.
      WHEN p_istk.
        TRY .
            DATA(lo_webservice) = NEW lcl_webservice( ).
          CATCH cx_bapi_error INTO DATA(lx_error).
            RAISE EXCEPTION lx_error.
        ENDTRY.
        ro_media = lo_webservice.
      WHEN p_sstk.
        DATA(lo_spreadsheet) = NEW lcl_spreadsheet( ).
        ro_media = lo_spreadsheet.
    ENDCASE.
  ENDMETHOD.
ENDCLASS.
CLASS lcl_webservice IMPLEMENTATION.
  METHOD constructor.
    DATA: lt_return  TYPE bapiret2_t,
          ls_message TYPE string.
    FIELD-SYMBOLS  &lt;lw_return&gt; TYPE bapiret2.


    super-&gt;constructor( ).
    TRY .
        me-&gt;o_proxy = NEW zusfpco_si_get_raw_material_in( ).
      CATCH cx_ai_system_fault INTO DATA(lx_error).
        MESSAGE e000 WITH lx_error-&gt;if_message~get_text( ) INTO ls_message.
        m_raise_exception.
    ENDTRY.
  ENDMETHOD.
  METHOD open.
    DATA: lw_request TYPE zusfpmt_get_raw_material_sap,
          lt_return  TYPE bapiret2_t,
          ls_message TYPE string.
    FIELD-SYMBOLS  &lt;lw_return&gt; TYPE bapiret2.

    TRY.
        o_proxy-&gt;si_get_raw_material_inventoryo(
          EXPORTING
            output = lw_request
          IMPORTING
            input = w_data ).
      CATCH cx_ai_system_fault INTO DATA(lx_error).
        MESSAGE e000 WITH lx_error-&gt;if_message~get_text( )
           INTO ls_message.
        m_raise_exception.
    ENDTRY.
  ENDMETHOD.
  METHOD get_iterator.
    DATA lw_line TYPE zusfp_sasa_stock_upd.

    DATA(lo_iterator) = NEW lcl_ws_iterator( ).
    LOOP AT me-&gt;w_data-mt_get_raw_material_sap_respon-raw_material
      ASSIGNING FIELD-SYMBOL(&lt;lw_raw_material&gt;).
      lw_line-location = &lt;lw_raw_material&gt;-sap_plant.
      lw_line-product = &lt;lw_raw_material&gt;-sap_sku.
      lw_line-quantity = &lt;lw_raw_material&gt;-weight.
      IF lw_line-product IN spstkif AND &quot;List filtering
         lw_line-location IN slstkif.
        lo_iterator-&gt;add_item( lw_line ).
      ENDIF.
    ENDLOOP.
    lo_iterator-&gt;initialize( ).

    ro_iterator = lo_iterator.
  ENDMETHOD.
  METHOD free.
    FREE o_proxy.
  ENDMETHOD.
ENDCLASS.


*&amp;---------------------------------------------------------------------*
*&amp;       Class (Implementation)  lcl_historial_manager
*&amp;---------------------------------------------------------------------*
*        Text
*----------------------------------------------------------------------*
CLASS lcl_historial_manager IMPLEMENTATION.
  METHOD constructor.

    me-&gt;timestp = i_timestp.
  ENDMETHOD.
  METHOD set_new.
    DATA: lo_pers_obj  TYPE REF TO zcl_usfp_t_asa_stkup,
          lv_method    TYPE zusfp_asa_upd_stk_method,
          lv_text(200) TYPE c,
          ls_data      TYPE string,
          lxs_data     TYPE xstring.

    TRY.
        lo_pers_obj = zca_usfp_t_asa_stkup=&gt;agent-&gt;create_persistent( i_aedat = me-&gt;timestp
                                                                      i_uname = sy-uname ).
      CATCH cx_os_object_existing INTO DATA(lx_exist).
        lv_text = lx_exist-&gt;get_text( ).
        io_log-&gt;add_message_free_text(
          EXPORTING
            im_text         = lv_text   &quot; Text to Be Displayed
            im_msg_type     = &apos;I&apos;    &quot; Message Type
            im_problemclass = &apos;1&apos;    &quot; Application Log: Message Problem Class
          ).
        RETURN.
    ENDTRY.

    TRY .
        CALL TRANSFORMATION zusfp_tf_asa_stock_data
          SOURCE asa_data = it_data
          RESULT XML ls_data.
      CATCH cx_transformation_error INTO DATA(lx_transf).
        lv_text = lx_transf-&gt;get_text( ).
        io_log-&gt;add_message_free_text(
          EXPORTING
            im_text         = lv_text   &quot; Text to Be Displayed
            im_msg_type     = &apos;I&apos;    &quot; Message Type
            im_problemclass = &apos;2&apos;    &quot; Application Log: Message Problem Class
          ).
    ENDTRY.

    IF ls_data IS NOT INITIAL.
      TRY .
          NEW cl_abap_gzip( )-&gt;compress_text(
            EXPORTING
              text_in                    =   ls_data  &quot; Input text
*                text_in_len                = -1    &quot; Input Length
*                compress_level             = 6    &quot; Level of Compression
*                conversion                 = &apos;DEFAULT&apos;    &quot; Conversion to UTF8 (UC)
            IMPORTING
              gzip_out                   =  lxs_data   &quot; Compressed output
*                gzip_out_len               =     &quot; Output Length
              ).
*              CATCH cx_parameter_invalid_range.    &quot;
*              CATCH cx_sy_buffer_overflow.    &quot;
*              CATCH cx_sy_conversion_codepage.    &quot;
*              CATCH cx_sy_compression_error.    &quot;
        CATCH cx_root INTO DATA(lx_root).
          lv_text = lx_root-&gt;get_text( ).
          io_log-&gt;add_message_free_text(
            EXPORTING
              im_text         = lv_text   &quot; Text to Be Displayed
              im_msg_type     = &apos;I&apos;    &quot; Message Type
              im_problemclass = &apos;2&apos;    &quot; Application Log: Message Problem Class
            ).
      ENDTRY.
    ENDIF.

    lo_pers_obj-&gt;set_utzon( i_utzon = sy-zonlo ).
*      CATCH cx_os_object_not_found.    &quot;
    IF p_istk = abap_true.
      lv_method = 1.
    ELSE.
      lv_method = 2.
    ENDIF.
    lo_pers_obj-&gt;set_umeth( i_umeth = lv_method ).
*      CATCH cx_os_object_not_found.    &quot;
    lo_pers_obj-&gt;set_adata( i_adata = lxs_data ).
    lo_pers_obj-&gt;set_lghdl( i_lghdl = io_log-&gt;g_log_handle  ).
*      CATCH cx_os_object_not_found.    &quot;
    COMMIT WORK AND WAIT.
  ENDMETHOD.
  METHOD shows.
    DATA: lv_text(200) TYPE c,
          lt_view      TYPE zusfp_sasa_hist_view_t,
          lt_data      TYPE zusfp_sasa_stock_upd_t,
          ls_data      TYPE string,
          lxs_data     TYPE xstring,
          lv_valpos    TYPE valpos,
          lo_api       TYPE REF TO lcl_api,
          lo_entry     TYPE REF TO zcl_usfp_t_asa_stkup,
          lx_error     TYPE REF TO cx_bapi_error,
          lx_root      TYPE REF TO cx_root.
    FIELD-SYMBOLS: &lt;lw_method&gt; TYPE dd07v,
                   &lt;lw_return&gt; TYPE bapiret2.

    lo_api = NEW lcl_api( ).
    TRY .
        DATA(lt_methods) = lo_api-&gt;get_methods( ).
      CATCH cx_bapi_error INTO lx_error.
        LOOP AT lx_error-&gt;status ASSIGNING &lt;lw_return&gt;.
          io_log-&gt;add_bapi_return( im_bapireturn = &lt;lw_return&gt; ).
        ENDLOOP.
    ENDTRY.
    TRY .
        DATA(lo_query_manager) = cl_os_system=&gt;get_query_manager( ).
        DATA(lo_query) = lo_query_manager-&gt;create_query(
*                    i_filter              =
*                    i_ordering            =
*                    i_parameters          =
              ).
*                  CATCH cx_os_class_not_found.  &quot;
        DATA(lt_entries) = zca_usfp_t_asa_stkup=&gt;agent-&gt;if_os_ca_persistency~get_persistent_by_query(
                i_query                = lo_query
*                         i_parameter_tab        =
*                         i_par1                 =
*                         i_par2                 =
*                         i_par3                 =
*                         i_subclasses           = OSCON_FALSE
*                         i_upto                 = 0
*                         i_options              = IF_OS_QUERY_OPTIONS=&gt;DEFAULT_OPTIONS
                ).
*                       CATCH cx_os_object_not_found.  &quot;
*                       CATCH cx_os_query_error.  &quot;
      CATCH cx_root INTO lx_root.
        lv_text = lx_root-&gt;get_text( ).
        io_log-&gt;add_message_free_text(
          EXPORTING
            im_text         = lv_text   &quot; Text to Be Displayed
            im_msg_type     = &apos;I&apos;    &quot; Message Type
            im_problemclass = &apos;2&apos;    &quot; Application Log: Message Problem Class
          ).
        io_log-&gt;save_to_db(
*            IMPORTING
*              e_lognumber =     &quot; Application log: log number
        ).
    ENDTRY.

    LOOP AT lt_entries ASSIGNING FIELD-SYMBOL(&lt;lo_line&gt;).
      lo_entry ?= &lt;lo_line&gt;.
      lxs_data = lo_entry-&gt;get_adata( ).
      CLEAR lt_data.
*             CATCH cx_os_object_not_found.  &quot;
      TRY .
          NEW cl_abap_gzip( )-&gt;decompress_text(
            EXPORTING
              gzip_in                    =  lxs_data   &quot; Input of Zipped Data
*            gzip_in_len                = -1    &quot; Input Length
*            conversion                 = &apos;DEFAULT&apos;    &quot; Conversion to UTF8 (UC)
            IMPORTING
              text_out                   =  ls_data   &quot; Decompessed Output
*            text_out_len               =     &quot; Output Length
            ).
*          CATCH cx_parameter_invalid_range.    &quot;
*          CATCH cx_sy_buffer_overflow.    &quot;
*          CATCH cx_sy_conversion_codepage.    &quot;
*          CATCH cx_sy_compression_error.    &quot;
        CATCH cx_root INTO lx_root.
          lv_text = lx_root-&gt;get_text( ).
          io_log-&gt;add_message_free_text(
          EXPORTING
            im_text         = lv_text   &quot; Text to Be Displayed
            im_msg_type     = &apos;I&apos;    &quot; Message Type
            im_problemclass = &apos;2&apos;    &quot; Application Log: Message Problem Class
            ).
      ENDTRY.

      TRY .
          CALL TRANSFORMATION zusfp_tf_asa_stock_data
            SOURCE XML ls_data
            RESULT asa_data = lt_data.
        CATCH cx_transformation_error INTO DATA(lx_transf).
          lv_text = lx_transf-&gt;get_text( ).
          io_log-&gt;add_message_free_text(
          EXPORTING
            im_text         = lv_text   &quot; Text to Be Displayed
            im_msg_type     = &apos;I&apos;    &quot; Message Type
            im_problemclass = &apos;2&apos;    &quot; Application Log: Message Problem Class
            ).
          CONTINUE.
      ENDTRY.
      lv_valpos = lo_entry-&gt;get_umeth( ).
*              CATCH cx_os_object_not_found.  &quot;
      LOOP AT lt_data ASSIGNING FIELD-SYMBOL(&lt;lw_data&gt;).
        APPEND INITIAL LINE TO lt_view ASSIGNING FIELD-SYMBOL(&lt;lw_view&gt;).
        MOVE-CORRESPONDING &lt;lw_data&gt; TO &lt;lw_view&gt;.
        &lt;lw_view&gt;-uname = lo_entry-&gt;get_uname( ).
        &lt;lw_view&gt;-utzon = lo_entry-&gt;get_utzon( ).
        &lt;lw_view&gt;-hicon = &apos;@96@&apos;.
        &lt;lw_view&gt;-lghdl = lo_entry-&gt;get_lghdl( ).
        CONVERT TIME STAMP lo_entry-&gt;get_aedat( )
           TIME ZONE lo_entry-&gt;get_utzon( )
           INTO DATE &lt;lw_view&gt;-aedat TIME &lt;lw_view&gt;-aetim.
        READ TABLE lt_methods ASSIGNING &lt;lw_method&gt;
         WITH KEY valpos     = lv_valpos
                  ddlanguage = sy-langu.
        IF sy-subrc = 0.
          &lt;lw_view&gt;-dmeth = &lt;lw_method&gt;-ddtext.
        ENDIF.
      ENDLOOP.
    ENDLOOP.

    TRY .
        lo_api-&gt;show_historial( lt_view ).
      CATCH cx_bapi_error INTO lx_error.
        LOOP AT lx_error-&gt;status ASSIGNING &lt;lw_return&gt;.
          io_log-&gt;add_bapi_return( im_bapireturn = &lt;lw_return&gt; ).
        ENDLOOP.
    ENDTRY.
  ENDMETHOD.
  METHOD delete.
    DATA: lo_api      TYPE REF TO lcl_api,
          lo_db       TYPE REF TO lcl_db,
          ls_question TYPE string,
          lr_date     TYPE RANGE OF sydatum,
          lr_timestp  TYPE lcl_db=&gt;yr_timestp,
          lr_uname    TYPE lcl_db=&gt;yr_uname.

    lo_api = NEW lcl_api( ).
    lo_db  = NEW lcl_db( ) .
    ls_question = &apos;Do you confirm the log registers exclusion?&apos;(M05).
    TRY .
        lo_api-&gt;confirm( ls_question ).
      CATCH cx_bapi_error.
        RETURN.
    ENDTRY.

    IF s_ulog IS NOT INITIAL .
      lr_uname = s_ulog[].
      INSERT s_ulog INTO lr_uname INDEX 1.
      SORT lr_uname BY table_line.
      DELETE ADJACENT DUPLICATES FROM lr_uname.
    ENDIF.

    IF s_dlog IS NOT INITIAL.
      lr_date = s_dlog[].
      INSERT s_dlog INTO lr_date INDEX 1.
      SORT lr_date BY table_line.
      DELETE ADJACENT DUPLICATES FROM lr_date.

      LOOP AT lr_date ASSIGNING FIELD-SYMBOL(&lt;lw_date&gt;).
        APPEND INITIAL LINE TO lr_timestp ASSIGNING FIELD-SYMBOL(&lt;lw_timestp&gt;).
        IF &lt;lw_date&gt;-low IS NOT INITIAL.
          CONVERT DATE &lt;lw_date&gt;-low TIME &apos;000000&apos;
             INTO TIME STAMP &lt;lw_timestp&gt;-low TIME ZONE sy-zonlo.
        ENDIF.
        IF &lt;lw_date&gt;-high IS NOT INITIAL.
          CONVERT DATE &lt;lw_date&gt;-high TIME &apos;235959&apos;
             INTO TIME STAMP &lt;lw_timestp&gt;-high TIME ZONE sy-zonlo.
        ENDIF.
        &lt;lw_timestp&gt;-sign = &lt;lw_date&gt;-sign.
        &lt;lw_timestp&gt;-option = &lt;lw_date&gt;-option.
      ENDLOOP.
    ENDIF.


    TRY .
        DATA(lt_lghdl) = lo_db-&gt;get_log_handles(
              ir_timestp      = lr_timestp
              ir_uname        = lr_uname
              ).
        lo_api-&gt;delete_messages( it_lghdl = lt_lghdl ).
        lo_db-&gt;delete_historial(
          EXPORTING
            ir_timestp      = lr_timestp
            ir_uname        = lr_uname
          ).
        MESSAGE s024.
      CATCH cx_sy_sql_error  &quot;
            cx_bapi_error.
        MESSAGE i023 DISPLAY LIKE &apos;E&apos;.
        IF sy-batch = abap_true.
          LEAVE PROGRAM.
        ELSE.
          LEAVE TO CURRENT TRANSACTION.
        ENDIF.
    ENDTRY.
  ENDMETHOD.
ENDCLASS.               &quot;lcl_historial_manager
*&amp;---------------------------------------------------------------------*
*&amp;       Class (Implementation)  lcl_stock_manager
*&amp;---------------------------------------------------------------------*
*        Text
*----------------------------------------------------------------------*
CLASS lcl_stock_manager IMPLEMENTATION.
  METHOD load.
    DATA: lo_item  TYPE REF TO lcl_item,
          lo_api   TYPE REF TO lcl_api,
          lo_db    TYPE REF TO lcl_db,
          lx_error TYPE REF TO cx_bapi_error,
          lt_items TYPE bapi10504stock2_tab,
          lt_hist  TYPE zusfp_sasa_stock_upd_t,
          lv_matnr TYPE matnr.
    FIELD-SYMBOLS: &lt;lw_item&gt;   TYPE bapi10504stock2,
                   &lt;lw_return&gt; TYPE bapiret2.
    DEFINE lm_add_messages.
      LOOP AT lx_error-&gt;status ASSIGNING &lt;lw_return&gt;.
        po_log-&gt;add_bapi_return( &lt;lw_return&gt; ).
      ENDLOOP.
      po_log-&gt;save_to_db( ).
      RETURN.
    END-OF-DEFINITION.

    TRY .
        po_media-&gt;open( ).
        DATA(lo_iterator) = po_media-&gt;get_iterator( ).
      CATCH cx_bapi_error INTO lx_error.
        lm_add_messages.
    ENDTRY.

    IF sy-batch = abap_false.
      IF lo_iterator-&gt;preview( ) = abap_false.
        po_log-&gt;add_message_free_text(
        EXPORTING
          im_text         = &apos;Action cancelled by user.&apos;(M01)   &quot; Text to Be Displayed
          im_msg_type     = &apos;I&apos;    &quot; Message Type
          im_problemclass = &apos;4&apos;    &quot; Application Log: Message Problem Class
          ).
        po_log-&gt;save_to_db( ).
        RETURN.
      ENDIF.
    ENDIF.

    lo_api ?= me-&gt;get_api( ).
    lo_db  ?= me-&gt;get_db( ).
    TRY .
        DATA(lv_logsys) = lo_api-&gt;get_logical_system( ).
      CATCH cx_bapi_error INTO lx_error.
        lm_add_messages.
    ENDTRY.
    WHILE lo_iterator-&gt;hasnext( ) = abap_true.
      lo_item ?= lo_iterator-&gt;next( ).
      APPEND INITIAL LINE TO lt_items ASSIGNING &lt;lw_item&gt;.
      MOVE-CORRESPONDING lo_item-&gt;w_item TO &lt;lw_item&gt;.
      APPEND lo_item-&gt;w_item TO lt_hist.
      &lt;lw_item&gt;-stock_type = 11.
      &lt;lw_item&gt;-version = p_vstk.
      &lt;lw_item&gt;-atpcat = p_cstk.
      &lt;lw_item&gt;-spec_stock_system = lv_logsys.
      TRY .
          &lt;lw_item&gt;-loctype = lo_db-&gt;get_location_type( &lt;lw_item&gt;-location  ).
        CATCH cx_sy_sql_error.
          CLEAR &lt;lw_item&gt;-loctype.
      ENDTRY.
      &lt;lw_item&gt;-storage_location = &apos;aSa&apos;.
      lv_matnr = &lt;lw_item&gt;-product.
      SHIFT lv_matnr RIGHT DELETING TRAILING space.
      OVERLAY lv_matnr WITH &apos;000000000000000000&apos;.
      &lt;lw_item&gt;-product = lv_matnr.
    ENDWHILE.

    po_hist-&gt;set_new( it_data = lt_hist
                      io_log  = po_log  ).
    lo_api-&gt;update_stock( EXPORTING it_items  = lt_items
                          IMPORTING et_return = DATA(lt_return) ).
    READ TABLE lt_return WITH KEY type = &apos;E&apos; TRANSPORTING NO FIELDS.
    IF sy-subrc = 0.
      lo_api-&gt;rollback( ).
    ELSE.
      lo_api-&gt;commit( ).
      po_log-&gt;add_message_free_text(
      EXPORTING
        im_text         = &apos;Stock successfully updated.&apos;(M04)   &quot; Text to Be Displayed
        im_msg_type     = &apos;I&apos;    &quot; Message Type
        im_problemclass = &apos;4&apos;    &quot; Application Log: Message Problem Class
        ).
      po_log-&gt;save_to_db( ).

    ENDIF.
    LOOP AT lt_return ASSIGNING &lt;lw_return&gt;.
      po_log-&gt;add_bapi_return( &lt;lw_return&gt; ).
    ENDLOOP.
    IF sy-subrc = 0.
      po_log-&gt;save_to_db( ).
    ENDIF.

  ENDMETHOD.
  METHOD get_api.
    ro_api = NEW lcl_api( ).
  ENDMETHOD.
  METHOD get_db.
    ro_db = NEW lcl_db( ).
  ENDMETHOD.
ENDCLASS.               &quot;lcl_stock_manager
*&amp;---------------------------------------------------------------------*
*&amp;       Class (Implementation)  lcl_spreadsheet
*&amp;---------------------------------------------------------------------*
*        Text
*----------------------------------------------------------------------*
CLASS lcl_spreadsheet IMPLEMENTATION.
  METHOD open.

    &quot;Read the content of XLSX file
    TRY.
        xs_file_data = cl_openxml_helper=&gt;load_local_file( p_fstksp ).
      CATCH cx_openxml_not_found.
    ENDTRY.
    load_package( ).
    &quot;Read the sheet XML
    xs_sheet_data = load_xml_data( co_sheet_xml ).
    &quot;Read the shared string XML
    xs_shared_data = load_xml_data( co_shared_str_xml ).
  ENDMETHOD.
  METHOD get_iterator.
    DATA: lo_shared_str_dom     TYPE REF TO if_ixml_document,
          lo_shared_str_nodeset TYPE REF TO if_ixml_node,
          lxs_shared_str_xml    TYPE xstring,
          lt_data               TYPE zusfp_sasa_stock_upd_t,
          lt_return             TYPE bapiret2_t,
          ls_message            TYPE string.
    FIELD-SYMBOLS  &lt;lw_return&gt; TYPE bapiret2.

    TRY.
        CALL TRANSFORMATION zusfp_trf_asastk_remnsp
          SOURCE XML me-&gt;xs_shared_data
          RESULT XML lxs_shared_str_xml.
        &quot;Create a nodeset from the shared XML
        CALL FUNCTION &apos;SDIXML_XML_TO_DOM&apos;
          EXPORTING
            xml           = lxs_shared_str_xml
          IMPORTING
            document      = lo_shared_str_dom
          EXCEPTIONS
            invalid_input = 1
            OTHERS        = 2.
        IF sy-subrc = 0.
          lo_shared_str_nodeset = lo_shared_str_dom-&gt;clone( ).
        ENDIF.
        &quot;Pass the SHEET XML and Shared String Nodeset to the main transformation
        CALL TRANSFORMATION zusfp_trf_asastk_import
          PARAMETERS p_shared_string = lo_shared_str_nodeset
          SOURCE XML me-&gt;xs_sheet_data
          RESULT t_data = lt_data.
      CATCH cx_xslt_exception INTO DATA(lx_error).
        MESSAGE e000 WITH lx_error-&gt;if_message~get_text( ) INTO ls_message.
        m_raise_exception.
    ENDTRY.

    DATA(lo_iterator) = NEW lcl_ws_iterator( ).
    LOOP AT lt_data ASSIGNING FIELD-SYMBOL(&lt;lw_data&gt;).
      lo_iterator-&gt;add_item( &lt;lw_data&gt; ).
    ENDLOOP.
    lo_iterator-&gt;initialize( ).

    ro_iterator = lo_iterator.
  ENDMETHOD.
  METHOD free.
  ENDMETHOD.
  METHOD load_package.
    DATA: lt_return  TYPE bapiret2_t,
          ls_message TYPE string.
    FIELD-SYMBOLS  &lt;lw_return&gt; TYPE bapiret2.

    TRY.
        o_package = cl_xlsx_document=&gt;load_document( iv_data = xs_file_data ).
        o_parts = o_package-&gt;get_parts( ).
      CATCH cx_root INTO DATA(lx_error).
        MESSAGE e000 WITH lx_error-&gt;if_message~get_text( ) INTO ls_message.
        m_raise_exception.
    ENDTRY.
  ENDMETHOD. &quot;load_package
  METHOD load_xml_data.
    DATA: lt_return  TYPE bapiret2_t,
          ls_message TYPE string.
    FIELD-SYMBOLS  &lt;lw_return&gt; TYPE bapiret2.

    TRY.
        DATA(lv_uri) = o_parts-&gt;get_part( 2 )-&gt;get_parts( )-&gt;get_part( i_xml_index )-&gt;get_uri( )-&gt;get_uri( ).
        DATA(lo_xml_part_uri) = cl_openxml_parturi=&gt;create_from_partname( lv_uri ).
        DATA(lo_xml_part) = o_package-&gt;get_part_by_uri( lo_xml_part_uri ).
        r_xml_data = lo_xml_part-&gt;get_data( ).
      CATCH cx_root INTO DATA(lx_error).
        MESSAGE e000 WITH lx_error-&gt;if_message~get_text( ) INTO ls_message.
        m_raise_exception.
    ENDTRY.
  ENDMETHOD. &quot;load_xml_data

ENDCLASS.               &quot;lcl_spreadsheet
*&amp;---------------------------------------------------------------------*
*&amp;       Class (Implementation)  lcl_ws_iterator
*&amp;---------------------------------------------------------------------*
*        Text
*----------------------------------------------------------------------*
CLASS lcl_ws_iterator IMPLEMENTATION.
  METHOD add_item.
    APPEND iw_item TO t_data.
  ENDMETHOD.
  METHOD initialize.
    SORT t_data BY table_line.
  ENDMETHOD.
  METHOD lif_iterator~hasnext.

    r_result = abap_false.
    IF lines( me-&gt;t_data ) &gt; 0.
      r_result = abap_true.
    ENDIF.
  ENDMETHOD.
  METHOD lif_iterator~next.

    READ TABLE me-&gt;t_data ASSIGNING FIELD-SYMBOL(&lt;lw_item&gt;) INDEX 1.
    IF sy-subrc = 0.
      DATA(lo_item) = NEW lcl_item( &lt;lw_item&gt; ).
      ro_object = lo_item.
      DELETE me-&gt;t_data INDEX 1.
    ENDIF.
  ENDMETHOD.
  METHOD lif_iterator~preview.
    DATA  lo_api TYPE REF TO lcl_api.

    r_ok = abap_false.
    lo_api ?= me-&gt;get_api( ).
    TRY .
        r_ok = lo_api-&gt;show_pop_up( me-&gt;t_data ).
      CATCH cx_bapi_error.
        RETURN.
    ENDTRY.
  ENDMETHOD.
  METHOD get_api.
    ro_api = NEW lcl_api( ).
  ENDMETHOD.
ENDCLASS.               &quot;lcl_ws_iterator
*&amp;---------------------------------------------------------------------*
*&amp;       Class (Implementation)  lcl_item
*&amp;---------------------------------------------------------------------*
*        Text
*----------------------------------------------------------------------*
CLASS lcl_item IMPLEMENTATION.
  METHOD constructor.
    me-&gt;w_item = pw_item.
  ENDMETHOD.
ENDCLASS.               &quot;lcl_item
*&amp;---------------------------------------------------------------------*
*&amp;       Class (Implementation)  lcl_api
*&amp;---------------------------------------------------------------------*
*        Text
*----------------------------------------------------------------------*
CLASS lcl_api IMPLEMENTATION.
  METHOD get_logical_system.
    DATA: ls_message TYPE string,
          lt_return  TYPE bapiret2_t.
    FIELD-SYMBOLS  &lt;lw_return&gt; TYPE bapiret2.

    CLEAR r_logsys.
    CALL FUNCTION &apos;OWN_LOGICAL_SYSTEM_GET&apos;
      IMPORTING
        own_logical_system             = r_logsys
      EXCEPTIONS
        own_logical_system_not_defined = 1
        OTHERS                         = 2.
    IF sy-subrc &lt;&gt; 0.
      MESSAGE
           ID sy-msgid
         TYPE sy-msgty
       NUMBER sy-msgno
         WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4
         INTO ls_message.
      m_raise_exception.
    ENDIF.
  ENDMETHOD.
  METHOD get_methods.
    CONSTANTS lc_zusfp_upd_stk_method TYPE domname VALUE &apos;ZUSFP_UPD_STK_METHOD&apos;.
    DATA: lt_methods TYPE STANDARD TABLE OF dd07v,
          ls_message TYPE string,
          lt_return  TYPE bapiret2_t.
    FIELD-SYMBOLS  &lt;lw_return&gt; TYPE bapiret2.

    CALL FUNCTION &apos;DD_DOMA_GET&apos;
      EXPORTING
        domain_name   = lc_zusfp_upd_stk_method
*       GET_STATE     = &apos;M  &apos;
*       LANGU         = SY-LANGU
*       PRID          = 0
*       WITHTEXT      = &apos;X&apos;
*     IMPORTING
*       DD01V_WA_A    =
*       DD01V_WA_N    =
*       GOT_STATE     =
      TABLES
        dd07v_tab_a   = lt_methods
        dd07v_tab_n   = rt_methods
      EXCEPTIONS
        illegal_value = 1
        op_failure    = 2
        OTHERS        = 3.
    IF sy-subrc &lt;&gt; 0.
      m_raise_exception.
    ENDIF.
  ENDMETHOD.
  METHOD show_pop_up.

    r_bool = abap_false.
    TRY .
        CALL FUNCTION &apos;ZUSFP_LIST_WITH_OK_AND_CANCEL&apos;
          EXPORTING
            i_start_column = 40
            i_start_line   = 3
            i_end_column   = 72
            i_end_line     = 20
            it_data        = it_data
          IMPORTING
            e_option       = r_bool.
      CATCH cx_bapi_error INTO DATA(lx_error).
        RAISE EXCEPTION lx_error.
    ENDTRY.
  ENDMETHOD.
  METHOD confirm.
    DATA: lv_answer(1) TYPE c,
          lt_return    TYPE bapiret2_t,
          ls_message   TYPE string.
    FIELD-SYMBOLS  &lt;lw_return&gt; TYPE bapiret2.

    CALL FUNCTION &apos;POPUP_TO_CONFIRM&apos;
      EXPORTING
        text_question  = i_question
      IMPORTING
        answer         = lv_answer
      EXCEPTIONS
        text_not_found = 1
        OTHERS         = 2.
    IF sy-subrc &lt;&gt; 0.
      m_raise_exception.
    ENDIF.
    IF lv_answer &lt;&gt; &apos;1&apos;.
      MESSAGE i022 INTO ls_message.
      m_raise_exception.
    ENDIF.

  ENDMETHOD.
  METHOD show_historial.

    TRY .
        CALL FUNCTION &apos;ZUSFP_HISTORIAL_POP_UP&apos;
          EXPORTING
            i_start_column = 20
            i_start_line   = 3
            i_end_column   = 95
            i_end_line     = 20
            it_data        = it_data.
      CATCH cx_bapi_error INTO DATA(lx_error).
        RAISE EXCEPTION lx_error.
    ENDTRY.
  ENDMETHOD.
  METHOD update_stock.

    TRY .
        DATA(lv_logsys) = me-&gt;get_logical_system( ).
      CATCH cx_bapi_error INTO DATA(lx_error).
        et_return = lx_error-&gt;status.
    ENDTRY.

    CALL FUNCTION &apos;BAPI_STSRVAPS_SAVEMULTI2&apos;
      EXPORTING
        logical_system = lv_logsys
*       COMMIT_CONTROL = &apos;E&apos;
*       PLANNING_MODE_USAGE                 =
*       PLANNING_VERSION                    = &apos;000&apos;
*       NO_AUTOMATIC_VERSION_CREATION       =
      TABLES
        stock          = it_items
*       CLASSVALUESCHAR                     =
*       CLASSVALUESNUM =
*       CLASSVALUESCURR                     =
        return         = et_return
*       EXTENSION_IN   =
*       FCS_REDUCTION  =
      .
  ENDMETHOD.
  METHOD commit.
    CALL FUNCTION &apos;BAPI_TRANSACTION_COMMIT&apos;
      EXPORTING
        wait = &apos;X&apos;
*     IMPORTING
*       RETURN        =
      .
  ENDMETHOD.
  METHOD rollback.
    CALL FUNCTION &apos;BAPI_TRANSACTION_ROLLBACK&apos;
*     IMPORTING
*       RETURN        =
      .
  ENDMETHOD.
  METHOD delete_messages.
    DATA: lt_return  TYPE bapiret2_t,
          ls_message TYPE string.
    FIELD-SYMBOLS  &lt;lw_return&gt; TYPE bapiret2.

    CALL FUNCTION &apos;BAL_DB_DELETE&apos;
      EXPORTING
        i_t_log_handle    = it_lghdl
      EXCEPTIONS
        no_logs_specified = 1
        OTHERS            = 2.
    IF sy-subrc &lt;&gt; 0.
      m_raise_exception.
    ENDIF.
  ENDMETHOD.
ENDCLASS.               &quot;lcl_api


*&amp;---------------------------------------------------------------------*
*&amp;       Class (Implementation)  lcl_db
*&amp;---------------------------------------------------------------------*
*        Text
*----------------------------------------------------------------------*
CLASS lcl_db IMPLEMENTATION.
  METHOD get_location_type.

    SELECT loctype
      FROM /sapapo/loc
        UP TO 1 ROWS
      INTO r_loctype
     WHERE locno = i_locno.
    ENDSELECT.
    IF sy-subrc &lt;&gt; 0.
      RAISE EXCEPTION TYPE cx_sy_sql_error.
    ENDIF.
  ENDMETHOD.
  METHOD get_log_handles.

    SELECT lghdl
      FROM zusfpt_asa_stkup
      INTO TABLE rt_lghdl
     WHERE aedat IN ir_timestp
       AND uname IN ir_uname.
    IF sy-subrc &lt;&gt; 0.
      RAISE EXCEPTION TYPE cx_sy_sql_error.
    ENDIF.
  ENDMETHOD.
  METHOD delete_historial.

    DELETE FROM zusfpt_asa_stkup
     WHERE aedat IN ir_timestp
       AND uname IN ir_uname.
    IF sy-subrc &lt;&gt; 0.
      RAISE EXCEPTION TYPE cx_sy_sql_error.
    ENDIF.
  ENDMETHOD.
ENDCLASS.               &quot;lcl_db</source>
 </PROG>
 <PROG NAME="ZUSFPR_STOCK_CREATION_TOP" VARCL="X" SUBC="I" APPL="Z" RSTAT="K" RMAND="050" RLOAD="E" UCCHECK="X">
  <textPool>
   <language SPRAS="E">
    <textElement ID="R" ENTRY="Include ZUSFPR_STOCK_CREATION_TOP" LENGTH="33 "/>
   </language>
  </textPool>
  <source>*&amp;---------------------------------------------------------------------*
*&amp; Include ZUSFPR_STOCK_CREATION_TOP                         Report ZUSFPR_STOCK_CREATION
*&amp;
*&amp;---------------------------------------------------------------------*
REPORT zusfpr_stock_creation MESSAGE-ID zgldev.

TABLES: bapi10504stock2.

SELECTION-SCREEN BEGIN OF BLOCK b0 WITH FRAME TITLE text-t00.
PARAMETERS: p_stck TYPE char01 RADIOBUTTON GROUP optn DEFAULT &apos;X&apos; USER-COMMAND code1,
            p_lgmn TYPE char01 RADIOBUTTON GROUP optn.
SELECTION-SCREEN END OF BLOCK b0.

SELECTION-SCREEN BEGIN OF BLOCK stock WITH FRAME TITLE text-t01.
PARAMETERS: p_vstk TYPE /sapapo/version,
            p_cstk TYPE /sapapo/atpcat,
            p_istk TYPE char01 RADIOBUTTON GROUP mode DEFAULT &apos;X&apos; USER-COMMAND code2,
            p_sstk TYPE char01 RADIOBUTTON GROUP mode.

SELECTION-SCREEN BEGIN OF BLOCK it1 WITH FRAME.
SELECT-OPTIONS: spstkif FOR bapi10504stock2-product  MODIF ID it1,
                slstkif FOR bapi10504stock2-location MODIF ID it1.
SELECTION-SCREEN END OF BLOCK it1.

SELECTION-SCREEN BEGIN OF BLOCK sp1 WITH FRAME.
PARAMETERS  p_fstksp  TYPE string MEMORY ID zusfpr_stock_02 &quot;zusfpr_stock_01
 LOWER CASE MODIF ID sp1.
SELECTION-SCREEN END OF BLOCK sp1.

SELECTION-SCREEN END OF BLOCK stock.

SELECTION-SCREEN BEGIN OF BLOCK log WITH FRAME TITLE text-t02.
PARAMETERS: p_vlog TYPE char01 RADIOBUTTON GROUP logp DEFAULT &apos;X&apos; USER-COMMAND code3,
            p_dlog TYPE char01 RADIOBUTTON GROUP logp.

SELECTION-SCREEN BEGIN OF BLOCK blg1 WITH FRAME TITLE text-t03.
SELECT-OPTIONS: &quot;s_llog FOR bapi10504stock2-location MODIF ID lg1,
                s_ulog FOR sy-uname MODIF ID lg1,
                s_dlog FOR sy-datum MODIF ID lg1.
SELECTION-SCREEN END OF BLOCK blg1.

SELECTION-SCREEN END OF BLOCK log.

*--------------------------------------------------------------------*
* INTERFACE  LIF_ITERATOR
* ------------------------------------------------------------------ *
* OVERVIEW: This interface defines an interator.
*--------------------------------------------------------------------*
INTERFACE lif_iterator.
  METHODS: next    RETURNING VALUE(ro_object) TYPE REF TO object,
*--------------------------------------------------------------------*
* NEXT
*--------------------------------------------------------------------*
*       EFFECTS.:  Returns Next Object.
*--------------------------------------------------------------------*
* &lt;-- RO_OBJECT The next object.
*--------------------------------------------------------------------*
    hasnext RETURNING VALUE(r_result)  TYPE abap_bool,
*--------------------------------------------------------------------*
* HASNEXT
*--------------------------------------------------------------------*
*       EFFECTS.:  Returns the result.
*--------------------------------------------------------------------*
* &lt;-- R_RESULT The next object.
*--------------------------------------------------------------------*
    preview RETURNING VALUE(r_ok) TYPE abap_bool.
*--------------------------------------------------------------------*
* PREVIEW
*--------------------------------------------------------------------*
*       EFFECTS.:  Shows a list of items to be returned in sequence
*                  and return the button pressed by user (OK = TRUE
*                  and CANCEL = FALSE).
*--------------------------------------------------------------------*
* &lt;-- R_RESULT The next object.
*--------------------------------------------------------------------*
ENDINTERFACE.                    &quot;lif_iterator  PUBLIC
*--------------------------------------------------------------------*
* CLASSES DEFINITIONS
*--------------------------------------------------------------------*
CLASS: lcl_webservice  DEFINITION DEFERRED,
       lcl_spreadsheet DEFINITION DEFERRED.
CLASS lcl_ws_iterator DEFINITION FINAL FRIENDS lcl_webservice
                                               lcl_spreadsheet.
  PUBLIC SECTION.
    INTERFACES lif_iterator.
    ALIASES: next    FOR lif_iterator~next,
             hasnext FOR lif_iterator~hasnext,
             preview FOR lif_iterator~preview.
  PRIVATE SECTION.
    DATA t_data TYPE zusfp_sasa_stock_upd_t.
    METHODS: add_item IMPORTING iw_item TYPE zusfp_sasa_stock_upd,
      initialize,
      get_api RETURNING VALUE(ro_api) TYPE REF TO object.
ENDCLASS.
CLASS lcl_item DEFINITION FINAL.
  PUBLIC SECTION.
    DATA w_item READ-ONLY TYPE zusfp_sasa_stock_upd.
    METHODS constructor IMPORTING pw_item TYPE zusfp_sasa_stock_upd.
ENDCLASS.
*--------------------------------------------------------------------*
* CLASS  LCL_MEDIA
* ------------------------------------------------------------------ *
* OVERVIEW: Generic definition of a media. A media can be an interface
*           or a file. It defines basic methods for a media.
*--------------------------------------------------------------------*
CLASS lcl_media DEFINITION ABSTRACT.
  PUBLIC SECTION.
    CLASS-METHODS get_media RETURNING VALUE(ro_media) TYPE REF TO lcl_media RAISING cx_bapi_error.
    METHODS: open  ABSTRACT RAISING cx_bapi_error,
*--------------------------------------------------------------------*
* OPEN
*--------------------------------------------------------------------*
*       EFFECTS.:  Loads the media content.
*--------------------------------------------------------------------*
      get_iterator ABSTRACT RETURNING VALUE(ro_iterator) TYPE REF TO lif_iterator
                            RAISING   cx_bapi_error,
*--------------------------------------------------------------------*
* GET_ITERATOR
*--------------------------------------------------------------------*
*       EFFECTS.:  Returns an iterator for the media content.
*--------------------------------------------------------------------*
      free ABSTRACT.
*--------------------------------------------------------------------*
* FREE
*--------------------------------------------------------------------*
*       EFFECTS.:  Cleans up internal objects.
*--------------------------------------------------------------------*
ENDCLASS.                    &quot;lcl_media DEFINITION
CLASS lcl_webservice DEFINITION FINAL INHERITING FROM lcl_media.
  PUBLIC SECTION.
    METHODS: constructor RAISING cx_bapi_error,
      open REDEFINITION,
      get_iterator REDEFINITION,
      free REDEFINITION.
  PRIVATE SECTION.
    DATA: o_proxy TYPE REF TO zusfpco_si_get_raw_material_in,
          w_data  TYPE zusfpmt_get_raw_material_sap_r.
ENDCLASS.
*--------------------------------------------------------------------*
* CLASS  LCL_XLS
* ------------------------------------------------------------------ *
* OVERVIEW: Represents a Spreadsheet.
*--------------------------------------------------------------------*
CLASS lcl_spreadsheet DEFINITION FINAL INHERITING FROM lcl_media.
  PUBLIC SECTION.
    CONSTANTS co_sheet_xml TYPE i VALUE 2.
    CONSTANTS co_shared_str_xml TYPE i VALUE 3.

    METHODS:
      open REDEFINITION,
      get_iterator REDEFINITION,
      free REDEFINITION.

  PRIVATE SECTION.
    DATA: xs_file_data   TYPE xstring,
          o_package      TYPE REF TO cl_openxml_package,
          o_parts        TYPE REF TO cl_openxml_partcollection,
          xs_sheet_data  TYPE xstring,
          xs_shared_data TYPE xstring.

    METHODS: load_package RAISING cx_bapi_error,
      load_xml_data IMPORTING VALUE(i_xml_index) TYPE i
                    RETURNING VALUE(r_xml_data)  TYPE xstring
                    RAISING   cx_bapi_error.
ENDCLASS.                    &quot;lcl_xls DEFINITION


CLASS lcl_api DEFINITION FINAL.
  PUBLIC SECTION.
    METHODS: get_logical_system RETURNING VALUE(r_logsys) TYPE logsys
                                RAISING   cx_bapi_error,
      get_methods        RETURNING VALUE(rt_methods) TYPE dd07v_tab
                         RAISING   cx_bapi_error,
      confirm            IMPORTING i_question TYPE string
                         RAISING   cx_bapi_error,
      show_pop_up        IMPORTING it_data       TYPE ANY TABLE
                         RETURNING VALUE(r_bool) TYPE abap_bool
                         RAISING   cx_bapi_error,
      show_historial     IMPORTING it_data TYPE zusfp_sasa_hist_view_t
                         RAISING   cx_bapi_error,
      update_stock       IMPORTING it_items  TYPE bapi10504stock2_tab
                         EXPORTING et_return TYPE bapiret2_t,
      commit,
      rollback,
      delete_messages    IMPORTING it_lghdl TYPE bal_t_logh.
ENDCLASS.


CLASS lcl_db DEFINITION FINAL.
  PUBLIC SECTION.
    TYPES: yr_uname   TYPE RANGE OF uname,
           yr_timestp TYPE RANGE OF tzntstmps.
    METHODS: get_location_type IMPORTING i_locno          TYPE /sapapo/locno
                               RETURNING VALUE(r_loctype) TYPE /sapapo/c_loctype
                               RAISING   cx_sy_sql_error,
      get_log_handles  IMPORTING ir_timestp      TYPE yr_timestp
                                 ir_uname        TYPE yr_uname
                       RETURNING VALUE(rt_lghdl) TYPE bal_t_logh
                       RAISING   cx_sy_sql_error,
      delete_historial IMPORTING ir_timestp TYPE yr_timestp
                                 ir_uname   TYPE yr_uname
                       RAISING   cx_sy_sql_error.
ENDCLASS.

CLASS lcl_historial_manager DEFINITION DEFERRED.
CLASS lcl_stock_manager DEFINITION FINAL.
  PUBLIC SECTION.
    METHODS  load IMPORTING po_media TYPE REF TO lcl_media
                            po_log   TYPE REF TO cl_ilm_log
                            po_hist  TYPE REF TO lcl_historial_manager.
  PRIVATE SECTION.
    METHODS: get_api RETURNING VALUE(ro_api) TYPE REF TO object,
      get_db  RETURNING VALUE(ro_db)  TYPE REF TO object.
ENDCLASS.


CLASS lcl_historial_manager DEFINITION FINAL.
  PUBLIC SECTION.
    DATA timestp TYPE tzntstmps.
    CLASS-METHODS: shows IMPORTING io_log TYPE REF TO cl_ilm_log,
      delete.
    METHODS: constructor IMPORTING i_timestp TYPE tzntstmps,
      set_new IMPORTING it_data TYPE zusfp_sasa_stock_upd_t
                        io_log  TYPE REF TO cl_ilm_log.
ENDCLASS.


*--------------------------------------------------------------------*
* CLASS  LCL_MAIN
* ------------------------------------------------------------------ *
* OVERVIEW: This class controls the program behavior, provided the
*           selection arguments have been set.
*--------------------------------------------------------------------*
CLASS lcl_main DEFINITION FINAL.
  PUBLIC SECTION.
    CONSTANTS c_log_object TYPE balobj_d VALUE &apos;ZFP_ASA_STK_UPL&apos;.
    CLASS-METHODS: get_field_value IMPORTING p_fieldname     TYPE dynfnam
                                   RETURNING VALUE(r_fvalue) TYPE dynfieldvalue.
*--------------------------------------------------------------------*
* GET_FIELD_VALUE
*--------------------------------------------------------------------*
*       EFFECTS.:  Returns the values of a field, before PAI is
*                  executed.
*--------------------------------------------------------------------*
* --&gt; P_FILENAME  Name of the file.
* &lt;-- R_FVALUE    Field value.
*--------------------------------------------------------------------*
    METHODS: constructor RAISING cx_bapi_error,
      run,
      show_messages,
      house_keeping.
*--------------------------------------------------------------------*
* HOUSE_KEEPING
*--------------------------------------------------------------------*
*       EFFECTS.:  Cleans up inner objects.
*--------------------------------------------------------------------*
  PRIVATE SECTION.
    DATA: o_log       TYPE REF TO cl_ilm_log,
          o_media     TYPE REF TO lcl_media,
          o_stock     TYPE REF TO lcl_stock_manager,
          o_historial TYPE REF TO lcl_historial_manager.
ENDCLASS.                    &quot;lcl_main DEFINITION


DATA: o_main  TYPE REF TO lcl_main,
      s_title TYPE string.

DEFINE m_raise_exception.
  APPEND INITIAL LINE TO lt_return ASSIGNING &lt;lw_return&gt;.
  &lt;lw_return&gt;-id         = sy-msgid.
  &lt;lw_return&gt;-type       = sy-msgty.
  &lt;lw_return&gt;-number     = sy-msgno.
  &lt;lw_return&gt;-message    = ls_message.
  &lt;lw_return&gt;-message_v1 = sy-msgv1.
  &lt;lw_return&gt;-message_v2 = sy-msgv2.
  &lt;lw_return&gt;-message_v3 = sy-msgv3.
  &lt;lw_return&gt;-message_v4 = sy-msgv4.
  RAISE EXCEPTION TYPE cx_bapi_error
    EXPORTING
      status = lt_return.
END-OF-DEFINITION.</source>
 </PROG>
 <PROG NAME="ZUSFPR_STOCK_CREATION_F01" VARCL="X" SUBC="I" APPL="Z" RSTAT="K" RMAND="050" RLOAD="E" UCCHECK="X">
  <textPool>
   <language SPRAS="E">
    <textElement ID="R" ENTRY="Include ZUSFPR_STOCK_CREATION_F01" LENGTH="33 "/>
   </language>
  </textPool>
  <source>*&amp;---------------------------------------------------------------------*
*&amp;  Include           ZUSFPR_STOCK_CREATION_F01
*&amp;---------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*&amp;      Form  ORGANIZE_SELECTION_SCREEN
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  --&gt;  p1        text
*  &lt;--  p2        text
*----------------------------------------------------------------------*
FORM organize_selection_screen .
  IF p_stck IS NOT INITIAL.
    LOOP AT SCREEN.
      IF screen-name CS &apos;LOG&apos;.
        screen-active = 0.
        MODIFY SCREEN.
      ELSEIF screen-name CS &apos;STK&apos;.
        screen-active = 1.
        MODIFY SCREEN.
      ENDIF.
    ENDLOOP.
  ELSE.
    LOOP AT SCREEN.
      IF screen-name CS &apos;LOG&apos;.
        screen-active = 1.
        MODIFY SCREEN.
      ELSEIF screen-name CS &apos;STK&apos;.
        screen-active = 0.
        MODIFY SCREEN.
      ENDIF.
    ENDLOOP.

  ENDIF.
  PERFORM: organize_stock_screen,
           organize_log_screen.
ENDFORM.
*&amp;---------------------------------------------------------------------*
*&amp;      Form  ORGANIZE_STOCK_SCREEN
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  --&gt;  p1        text
*  &lt;--  p2        text
*----------------------------------------------------------------------*
FORM organize_stock_screen .
  CASE abap_true.
    WHEN p_istk.
      LOOP AT SCREEN.
        IF screen-group1 = &apos;SP1&apos;.
          screen-active = 0.
          MODIFY SCREEN.
        ENDIF.
        IF screen-group1 = &apos;IT1&apos;.
          screen-active = 1.
          MODIFY SCREEN.
        ENDIF.
      ENDLOOP.
    WHEN p_sstk.
      LOOP AT SCREEN.
        IF screen-group1 = &apos;SP1&apos;.
          screen-active = 1.
          MODIFY SCREEN.
        ENDIF.
        IF screen-group1 = &apos;IT1&apos;.
          screen-active = 0.
          MODIFY SCREEN.
        ENDIF.
      ENDLOOP.
  ENDCASE.
ENDFORM.
*&amp;---------------------------------------------------------------------*
*&amp;      Form  ORGANIZE_LOG_SCREEN
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  --&gt;  p1        text
*  &lt;--  p2        text
*----------------------------------------------------------------------*
FORM organize_log_screen .
  IF p_vlog IS NOT INITIAL.
    LOOP AT SCREEN.
      IF screen-group1 = &apos;LG1&apos;.
        screen-active = 0.
        MODIFY SCREEN.
      ENDIF.
    ENDLOOP.
  ELSEIF p_dlog IS NOT INITIAL.
    LOOP AT SCREEN.
      IF screen-group1 = &apos;LG1&apos;.
        screen-active = 1.
        MODIFY SCREEN.
      ENDIF.
    ENDLOOP.
  ENDIF.
ENDFORM.</source>
 </PROG>
 <TABL TABNAME="ZUSFPDT_GET_RAW_MATERIAL_SAP_R" DDLANGUAGE="E" TABCLASS="INTTAB" DATMIN="0000000000" DATMAX="0000000000" DATAVG="0000000000" DDTEXT="98324: GLN - RS PI Interface for Raw Material Stock to SAP-A" AUTHCLASS="00" MASTERLANG="E" PROZPUFF="000" PROXYTYPE="X" EXCLASS="4">
  <dd09l AS4VERS="0000" SCHFELDANZ="000"/>
  <dd03p TABNAME="ZUSFPDT_GET_RAW_MATERIAL_SAP_R" FIELDNAME="CONTROLLER" DDLANGUAGE="E" POSITION="0001" ROLLNAME="PRXCTRLTAB" ADMINFIELD="0" INTLEN="000000" ROUTPUTLEN="000000" HEADLEN="00" SCRLEN1="00" SCRLEN2="00" SCRLEN3="00" DATATYPE="TTYP" LENG="000000" OUTPUTLEN="000000" DECIMALS="000000" MASK="  TTYPL" MASKLEN="0000" DDTEXT="Control Flags for Fields of a Structure" DEPTH="00" COMPTYPE="L" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZUSFPDT_GET_RAW_MATERIAL_SAP_R" FIELDNAME="RAW_MATERIAL" DDLANGUAGE="E" POSITION="0002" ROLLNAME="ZUSFPDT_GET_RAW_MATERIAL_S_TAB" ADMINFIELD="0" INTLEN="000000" ROUTPUTLEN="000000" HEADLEN="00" SCRLEN1="00" SCRLEN2="00" SCRLEN3="00" DATATYPE="TTYP" LENG="000000" OUTPUTLEN="000000" DECIMALS="000000" MASK="  TTYPL" MASKLEN="0000" DDTEXT="Proxy Table Type (generated)" DEPTH="00" COMPTYPE="L" PROXYTYPE="X" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
 </TABL>
 <TABL TABNAME="ZUSFPMT_GET_RAW_MATERIAL_SAP" DDLANGUAGE="E" TABCLASS="INTTAB" DATMIN="0000000000" DATMAX="0000000000" DATAVG="0000000000" DDTEXT="Proxy Structure (generated)" AUTHCLASS="00" MASTERLANG="E" PROZPUFF="000" PROXYTYPE="X" EXCLASS="4">
  <dd09l AS4VERS="0000" SCHFELDANZ="000"/>
  <dd03p TABNAME="ZUSFPMT_GET_RAW_MATERIAL_SAP" FIELDNAME="CONTROLLER" DDLANGUAGE="E" POSITION="0001" ROLLNAME="PRXCTRLTAB" ADMINFIELD="0" INTLEN="000000" ROUTPUTLEN="000000" HEADLEN="00" SCRLEN1="00" SCRLEN2="00" SCRLEN3="00" DATATYPE="TTYP" LENG="000000" OUTPUTLEN="000000" DECIMALS="000000" MASK="  TTYPL" MASKLEN="0000" DDTEXT="Control Flags for Fields of a Structure" DEPTH="00" COMPTYPE="L" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZUSFPMT_GET_RAW_MATERIAL_SAP" FIELDNAME="MT_GET_RAW_MATERIAL_SAP" DDLANGUAGE="E" POSITION="0002" ROLLNAME="ZUSFPDT_GET_RAW_MATERIAL_SAP" ADMINFIELD="0" INTTYPE="g" INTLEN="000008" ROUTPUTLEN="000000" HEADLEN="00" SCRLEN1="00" SCRLEN2="00" SCRLEN3="00" DTELMASTER="E" DATATYPE="STRG" LENG="000000" OUTPUTLEN="000000" DECIMALS="000000" MASK="  STRGE" MASKLEN="0000" DDTEXT="98324: GLN - RS PI Interface for Raw Material Stock to SAP-A" DEPTH="00" COMPTYPE="E" PROXYTYPE="X" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
 </TABL>
 <TABL TABNAME="ZUSFPMT_GET_RAW_MATERIAL_SAP_R" DDLANGUAGE="E" TABCLASS="INTTAB" DATMIN="0000000000" DATMAX="0000000000" DATAVG="0000000000" DDTEXT="Proxy Structure (generated)" AUTHCLASS="00" MASTERLANG="E" PROZPUFF="000" PROXYTYPE="X" EXCLASS="4">
  <dd09l AS4VERS="0000" SCHFELDANZ="000"/>
  <dd03p TABNAME="ZUSFPMT_GET_RAW_MATERIAL_SAP_R" FIELDNAME="CONTROLLER" DDLANGUAGE="E" POSITION="0001" ROLLNAME="PRXCTRLTAB" ADMINFIELD="0" INTLEN="000000" ROUTPUTLEN="000000" HEADLEN="00" SCRLEN1="00" SCRLEN2="00" SCRLEN3="00" DATATYPE="TTYP" LENG="000000" OUTPUTLEN="000000" DECIMALS="000000" MASK="  TTYPL" MASKLEN="0000" DDTEXT="Control Flags for Fields of a Structure" DEPTH="00" COMPTYPE="L" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZUSFPMT_GET_RAW_MATERIAL_SAP_R" FIELDNAME="MT_GET_RAW_MATERIAL_SAP_RESPON" DDLANGUAGE="E" POSITION="0002" ROLLNAME="ZUSFPDT_GET_RAW_MATERIAL_SAP_R" ADMINFIELD="0" INTLEN="000000" ROUTPUTLEN="000000" HEADLEN="00" SCRLEN1="00" SCRLEN2="00" SCRLEN3="00" DATATYPE="STRU" LENG="000000" OUTPUTLEN="000000" DECIMALS="000000" MASK="  STRUS" MASKLEN="0000" DDTEXT="98324: GLN - RS PI Interface for Raw Material Stock to SAP-A" DEPTH="00" COMPTYPE="S" PROXYTYPE="X" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZUSFPMT_GET_RAW_MATERIAL_SAP_R" FIELDNAME="CONTROLLER" DDLANGUAGE="E" POSITION="0003" ROLLNAME="PRXCTRLTAB" ADMINFIELD="0" INTLEN="000000" ROUTPUTLEN="000000" HEADLEN="00" SCRLEN1="00" SCRLEN2="00" SCRLEN3="00" DATATYPE="TTYP" LENG="000000" OUTPUTLEN="000000" DECIMALS="000000" MASK="  TTYPL" MASKLEN="0000" DDTEXT="Control Flags for Fields of a Structure" DEPTH="01" COMPTYPE="L" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZUSFPMT_GET_RAW_MATERIAL_SAP_R" FIELDNAME="RAW_MATERIAL" DDLANGUAGE="E" POSITION="0004" ROLLNAME="ZUSFPDT_GET_RAW_MATERIAL_S_TAB" ADMINFIELD="0" INTLEN="000000" ROUTPUTLEN="000000" HEADLEN="00" SCRLEN1="00" SCRLEN2="00" SCRLEN3="00" DATATYPE="TTYP" LENG="000000" OUTPUTLEN="000000" DECIMALS="000000" MASK="  TTYPL" MASKLEN="0000" DDTEXT="Proxy Table Type (generated)" DEPTH="01" COMPTYPE="L" PROXYTYPE="X" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
 </TABL>
 <TABL TABNAME="ZUSFPT_ASA_STKUP" DDLANGUAGE="E" TABCLASS="TRANSP" DATMIN="0000000000" DATMAX="0000000000" DATAVG="0000000000" CLIDEP="X" LANGDEP="X" DDTEXT="aSa Stock Updating" AUTHCLASS="00" CONTFLAG="A" PROZPUFF="000" EXCLASS="4">
  <dd09l TABNAME="ZUSFPT_ASA_STKUP" AS4LOCAL="A" AS4VERS="0000" TABKAT="4" TABART="APPL1" PUFFERUNG="G" SCHFELDANZ="002" BUFALLOW="X" ROWORCOLST="C"/>
  <dd03p TABNAME="ZUSFPT_ASA_STKUP" FIELDNAME="MANDT" DDLANGUAGE="E" POSITION="0001" KEYFLAG="X" ROLLNAME="MANDT" CHECKTABLE="T000" ADMINFIELD="0" INTTYPE="C" INTLEN="000006" NOTNULL="X" DOMNAME="MANDT" ROUTPUTLEN="000000" HEADLEN="03" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="CLNT" LENG="000003" OUTPUTLEN="000003" DECIMALS="000000" ENTITYTAB="T000" MASK="  CLNTE" MASKLEN="0000" DDTEXT="Client" REPTEXT="Cl." SCRTEXT_S="Client" SCRTEXT_M="Client" SCRTEXT_L="Client" DOMNAME3L="MANDT" SHLPORIGIN="P" DEPTH="00" COMPTYPE="E" DEFFDNAME="CLIENT" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZUSFPT_ASA_STKUP" FIELDNAME=".INCLUDE" DDLANGUAGE="E" POSITION="0002" KEYFLAG="X" ADMINFIELD="0" INTLEN="000000" PRECFIELD="ZUSFP_SASA_STOCK_UPD_LOG_KEYS" NOTNULL="X" ROUTPUTLEN="000000" HEADLEN="00" SCRLEN1="00" SCRLEN2="00" SCRLEN3="00" LENG="000000" OUTPUTLEN="000000" DECIMALS="000000" MASK="      S" MASKLEN="0000" DDTEXT="aSa Stock Updating - Historial keys" DEPTH="00" COMPTYPE="S" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZUSFPT_ASA_STKUP" FIELDNAME="AEDAT" DDLANGUAGE="E" POSITION="0003" KEYFLAG="X" ROLLNAME="RSCRMTSTMP" ADMINFIELD="1" INTTYPE="P" INTLEN="000008" NOTNULL="X" DOMNAME="RSCRMTSTMPS" ROUTPUTLEN="000000" HEADLEN="15" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="E" DATATYPE="DEC" LENG="000015" OUTPUTLEN="000019" DECIMALS="000000" MASK="  DEC E" MASKLEN="0000" DDTEXT="Creation Date" REPTEXT="Created On" SCRTEXT_S="Created" SCRTEXT_M="Created On" SCRTEXT_L="Created On" DOMMASTER="D" DOMNAME3L="RSCRMTSTMPS" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZUSFPT_ASA_STKUP" FIELDNAME="UNAME" DDLANGUAGE="E" POSITION="0004" KEYFLAG="X" ROLLNAME="UNAME" ADMINFIELD="1" INTTYPE="C" INTLEN="000024" NOTNULL="X" DOMNAME="UNAME" ROUTPUTLEN="000000" HEADLEN="20" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="CHAR" LENG="000012" OUTPUTLEN="000012" DECIMALS="000000" MASK="  CHARE" MASKLEN="0000" DDTEXT="User Name" REPTEXT="User Name" SCRTEXT_S="User" SCRTEXT_M="User Name" SCRTEXT_L="User Name" DOMNAME3L="UNAME" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZUSFPT_ASA_STKUP" FIELDNAME=".INCLUDE" DDLANGUAGE="E" POSITION="0005" ADMINFIELD="0" INTLEN="000000" PRECFIELD="ZUSFP_SASA_STOCK_UPD_LOG_NKEY" ROUTPUTLEN="000000" HEADLEN="00" SCRLEN1="00" SCRLEN2="00" SCRLEN3="00" LENG="000000" OUTPUTLEN="000000" DECIMALS="000000" MASK="      S" MASKLEN="0000" DDTEXT="aSa Stock Updating - Non key fields" DEPTH="00" COMPTYPE="S" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZUSFPT_ASA_STKUP" FIELDNAME="UTZON" DDLANGUAGE="E" POSITION="0006" ROLLNAME="SUIDTZONE" ADMINFIELD="1" INTTYPE="C" INTLEN="000012" DOMNAME="TZNZONE" ROUTPUTLEN="000000" LOGFLAG="X" HEADLEN="30" SCRLEN1="10" SCRLEN2="20" SCRLEN3="30" DTELMASTER="D" DATATYPE="CHAR" LENG="000006" OUTPUTLEN="000006" DECIMALS="000000" ENTITYTAB="TTZZ" MASK="  CHARE" MASKLEN="0000" DDTEXT="Time Zone of User" REPTEXT="Time Zone of User" SCRTEXT_S="Time Zone" SCRTEXT_M="Time Zone" SCRTEXT_L="Time Zone of User" DOMNAME3L="TZNZONE" DEPTH="00" COMPTYPE="E" DEFFDNAME="TIMEZONE" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZUSFPT_ASA_STKUP" FIELDNAME="ADATA" DDLANGUAGE="E" POSITION="0007" ROLLNAME="ZUSFP_ASA_STOCK_UPD_DATA" ADMINFIELD="1" INTTYPE="y" INTLEN="000008" ROUTPUTLEN="000000" HEADLEN="23" SCRLEN1="10" SCRLEN2="20" SCRLEN3="40" DTELMASTER="E" DATATYPE="RSTR" LENG="000000" OUTPUTLEN="000000" DECIMALS="000000" MASK="  RSTRE" MASKLEN="0000" DDTEXT="aSa Stock Updating Data" REPTEXT="aSa Stock Updating Data" SCRTEXT_S="aSa Data" SCRTEXT_M="aSa Stock Upd.Data" SCRTEXT_L="aSa Stock Updating Data" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZUSFPT_ASA_STKUP" FIELDNAME="UMETH" DDLANGUAGE="E" POSITION="0008" ROLLNAME="ZUSFP_ASA_UPD_STK_METHOD" ADMINFIELD="1" INTTYPE="N" INTLEN="000002" DOMNAME="ZUSFP_UPD_STK_METHOD" ROUTPUTLEN="000000" HEADLEN="25" SCRLEN1="10" SCRLEN2="20" SCRLEN3="40" DTELMASTER="E" DATATYPE="NUMC" LENG="000001" OUTPUTLEN="000001" DECIMALS="000000" VALEXI="X" MASK="  NUMCE" MASKLEN="0000" DDTEXT="aSa Stock Updating Method" REPTEXT="aSa Stock Updating Method" SCRTEXT_S="Upd.Method" SCRTEXT_M="aSa Updating Method" SCRTEXT_L="aSa Stock Updating Method" DOMNAME3L="ZUSFP_UPD_STK_METHOD" SHLPORIGIN="F" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZUSFPT_ASA_STKUP" FIELDNAME="LGHDL" DDLANGUAGE="E" POSITION="0009" ROLLNAME="BALLOGHNDL" ADMINFIELD="1" INTTYPE="C" INTLEN="000044" DOMNAME="SYSUUID_22" ROUTPUTLEN="000000" HEADLEN="25" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="CHAR" LENG="000022" OUTPUTLEN="000022" DECIMALS="000000" LOWERCASE="X" MASK="  CHARE" MASKLEN="0000" DDTEXT="Application Log: Log Handle" REPTEXT="Handle" SCRTEXT_S="Handle" SCRTEXT_M="Handle" SCRTEXT_L="Handle" DOMNAME3L="SYSUUID_22" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd05m TABNAME="ZUSFPT_ASA_STKUP" FIELDNAME="MANDT" FORTABLE="ZUSFPT_ASA_STKUP" FORKEY="MANDT" CHECKTABLE="T000" CHECKFIELD="MANDT" PRIMPOS="0001" DOMNAME="MANDT" DATATYPE="CLNT" LENG="000003"/>
  <dd08v TABNAME="ZUSFPT_ASA_STKUP" FIELDNAME="MANDT" DDLANGUAGE="E" CHECKTABLE="T000" FRKART="KEY" CARD="CN" DDTEXT="From Clients Master" CARDLEFT="1"/>
 </TABL>
 <TABL TABNAME="ZUSFP_SASA_HIST_VIEW" DDLANGUAGE="E" TABCLASS="INTTAB" DATMIN="0000000000" DATMAX="0000000000" DATAVG="0000000000" LANGDEP="X" DDTEXT="aSa Stock Updating - Historial View" AUTHCLASS="00" PROZPUFF="000" EXCLASS="3">
  <dd09l AS4VERS="0000" SCHFELDANZ="000"/>
  <dd03p TABNAME="ZUSFP_SASA_HIST_VIEW" FIELDNAME=".INCLUDE" DDLANGUAGE="E" POSITION="0001" ADMINFIELD="0" INTLEN="000000" PRECFIELD="ZUSFP_SASA_STOCK_UPD" ROUTPUTLEN="000000" HEADLEN="00" SCRLEN1="00" SCRLEN2="00" SCRLEN3="00" LENG="000000" OUTPUTLEN="000000" DECIMALS="000000" MASK="      S" MASKLEN="0000" DDTEXT="aSa Stock updating data" DEPTH="00" COMPTYPE="S" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZUSFP_SASA_HIST_VIEW" FIELDNAME="LOCATION" DDLANGUAGE="E" POSITION="0002" ROLLNAME="/SAPAPO/EXT_LOCNO" ADMINFIELD="1" INTTYPE="C" INTLEN="000040" DOMNAME="/SAPAPO/LOCNO" ROUTPUTLEN="000000" HEADLEN="10" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="E" DATATYPE="CHAR" LENG="000020" OUTPUTLEN="000020" DECIMALS="000000" MASK="  CHARE" MASKLEN="0000" DDTEXT="External Location Identifier" REPTEXT="Location" SCRTEXT_S="Location" SCRTEXT_M="Location" SCRTEXT_L="Location" DOMNAME3L="/SAPAPO/LOCNO" DEPTH="00" COMPTYPE="E" DEFFDNAME="LOCATION" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZUSFP_SASA_HIST_VIEW" FIELDNAME="PRODUCT" DDLANGUAGE="E" POSITION="0003" ROLLNAME="/SAPAPO/EXT_MATNR" ADMINFIELD="1" INTTYPE="C" INTLEN="000080" DOMNAME="/SAPAPO/EXT_MATNR" ROUTPUTLEN="000000" LOGFLAG="X" HEADLEN="12" SCRLEN1="10" SCRLEN2="12" SCRLEN3="12" DTELMASTER="E" DATATYPE="CHAR" LENG="000040" OUTPUTLEN="000040" DECIMALS="000000" ENTITYTAB="/SAPAPO/MATMAP" MASK="  CHARE" MASKLEN="0000" DDTEXT="External Product Identifier" REPTEXT="Ext. Product" SCRTEXT_S="ExtProduct" SCRTEXT_M="Ext. Product" SCRTEXT_L="Ext. Product" DOMNAME3L="/SAPAPO/EXT_MATNR" DEPTH="00" COMPTYPE="E" DEFFDNAME="PRODUCT" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZUSFP_SASA_HIST_VIEW" FIELDNAME="QUANTITY" DDLANGUAGE="E" POSITION="0004" ROLLNAME="/SAPAPO/STOCKQTY" ADMINFIELD="1" INTTYPE="P" INTLEN="000007" REFTABLE="/SAPAPO/MATKEY" REFFIELD="MEINS" DOMNAME="/SAPAPO/MENG13V" ROUTPUTLEN="000000" HEADLEN="07" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="E" DATATYPE="QUAN" LENG="000013" OUTPUTLEN="000018" DECIMALS="000003" SIGNFLAG="X" MASK="  QUANE" MASKLEN="0000" DDTEXT="Stock quantity in APO" REPTEXT="Stock" SCRTEXT_S="Stock" SCRTEXT_M="Stock" SCRTEXT_L="Stock" DOMNAME3L="/SAPAPO/MENG13V" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZUSFP_SASA_HIST_VIEW" FIELDNAME=".INCLUDE" DDLANGUAGE="E" POSITION="0005" ADMINFIELD="0" INTLEN="000000" PRECFIELD="ZUSFP_SASA_HIST_VIEW_ADD" ROUTPUTLEN="000000" HEADLEN="00" SCRLEN1="00" SCRLEN2="00" SCRLEN3="00" LENG="000000" OUTPUTLEN="000000" DECIMALS="000000" MASK="      S" MASKLEN="0000" DDTEXT="aSa Stock Updating - Additional fields for historial viel" DEPTH="00" COMPTYPE="S" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZUSFP_SASA_HIST_VIEW" FIELDNAME="AEDAT" DDLANGUAGE="E" POSITION="0006" ROLLNAME="AEDAT" ADMINFIELD="1" INTTYPE="D" INTLEN="000016" DOMNAME="DATUM" ROUTPUTLEN="000000" HEADLEN="08" SCRLEN1="05" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="DATS" LENG="000008" OUTPUTLEN="000010" DECIMALS="000000" MASK="  DATSE" MASKLEN="0000" DDTEXT="Changed On" REPTEXT="Chngd on" SCRTEXT_S="Chngd" SCRTEXT_M="Changed on" SCRTEXT_L="Changed on" DOMNAME3L="DATUM" SHLPORIGIN="T" DEPTH="00" COMPTYPE="E" DEFFDNAME="CH_ON" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZUSFP_SASA_HIST_VIEW" FIELDNAME="AETIM" DDLANGUAGE="E" POSITION="0007" ROLLNAME="/SAPAPO/UTIME" ADMINFIELD="1" INTTYPE="T" INTLEN="000012" DOMNAME="/SAPAPO/CTME" ROUTPUTLEN="000000" HEADLEN="20" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="E" DATATYPE="TIMS" LENG="000006" OUTPUTLEN="000008" DECIMALS="000000" MASK="  TIMSE" MASKLEN="0000" DDTEXT="Time of last change" REPTEXT="Time of change" SCRTEXT_S="Time" SCRTEXT_M="Time" SCRTEXT_L="Time of change" DOMNAME3L="/SAPAPO/CTME" SHLPORIGIN="T" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZUSFP_SASA_HIST_VIEW" FIELDNAME="UNAME" DDLANGUAGE="E" POSITION="0008" ROLLNAME="UNAME" ADMINFIELD="1" INTTYPE="C" INTLEN="000024" DOMNAME="UNAME" ROUTPUTLEN="000000" HEADLEN="20" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="CHAR" LENG="000012" OUTPUTLEN="000012" DECIMALS="000000" MASK="  CHARE" MASKLEN="0000" DDTEXT="User Name" REPTEXT="User Name" SCRTEXT_S="User" SCRTEXT_M="User Name" SCRTEXT_L="User Name" DOMNAME3L="UNAME" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZUSFP_SASA_HIST_VIEW" FIELDNAME="DMETH" DDLANGUAGE="E" POSITION="0009" ROLLNAME="ZUSFP_ASA_UPD_STK_METH_DESC" ADMINFIELD="1" INTTYPE="C" INTLEN="000030" ROUTPUTLEN="000000" HEADLEN="44" SCRLEN1="10" SCRLEN2="20" SCRLEN3="40" DTELMASTER="E" DATATYPE="CHAR" LENG="000015" OUTPUTLEN="000015" DECIMALS="000000" MASK="  CHARE" MASKLEN="0000" DDTEXT="aSa Stock Updating - Load Method Description" REPTEXT="aSa Stock Updating - Load Method Description" SCRTEXT_S="Mth.Descr." SCRTEXT_M="Method Description" SCRTEXT_L="aSa Stock Upd. - Load Method Description" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZUSFP_SASA_HIST_VIEW" FIELDNAME="UTZON" DDLANGUAGE="E" POSITION="0010" ROLLNAME="SUIDTZONE" ADMINFIELD="1" INTTYPE="C" INTLEN="000012" DOMNAME="TZNZONE" ROUTPUTLEN="000000" LOGFLAG="X" HEADLEN="30" SCRLEN1="10" SCRLEN2="20" SCRLEN3="30" DTELMASTER="D" DATATYPE="CHAR" LENG="000006" OUTPUTLEN="000006" DECIMALS="000000" ENTITYTAB="TTZZ" MASK="  CHARE" MASKLEN="0000" DDTEXT="Time Zone of User" REPTEXT="Time Zone of User" SCRTEXT_S="Time Zone" SCRTEXT_M="Time Zone" SCRTEXT_L="Time Zone of User" DOMNAME3L="TZNZONE" DEPTH="00" COMPTYPE="E" DEFFDNAME="TIMEZONE" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZUSFP_SASA_HIST_VIEW" FIELDNAME="HICON" DDLANGUAGE="E" POSITION="0011" ROLLNAME="ICON_D" ADMINFIELD="1" INTTYPE="C" INTLEN="000008" DOMNAME="ICON" ROUTPUTLEN="000000" HEADLEN="08" SCRLEN1="00" SCRLEN2="00" SCRLEN3="00" DTELMASTER="D" DATATYPE="CHAR" LENG="000004" OUTPUTLEN="000004" DECIMALS="000000" ENTITYTAB="ICON" MASK="  CHARE" MASKLEN="0000" DDTEXT="Icon in text fields (substitute display, alias)" REPTEXT="ID" DOMMASTER="D" DOMNAME3L="ICON" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZUSFP_SASA_HIST_VIEW" FIELDNAME="LGHDL" DDLANGUAGE="E" POSITION="0012" ROLLNAME="BALLOGHNDL" ADMINFIELD="1" INTTYPE="C" INTLEN="000044" DOMNAME="SYSUUID_22" ROUTPUTLEN="000000" HEADLEN="25" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="CHAR" LENG="000022" OUTPUTLEN="000022" DECIMALS="000000" LOWERCASE="X" MASK="  CHARE" MASKLEN="0000" DDTEXT="Application Log: Log Handle" REPTEXT="Handle" SCRTEXT_S="Handle" SCRTEXT_M="Handle" SCRTEXT_L="Handle" DOMNAME3L="SYSUUID_22" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
 </TABL>
 <TABL TABNAME="ZUSFP_SASA_HIST_VIEW_ADD" DDLANGUAGE="E" TABCLASS="INTTAB" DATMIN="0000000000" DATMAX="0000000000" DATAVG="0000000000" DDTEXT="aSa Stock Updating - Additional fields for historial viel" AUTHCLASS="00" PROZPUFF="000" EXCLASS="3">
  <dd09l AS4VERS="0000" SCHFELDANZ="000"/>
  <dd03p TABNAME="ZUSFP_SASA_HIST_VIEW_ADD" FIELDNAME="AEDAT" DDLANGUAGE="E" POSITION="0001" ROLLNAME="AEDAT" ADMINFIELD="0" INTTYPE="D" INTLEN="000016" DOMNAME="DATUM" ROUTPUTLEN="000000" HEADLEN="08" SCRLEN1="05" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="DATS" LENG="000008" OUTPUTLEN="000010" DECIMALS="000000" MASK="  DATSE" MASKLEN="0000" DDTEXT="Changed On" REPTEXT="Chngd on" SCRTEXT_S="Chngd" SCRTEXT_M="Changed on" SCRTEXT_L="Changed on" DOMNAME3L="DATUM" SHLPORIGIN="T" DEPTH="00" COMPTYPE="E" DEFFDNAME="CH_ON" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZUSFP_SASA_HIST_VIEW_ADD" FIELDNAME="AETIM" DDLANGUAGE="E" POSITION="0002" ROLLNAME="/SAPAPO/UTIME" ADMINFIELD="0" INTTYPE="T" INTLEN="000012" DOMNAME="/SAPAPO/CTME" ROUTPUTLEN="000000" HEADLEN="20" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="E" DATATYPE="TIMS" LENG="000006" OUTPUTLEN="000008" DECIMALS="000000" MASK="  TIMSE" MASKLEN="0000" DDTEXT="Time of last change" REPTEXT="Time of change" SCRTEXT_S="Time" SCRTEXT_M="Time" SCRTEXT_L="Time of change" DOMNAME3L="/SAPAPO/CTME" SHLPORIGIN="T" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZUSFP_SASA_HIST_VIEW_ADD" FIELDNAME="UNAME" DDLANGUAGE="E" POSITION="0003" ROLLNAME="UNAME" ADMINFIELD="0" INTTYPE="C" INTLEN="000024" DOMNAME="UNAME" ROUTPUTLEN="000000" HEADLEN="20" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="CHAR" LENG="000012" OUTPUTLEN="000012" DECIMALS="000000" MASK="  CHARE" MASKLEN="0000" DDTEXT="User Name" REPTEXT="User Name" SCRTEXT_S="User" SCRTEXT_M="User Name" SCRTEXT_L="User Name" DOMNAME3L="UNAME" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZUSFP_SASA_HIST_VIEW_ADD" FIELDNAME="DMETH" DDLANGUAGE="E" POSITION="0004" ROLLNAME="ZUSFP_ASA_UPD_STK_METH_DESC" ADMINFIELD="0" INTTYPE="C" INTLEN="000030" ROUTPUTLEN="000000" HEADLEN="44" SCRLEN1="10" SCRLEN2="20" SCRLEN3="40" DTELMASTER="E" DATATYPE="CHAR" LENG="000015" OUTPUTLEN="000015" DECIMALS="000000" MASK="  CHARE" MASKLEN="0000" DDTEXT="aSa Stock Updating - Load Method Description" REPTEXT="aSa Stock Updating - Load Method Description" SCRTEXT_S="Mth.Descr." SCRTEXT_M="Method Description" SCRTEXT_L="aSa Stock Upd. - Load Method Description" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZUSFP_SASA_HIST_VIEW_ADD" FIELDNAME="UTZON" DDLANGUAGE="E" POSITION="0005" ROLLNAME="SUIDTZONE" ADMINFIELD="0" INTTYPE="C" INTLEN="000012" DOMNAME="TZNZONE" ROUTPUTLEN="000000" LOGFLAG="X" HEADLEN="30" SCRLEN1="10" SCRLEN2="20" SCRLEN3="30" DTELMASTER="D" DATATYPE="CHAR" LENG="000006" OUTPUTLEN="000006" DECIMALS="000000" ENTITYTAB="TTZZ" MASK="  CHARE" MASKLEN="0000" DDTEXT="Time Zone of User" REPTEXT="Time Zone of User" SCRTEXT_S="Time Zone" SCRTEXT_M="Time Zone" SCRTEXT_L="Time Zone of User" DOMNAME3L="TZNZONE" DEPTH="00" COMPTYPE="E" DEFFDNAME="TIMEZONE" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZUSFP_SASA_HIST_VIEW_ADD" FIELDNAME="HICON" DDLANGUAGE="E" POSITION="0006" ROLLNAME="ICON_D" ADMINFIELD="0" INTTYPE="C" INTLEN="000008" DOMNAME="ICON" ROUTPUTLEN="000000" HEADLEN="08" SCRLEN1="00" SCRLEN2="00" SCRLEN3="00" DTELMASTER="D" DATATYPE="CHAR" LENG="000004" OUTPUTLEN="000004" DECIMALS="000000" ENTITYTAB="ICON" MASK="  CHARE" MASKLEN="0000" DDTEXT="Icon in text fields (substitute display, alias)" REPTEXT="ID" DOMMASTER="D" DOMNAME3L="ICON" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZUSFP_SASA_HIST_VIEW_ADD" FIELDNAME="LGHDL" DDLANGUAGE="E" POSITION="0007" ROLLNAME="BALLOGHNDL" ADMINFIELD="0" INTTYPE="C" INTLEN="000044" DOMNAME="SYSUUID_22" ROUTPUTLEN="000000" HEADLEN="25" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="CHAR" LENG="000022" OUTPUTLEN="000022" DECIMALS="000000" LOWERCASE="X" MASK="  CHARE" MASKLEN="0000" DDTEXT="Application Log: Log Handle" REPTEXT="Handle" SCRTEXT_S="Handle" SCRTEXT_M="Handle" SCRTEXT_L="Handle" DOMNAME3L="SYSUUID_22" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
 </TABL>
 <TABL TABNAME="ZUSFPDT_GET_RAW_MATERIAL_SAP_1" DDLANGUAGE="E" TABCLASS="INTTAB" DATMIN="0000000000" DATMAX="0000000000" DATAVG="0000000000" DDTEXT="Proxy Structure (generated)" AUTHCLASS="00" MASTERLANG="E" PROZPUFF="000" PROXYTYPE="X" EXCLASS="4">
  <dd09l AS4VERS="0000" SCHFELDANZ="000"/>
  <dd03p TABNAME="ZUSFPDT_GET_RAW_MATERIAL_SAP_1" FIELDNAME="CONTROLLER" DDLANGUAGE="E" POSITION="0001" ROLLNAME="PRXCTRLTAB" ADMINFIELD="0" INTLEN="000000" ROUTPUTLEN="000000" HEADLEN="00" SCRLEN1="00" SCRLEN2="00" SCRLEN3="00" DATATYPE="TTYP" LENG="000000" OUTPUTLEN="000000" DECIMALS="000000" MASK="  TTYPL" MASKLEN="0000" DDTEXT="Control Flags for Fields of a Structure" DEPTH="00" COMPTYPE="L" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZUSFPDT_GET_RAW_MATERIAL_SAP_1" FIELDNAME="SAP_PLANT" DDLANGUAGE="E" POSITION="0002" ADMINFIELD="0" INTTYPE="g" INTLEN="000008" ROUTPUTLEN="000000" HEADLEN="00" SCRLEN1="00" SCRLEN2="00" SCRLEN3="00" DATATYPE="STRG" LENG="000000" OUTPUTLEN="000000" DECIMALS="000000" MASK="  STRG" MASKLEN="0000" DEPTH="00" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZUSFPDT_GET_RAW_MATERIAL_SAP_1" FIELDNAME="SAP_SKU" DDLANGUAGE="E" POSITION="0003" ADMINFIELD="0" INTTYPE="g" INTLEN="000008" ROUTPUTLEN="000000" HEADLEN="00" SCRLEN1="00" SCRLEN2="00" SCRLEN3="00" DATATYPE="STRG" LENG="000000" OUTPUTLEN="000000" DECIMALS="000000" MASK="  STRG" MASKLEN="0000" DEPTH="00" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZUSFPDT_GET_RAW_MATERIAL_SAP_1" FIELDNAME="WEIGHT" DDLANGUAGE="E" POSITION="0004" ADMINFIELD="0" INTTYPE="g" INTLEN="000008" ROUTPUTLEN="000000" HEADLEN="00" SCRLEN1="00" SCRLEN2="00" SCRLEN3="00" DATATYPE="STRG" LENG="000000" OUTPUTLEN="000000" DECIMALS="000000" MASK="  STRG" MASKLEN="0000" DEPTH="00" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
 </TABL>
 <TABL TABNAME="ZUSFP_SASA_STOCK_UPD" DDLANGUAGE="E" TABCLASS="INTTAB" DATMIN="0000000000" DATMAX="0000000000" DATAVG="0000000000" DDTEXT="aSa Stock updating data" AUTHCLASS="00" PROZPUFF="000" EXCLASS="3">
  <dd09l AS4VERS="0000" SCHFELDANZ="000"/>
  <dd03p TABNAME="ZUSFP_SASA_STOCK_UPD" FIELDNAME="LOCATION" DDLANGUAGE="E" POSITION="0001" ROLLNAME="/SAPAPO/EXT_LOCNO" ADMINFIELD="0" INTTYPE="C" INTLEN="000040" DOMNAME="/SAPAPO/LOCNO" ROUTPUTLEN="000000" HEADLEN="10" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="E" DATATYPE="CHAR" LENG="000020" OUTPUTLEN="000020" DECIMALS="000000" MASK="  CHARE" MASKLEN="0000" DDTEXT="External Location Identifier" REPTEXT="Location" SCRTEXT_S="Location" SCRTEXT_M="Location" SCRTEXT_L="Location" DOMNAME3L="/SAPAPO/LOCNO" DEPTH="00" COMPTYPE="E" DEFFDNAME="LOCATION" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZUSFP_SASA_STOCK_UPD" FIELDNAME="PRODUCT" DDLANGUAGE="E" POSITION="0002" ROLLNAME="/SAPAPO/EXT_MATNR" ADMINFIELD="0" INTTYPE="C" INTLEN="000080" DOMNAME="/SAPAPO/EXT_MATNR" ROUTPUTLEN="000000" LOGFLAG="X" HEADLEN="12" SCRLEN1="10" SCRLEN2="12" SCRLEN3="12" DTELMASTER="E" DATATYPE="CHAR" LENG="000040" OUTPUTLEN="000040" DECIMALS="000000" ENTITYTAB="/SAPAPO/MATMAP" MASK="  CHARE" MASKLEN="0000" DDTEXT="External Product Identifier" REPTEXT="Ext. Product" SCRTEXT_S="ExtProduct" SCRTEXT_M="Ext. Product" SCRTEXT_L="Ext. Product" DOMNAME3L="/SAPAPO/EXT_MATNR" DEPTH="00" COMPTYPE="E" DEFFDNAME="PRODUCT" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZUSFP_SASA_STOCK_UPD" FIELDNAME="QUANTITY" DDLANGUAGE="E" POSITION="0003" ROLLNAME="/SAPAPO/STOCKQTY" ADMINFIELD="0" INTTYPE="P" INTLEN="000007" REFTABLE="/SAPAPO/MATKEY" REFFIELD="MEINS" DOMNAME="/SAPAPO/MENG13V" ROUTPUTLEN="000000" HEADLEN="07" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="E" DATATYPE="QUAN" LENG="000013" OUTPUTLEN="000018" DECIMALS="000003" SIGNFLAG="X" MASK="  QUANE" MASKLEN="0000" DDTEXT="Stock quantity in APO" REPTEXT="Stock" SCRTEXT_S="Stock" SCRTEXT_M="Stock" SCRTEXT_L="Stock" DOMNAME3L="/SAPAPO/MENG13V" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
 </TABL>
 <TABL TABNAME="ZUSFPMT_GET_RAW_MATERIAL_SAP_R" DDLANGUAGE="E" TABCLASS="INTTAB" DATMIN="0000000000" DATMAX="0000000000" DATAVG="0000000000" DDTEXT="Proxy Structure (generated)" AUTHCLASS="00" MASTERLANG="E" PROZPUFF="000" PROXYTYPE="X" EXCLASS="4">
  <dd09l AS4VERS="0000" SCHFELDANZ="000"/>
  <dd03p TABNAME="ZUSFPMT_GET_RAW_MATERIAL_SAP_R" FIELDNAME="CONTROLLER" DDLANGUAGE="E" POSITION="0001" ROLLNAME="PRXCTRLTAB" ADMINFIELD="0" INTLEN="000000" ROUTPUTLEN="000000" HEADLEN="00" SCRLEN1="00" SCRLEN2="00" SCRLEN3="00" DATATYPE="TTYP" LENG="000000" OUTPUTLEN="000000" DECIMALS="000000" MASK="  TTYPL" MASKLEN="0000" DDTEXT="Control Flags for Fields of a Structure" DEPTH="00" COMPTYPE="L" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZUSFPMT_GET_RAW_MATERIAL_SAP_R" FIELDNAME="MT_GET_RAW_MATERIAL_SAP_RESPON" DDLANGUAGE="E" POSITION="0002" ROLLNAME="ZUSFPDT_GET_RAW_MATERIAL_SAP_R" ADMINFIELD="0" INTLEN="000000" ROUTPUTLEN="000000" HEADLEN="00" SCRLEN1="00" SCRLEN2="00" SCRLEN3="00" DATATYPE="STRU" LENG="000000" OUTPUTLEN="000000" DECIMALS="000000" MASK="  STRUS" MASKLEN="0000" DDTEXT="98324: GLN - RS PI Interface for Raw Material Stock to SAP-A" DEPTH="00" COMPTYPE="S" PROXYTYPE="X" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZUSFPMT_GET_RAW_MATERIAL_SAP_R" FIELDNAME="CONTROLLER" DDLANGUAGE="E" POSITION="0003" ROLLNAME="PRXCTRLTAB" ADMINFIELD="0" INTLEN="000000" ROUTPUTLEN="000000" HEADLEN="00" SCRLEN1="00" SCRLEN2="00" SCRLEN3="00" DATATYPE="TTYP" LENG="000000" OUTPUTLEN="000000" DECIMALS="000000" MASK="  TTYPL" MASKLEN="0000" DDTEXT="Control Flags for Fields of a Structure" DEPTH="01" COMPTYPE="L" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZUSFPMT_GET_RAW_MATERIAL_SAP_R" FIELDNAME="RAW_MATERIAL" DDLANGUAGE="E" POSITION="0004" ROLLNAME="ZUSFPDT_GET_RAW_MATERIAL_S_TAB" ADMINFIELD="0" INTLEN="000000" ROUTPUTLEN="000000" HEADLEN="00" SCRLEN1="00" SCRLEN2="00" SCRLEN3="00" DATATYPE="TTYP" LENG="000000" OUTPUTLEN="000000" DECIMALS="000000" MASK="  TTYPL" MASKLEN="0000" DDTEXT="Proxy Table Type (generated)" DEPTH="01" COMPTYPE="L" PROXYTYPE="X" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
 </TABL>
 <TABL TABNAME="ZUSFPMT_GET_RAW_MATERIAL_SAP" DDLANGUAGE="E" TABCLASS="INTTAB" DATMIN="0000000000" DATMAX="0000000000" DATAVG="0000000000" DDTEXT="Proxy Structure (generated)" AUTHCLASS="00" MASTERLANG="E" PROZPUFF="000" PROXYTYPE="X" EXCLASS="4">
  <dd09l AS4VERS="0000" SCHFELDANZ="000"/>
  <dd03p TABNAME="ZUSFPMT_GET_RAW_MATERIAL_SAP" FIELDNAME="CONTROLLER" DDLANGUAGE="E" POSITION="0001" ROLLNAME="PRXCTRLTAB" ADMINFIELD="0" INTLEN="000000" ROUTPUTLEN="000000" HEADLEN="00" SCRLEN1="00" SCRLEN2="00" SCRLEN3="00" DATATYPE="TTYP" LENG="000000" OUTPUTLEN="000000" DECIMALS="000000" MASK="  TTYPL" MASKLEN="0000" DDTEXT="Control Flags for Fields of a Structure" DEPTH="00" COMPTYPE="L" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZUSFPMT_GET_RAW_MATERIAL_SAP" FIELDNAME="MT_GET_RAW_MATERIAL_SAP" DDLANGUAGE="E" POSITION="0002" ROLLNAME="ZUSFPDT_GET_RAW_MATERIAL_SAP" ADMINFIELD="0" INTTYPE="g" INTLEN="000008" ROUTPUTLEN="000000" HEADLEN="00" SCRLEN1="00" SCRLEN2="00" SCRLEN3="00" DTELMASTER="E" DATATYPE="STRG" LENG="000000" OUTPUTLEN="000000" DECIMALS="000000" MASK="  STRGE" MASKLEN="0000" DDTEXT="98324: GLN - RS PI Interface for Raw Material Stock to SAP-A" DEPTH="00" COMPTYPE="E" PROXYTYPE="X" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
 </TABL>
 <TABL TABNAME="ZUSFPDT_GET_RAW_MATERIAL_SAP_R" DDLANGUAGE="E" TABCLASS="INTTAB" DATMIN="0000000000" DATMAX="0000000000" DATAVG="0000000000" DDTEXT="98324: GLN - RS PI Interface for Raw Material Stock to SAP-A" AUTHCLASS="00" MASTERLANG="E" PROZPUFF="000" PROXYTYPE="X" EXCLASS="4">
  <dd09l AS4VERS="0000" SCHFELDANZ="000"/>
  <dd03p TABNAME="ZUSFPDT_GET_RAW_MATERIAL_SAP_R" FIELDNAME="CONTROLLER" DDLANGUAGE="E" POSITION="0001" ROLLNAME="PRXCTRLTAB" ADMINFIELD="0" INTLEN="000000" ROUTPUTLEN="000000" HEADLEN="00" SCRLEN1="00" SCRLEN2="00" SCRLEN3="00" DATATYPE="TTYP" LENG="000000" OUTPUTLEN="000000" DECIMALS="000000" MASK="  TTYPL" MASKLEN="0000" DDTEXT="Control Flags for Fields of a Structure" DEPTH="00" COMPTYPE="L" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZUSFPDT_GET_RAW_MATERIAL_SAP_R" FIELDNAME="RAW_MATERIAL" DDLANGUAGE="E" POSITION="0002" ROLLNAME="ZUSFPDT_GET_RAW_MATERIAL_S_TAB" ADMINFIELD="0" INTLEN="000000" ROUTPUTLEN="000000" HEADLEN="00" SCRLEN1="00" SCRLEN2="00" SCRLEN3="00" DATATYPE="TTYP" LENG="000000" OUTPUTLEN="000000" DECIMALS="000000" MASK="  TTYPL" MASKLEN="0000" DDTEXT="Proxy Table Type (generated)" DEPTH="00" COMPTYPE="L" PROXYTYPE="X" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
 </TABL>
 <TABL TABNAME="ZUSFPDT_GET_RAW_MATERIAL_SAP_1" DDLANGUAGE="E" TABCLASS="INTTAB" DATMIN="0000000000" DATMAX="0000000000" DATAVG="0000000000" DDTEXT="Proxy Structure (generated)" AUTHCLASS="00" MASTERLANG="E" PROZPUFF="000" PROXYTYPE="X" EXCLASS="4">
  <dd09l AS4VERS="0000" SCHFELDANZ="000"/>
  <dd03p TABNAME="ZUSFPDT_GET_RAW_MATERIAL_SAP_1" FIELDNAME="CONTROLLER" DDLANGUAGE="E" POSITION="0001" ROLLNAME="PRXCTRLTAB" ADMINFIELD="0" INTLEN="000000" ROUTPUTLEN="000000" HEADLEN="00" SCRLEN1="00" SCRLEN2="00" SCRLEN3="00" DATATYPE="TTYP" LENG="000000" OUTPUTLEN="000000" DECIMALS="000000" MASK="  TTYPL" MASKLEN="0000" DDTEXT="Control Flags for Fields of a Structure" DEPTH="00" COMPTYPE="L" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZUSFPDT_GET_RAW_MATERIAL_SAP_1" FIELDNAME="SAP_PLANT" DDLANGUAGE="E" POSITION="0002" ADMINFIELD="0" INTTYPE="g" INTLEN="000008" ROUTPUTLEN="000000" HEADLEN="00" SCRLEN1="00" SCRLEN2="00" SCRLEN3="00" DATATYPE="STRG" LENG="000000" OUTPUTLEN="000000" DECIMALS="000000" MASK="  STRG" MASKLEN="0000" DEPTH="00" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZUSFPDT_GET_RAW_MATERIAL_SAP_1" FIELDNAME="SAP_SKU" DDLANGUAGE="E" POSITION="0003" ADMINFIELD="0" INTTYPE="g" INTLEN="000008" ROUTPUTLEN="000000" HEADLEN="00" SCRLEN1="00" SCRLEN2="00" SCRLEN3="00" DATATYPE="STRG" LENG="000000" OUTPUTLEN="000000" DECIMALS="000000" MASK="  STRG" MASKLEN="0000" DEPTH="00" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZUSFPDT_GET_RAW_MATERIAL_SAP_1" FIELDNAME="WEIGHT" DDLANGUAGE="E" POSITION="0004" ADMINFIELD="0" INTTYPE="g" INTLEN="000008" ROUTPUTLEN="000000" HEADLEN="00" SCRLEN1="00" SCRLEN2="00" SCRLEN3="00" DATATYPE="STRG" LENG="000000" OUTPUTLEN="000000" DECIMALS="000000" MASK="  STRG" MASKLEN="0000" DEPTH="00" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
 </TABL>
 <TABL TABNAME="ZUSFPT_ASA_STKUP" DDLANGUAGE="E" TABCLASS="TRANSP" DATMIN="0000000000" DATMAX="0000000000" DATAVG="0000000000" CLIDEP="X" LANGDEP="X" DDTEXT="aSa Stock Updating" AUTHCLASS="00" CONTFLAG="A" PROZPUFF="000" EXCLASS="4">
  <dd09l TABNAME="ZUSFPT_ASA_STKUP" AS4LOCAL="A" AS4VERS="0000" TABKAT="4" TABART="APPL1" PUFFERUNG="G" SCHFELDANZ="002" BUFALLOW="X" ROWORCOLST="C"/>
  <dd03p TABNAME="ZUSFPT_ASA_STKUP" FIELDNAME="MANDT" DDLANGUAGE="E" POSITION="0001" KEYFLAG="X" ROLLNAME="MANDT" CHECKTABLE="T000" ADMINFIELD="0" INTTYPE="C" INTLEN="000006" NOTNULL="X" DOMNAME="MANDT" ROUTPUTLEN="000000" HEADLEN="03" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="CLNT" LENG="000003" OUTPUTLEN="000003" DECIMALS="000000" ENTITYTAB="T000" MASK="  CLNTE" MASKLEN="0000" DDTEXT="Client" REPTEXT="Cl." SCRTEXT_S="Client" SCRTEXT_M="Client" SCRTEXT_L="Client" DOMNAME3L="MANDT" SHLPORIGIN="P" DEPTH="00" COMPTYPE="E" DEFFDNAME="CLIENT" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZUSFPT_ASA_STKUP" FIELDNAME=".INCLUDE" DDLANGUAGE="E" POSITION="0002" KEYFLAG="X" ADMINFIELD="0" INTLEN="000000" PRECFIELD="ZUSFP_SASA_STOCK_UPD_LOG_KEYS" NOTNULL="X" ROUTPUTLEN="000000" HEADLEN="00" SCRLEN1="00" SCRLEN2="00" SCRLEN3="00" LENG="000000" OUTPUTLEN="000000" DECIMALS="000000" MASK="      S" MASKLEN="0000" DDTEXT="aSa Stock Updating - Historial keys" DEPTH="00" COMPTYPE="S" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZUSFPT_ASA_STKUP" FIELDNAME="AEDAT" DDLANGUAGE="E" POSITION="0003" KEYFLAG="X" ROLLNAME="RSCRMTSTMP" ADMINFIELD="1" INTTYPE="P" INTLEN="000008" NOTNULL="X" DOMNAME="RSCRMTSTMPS" ROUTPUTLEN="000000" HEADLEN="15" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="E" DATATYPE="DEC" LENG="000015" OUTPUTLEN="000019" DECIMALS="000000" MASK="  DEC E" MASKLEN="0000" DDTEXT="Creation Date" REPTEXT="Created On" SCRTEXT_S="Created" SCRTEXT_M="Created On" SCRTEXT_L="Created On" DOMMASTER="D" DOMNAME3L="RSCRMTSTMPS" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZUSFPT_ASA_STKUP" FIELDNAME="UNAME" DDLANGUAGE="E" POSITION="0004" KEYFLAG="X" ROLLNAME="UNAME" ADMINFIELD="1" INTTYPE="C" INTLEN="000024" NOTNULL="X" DOMNAME="UNAME" ROUTPUTLEN="000000" HEADLEN="20" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="CHAR" LENG="000012" OUTPUTLEN="000012" DECIMALS="000000" MASK="  CHARE" MASKLEN="0000" DDTEXT="User Name" REPTEXT="User Name" SCRTEXT_S="User" SCRTEXT_M="User Name" SCRTEXT_L="User Name" DOMNAME3L="UNAME" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZUSFPT_ASA_STKUP" FIELDNAME=".INCLUDE" DDLANGUAGE="E" POSITION="0005" ADMINFIELD="0" INTLEN="000000" PRECFIELD="ZUSFP_SASA_STOCK_UPD_LOG_NKEY" ROUTPUTLEN="000000" HEADLEN="00" SCRLEN1="00" SCRLEN2="00" SCRLEN3="00" LENG="000000" OUTPUTLEN="000000" DECIMALS="000000" MASK="      S" MASKLEN="0000" DDTEXT="aSa Stock Updating - Non key fields" DEPTH="00" COMPTYPE="S" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZUSFPT_ASA_STKUP" FIELDNAME="UTZON" DDLANGUAGE="E" POSITION="0006" ROLLNAME="SUIDTZONE" ADMINFIELD="1" INTTYPE="C" INTLEN="000012" DOMNAME="TZNZONE" ROUTPUTLEN="000000" LOGFLAG="X" HEADLEN="30" SCRLEN1="10" SCRLEN2="20" SCRLEN3="30" DTELMASTER="D" DATATYPE="CHAR" LENG="000006" OUTPUTLEN="000006" DECIMALS="000000" ENTITYTAB="TTZZ" MASK="  CHARE" MASKLEN="0000" DDTEXT="Time Zone of User" REPTEXT="Time Zone of User" SCRTEXT_S="Time Zone" SCRTEXT_M="Time Zone" SCRTEXT_L="Time Zone of User" DOMNAME3L="TZNZONE" DEPTH="00" COMPTYPE="E" DEFFDNAME="TIMEZONE" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZUSFPT_ASA_STKUP" FIELDNAME="ADATA" DDLANGUAGE="E" POSITION="0007" ROLLNAME="ZUSFP_ASA_STOCK_UPD_DATA" ADMINFIELD="1" INTTYPE="y" INTLEN="000008" ROUTPUTLEN="000000" HEADLEN="23" SCRLEN1="10" SCRLEN2="20" SCRLEN3="40" DTELMASTER="E" DATATYPE="RSTR" LENG="000000" OUTPUTLEN="000000" DECIMALS="000000" MASK="  RSTRE" MASKLEN="0000" DDTEXT="aSa Stock Updating Data" REPTEXT="aSa Stock Updating Data" SCRTEXT_S="aSa Data" SCRTEXT_M="aSa Stock Upd.Data" SCRTEXT_L="aSa Stock Updating Data" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZUSFPT_ASA_STKUP" FIELDNAME="UMETH" DDLANGUAGE="E" POSITION="0008" ROLLNAME="ZUSFP_ASA_UPD_STK_METHOD" ADMINFIELD="1" INTTYPE="N" INTLEN="000002" DOMNAME="ZUSFP_UPD_STK_METHOD" ROUTPUTLEN="000000" HEADLEN="25" SCRLEN1="10" SCRLEN2="20" SCRLEN3="40" DTELMASTER="E" DATATYPE="NUMC" LENG="000001" OUTPUTLEN="000001" DECIMALS="000000" VALEXI="X" MASK="  NUMCE" MASKLEN="0000" DDTEXT="aSa Stock Updating Method" REPTEXT="aSa Stock Updating Method" SCRTEXT_S="Upd.Method" SCRTEXT_M="aSa Updating Method" SCRTEXT_L="aSa Stock Updating Method" DOMNAME3L="ZUSFP_UPD_STK_METHOD" SHLPORIGIN="F" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZUSFPT_ASA_STKUP" FIELDNAME="LGHDL" DDLANGUAGE="E" POSITION="0009" ROLLNAME="BALLOGHNDL" ADMINFIELD="1" INTTYPE="C" INTLEN="000044" DOMNAME="SYSUUID_22" ROUTPUTLEN="000000" HEADLEN="25" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="CHAR" LENG="000022" OUTPUTLEN="000022" DECIMALS="000000" LOWERCASE="X" MASK="  CHARE" MASKLEN="0000" DDTEXT="Application Log: Log Handle" REPTEXT="Handle" SCRTEXT_S="Handle" SCRTEXT_M="Handle" SCRTEXT_L="Handle" DOMNAME3L="SYSUUID_22" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd05m TABNAME="ZUSFPT_ASA_STKUP" FIELDNAME="MANDT" FORTABLE="ZUSFPT_ASA_STKUP" FORKEY="MANDT" CHECKTABLE="T000" CHECKFIELD="MANDT" PRIMPOS="0001" DOMNAME="MANDT" DATATYPE="CLNT" LENG="000003"/>
  <dd08v TABNAME="ZUSFPT_ASA_STKUP" FIELDNAME="MANDT" DDLANGUAGE="E" CHECKTABLE="T000" FRKART="KEY" CARD="CN" DDTEXT="From Clients Master" CARDLEFT="1"/>
 </TABL>
 <TABL TABNAME="ZUSFP_SASA_HIST_VIEW" DDLANGUAGE="E" TABCLASS="INTTAB" DATMIN="0000000000" DATMAX="0000000000" DATAVG="0000000000" LANGDEP="X" DDTEXT="aSa Stock Updating - Historial View" AUTHCLASS="00" PROZPUFF="000" EXCLASS="3">
  <dd09l AS4VERS="0000" SCHFELDANZ="000"/>
  <dd03p TABNAME="ZUSFP_SASA_HIST_VIEW" FIELDNAME=".INCLUDE" DDLANGUAGE="E" POSITION="0001" ADMINFIELD="0" INTLEN="000000" PRECFIELD="ZUSFP_SASA_STOCK_UPD" ROUTPUTLEN="000000" HEADLEN="00" SCRLEN1="00" SCRLEN2="00" SCRLEN3="00" LENG="000000" OUTPUTLEN="000000" DECIMALS="000000" MASK="      S" MASKLEN="0000" DDTEXT="aSa Stock updating data" DEPTH="00" COMPTYPE="S" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZUSFP_SASA_HIST_VIEW" FIELDNAME="LOCATION" DDLANGUAGE="E" POSITION="0002" ROLLNAME="/SAPAPO/EXT_LOCNO" ADMINFIELD="1" INTTYPE="C" INTLEN="000040" DOMNAME="/SAPAPO/LOCNO" ROUTPUTLEN="000000" HEADLEN="10" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="E" DATATYPE="CHAR" LENG="000020" OUTPUTLEN="000020" DECIMALS="000000" MASK="  CHARE" MASKLEN="0000" DDTEXT="External Location Identifier" REPTEXT="Location" SCRTEXT_S="Location" SCRTEXT_M="Location" SCRTEXT_L="Location" DOMNAME3L="/SAPAPO/LOCNO" DEPTH="00" COMPTYPE="E" DEFFDNAME="LOCATION" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZUSFP_SASA_HIST_VIEW" FIELDNAME="PRODUCT" DDLANGUAGE="E" POSITION="0003" ROLLNAME="/SAPAPO/EXT_MATNR" ADMINFIELD="1" INTTYPE="C" INTLEN="000080" DOMNAME="/SAPAPO/EXT_MATNR" ROUTPUTLEN="000000" LOGFLAG="X" HEADLEN="12" SCRLEN1="10" SCRLEN2="12" SCRLEN3="12" DTELMASTER="E" DATATYPE="CHAR" LENG="000040" OUTPUTLEN="000040" DECIMALS="000000" ENTITYTAB="/SAPAPO/MATMAP" MASK="  CHARE" MASKLEN="0000" DDTEXT="External Product Identifier" REPTEXT="Ext. Product" SCRTEXT_S="ExtProduct" SCRTEXT_M="Ext. Product" SCRTEXT_L="Ext. Product" DOMNAME3L="/SAPAPO/EXT_MATNR" DEPTH="00" COMPTYPE="E" DEFFDNAME="PRODUCT" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZUSFP_SASA_HIST_VIEW" FIELDNAME="QUANTITY" DDLANGUAGE="E" POSITION="0004" ROLLNAME="/SAPAPO/STOCKQTY" ADMINFIELD="1" INTTYPE="P" INTLEN="000007" REFTABLE="/SAPAPO/MATKEY" REFFIELD="MEINS" DOMNAME="/SAPAPO/MENG13V" ROUTPUTLEN="000000" HEADLEN="07" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="E" DATATYPE="QUAN" LENG="000013" OUTPUTLEN="000018" DECIMALS="000003" SIGNFLAG="X" MASK="  QUANE" MASKLEN="0000" DDTEXT="Stock quantity in APO" REPTEXT="Stock" SCRTEXT_S="Stock" SCRTEXT_M="Stock" SCRTEXT_L="Stock" DOMNAME3L="/SAPAPO/MENG13V" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZUSFP_SASA_HIST_VIEW" FIELDNAME=".INCLUDE" DDLANGUAGE="E" POSITION="0005" ADMINFIELD="0" INTLEN="000000" PRECFIELD="ZUSFP_SASA_HIST_VIEW_ADD" ROUTPUTLEN="000000" HEADLEN="00" SCRLEN1="00" SCRLEN2="00" SCRLEN3="00" LENG="000000" OUTPUTLEN="000000" DECIMALS="000000" MASK="      S" MASKLEN="0000" DDTEXT="aSa Stock Updating - Additional fields for historial viel" DEPTH="00" COMPTYPE="S" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZUSFP_SASA_HIST_VIEW" FIELDNAME="AEDAT" DDLANGUAGE="E" POSITION="0006" ROLLNAME="AEDAT" ADMINFIELD="1" INTTYPE="D" INTLEN="000016" DOMNAME="DATUM" ROUTPUTLEN="000000" HEADLEN="08" SCRLEN1="05" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="DATS" LENG="000008" OUTPUTLEN="000010" DECIMALS="000000" MASK="  DATSE" MASKLEN="0000" DDTEXT="Changed On" REPTEXT="Chngd on" SCRTEXT_S="Chngd" SCRTEXT_M="Changed on" SCRTEXT_L="Changed on" DOMNAME3L="DATUM" SHLPORIGIN="T" DEPTH="00" COMPTYPE="E" DEFFDNAME="CH_ON" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZUSFP_SASA_HIST_VIEW" FIELDNAME="AETIM" DDLANGUAGE="E" POSITION="0007" ROLLNAME="/SAPAPO/UTIME" ADMINFIELD="1" INTTYPE="T" INTLEN="000012" DOMNAME="/SAPAPO/CTME" ROUTPUTLEN="000000" HEADLEN="20" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="E" DATATYPE="TIMS" LENG="000006" OUTPUTLEN="000008" DECIMALS="000000" MASK="  TIMSE" MASKLEN="0000" DDTEXT="Time of last change" REPTEXT="Time of change" SCRTEXT_S="Time" SCRTEXT_M="Time" SCRTEXT_L="Time of change" DOMNAME3L="/SAPAPO/CTME" SHLPORIGIN="T" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZUSFP_SASA_HIST_VIEW" FIELDNAME="UNAME" DDLANGUAGE="E" POSITION="0008" ROLLNAME="UNAME" ADMINFIELD="1" INTTYPE="C" INTLEN="000024" DOMNAME="UNAME" ROUTPUTLEN="000000" HEADLEN="20" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="CHAR" LENG="000012" OUTPUTLEN="000012" DECIMALS="000000" MASK="  CHARE" MASKLEN="0000" DDTEXT="User Name" REPTEXT="User Name" SCRTEXT_S="User" SCRTEXT_M="User Name" SCRTEXT_L="User Name" DOMNAME3L="UNAME" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZUSFP_SASA_HIST_VIEW" FIELDNAME="DMETH" DDLANGUAGE="E" POSITION="0009" ROLLNAME="ZUSFP_ASA_UPD_STK_METH_DESC" ADMINFIELD="1" INTTYPE="C" INTLEN="000030" ROUTPUTLEN="000000" HEADLEN="44" SCRLEN1="10" SCRLEN2="20" SCRLEN3="40" DTELMASTER="E" DATATYPE="CHAR" LENG="000015" OUTPUTLEN="000015" DECIMALS="000000" MASK="  CHARE" MASKLEN="0000" DDTEXT="aSa Stock Updating - Load Method Description" REPTEXT="aSa Stock Updating - Load Method Description" SCRTEXT_S="Mth.Descr." SCRTEXT_M="Method Description" SCRTEXT_L="aSa Stock Upd. - Load Method Description" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZUSFP_SASA_HIST_VIEW" FIELDNAME="UTZON" DDLANGUAGE="E" POSITION="0010" ROLLNAME="SUIDTZONE" ADMINFIELD="1" INTTYPE="C" INTLEN="000012" DOMNAME="TZNZONE" ROUTPUTLEN="000000" LOGFLAG="X" HEADLEN="30" SCRLEN1="10" SCRLEN2="20" SCRLEN3="30" DTELMASTER="D" DATATYPE="CHAR" LENG="000006" OUTPUTLEN="000006" DECIMALS="000000" ENTITYTAB="TTZZ" MASK="  CHARE" MASKLEN="0000" DDTEXT="Time Zone of User" REPTEXT="Time Zone of User" SCRTEXT_S="Time Zone" SCRTEXT_M="Time Zone" SCRTEXT_L="Time Zone of User" DOMNAME3L="TZNZONE" DEPTH="00" COMPTYPE="E" DEFFDNAME="TIMEZONE" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZUSFP_SASA_HIST_VIEW" FIELDNAME="HICON" DDLANGUAGE="E" POSITION="0011" ROLLNAME="ICON_D" ADMINFIELD="1" INTTYPE="C" INTLEN="000008" DOMNAME="ICON" ROUTPUTLEN="000000" HEADLEN="08" SCRLEN1="00" SCRLEN2="00" SCRLEN3="00" DTELMASTER="D" DATATYPE="CHAR" LENG="000004" OUTPUTLEN="000004" DECIMALS="000000" ENTITYTAB="ICON" MASK="  CHARE" MASKLEN="0000" DDTEXT="Icon in text fields (substitute display, alias)" REPTEXT="ID" DOMMASTER="D" DOMNAME3L="ICON" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZUSFP_SASA_HIST_VIEW" FIELDNAME="LGHDL" DDLANGUAGE="E" POSITION="0012" ROLLNAME="BALLOGHNDL" ADMINFIELD="1" INTTYPE="C" INTLEN="000044" DOMNAME="SYSUUID_22" ROUTPUTLEN="000000" HEADLEN="25" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="CHAR" LENG="000022" OUTPUTLEN="000022" DECIMALS="000000" LOWERCASE="X" MASK="  CHARE" MASKLEN="0000" DDTEXT="Application Log: Log Handle" REPTEXT="Handle" SCRTEXT_S="Handle" SCRTEXT_M="Handle" SCRTEXT_L="Handle" DOMNAME3L="SYSUUID_22" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
 </TABL>
 <TABL TABNAME="ZUSFP_SASA_HIST_VIEW_ADD" DDLANGUAGE="E" TABCLASS="INTTAB" DATMIN="0000000000" DATMAX="0000000000" DATAVG="0000000000" DDTEXT="aSa Stock Updating - Additional fields for historial viel" AUTHCLASS="00" PROZPUFF="000" EXCLASS="3">
  <dd09l AS4VERS="0000" SCHFELDANZ="000"/>
  <dd03p TABNAME="ZUSFP_SASA_HIST_VIEW_ADD" FIELDNAME="AEDAT" DDLANGUAGE="E" POSITION="0001" ROLLNAME="AEDAT" ADMINFIELD="0" INTTYPE="D" INTLEN="000016" DOMNAME="DATUM" ROUTPUTLEN="000000" HEADLEN="08" SCRLEN1="05" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="DATS" LENG="000008" OUTPUTLEN="000010" DECIMALS="000000" MASK="  DATSE" MASKLEN="0000" DDTEXT="Changed On" REPTEXT="Chngd on" SCRTEXT_S="Chngd" SCRTEXT_M="Changed on" SCRTEXT_L="Changed on" DOMNAME3L="DATUM" SHLPORIGIN="T" DEPTH="00" COMPTYPE="E" DEFFDNAME="CH_ON" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZUSFP_SASA_HIST_VIEW_ADD" FIELDNAME="AETIM" DDLANGUAGE="E" POSITION="0002" ROLLNAME="/SAPAPO/UTIME" ADMINFIELD="0" INTTYPE="T" INTLEN="000012" DOMNAME="/SAPAPO/CTME" ROUTPUTLEN="000000" HEADLEN="20" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="E" DATATYPE="TIMS" LENG="000006" OUTPUTLEN="000008" DECIMALS="000000" MASK="  TIMSE" MASKLEN="0000" DDTEXT="Time of last change" REPTEXT="Time of change" SCRTEXT_S="Time" SCRTEXT_M="Time" SCRTEXT_L="Time of change" DOMNAME3L="/SAPAPO/CTME" SHLPORIGIN="T" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZUSFP_SASA_HIST_VIEW_ADD" FIELDNAME="UNAME" DDLANGUAGE="E" POSITION="0003" ROLLNAME="UNAME" ADMINFIELD="0" INTTYPE="C" INTLEN="000024" DOMNAME="UNAME" ROUTPUTLEN="000000" HEADLEN="20" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="CHAR" LENG="000012" OUTPUTLEN="000012" DECIMALS="000000" MASK="  CHARE" MASKLEN="0000" DDTEXT="User Name" REPTEXT="User Name" SCRTEXT_S="User" SCRTEXT_M="User Name" SCRTEXT_L="User Name" DOMNAME3L="UNAME" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZUSFP_SASA_HIST_VIEW_ADD" FIELDNAME="DMETH" DDLANGUAGE="E" POSITION="0004" ROLLNAME="ZUSFP_ASA_UPD_STK_METH_DESC" ADMINFIELD="0" INTTYPE="C" INTLEN="000030" ROUTPUTLEN="000000" HEADLEN="44" SCRLEN1="10" SCRLEN2="20" SCRLEN3="40" DTELMASTER="E" DATATYPE="CHAR" LENG="000015" OUTPUTLEN="000015" DECIMALS="000000" MASK="  CHARE" MASKLEN="0000" DDTEXT="aSa Stock Updating - Load Method Description" REPTEXT="aSa Stock Updating - Load Method Description" SCRTEXT_S="Mth.Descr." SCRTEXT_M="Method Description" SCRTEXT_L="aSa Stock Upd. - Load Method Description" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZUSFP_SASA_HIST_VIEW_ADD" FIELDNAME="UTZON" DDLANGUAGE="E" POSITION="0005" ROLLNAME="SUIDTZONE" ADMINFIELD="0" INTTYPE="C" INTLEN="000012" DOMNAME="TZNZONE" ROUTPUTLEN="000000" LOGFLAG="X" HEADLEN="30" SCRLEN1="10" SCRLEN2="20" SCRLEN3="30" DTELMASTER="D" DATATYPE="CHAR" LENG="000006" OUTPUTLEN="000006" DECIMALS="000000" ENTITYTAB="TTZZ" MASK="  CHARE" MASKLEN="0000" DDTEXT="Time Zone of User" REPTEXT="Time Zone of User" SCRTEXT_S="Time Zone" SCRTEXT_M="Time Zone" SCRTEXT_L="Time Zone of User" DOMNAME3L="TZNZONE" DEPTH="00" COMPTYPE="E" DEFFDNAME="TIMEZONE" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZUSFP_SASA_HIST_VIEW_ADD" FIELDNAME="HICON" DDLANGUAGE="E" POSITION="0006" ROLLNAME="ICON_D" ADMINFIELD="0" INTTYPE="C" INTLEN="000008" DOMNAME="ICON" ROUTPUTLEN="000000" HEADLEN="08" SCRLEN1="00" SCRLEN2="00" SCRLEN3="00" DTELMASTER="D" DATATYPE="CHAR" LENG="000004" OUTPUTLEN="000004" DECIMALS="000000" ENTITYTAB="ICON" MASK="  CHARE" MASKLEN="0000" DDTEXT="Icon in text fields (substitute display, alias)" REPTEXT="ID" DOMMASTER="D" DOMNAME3L="ICON" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZUSFP_SASA_HIST_VIEW_ADD" FIELDNAME="LGHDL" DDLANGUAGE="E" POSITION="0007" ROLLNAME="BALLOGHNDL" ADMINFIELD="0" INTTYPE="C" INTLEN="000044" DOMNAME="SYSUUID_22" ROUTPUTLEN="000000" HEADLEN="25" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="CHAR" LENG="000022" OUTPUTLEN="000022" DECIMALS="000000" LOWERCASE="X" MASK="  CHARE" MASKLEN="0000" DDTEXT="Application Log: Log Handle" REPTEXT="Handle" SCRTEXT_S="Handle" SCRTEXT_M="Handle" SCRTEXT_L="Handle" DOMNAME3L="SYSUUID_22" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
 </TABL>
 <TABL TABNAME="ZUSFP_SASA_STOCK_UPD_LOG_KEYS" DDLANGUAGE="E" TABCLASS="INTTAB" DATMIN="0000000000" DATMAX="0000000000" DATAVG="0000000000" DDTEXT="aSa Stock Updating - Historial keys" AUTHCLASS="00" PROZPUFF="000" EXCLASS="1">
  <dd09l AS4VERS="0000" SCHFELDANZ="000"/>
  <dd03p TABNAME="ZUSFP_SASA_STOCK_UPD_LOG_KEYS" FIELDNAME="AEDAT" DDLANGUAGE="E" POSITION="0001" ROLLNAME="RSCRMTSTMP" ADMINFIELD="0" INTTYPE="P" INTLEN="000008" DOMNAME="RSCRMTSTMPS" ROUTPUTLEN="000000" HEADLEN="15" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="E" DATATYPE="DEC" LENG="000015" OUTPUTLEN="000019" DECIMALS="000000" MASK="  DEC E" MASKLEN="0000" DDTEXT="Creation Date" REPTEXT="Created On" SCRTEXT_S="Created" SCRTEXT_M="Created On" SCRTEXT_L="Created On" DOMMASTER="D" DOMNAME3L="RSCRMTSTMPS" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZUSFP_SASA_STOCK_UPD_LOG_KEYS" FIELDNAME="UNAME" DDLANGUAGE="E" POSITION="0002" ROLLNAME="UNAME" ADMINFIELD="0" INTTYPE="C" INTLEN="000024" DOMNAME="UNAME" ROUTPUTLEN="000000" HEADLEN="20" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="CHAR" LENG="000012" OUTPUTLEN="000012" DECIMALS="000000" MASK="  CHARE" MASKLEN="0000" DDTEXT="User Name" REPTEXT="User Name" SCRTEXT_S="User" SCRTEXT_M="User Name" SCRTEXT_L="User Name" DOMNAME3L="UNAME" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
 </TABL>
 <TABL TABNAME="ZUSFP_SASA_STOCK_UPD_LOG_NKEY" DDLANGUAGE="E" TABCLASS="INTTAB" DATMIN="0000000000" DATMAX="0000000000" DATAVG="0000000000" DDTEXT="aSa Stock Updating - Non key fields" AUTHCLASS="00" PROZPUFF="000" EXCLASS="4">
  <dd09l AS4VERS="0000" SCHFELDANZ="000"/>
  <dd03p TABNAME="ZUSFP_SASA_STOCK_UPD_LOG_NKEY" FIELDNAME="UTZON" DDLANGUAGE="E" POSITION="0001" ROLLNAME="SUIDTZONE" ADMINFIELD="0" INTTYPE="C" INTLEN="000012" DOMNAME="TZNZONE" ROUTPUTLEN="000000" LOGFLAG="X" HEADLEN="30" SCRLEN1="10" SCRLEN2="20" SCRLEN3="30" DTELMASTER="D" DATATYPE="CHAR" LENG="000006" OUTPUTLEN="000006" DECIMALS="000000" ENTITYTAB="TTZZ" MASK="  CHARE" MASKLEN="0000" DDTEXT="Time Zone of User" REPTEXT="Time Zone of User" SCRTEXT_S="Time Zone" SCRTEXT_M="Time Zone" SCRTEXT_L="Time Zone of User" DOMNAME3L="TZNZONE" DEPTH="00" COMPTYPE="E" DEFFDNAME="TIMEZONE" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZUSFP_SASA_STOCK_UPD_LOG_NKEY" FIELDNAME="ADATA" DDLANGUAGE="E" POSITION="0002" ROLLNAME="ZUSFP_ASA_STOCK_UPD_DATA" ADMINFIELD="0" INTTYPE="y" INTLEN="000008" ROUTPUTLEN="000000" HEADLEN="23" SCRLEN1="10" SCRLEN2="20" SCRLEN3="40" DTELMASTER="E" DATATYPE="RSTR" LENG="000000" OUTPUTLEN="000000" DECIMALS="000000" MASK="  RSTRE" MASKLEN="0000" DDTEXT="aSa Stock Updating Data" REPTEXT="aSa Stock Updating Data" SCRTEXT_S="aSa Data" SCRTEXT_M="aSa Stock Upd.Data" SCRTEXT_L="aSa Stock Updating Data" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZUSFP_SASA_STOCK_UPD_LOG_NKEY" FIELDNAME="UMETH" DDLANGUAGE="E" POSITION="0003" ROLLNAME="ZUSFP_ASA_UPD_STK_METHOD" ADMINFIELD="0" INTTYPE="N" INTLEN="000002" DOMNAME="ZUSFP_UPD_STK_METHOD" ROUTPUTLEN="000000" HEADLEN="25" SCRLEN1="10" SCRLEN2="20" SCRLEN3="40" DTELMASTER="E" DATATYPE="NUMC" LENG="000001" OUTPUTLEN="000001" DECIMALS="000000" VALEXI="X" MASK="  NUMCE" MASKLEN="0000" DDTEXT="aSa Stock Updating Method" REPTEXT="aSa Stock Updating Method" SCRTEXT_S="Upd.Method" SCRTEXT_M="aSa Updating Method" SCRTEXT_L="aSa Stock Updating Method" DOMNAME3L="ZUSFP_UPD_STK_METHOD" SHLPORIGIN="F" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZUSFP_SASA_STOCK_UPD_LOG_NKEY" FIELDNAME="LGHDL" DDLANGUAGE="E" POSITION="0004" ROLLNAME="BALLOGHNDL" ADMINFIELD="0" INTTYPE="C" INTLEN="000044" DOMNAME="SYSUUID_22" ROUTPUTLEN="000000" HEADLEN="25" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="CHAR" LENG="000022" OUTPUTLEN="000022" DECIMALS="000000" LOWERCASE="X" MASK="  CHARE" MASKLEN="0000" DDTEXT="Application Log: Log Handle" REPTEXT="Handle" SCRTEXT_S="Handle" SCRTEXT_M="Handle" SCRTEXT_L="Handle" DOMNAME3L="SYSUUID_22" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
 </TABL>
 <TABL TABNAME="ZUSFP_SASA_STOCK_UPD" DDLANGUAGE="E" TABCLASS="INTTAB" DATMIN="0000000000" DATMAX="0000000000" DATAVG="0000000000" DDTEXT="aSa Stock updating data" AUTHCLASS="00" PROZPUFF="000" EXCLASS="3">
  <dd09l AS4VERS="0000" SCHFELDANZ="000"/>
  <dd03p TABNAME="ZUSFP_SASA_STOCK_UPD" FIELDNAME="LOCATION" DDLANGUAGE="E" POSITION="0001" ROLLNAME="/SAPAPO/EXT_LOCNO" ADMINFIELD="0" INTTYPE="C" INTLEN="000040" DOMNAME="/SAPAPO/LOCNO" ROUTPUTLEN="000000" HEADLEN="10" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="E" DATATYPE="CHAR" LENG="000020" OUTPUTLEN="000020" DECIMALS="000000" MASK="  CHARE" MASKLEN="0000" DDTEXT="External Location Identifier" REPTEXT="Location" SCRTEXT_S="Location" SCRTEXT_M="Location" SCRTEXT_L="Location" DOMNAME3L="/SAPAPO/LOCNO" DEPTH="00" COMPTYPE="E" DEFFDNAME="LOCATION" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZUSFP_SASA_STOCK_UPD" FIELDNAME="PRODUCT" DDLANGUAGE="E" POSITION="0002" ROLLNAME="/SAPAPO/EXT_MATNR" ADMINFIELD="0" INTTYPE="C" INTLEN="000080" DOMNAME="/SAPAPO/EXT_MATNR" ROUTPUTLEN="000000" LOGFLAG="X" HEADLEN="12" SCRLEN1="10" SCRLEN2="12" SCRLEN3="12" DTELMASTER="E" DATATYPE="CHAR" LENG="000040" OUTPUTLEN="000040" DECIMALS="000000" ENTITYTAB="/SAPAPO/MATMAP" MASK="  CHARE" MASKLEN="0000" DDTEXT="External Product Identifier" REPTEXT="Ext. Product" SCRTEXT_S="ExtProduct" SCRTEXT_M="Ext. Product" SCRTEXT_L="Ext. Product" DOMNAME3L="/SAPAPO/EXT_MATNR" DEPTH="00" COMPTYPE="E" DEFFDNAME="PRODUCT" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZUSFP_SASA_STOCK_UPD" FIELDNAME="QUANTITY" DDLANGUAGE="E" POSITION="0003" ROLLNAME="/SAPAPO/STOCKQTY" ADMINFIELD="0" INTTYPE="P" INTLEN="000007" REFTABLE="/SAPAPO/MATKEY" REFFIELD="MEINS" DOMNAME="/SAPAPO/MENG13V" ROUTPUTLEN="000000" HEADLEN="07" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="E" DATATYPE="QUAN" LENG="000013" OUTPUTLEN="000018" DECIMALS="000003" SIGNFLAG="X" MASK="  QUANE" MASKLEN="0000" DDTEXT="Stock quantity in APO" REPTEXT="Stock" SCRTEXT_S="Stock" SCRTEXT_M="Stock" SCRTEXT_L="Stock" DOMNAME3L="/SAPAPO/MENG13V" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
 </TABL>
 <TABL TABNAME="ZUSFP_SASA_STOCK_UPD_LOG_KEYS" DDLANGUAGE="E" TABCLASS="INTTAB" DATMIN="0000000000" DATMAX="0000000000" DATAVG="0000000000" DDTEXT="aSa Stock Updating - Historial keys" AUTHCLASS="00" PROZPUFF="000" EXCLASS="1">
  <dd09l AS4VERS="0000" SCHFELDANZ="000"/>
  <dd03p TABNAME="ZUSFP_SASA_STOCK_UPD_LOG_KEYS" FIELDNAME="AEDAT" DDLANGUAGE="E" POSITION="0001" ROLLNAME="RSCRMTSTMP" ADMINFIELD="0" INTTYPE="P" INTLEN="000008" DOMNAME="RSCRMTSTMPS" ROUTPUTLEN="000000" HEADLEN="15" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="E" DATATYPE="DEC" LENG="000015" OUTPUTLEN="000019" DECIMALS="000000" MASK="  DEC E" MASKLEN="0000" DDTEXT="Creation Date" REPTEXT="Created On" SCRTEXT_S="Created" SCRTEXT_M="Created On" SCRTEXT_L="Created On" DOMMASTER="D" DOMNAME3L="RSCRMTSTMPS" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZUSFP_SASA_STOCK_UPD_LOG_KEYS" FIELDNAME="UNAME" DDLANGUAGE="E" POSITION="0002" ROLLNAME="UNAME" ADMINFIELD="0" INTTYPE="C" INTLEN="000024" DOMNAME="UNAME" ROUTPUTLEN="000000" HEADLEN="20" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="CHAR" LENG="000012" OUTPUTLEN="000012" DECIMALS="000000" MASK="  CHARE" MASKLEN="0000" DDTEXT="User Name" REPTEXT="User Name" SCRTEXT_S="User" SCRTEXT_M="User Name" SCRTEXT_L="User Name" DOMNAME3L="UNAME" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
 </TABL>
 <TABL TABNAME="ZUSFP_SASA_STOCK_UPD_LOG_NKEY" DDLANGUAGE="E" TABCLASS="INTTAB" DATMIN="0000000000" DATMAX="0000000000" DATAVG="0000000000" DDTEXT="aSa Stock Updating - Non key fields" AUTHCLASS="00" PROZPUFF="000" EXCLASS="4">
  <dd09l AS4VERS="0000" SCHFELDANZ="000"/>
  <dd03p TABNAME="ZUSFP_SASA_STOCK_UPD_LOG_NKEY" FIELDNAME="UTZON" DDLANGUAGE="E" POSITION="0001" ROLLNAME="SUIDTZONE" ADMINFIELD="0" INTTYPE="C" INTLEN="000012" DOMNAME="TZNZONE" ROUTPUTLEN="000000" LOGFLAG="X" HEADLEN="30" SCRLEN1="10" SCRLEN2="20" SCRLEN3="30" DTELMASTER="D" DATATYPE="CHAR" LENG="000006" OUTPUTLEN="000006" DECIMALS="000000" ENTITYTAB="TTZZ" MASK="  CHARE" MASKLEN="0000" DDTEXT="Time Zone of User" REPTEXT="Time Zone of User" SCRTEXT_S="Time Zone" SCRTEXT_M="Time Zone" SCRTEXT_L="Time Zone of User" DOMNAME3L="TZNZONE" DEPTH="00" COMPTYPE="E" DEFFDNAME="TIMEZONE" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZUSFP_SASA_STOCK_UPD_LOG_NKEY" FIELDNAME="ADATA" DDLANGUAGE="E" POSITION="0002" ROLLNAME="ZUSFP_ASA_STOCK_UPD_DATA" ADMINFIELD="0" INTTYPE="y" INTLEN="000008" ROUTPUTLEN="000000" HEADLEN="23" SCRLEN1="10" SCRLEN2="20" SCRLEN3="40" DTELMASTER="E" DATATYPE="RSTR" LENG="000000" OUTPUTLEN="000000" DECIMALS="000000" MASK="  RSTRE" MASKLEN="0000" DDTEXT="aSa Stock Updating Data" REPTEXT="aSa Stock Updating Data" SCRTEXT_S="aSa Data" SCRTEXT_M="aSa Stock Upd.Data" SCRTEXT_L="aSa Stock Updating Data" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZUSFP_SASA_STOCK_UPD_LOG_NKEY" FIELDNAME="UMETH" DDLANGUAGE="E" POSITION="0003" ROLLNAME="ZUSFP_ASA_UPD_STK_METHOD" ADMINFIELD="0" INTTYPE="N" INTLEN="000002" DOMNAME="ZUSFP_UPD_STK_METHOD" ROUTPUTLEN="000000" HEADLEN="25" SCRLEN1="10" SCRLEN2="20" SCRLEN3="40" DTELMASTER="E" DATATYPE="NUMC" LENG="000001" OUTPUTLEN="000001" DECIMALS="000000" VALEXI="X" MASK="  NUMCE" MASKLEN="0000" DDTEXT="aSa Stock Updating Method" REPTEXT="aSa Stock Updating Method" SCRTEXT_S="Upd.Method" SCRTEXT_M="aSa Updating Method" SCRTEXT_L="aSa Stock Updating Method" DOMNAME3L="ZUSFP_UPD_STK_METHOD" SHLPORIGIN="F" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZUSFP_SASA_STOCK_UPD_LOG_NKEY" FIELDNAME="LGHDL" DDLANGUAGE="E" POSITION="0004" ROLLNAME="BALLOGHNDL" ADMINFIELD="0" INTTYPE="C" INTLEN="000044" DOMNAME="SYSUUID_22" ROUTPUTLEN="000000" HEADLEN="25" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="CHAR" LENG="000022" OUTPUTLEN="000022" DECIMALS="000000" LOWERCASE="X" MASK="  CHARE" MASKLEN="0000" DDTEXT="Application Log: Log Handle" REPTEXT="Handle" SCRTEXT_S="Handle" SCRTEXT_M="Handle" SCRTEXT_L="Handle" DOMNAME3L="SYSUUID_22" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
 </TABL>
 <TRAN TCODE="ZUSFP04" PGMNA="/SAPAPO/DELETE_STOCK" DYPNO="1000" CINFO="80">
  <tstct SPRSL="E" TCODE="ZUSFP04" TTEXT="Delete Stock (SAP Program)"/>
  <tstcc TCODE="ZUSFP04" S_WEBGUI="1" S_WIN32="X" S_PLATIN="X"/>
  <tstcp/>
  <rsstcd ST_PROG="X" DEVCLASS="$TMP"/>
 </TRAN>
 <TRAN TCODE="ZUSFP03" PGMNA="ZUSFPR_STOCK_CREATION" DYPNO="1000" CINFO="80">
  <tstct SPRSL="E" TCODE="ZUSFP03" TTEXT="Stock creation from aSa Interface"/>
  <tstcc TCODE="ZUSFP03" S_WEBGUI="1" S_WIN32="X" S_PLATIN="X"/>
  <tstcp/>
  <rsstcd ST_PROG="X" DEVCLASS="$TMP"/>
 </TRAN>
 <TRAN TCODE="ZUSFP03" PGMNA="ZUSFPR_STOCK_CREATION" DYPNO="1000" CINFO="80">
  <tstct SPRSL="E" TCODE="ZUSFP03" TTEXT="Stock creation from aSa Interface"/>
  <tstcc TCODE="ZUSFP03" S_WEBGUI="1" S_WIN32="X" S_PLATIN="X"/>
  <tstcp/>
  <rsstcd ST_PROG="X" DEVCLASS="$TMP"/>
 </TRAN>
 <TRAN TCODE="ZUSFP04" PGMNA="/SAPAPO/DELETE_STOCK" DYPNO="1000" CINFO="80">
  <tstct SPRSL="E" TCODE="ZUSFP04" TTEXT="Delete Stock (SAP Program)"/>
  <tstcc TCODE="ZUSFP04" S_WEBGUI="1" S_WIN32="X" S_PLATIN="X"/>
  <tstcp/>
  <rsstcd ST_PROG="X" DEVCLASS="$TMP"/>
 </TRAN>
 <TTYP TYPENAME="ZUSFPDT_GET_RAW_MATERIAL_S_TAB" DDLANGUAGE="E" ROWTYPE="ZUSFPDT_GET_RAW_MATERIAL_SAP_1" ROWKIND="S" DATATYPE="STRU" LENG="000000" DECIMALS="000000" ACCESSMODE="T" KEYDEF="D" KEYKIND="N" KEYFDCOUNT="0000" DDTEXT="Proxy Table Type (generated)" TYPELEN="000032" CTLENG="000000" CTDECIMALS="000000" OCCURS="00000" PROXYTYPE="X"/>
 <TTYP TYPENAME="ZUSFP_SASA_STOCK_UPD_T" DDLANGUAGE="E" ROWTYPE="ZUSFP_SASA_STOCK_UPD" ROWKIND="S" DATATYPE="STRU" LENG="000000" DECIMALS="000000" ACCESSMODE="T" KEYDEF="D" KEYKIND="N" KEYFDCOUNT="0000" DDTEXT="aSa Stock updating data table" TYPELEN="000128" CTLENG="000000" CTDECIMALS="000000" OCCURS="00000"/>
 <TTYP TYPENAME="ZUSFPDT_GET_RAW_MATERIAL_S_TAB" DDLANGUAGE="E" ROWTYPE="ZUSFPDT_GET_RAW_MATERIAL_SAP_1" ROWKIND="S" DATATYPE="STRU" LENG="000000" DECIMALS="000000" ACCESSMODE="T" KEYDEF="D" KEYKIND="N" KEYFDCOUNT="0000" DDTEXT="Proxy Table Type (generated)" TYPELEN="000032" CTLENG="000000" CTDECIMALS="000000" OCCURS="00000" PROXYTYPE="X"/>
 <TTYP TYPENAME="ZUSFP_SASA_HIST_VIEW_T" DDLANGUAGE="E" ROWTYPE="ZUSFP_SASA_HIST_VIEW" ROWKIND="S" DATATYPE="STRU" LENG="000000" DECIMALS="000000" ACCESSMODE="T" KEYDEF="D" KEYKIND="N" KEYFDCOUNT="0000" DDTEXT="aSa Stock Updating - Historial view table" TYPELEN="000274" CTLENG="000000" CTDECIMALS="000000" OCCURS="00000"/>
 <TTYP TYPENAME="ZUSFP_SASA_HIST_VIEW_T" DDLANGUAGE="E" ROWTYPE="ZUSFP_SASA_HIST_VIEW" ROWKIND="S" DATATYPE="STRU" LENG="000000" DECIMALS="000000" ACCESSMODE="T" KEYDEF="D" KEYKIND="N" KEYFDCOUNT="0000" DDTEXT="aSa Stock Updating - Historial view table" TYPELEN="000274" CTLENG="000000" CTDECIMALS="000000" OCCURS="00000"/>
 <TTYP TYPENAME="ZUSFP_SASA_STOCK_UPD_T" DDLANGUAGE="E" ROWTYPE="ZUSFP_SASA_STOCK_UPD" ROWKIND="S" DATATYPE="STRU" LENG="000000" DECIMALS="000000" ACCESSMODE="T" KEYDEF="D" KEYKIND="N" KEYFDCOUNT="0000" DDTEXT="aSa Stock updating data table" TYPELEN="000128" CTLENG="000000" CTDECIMALS="000000" OCCURS="00000"/>
 <XSLT XSLTDESC="ZUSFP_TRF_ASASTK_REMNSP" DEVCLASS="$TMP" LANGU="E" DESCRIPT="aSa Stock Spreadsheet - Remove namespace">
  <source>&lt;xsl:stylesheet xmlns:xsl=&quot;http://www.w3.org/1999/XSL/Transform&quot; xmlns:ss=&quot;http://sch&amp;#x9;emas.openxmlformats.org/spreadsheetml/2006/main&quot; version=&quot;1.1&quot;&gt;
  &lt;xsl:strip-space elements=&quot;*&quot;/&gt;
  &lt;xsl:output encoding=&quot;utf-8&quot; indent=&quot;yes&quot; method=&quot;xml&quot; omit-xml-declaration=&quot;yes&quot;/&gt;
  &lt;xsl:template match=&quot;/&quot;&gt;
    &lt;xsl:element name=&quot;sst&quot; namespace=&quot;&quot;&gt;
      &lt;xsl:for-each select=&quot;ss:sst/ss:si&quot;&gt;
        &lt;xsl:element name=&quot;si&quot; namespace=&quot;&quot;&gt;
          &lt;xsl:element name=&quot;t&quot; namespace=&quot;&quot;&gt;
            &lt;xsl:value-of select=&quot;ss:t&quot;/&gt;
          &lt;/xsl:element&gt;
        &lt;/xsl:element&gt;
      &lt;/xsl:for-each&gt;
    &lt;/xsl:element&gt;
  &lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;</source>
 </XSLT>
 <XSLT XSLTDESC="ZUSFP_TRF_ASASTK_IMPORT" DEVCLASS="$TMP" LANGU="E" DESCRIPT="aSa Stock Spreadsheet - Main transformation">
  <source>&lt;xsl:transform xmlns:xsl=&quot;http://www.w3.org/1999/XSL/Transform&quot; xmlns:ss=&quot;http://schemas.openxmlformats.org/spreadsheetml/2006/main&quot; xmlns:sap=&quot;http://www.sap.com/sapxsl&quot; xmlns:asx=&quot;http://www.sap.com/abapxml&quot; excluderesult-prefixes=&quot;c&quot; version=&quot;1.0&quot;&gt;
  &lt;xsl:param name=&quot;P_SHARED_STRING&quot; select=&quot;&quot;/&gt;
  &lt;xsl:strip-space elements=&quot;*&quot;/&gt;
  &lt;xsl:output encoding=&quot;utf-8&quot; indent=&quot;yes&quot; omit-xml-declaration=&quot;yes&quot;/&gt;
  &lt;xsl:variable name=&quot;V_SHARED_STRING&quot;&gt;
    &lt;xsl:if test=&quot;$P_SHARED_STRING&quot;&gt;
      &lt;xsl:copy-of select=&quot;$P_SHARED_STRING&quot;/&gt;
    &lt;/xsl:if&gt;
  &lt;/xsl:variable&gt;
  &lt;xsl:template match=&quot;/&quot;&gt;
    &lt;asx:abap version=&quot;1.0&quot;&gt;
      &lt;asx:values&gt;
        &lt;T_DATA&gt;
          &lt;xsl:for-each select=&quot;ss:worksheet/ss:sheetData/ss:row&quot;&gt;
            &lt;xsl:if test=&quot;position() &amp;gt; 1&quot;&gt;
              &lt;item&gt;
                &lt;LOCATION&gt;
                  &lt;xsl:variable name=&quot;cell_id&quot; select=&quot;concat(&apos;A&apos;, position())&quot;/&gt;
                  &lt;xsl:variable name=&quot;v_index&quot; select=&quot;ss:c[@r=$cell_id][@t=&apos;s&apos;]/ss:v&quot;/&gt;
                  &lt;xsl:if test=&quot;$v_index&quot;&gt;
                    &lt;xsl:value-of select=&quot;$V_SHARED_STRING/sst/si[$v_index + 1]/t&quot;/&gt;
                  &lt;/xsl:if&gt;
                  &lt;xsl:if test=&quot;not($v_index)&quot;&gt;
                    &lt;xsl:value-of select=&quot;ss:c[@r=$cell_id]/ss:v&quot;/&gt;
                  &lt;/xsl:if&gt;
                &lt;/LOCATION&gt;
                &lt;PRODUCT&gt;
                  &lt;xsl:variable name=&quot;cell_id&quot; select=&quot;concat(&apos;B&apos;, position())&quot;/&gt;
                  &lt;xsl:variable name=&quot;v_index&quot; select=&quot;ss:c[@r=$cell_id][@t=&apos;s&apos;]/ss:v&quot;/&gt;
                  &lt;xsl:if test=&quot;$v_index&quot;&gt;
                    &lt;xsl:value-of select=&quot;$V_SHARED_STRING/sst/si[$v_index + 1]/t&quot;/&gt;
                  &lt;/xsl:if&gt;
                  &lt;xsl:if test=&quot;not($v_index)&quot;&gt;
                    &lt;xsl:value-of select=&quot;ss:c[@r=$cell_id]/ss:v&quot;/&gt;
                  &lt;/xsl:if&gt;
                &lt;/PRODUCT&gt;
                &lt;QUANTITY&gt;
                  &lt;xsl:variable name=&quot;cell_id&quot; select=&quot;concat(&apos;C&apos;, position())&quot;/&gt;
                  &lt;xsl:variable name=&quot;v_index&quot; select=&quot;ss:c[@r=$cell_id][@t=&apos;s&apos;]/ss:v&quot;/&gt;
                  &lt;xsl:if test=&quot;$v_index&quot;&gt;
                    &lt;xsl:value-of select=&quot;$V_SHARED_STRING/sst/si[$v_index + 1]/t&quot;/&gt;
                  &lt;/xsl:if&gt;
                  &lt;xsl:if test=&quot;not($v_index)&quot;&gt;
                    &lt;xsl:value-of select=&quot;format-number(ss:c[@r=$cell_id]/ss:v,&apos;#.###&apos;)&quot;/&gt;
                  &lt;/xsl:if&gt;
                &lt;/QUANTITY&gt;
              &lt;/item&gt;
            &lt;/xsl:if&gt;
          &lt;/xsl:for-each&gt;
        &lt;/T_DATA&gt;
      &lt;/asx:values&gt;
    &lt;/asx:abap&gt;
  &lt;/xsl:template&gt;
&lt;/xsl:transform&gt;</source>
 </XSLT>
 <XSLT XSLTDESC="ZUSFP_TF_ASA_STOCK_DATA" DEVCLASS="$TMP" LANGU="E" DESCRIPT="aSa Stock data convertion">
  <source>&lt;?sap.transform simple?&gt;
&lt;tt:transform xmlns:tt=&quot;http://www.sap.com/transformation-templates&quot; xmlns:ddic=&quot;http://www.sap.com/abapxml/types/dictionary&quot; xmlns:def=&quot;http://www.sap.com/abapxml/types/defined&quot;&gt;
  &lt;tt:root name=&quot;ROOT&quot; type=&quot;?&quot;/&gt;
  &lt;tt:root name=&quot;ASA_DATA&quot; type=&quot;ddic:ZUSFP_SASA_STOCK_UPD_T&quot;/&gt;
  &lt;tt:template&gt;
    &lt;ASA_DATA&gt;
      &lt;tt:loop ref=&quot;.ASA_DATA&quot;&gt;
        &lt;ZUSFP_SASA_STOCK_UPD&gt;
          &lt;LOCATION tt:value-ref=&quot;LOCATION&quot;/&gt;
          &lt;PRODUCT tt:value-ref=&quot;PRODUCT&quot;/&gt;
          &lt;QUANTITY tt:value-ref=&quot;QUANTITY&quot;/&gt;
        &lt;/ZUSFP_SASA_STOCK_UPD&gt;
      &lt;/tt:loop&gt;
    &lt;/ASA_DATA&gt;
  &lt;/tt:template&gt;
&lt;/tt:transform&gt;</source>
 </XSLT>
</nugget>
