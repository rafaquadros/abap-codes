<?xml version="1.0" encoding="utf-8"?>
<nugget name="TVARV_RETRIEVER_V2">
 <CLAS CLSNAME="ZCL_TVARV_RETRIEVER" VERSION="1" LANGU="P" DESCRIPT="Recuperador de variantes" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" WITH_UNIT_TESTS="X" DURATION_TYPE="0 " RISK_LEVEL="0 " ZSAPLINK_PLUGIN_MAJOR_VERSION="0 " ZSAPLINK_PLUGIN_MINOR_VERSION="1 " ZSAPLINK_PLUGIN_BUILD_VERSION="0 " ZSAPLINK_PLUGIN_INFO1="ZSAPLINK_CLASS is part of the main ZSAPLINK project --&gt; This plugin found there instead of ZSAPLINK_PLUGINS projects" ZSAPLINK_PLUGIN_INFO2="SAPLINK homepage: https://www.assembla.com/spaces/saplink/wiki" ZSAPLINK_PLUGIN_INFO3="Download from https://www.assembla.com/code/saplink/subversion/nodes" ZSAPLINK_PLUGIN_INFO4="and navigate to:  trunk -&gt; core -&gt; ZSAPLINK -&gt; CLAS -&gt; ZSAPLINK_CLASS.slnk">
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations

*----------------------------------------------------------------------*
*       CLASS lcl_db IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_db IMPLEMENTATION.
  METHOD get_tvarvc_values.

    CLEAR rt_values.

    CONCATENATE i_vname &apos;%&apos; INTO DATA(l_vname).
    SELECT * FROM tvarvc
      INTO TABLE rt_values
     WHERE name LIKE l_vname.
    IF sy-subrc &lt;&gt; 0.
      RAISE EXCEPTION TYPE cx_sy_sql_error.
    ENDIF.
  ENDMETHOD.                    &quot;get_tvarvc_values
ENDCLASS.                    &quot;lcl_db IMPLEMENTATION</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section&quot;! Objects of this class mediates database accesses. It aims
&quot;! to isolate this development from external dependencies, as
&quot;! might be desirable in tests.
CLASS lcl_db DEFINITION.
  PUBLIC SECTION.
    &quot;! &lt;strong&gt;EFFECTS:&lt;/strong&gt;&lt;br&gt; If no related data is found, returns exception type
    &quot;! CX_SX_SY_SQL_ERROR, otherwise returns the related variant
    &quot;! type and a table with the range of related values found in
    &quot;! table TVARVC.
    &quot;! &lt;br&gt;&lt;strong&gt;REQUIRES:&lt;/strong&gt;&lt;br&gt; The variant name must be provided.
    &quot;! @parameter i_vname | Name of Variant Variable
    &quot;! @parameter rt_values | Collection of variant values
    &quot;! @raising cx_sy_sql_error | SQL error or not found
    METHODS  get_tvarvc_values IMPORTING i_vname          TYPE rvari_vnam
                               RETURNING VALUE(rt_values) TYPE tvarvc_t
                               RAISING   cx_sy_sql_error.
*--------------------------------------------------------------------*
* Method GET_TVARVC_VALUES
*--------------------------------------------------------------------*
* REQUIRES: The variant name must be provided.
* EFFECTS.: If no related data is found, returns exception type
*           CX_SX_SY_SQL_ERROR, otherwise returns the related variant
*           type and a table with the range of related values found in
*           tabel TVARVC.
*--------------------------------------------------------------------*
* -&gt;   P_VNAME      Name of Variant Variable.
* &lt;-   RT_VALUES    Collection of variant values.
*--------------------------------------------------------------------*
ENDCLASS.                    &quot;lcl_db DEFINITION</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <localTestClasses>*&quot;* use this source file for your ABAP unit test classes

CLASS  lcl_tester DEFINITION DEFERRED.
CLASS zcl_tvarv_retriever DEFINITION LOCAL FRIENDS lcl_tester.
* Test #001 - Method GET_SINGLE returns a known value.
** Scenario setting up
CLASS lcl_db_single  DEFINITION FOR TESTING
                     RISK LEVEL HARMLESS
                     DURATION SHORT
                     INHERITING FROM lcl_db
                     FINAL.
  PUBLIC SECTION.
    METHODS get_tvarvc_values REDEFINITION.
ENDCLASS.                    &quot;lcl_db_single DEFINITION
*----------------------------------------------------------------------*
*       CLASS lcl_db_single IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_db_single IMPLEMENTATION.
  METHOD get_tvarvc_values.
    DATA  lw_value TYPE tvarvc.

    lw_value-type = &apos;P&apos;.
    lw_value-low = &apos;SINGLE&apos;.
    APPEND lw_value TO rt_values.
  ENDMETHOD.                    &quot;get_tvarvc_values
ENDCLASS.                    &quot;lcl_db_single IMPLEMENTATION
** Scenario setting up
CLASS lcl_db_multiple  DEFINITION FOR TESTING
                       RISK LEVEL HARMLESS
                       DURATION SHORT
                       INHERITING FROM lcl_db
                       FINAL.
  PUBLIC SECTION.
    METHODS  get_tvarvc_values REDEFINITION.
ENDCLASS.                    &quot;lcl_db_multiple DEFINITION
*----------------------------------------------------------------------*
*       CLASS lcl_db_multiple IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_db_multiple IMPLEMENTATION.
  METHOD get_tvarvc_values.
    DATA  lw_value TYPE tvarvc.

    lw_value-type       = &apos;S&apos;.
    lw_value-sign       = &apos;I&apos;.
    lw_value-opti       = &apos;BT&apos;.
    lw_value-low        = &apos;E0001&apos;.
    lw_value-high       = &apos;E0003&apos;.
    APPEND lw_value TO rt_values.
  ENDMETHOD.                    &quot;get_tvarvc_values
ENDCLASS.                    &quot;lcl_db_multiple IMPLEMENTATION
* Test #003 - Method GET_SINGLE returns a known value assigned to a
*             name.
** Scenario setting up
CLASS lcl_db_sg_with_name  DEFINITION FOR TESTING
                           RISK LEVEL HARMLESS
                           DURATION SHORT
                           INHERITING FROM lcl_db
                           FINAL.
  PUBLIC SECTION.
    METHODS get_tvarvc_values REDEFINITION.
ENDCLASS.                    &quot;lcl_db_sg_with_name DEFINITION
*----------------------------------------------------------------------*
*       CLASS lcl_db_sg_with_name IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_db_sg_with_name IMPLEMENTATION.
  METHOD get_tvarvc_values.
    DATA  lw_value TYPE tvarvc.

    lw_value-type = &apos;P&apos;.
    lw_value-name = &apos;DUMMY_DUMMY&apos;.
    lw_value-low  = &apos;DUMMY&apos;.
    APPEND lw_value TO rt_values.
    lw_value-name = &apos;DUMMY_SINGLE&apos;.
    lw_value-low  = &apos;SINGLE&apos;.
    APPEND lw_value TO rt_values.
  ENDMETHOD.                    &quot;get_tvarvc_values
ENDCLASS.                    &quot;lcl_db_sg_with_name IMPLEMENTATION
* Test #004 - Method GET_MULTPLE returns a known value assigned to a
*             name.
** Scenario setting up
CLASS lcl_db_mp_with_name  DEFINITION FOR TESTING
                           RISK LEVEL HARMLESS
                           DURATION SHORT
                           INHERITING FROM lcl_db
                           FINAL.
  PUBLIC SECTION.
    METHODS get_tvarvc_values REDEFINITION.
ENDCLASS.                    &quot;lcl_db_mp_with_name DEFINITION
*----------------------------------------------------------------------*
*       CLASS lcl_db_mp_with_name IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_db_mp_with_name IMPLEMENTATION.
  METHOD get_tvarvc_values.
    DATA  lw_value TYPE tvarvc.

    lw_value-type = &apos;S&apos;.
    lw_value-sign = &apos;I&apos;.
    lw_value-opti = &apos;BT&apos;.
    lw_value-name = &apos;DUMMY_STAT1&apos;.
    lw_value-low  = &apos;E0001&apos;.
    lw_value-high = &apos;E0003&apos;.
    APPEND lw_value TO rt_values.
    lw_value-name = &apos;DUMMY_STAT2&apos;.
    lw_value-low  = &apos;E0004&apos;.
    lw_value-high = &apos;E0006&apos;.
    APPEND lw_value TO rt_values.
  ENDMETHOD.                    &quot;get_tvarvc_values
ENDCLASS.                    &quot;lcl_db_mp_with_name IMPLEMENTATION
** Performing tests
CLASS lcl_tester DEFINITION FOR TESTING
                 RISK LEVEL HARMLESS
                 DURATION SHORT
                 INHERITING FROM cl_aunit_assert
                 FINAL.
  PRIVATE SECTION.
    CONSTANTS: lcs_single TYPE string VALUE &apos;SINGLE&apos;,
               lcs_multip TYPE string VALUE &apos;E0004&apos;,
               lcs_multnm TYPE string VALUE &apos;E0007&apos;.

    METHODS: tst_single_ok  FOR TESTING, &quot; Single value ok.
      tst_multip_nok FOR TESTING, &quot; Range of values not ok.
      tst_slgnm_ok   FOR TESTING, &quot; Single assigned to value ok.
      tst_mlpnm_nok  FOR TESTING. &quot; Multi assigned to name nok.
ENDCLASS.                    &quot;lcl_tester DEFINITION
*----------------------------------------------------------------------*
*       CLASS lcl_tester IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_tester IMPLEMENTATION.
  METHOD tst_single_ok.
    DATA lvc_value(6) TYPE c.

*     Setup parameters for the call
    DATA(lr_cut) = NEW zcl_tvarv_retriever( i_name = &apos;DUMMY&apos; ).
    lr_cut-&gt;mr_db = NEW lcl_db_single( ).
*       Perform the call
    lr_cut-&gt;get_single( IMPORTING e_value = lvc_value ).
*       Check returned values
    assert_equals( exp = lcs_single act = lvc_value
                   msg = &apos;Single valued method failed!&apos; ).
  ENDMETHOD.                    &quot;tst_single_ok
  METHOD tst_multip_nok.
    DATA: lg_estat TYPE RANGE OF j_status,
          l_bool   TYPE abap_bool.
*     Setup parameters for the call
    DATA(lr_cut) = NEW zcl_tvarv_retriever( i_name = &apos;DUMMY&apos; ).
    lr_cut-&gt;mr_db = NEW lcl_db_multiple( ).
*       Perform the call
    lr_cut-&gt;get_multiple( IMPORTING et_values = lg_estat ).
*       Check returned values
    IF lcs_multip IN lg_estat.
      l_bool = abap_true.
    ENDIF.
    assert_equals( exp = abap_false act = l_bool
                   msg = &apos;Multiple valued method failed!&apos; ).
  ENDMETHOD.                    &quot;tst_multip_nok
  METHOD tst_slgnm_ok.
    DATA
          l_value(6) TYPE c.
*       Setup parameters for the call
    DATA(lr_cut) = NEW zcl_tvarv_retriever( i_name = &apos;DUMMY&apos; ).
    lr_cut-&gt;mr_db = NEW lcl_db_sg_with_name( ).
*         Perform the call
    lr_cut-&gt;get_single( EXPORTING i_vname  = &apos;SINGLE&apos;
                          IMPORTING e_value = l_value ).
*         Check returned values
    assert_equals( exp = lcs_single act = l_value
                   msg = &apos;Single valued method failed!&apos; ).
  ENDMETHOD.                    &quot;tst_slgnm_ok
  METHOD tst_mlpnm_nok.
    DATA: lg_estat TYPE RANGE OF j_status,
          lv_bool  TYPE abap_bool.
*       Setup parameters for the call
    DATA(lr_cut) = NEW zcl_tvarv_retriever( i_name = &apos;DUMMY&apos; ).
    lr_cut-&gt;mr_db = NEW lcl_db_mp_with_name( ).
*         Perform the call
    lr_cut-&gt;get_multiple( EXPORTING i_vname = &apos;STAT2&apos;
                            IMPORTING et_values = lg_estat ).
*         Check returned values
    IF lcs_multnm IN lg_estat.
      lv_bool = abap_true.
    ENDIF.
    assert_equals( exp = abap_false act = lv_bool
                   msg = &apos;Multiple valued method failed!&apos; ).
  ENDMETHOD.                    &quot;tst_mlpnm_nok
ENDCLASS.                    &quot;lcl_tester IMPLEMENTATION</localTestClasses>
  <attribute CLSNAME="ZCL_TVARV_RETRIEVER" CMPNAME="MR_DB" VERSION="1" LANGU="P" EXPOSURE="0" STATE="1" EDITORDER="1 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="3" TYPE="LCL_DB" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_TVARV_RETRIEVER" CMPNAME="MT_VALUES" VERSION="1" LANGU="P" EXPOSURE="0" STATE="1" EDITORDER="2 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="TVARVC_T" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_TVARV_RETRIEVER" CMPNAME="M_NAME" VERSION="1" LANGU="P" EXPOSURE="2" STATE="1" EDITORDER="1 " ATTDECLTYP="0" ATTRDONLY="X" ATTEXPVIRT="0" TYPTYPE="1" TYPE="RVARI_VNAM" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <method CLSNAME="ZCL_TVARV_RETRIEVER" CMPNAME="CONSTRUCTOR" VERSION="1" LANGU="P" EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="2" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_TVARV_RETRIEVER" CMPNAME="CONSTRUCTOR" SCONAME="I_NAME" VERSION="1" LANGU="P" CMPTYPE="1" MTDTYPE="2" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="RVARI_VNAM"/>
   <source>METHOD constructor.

    me-&gt;m_name = i_name.
    me-&gt;mr_db = NEW lcl_db(  ).
  ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_TVARV_RETRIEVER" CMPNAME="GET_MULTIPLE" VERSION="1" LANGU="P" EXPOSURE="2" STATE="1" EDITORDER="3 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_TVARV_RETRIEVER" CMPNAME="GET_MULTIPLE" SCONAME="I_VNAME" VERSION="1" LANGU="P" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_TVARV_RETRIEVER" CMPNAME="GET_MULTIPLE" SCONAME="ET_VALUES" VERSION="1" LANGU="P" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="0" TYPTYPE="1" TYPE="ANY TABLE"/>
   <source>METHOD get_multiple.
    TYPES  lyg_tvarv TYPE RANGE OF tvarv_val.
    DATA: l_search TYPE rvari_vnam,
          lg_tvarv TYPE lyg_tvarv,
          ls_tvarv TYPE LINE OF lyg_tvarv.
    DEFINE lm_append.
      ls_tvarv-sign   = &lt;ls_value&gt;-sign.
      ls_tvarv-option = &lt;ls_value&gt;-opti.
      ls_tvarv-low    = &lt;ls_value&gt;-low.
      ls_tvarv-high   = &lt;ls_value&gt;-high.
      APPEND ls_tvarv TO lg_tvarv.
    END-OF-DEFINITION.

    CLEAR et_values.

    IF me-&gt;mt_values IS INITIAL.
      me-&gt;set_attributes( ).
    ENDIF.

    IF i_vname IS SUPPLIED.
      CONCATENATE m_name i_vname INTO l_search SEPARATED BY &apos;_&apos;.
      LOOP AT me-&gt;mt_values ASSIGNING FIELD-SYMBOL(&lt;ls_value&gt;) WHERE name = l_search.
        lm_append.
      ENDLOOP.
    ELSE.
      LOOP AT me-&gt;mt_values ASSIGNING &lt;ls_value&gt;.
        lm_append.
      ENDLOOP.
    ENDIF.

    et_values = lg_tvarv.
  ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_TVARV_RETRIEVER" CMPNAME="GET_SINGLE" VERSION="1" LANGU="P" EXPOSURE="2" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_TVARV_RETRIEVER" CMPNAME="GET_SINGLE" SCONAME="I_VNAME" VERSION="1" LANGU="P" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_TVARV_RETRIEVER" CMPNAME="GET_SINGLE" SCONAME="E_VALUE" VERSION="1" LANGU="P" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="0" TYPTYPE="1" TYPE="ANY"/>
   <source>METHOD get_single.

    CLEAR e_value.
    IF me-&gt;mt_values IS INITIAL.
      me-&gt;set_attributes( ).
    ENDIF.

    IF i_vname IS SUPPLIED.
      CONCATENATE me-&gt;m_name i_vname INTO DATA(l_search) SEPARATED BY &apos;_&apos;.
      READ TABLE me-&gt;mt_values WITH KEY name = l_search
       ASSIGNING FIELD-SYMBOL(&lt;ls_value&gt;).
      IF sy-subrc = 0.
        e_value = &lt;ls_value&gt;-low.
      ENDIF.
    ELSE.
      READ TABLE me-&gt;mt_values INDEX 1 ASSIGNING &lt;ls_value&gt;.
      IF sy-subrc = 0.
        e_value = &lt;ls_value&gt;-low.
      ENDIF.
    ENDIF.
  ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_TVARV_RETRIEVER" CMPNAME="SET_ATTRIBUTES" VERSION="1" LANGU="P" EXPOSURE="0" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD set_attributes.

    TRY .
        me-&gt;mt_values = me-&gt;mr_db-&gt;get_tvarvc_values( i_vname = me-&gt;m_name  ).
      CATCH cx_sy_sql_error.
        RETURN.
    ENDTRY.

    SORT me-&gt;mt_values.
  ENDMETHOD.</source>
  </method>
 </CLAS>
</nugget>
